import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest83 {

    public static boolean debug = false;

    @Test
    public void test41501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41501");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.Integer int39 = deleteActivities0.Limit;
        java.lang.String str40 = deleteActivities0.CustomId;
        java.util.List<java.lang.String> strList41 = deleteActivities0.getMedia();
        java.util.List<java.lang.String> strList42 = deleteActivities0.getActivityTypes();
        java.util.List<java.lang.String> strList43 = deleteActivities0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList44 = deleteActivities0.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant47 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity48 = gageHeightAtZeroFlowActivity46.setApplicableSince(instant47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity50 = gageHeightAtZeroFlowActivity48.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit51 = fieldVisit45.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity50);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList52 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit53 = fieldVisit45.setDischargeActivities(dischargeActivityList52);
        fieldVisit45.LocationIdentifier = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str57 = ratingModelEffectiveShiftsServiceRequest56.RatingModelIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str59 = ratingModelEffectiveShiftsServiceRequest58.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str61 = referencePointPeriod60.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase63 = referencePointPeriod60.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod60.Uncertainty = 10.0d;
        java.time.Instant instant66 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase67 = referencePointPeriod60.setValidFrom(instant66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest68 = ratingModelEffectiveShiftsServiceRequest58.setQueryFrom(instant66);
        ratingModelEffectiveShiftsServiceRequest56.QueryFrom = instant66;
        fieldVisit45.StartTime = instant66;
        deleteActivities0.FromStartTime = instant66;
        deleteActivities0.Cursor = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        java.time.Instant instant74 = deleteActivities0.ToStartTime;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity48);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity50);
        org.junit.Assert.assertNotNull(fieldVisit51);
        org.junit.Assert.assertNotNull(fieldVisit53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(referencePointPeriodBase63);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(referencePointPeriodBase67);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest68);
        org.junit.Assert.assertNull(instant74);
    }

    @Test
    public void test41502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41502");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod2 = locationMonitoringMethod0.setSubLocationIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod4 = locationMonitoringMethod0.setParameterUniqueId("'.'SSSSSSS");
        java.lang.String str5 = locationMonitoringMethod0.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = locationMonitoringMethod0.setSubLocationIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod9 = locationMonitoringMethod0.setModel("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod11 = locationMonitoringMethod0.setParameter("/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(locationMonitoringMethod2);
        org.junit.Assert.assertNotNull(locationMonitoringMethod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locationMonitoringMethod7);
        org.junit.Assert.assertNotNull(locationMonitoringMethod9);
        org.junit.Assert.assertNotNull(locationMonitoringMethod11);
    }

    @Test
    public void test41503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41503");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetApprovalLevel getApprovalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetApprovalLevel();
        java.lang.Long long1 = getApprovalLevel0.ApprovalLevel;
        java.lang.Long long2 = getApprovalLevel0.ApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetApprovalLevel getApprovalLevel4 = getApprovalLevel0.setApprovalLevel((java.lang.Long) 100L);
        java.lang.Object obj5 = getApprovalLevel4.getResponseType();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNull(long2);
        org.junit.Assert.assertNotNull(getApprovalLevel4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ApprovalLevel");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ApprovalLevel");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ApprovalLevel");
    }

    @Test
    public void test41504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41504");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup();
        java.lang.String str1 = getAnalyticalGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup3 = getAnalyticalGroup0.setId("9999-12-31T23:59:59.999Z");
        getAnalyticalGroup0.Id = "POST";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAnalyticalGroup3);
    }

    @Test
    public void test41505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41505");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location0.setLocationName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.Instant instant6 = location5.getLastModified();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location8 = location5.setUtcOffset("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = location8.getLocationPath();
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(location8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41506");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails38 = putObservationV2_2.getLabResultDetails();
        java.lang.String str39 = putObservationV2_2.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult40 = putObservationV2_2.getCategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit41.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit45 = postFieldVisit41.setStartTime(offsetDateTime44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit47 = postFieldVisit41.setId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList50, extendedAttributeArray49);
        postActivity48.ExtendedAttributes = extendedAttributeList50;
        postFieldVisit47.ExtendedAttributes = extendedAttributeList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_54 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList50);
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNull(labResultDetails38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(categoricalResult40);
        org.junit.Assert.assertNotNull(postFieldVisit45);
        org.junit.Assert.assertNotNull(postFieldVisit47);
        org.junit.Assert.assertNotNull(extendedAttributeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(putObservationV2_54);
    }

    @Test
    public void test41507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41507");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList9, schedulePlannedActivityArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule7.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList9);
        putSchedule3.SchedulePlannedActivities = schedulePlannedActivityList9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = putSchedule3.setSamplingLocationGroup(samplingLocationGroup13);
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule16 = putSchedule14.setEndDate(offsetDateTime15);
        putSchedule14.Id = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(schedule11);
        org.junit.Assert.assertNotNull(putSchedule14);
        org.junit.Assert.assertNotNull(putSchedule16);
    }

    @Test
    public void test41508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41508");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation33 = postSamplingLocation0.setVerticalDatum("MinInstant");
        java.lang.String str34 = postSamplingLocation33.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation36 = postSamplingLocation33.setHorizontalCollectionMethod("multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postSamplingLocation33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(postSamplingLocation36);
    }

    @Test
    public void test41509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41509");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        fieldVisitSimple0.Id = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple6 = fieldVisitSimple0.setPlanningStatus(planningStatusType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple8 = fieldVisitSimple7.getSamplingLocation();
        fieldVisitSimple7.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str12 = samplingLocationSimple11.Name;
        fieldVisitSimple7.SamplingLocation = samplingLocationSimple11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple15 = samplingLocationSimple11.setId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple16 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple15);
        java.time.OffsetDateTime offsetDateTime17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple18 = fieldVisitSimple0.setStartTime(offsetDateTime17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple20 = fieldVisitSimple18.setNotes("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        java.lang.String str21 = fieldVisitSimple20.Participants;
        org.junit.Assert.assertTrue("'" + planningStatusType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED + "'", planningStatusType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED));
        org.junit.Assert.assertNotNull(fieldVisitSimple6);
        org.junit.Assert.assertNull(samplingLocationSimple8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(samplingLocationSimple15);
        org.junit.Assert.assertNotNull(fieldVisitSimple16);
        org.junit.Assert.assertNotNull(fieldVisitSimple18);
        org.junit.Assert.assertNotNull(fieldVisitSimple20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "'.'SSSSSSS" + "'", str21, "'.'SSSSSSS");
    }

    @Test
    public void test41510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41510");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase2 = putOpenIdConnectUser0.setCanConfigureSystem((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser4 = putOpenIdConnectUser0.setIdentifier("/AQUARIUS/Acquisition/v2");
        java.lang.String str5 = putOpenIdConnectUser0.Identifier;
        java.lang.String str6 = putOpenIdConnectUser0.getSubjectIdentifier();
        java.lang.String str7 = putOpenIdConnectUser0.getSubjectIdentifier();
        java.lang.String str8 = putOpenIdConnectUser0.UniqueId;
        java.lang.String str9 = putOpenIdConnectUser0.getFirstName();
        org.junit.Assert.assertNotNull(userBase2);
        org.junit.Assert.assertNotNull(putOpenIdConnectUser4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str5, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41511");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address2 = address0.setStreetName("2021.8.9990");
        java.lang.String str3 = address2.getCountyCode();
        java.lang.String str4 = address2.getStreetName();
        java.lang.String str5 = address2.getCountyCode();
        address2.StreetName = "/AQUARIUS/Publish/v2";
        org.junit.Assert.assertNotNull(address2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2021.8.9990" + "'", str4, "2021.8.9990");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test41512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41512");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple2 = analyticalGroupSimple0.setDescription("MinInstant");
        java.lang.Integer int3 = analyticalGroupSimple2.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple5 = analyticalGroupSimple2.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 4);
        java.lang.String str6 = analyticalGroupSimple5.Description;
        java.lang.String str7 = analyticalGroupSimple5.Id;
        analyticalGroupSimple5.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple11 = analyticalGroupSimple5.setDescription("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple13 = analyticalGroupSimple5.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(analyticalGroupSimple2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(analyticalGroupSimple5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MinInstant" + "'", str6, "MinInstant");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(analyticalGroupSimple11);
        org.junit.Assert.assertNotNull(analyticalGroupSimple13);
    }

    @Test
    public void test41513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41513");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport();
        getLabReport0.Id = "https";
        java.lang.Object obj3 = getLabReport0.getResponseType();
        getLabReport0.Id = "";
        java.lang.String str6 = getLabReport0.getId();
        java.lang.Object obj7 = getLabReport0.getResponseType();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
    }

    @Test
    public void test41514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41514");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesNote timeSeriesNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesNote();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval1 = timeSeriesNote0.TimeRange;
        java.lang.String str2 = timeSeriesNote0.getNoteText();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval3 = timeSeriesNote0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval4 = timeSeriesNote0.getTimeRange();
        java.lang.String str5 = timeSeriesNote0.NoteText;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval6 = timeSeriesNote0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesNote timeSeriesNote8 = timeSeriesNote0.setNoteText("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(interval1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(interval6);
        org.junit.Assert.assertNotNull(timeSeriesNote8);
    }

    @Test
    public void test41515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41515");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAttachment deleteAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAttachment();
        java.lang.String str1 = deleteAttachment0.Id;
        deleteAttachment0.Id = "MaxInstant";
        java.lang.String str4 = deleteAttachment0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAttachment deleteAttachment6 = deleteAttachment0.setId("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MaxInstant" + "'", str4, "MaxInstant");
        org.junit.Assert.assertNotNull(deleteAttachment6);
    }

    @Test
    public void test41516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41516");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        putAttachment0.Latitude = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Object obj3 = putAttachment0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment5 = putAttachment0.setFileName("hi!:///AQUARIUS/Provisioning/v1");
        putAttachment5.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str8 = putAttachment5.Longitude;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment10 = putAttachment5.setId("/api");
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment12 = putAttachment5.setDateTaken(offsetDateTime11);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertNotNull(putAttachment5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(putAttachment10);
        org.junit.Assert.assertNotNull(putAttachment12);
    }

    @Test
    public void test41517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41517");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.RedirectUri;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase4 = putOpenIdConnectRelyingPartyConfiguration0.setDisplayName("https");
        java.lang.String str5 = putOpenIdConnectRelyingPartyConfiguration0.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase7 = putOpenIdConnectRelyingPartyConfiguration0.setRedirectUri("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "https" + "'", str5, "https");
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase7);
    }

    @Test
    public void test41518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41518");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UniqueId = "/AQUARIUS/Acquisition/v2";
        java.lang.String str5 = locationDescription2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double7 = putBulkEditResultGradesV2_6.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        getObservationsV2_8.SpecimenIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        getObservationsV2_8.QualityControlTypes = strList19;
        java.util.List<java.lang.String> strList23 = getObservationsV2_8.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList24 = getObservationsV2_8.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType25 = getObservationsV2_8.FieldResultType;
        java.time.Instant instant26 = getObservationsV2_8.getEndObservedTime();
        java.lang.String str27 = getObservationsV2_8.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        java.util.ArrayList<java.lang.String> strList36 = putLocationTags35.TagUniqueIds;
        getObservationsV2_8.ProjectIds = strList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_38 = putBulkEditResultGradesV2_6.setSearch((java.util.List<java.lang.String>) strList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str40 = setting39.getKey();
        java.lang.String str41 = setting39.getDescription();
        java.lang.String str42 = setting39.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary43.setMeanGageHeightMethod("hi!");
        java.lang.String str46 = dischargeSummary45.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary45.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj50 = timeAlignedDataServiceRequest49.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant52 = sensor51.getLastModifiedUtc();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor54 = sensor51.setLastModifiedUtc(instant53);
        java.time.Instant instant55 = sensor51.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest49.setQueryTo(instant55);
        dischargeSummary48.MeasurementStartTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting58 = setting39.setLastModifiedTime(instant55);
        putBulkEditResultGradesV2_6.StartModificationTime = instant55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_61 = putBulkEditResultGradesV2_6.setMinNumericResultValue((java.lang.Double) (-1.0d));
        java.time.Instant instant62 = putBulkEditResultGradesV2_6.StartObservedTime;
        java.time.Instant instant63 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinConcreteValue;
        putBulkEditResultGradesV2_6.StartObservedTime = instant63;
        locationDescription2.LastModified = instant63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription67 = locationDescription2.setPrimaryFolder("http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(fieldResultType25);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(sensor54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(setting58);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_61);
        org.junit.Assert.assertNull(instant62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(locationDescription67);
    }

    @Test
    public void test41519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41519");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        java.lang.Integer int4 = putSchedule0.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = putSchedule0.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule7 = putSchedule0.setStartDate(offsetDateTime6);
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putSchedule7);
    }

    @Test
    public void test41520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41520");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setSystemCode(unitGroupSystemCodeType1);
        java.lang.String str3 = putUnitGroupWithUnit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit5 = putUnitGroupWithUnit0.setSupportsConversion((java.lang.Boolean) false);
        java.lang.String str6 = putUnitGroupWithUnit5.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType7 = putUnitGroupWithUnit5.getSystemCode();
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(unitGroupSystemCodeType7);
    }

    @Test
    public void test41521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41521");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList5 = importItemTaxon4.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon4.setItem(taxon6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str9 = postCalculatedDerivedTimeSeries8.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList10 = postCalculatedDerivedTimeSeries8.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon11 = importItemTaxon7.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList13 = importItemObject12.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList15, importChangeItemArray14);
        importItemObject12.ItemComparison = importChangeItemList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject26 = importItemObject12.setExistingItem((java.lang.Object) putLocationTags18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser29 = openIdConnectUser27.setIdentifier("");
        java.lang.Boolean boolean30 = openIdConnectUser29.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject31 = importItemObject12.setErrors((java.lang.Object) openIdConnectUser29);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList32 = importItemObject31.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon11.setItemComparison(importChangeItemList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList35 = importItemTaxon34.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon34.setItem(taxon36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str39 = postCalculatedDerivedTimeSeries38.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList40 = postCalculatedDerivedTimeSeries38.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon41 = importItemTaxon37.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon43 = importItemTaxon37.setExistingItem(taxon42);
        importItemTaxon11.Item = taxon42;
        taxon42.Source = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon47 = importItemTaxon0.setItem(taxon42);
        taxon42.Id = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(extendedAttributeValueList10);
        org.junit.Assert.assertNotNull(importItemTaxon11);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(importChangeItemArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(importItemObject26);
        org.junit.Assert.assertNotNull(openIdConnectUser29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(importItemObject31);
        org.junit.Assert.assertNotNull(importChangeItemList32);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(extendedAttributeValueList40);
        org.junit.Assert.assertNotNull(importItemTaxon41);
        org.junit.Assert.assertNotNull(importItemTaxon43);
        org.junit.Assert.assertNotNull(importItemTaxon47);
    }

    @Test
    public void test41522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41522");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList1 = putUser0.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        openIdConnectRelyingPartyConfiguration2.OptionalIssuerDiscoveryUri = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        getObservationsV2_11.DepthUnitCustomId = "hi!";
        java.lang.String str14 = getObservationsV2_11.DepthUnitId;
        java.util.List<java.lang.String> strList15 = null;
        getObservationsV2_11.ProjectIds = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_19 = postUserV2_17.setUserProfile(userProfile18);
        java.lang.Object obj20 = postUserV2_19.getResponseType();
        java.util.List<java.lang.String> strList21 = postUserV2_19.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = reading22.getValue();
        reading22.ReferencePointUniqueId = "hi!";
        java.lang.String str26 = reading22.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary27.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary29.DifferenceDuringVisit = doubleWithDisplay30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = doubleWithDisplay30.setNumeric((java.lang.Double) 100.0d);
        reading22.Value = doubleWithDisplay33;
        java.lang.Boolean boolean35 = reading22.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading37 = reading22.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_38.setDataClassifications((java.util.List<java.lang.String>) strList42);
        getObservationsV2_44.DepthUnitCustomId = "hi!";
        java.lang.String str47 = getObservationsV2_44.CustomId;
        java.util.List<java.lang.String> strList48 = getObservationsV2_44.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray59 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = putLocationTags55.setTagUniqueIds(strList60);
        getObservationsV2_49.QualityControlTypes = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_44.setMedia((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str66 = getObservationsV2_65.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        getObservationsV2_65.ProjectIds = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = getObservationsV2_44.setObservedPropertyIds((java.util.List<java.lang.String>) strList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading75 = reading22.setReadingQualifiers(strList70);
        postUserV2_19.Roles = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_11.setIds((java.util.List<java.lang.String>) strList70);
        openIdConnectRelyingPartyConfiguration2.HostedDomains = strList70;
        putUser0.Roles = strList70;
        java.lang.Object obj80 = putUser0.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(postUserV2_19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(doubleWithDisplay23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(doubleWithDisplay33);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(reading37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putLocationTags62);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_74);
        org.junit.Assert.assertNotNull(reading75);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
    }

    @Test
    public void test41523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41523");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList4, qualifierGroupResponseArray3);
        qualifierGroupsResponse2.Results = qualifierGroupResponseList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse7 = qualifierGroupsResponse1.setResults(qualifierGroupResponseList4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse8 = qualifierGroupsResponse0.setResults(qualifierGroupResponseList4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList13, qualifierGroupResponseArray12);
        qualifierGroupsResponse11.Results = qualifierGroupResponseList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse16 = qualifierGroupsResponse10.setResults(qualifierGroupResponseList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse17 = qualifierGroupsResponse9.setResults(qualifierGroupResponseList13);
        qualifierGroupsResponse8.Results = qualifierGroupResponseList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList23, qualifierGroupResponseArray22);
        qualifierGroupsResponse21.Results = qualifierGroupResponseList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse26 = qualifierGroupsResponse20.setResults(qualifierGroupResponseList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse27 = qualifierGroupsResponse19.setResults(qualifierGroupResponseList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse28 = qualifierGroupsResponse8.setResults(qualifierGroupResponseList23);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList29 = qualifierGroupsResponse28.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList30 = qualifierGroupsResponse28.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList31 = qualifierGroupsResponse28.Results;
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse7);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse8);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse16);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse17);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse26);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse27);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse28);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList29);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList30);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList31);
    }

    @Test
    public void test41524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41524");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostParameter postParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostParameter();
        java.lang.Object obj1 = postParameter0.getResponseType();
        java.lang.String str2 = postParameter0.UnitIdentifier;
        postParameter0.MinValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase6 = postParameter0.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType7 = postParameter0.InterpolationType;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(parameterBase6);
        org.junit.Assert.assertNull(interpolationType7);
    }

    @Test
    public void test41525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41525");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.lang.Object obj1 = ratingCurveListServiceRequest0.getResponseType();
        java.time.Instant instant2 = ratingCurveListServiceRequest0.getQueryTo();
        java.time.Instant instant3 = ratingCurveListServiceRequest0.QueryTo;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList5 = getExportSpecimens4.getActivityTypes();
        java.util.List<java.lang.String> strList6 = getExportSpecimens4.LaboratoryIds;
        java.util.List<java.lang.String> strList7 = getExportSpecimens4.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = getActivities8.setToStartTime(instant18);
        java.lang.String str20 = getActivities19.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList22 = getObservationsV2_21.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        getObservationsV2_21.ResultGrades = strList34;
        getActivities19.Media = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens40 = getExportSpecimens4.setSearch((java.util.List<java.lang.String>) strList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double42 = putBulkEditResultGradesV2_41.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        java.util.List<java.lang.String> strList58 = getObservationsV2_43.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList59 = getObservationsV2_43.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType60 = getObservationsV2_43.FieldResultType;
        java.time.Instant instant61 = getObservationsV2_43.getEndObservedTime();
        java.lang.String str62 = getObservationsV2_43.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray67 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags63.setTagUniqueIds(strList68);
        java.util.ArrayList<java.lang.String> strList71 = putLocationTags70.TagUniqueIds;
        getObservationsV2_43.ProjectIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_73 = putBulkEditResultGradesV2_41.setSearch((java.util.List<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList74 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_75 = putBulkEditResultGradesV2_73.setLabResultLaboratoryIds(strList74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType77 = calibrationCheck76.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay78 = calibrationCheck76.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary82 = dischargeSummary80.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant84 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse85 = locationDescriptionListServiceResponse83.setNextToken(instant84);
        dischargeSummary80.MeasurementTime = instant84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse87 = locationDescriptionListServiceResponse79.setNextToken(instant84);
        java.time.Instant instant88 = locationDescriptionListServiceResponse79.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck89 = calibrationCheck76.setTime(instant88);
        putBulkEditResultGradesV2_75.StartResultTime = instant88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens91 = getExportSpecimens40.setBefore(instant88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest92 = ratingCurveListServiceRequest0.setQueryTo(instant88);
        ratingCurveListServiceRequest92.UtcOffset = 0.0d;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(getActivities19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(getExportSpecimens40);
        org.junit.Assert.assertNull(double42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(fieldResultType60);
        org.junit.Assert.assertNull(instant61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_73);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_75);
        org.junit.Assert.assertNull(calibrationCheckType77);
        org.junit.Assert.assertNull(doubleWithDisplay78);
        org.junit.Assert.assertNotNull(dischargeSummary82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse85);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(calibrationCheck89);
        org.junit.Assert.assertNotNull(getExportSpecimens91);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest92);
    }

    @Test
    public void test41526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41526");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.lang.String str1 = sensor0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setComments("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str4 = sensor3.Model;
        sensor3.Model = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test41527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41527");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse85 = locationDataServiceResponse0.setUniqueId("'.'SSSSSSS");
        java.lang.Boolean boolean86 = locationDataServiceResponse0.IsExternalLocation;
        java.lang.String str87 = locationDataServiceResponse0.getLocationType();
        java.lang.String str88 = locationDataServiceResponse0.getIdentifier();
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNotNull(locationDataServiceResponse85);
        org.junit.Assert.assertNull(boolean86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test41528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41528");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location0.setUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.Double double6 = location0.Elevation;
        location0.IsExternalLocation = false;
        location0.LocationName = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList11 = location0.ExtendedAttributeValues;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double13 = putBulkEditResultGradesV2_12.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        getObservationsV2_14.SpecimenIds = strList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray24 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags20.setTagUniqueIds(strList25);
        getObservationsV2_14.QualityControlTypes = strList25;
        java.util.List<java.lang.String> strList29 = getObservationsV2_14.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList30 = getObservationsV2_14.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType31 = getObservationsV2_14.FieldResultType;
        java.time.Instant instant32 = getObservationsV2_14.getEndObservedTime();
        java.lang.String str33 = getObservationsV2_14.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        java.util.ArrayList<java.lang.String> strList42 = putLocationTags41.TagUniqueIds;
        getObservationsV2_14.ProjectIds = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_44 = putBulkEditResultGradesV2_12.setSearch((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_46 = putBulkEditResultGradesV2_44.setDepthValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark49 = locationRemark47.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark52 = locationRemark50.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        locationRemark52.FromTime = instant54;
        locationRemark49.CreateTime = instant54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_58 = putBulkEditResultGradesV2_46.setEndModificationTime(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType60 = dischargeChannelMeasurement59.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = dischargeChannelMeasurement59.Discharge;
        java.time.Instant instant62 = dischargeChannelMeasurement59.EndTime;
        dischargeChannelMeasurement59.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str65 = dischargeChannelMeasurement59.Channel;
        dischargeChannelMeasurement59.Channel = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement69 = dischargeChannelMeasurement59.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark72 = locationRemark70.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark75 = locationRemark73.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant77 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse78 = locationDescriptionListServiceResponse76.setNextToken(instant77);
        locationRemark75.FromTime = instant77;
        locationRemark72.CreateTime = instant77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement81 = dischargeChannelMeasurement69.setEndTime(instant77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_82 = putBulkEditResultGradesV2_46.setEndModificationTime(instant77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location83 = location0.setLastModified(instant77);
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(extendedAttributeValueList11);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(fieldResultType31);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_44);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_46);
        org.junit.Assert.assertNotNull(locationRemark49);
        org.junit.Assert.assertNotNull(locationRemark52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_58);
        org.junit.Assert.assertNull(channelMaterialType60);
        org.junit.Assert.assertNull(quantityWithDisplay61);
        org.junit.Assert.assertNull(instant62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str65, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement69);
        org.junit.Assert.assertNotNull(locationRemark72);
        org.junit.Assert.assertNotNull(locationRemark75);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse78);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement81);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_82);
        org.junit.Assert.assertNotNull(location83);
    }

    @Test
    public void test41529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41529");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField5 = extendedAttributeField2.setDisplayName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField7 = extendedAttributeField5.setNumericPrecision((java.lang.Integer) 0);
        java.lang.Boolean boolean8 = extendedAttributeField7.isCanBeEmpty();
        extendedAttributeField7.IsReadOnly = false;
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(extendedAttributeField5);
        org.junit.Assert.assertNotNull(extendedAttributeField7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test41530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41530");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceResponse ratingModelEffectiveShiftsServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift> effectiveShiftList1 = ratingModelEffectiveShiftsServiceResponse0.EffectiveShifts;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift> effectiveShiftList2 = ratingModelEffectiveShiftsServiceResponse0.getEffectiveShifts();
        org.junit.Assert.assertNull(effectiveShiftList1);
        org.junit.Assert.assertNull(effectiveShiftList2);
    }

    @Test
    public void test41531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41531");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        java.lang.String str22 = adcpDischargeActivity21.getBottomEstimateMethod();
        java.lang.String str23 = adcpDischargeActivity21.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay24 = adcpDischargeActivity21.MagneticVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement25 = null;
        adcpDischargeActivity21.DischargeChannelMeasurement = dischargeChannelMeasurement25;
        java.lang.String str27 = adcpDischargeActivity21.getSerialNumber();
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(doubleWithDisplay24);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test41532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41532");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = adcpDischargeActivity2.TopEstimateExponent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement4 = adcpDischargeActivity2.getDischargeChannelMeasurement();
        java.lang.String str5 = adcpDischargeActivity2.getDepthReference();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity7 = adcpDischargeActivity2.setDepthReference("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity9 = adcpDischargeActivity7.setTopEstimateMethod("");
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNull(dischargeChannelMeasurement4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(adcpDischargeActivity7);
        org.junit.Assert.assertNotNull(adcpDischargeActivity9);
    }

    @Test
    public void test41533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41533");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setQualityAssuranceComments("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType5 = dischargeSummary2.getMeasurementGrade();
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNull(measurementGradeType5);
    }

    @Test
    public void test41534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41534");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType3 = null;
        postLocationAttachmentResponse0.AttachmentType = attachmentType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory5 = postLocationAttachmentResponse0.getAttachmentCategory();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType6 = postLocationAttachmentResponse0.AttachmentType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str8 = postLocationAttachment7.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile9 = null;
        postLocationAttachment7.File = iHttpFile9;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList11 = postLocationAttachment7.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile12 = null;
        postLocationAttachment7.File = iHttpFile12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.Channel;
        postLocationAttachment7.AttachmentCategory = attachmentCategory14;
        postLocationAttachmentResponse0.AttachmentCategory = attachmentCategory14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str18 = postLocationAttachmentResponse17.getComments();
        java.lang.String str19 = postLocationAttachmentResponse17.Comments;
        java.lang.String str20 = postLocationAttachmentResponse17.LocationUniqueId;
        postLocationAttachmentResponse17.Url = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse24 = postLocationAttachmentResponse17.setUniqueId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse26 = postLocationAttachmentResponse24.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str28 = postLocationAttachment27.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile29 = null;
        postLocationAttachment27.File = iHttpFile29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile31 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment32 = postLocationAttachment27.setFile(iHttpFile31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory34 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl;
        postLocationAttachmentResponse33.AttachmentCategory = attachmentCategory34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment36 = postLocationAttachment32.setAttachmentCategory(attachmentCategory34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse37 = postLocationAttachmentResponse24.setAttachmentCategory(attachmentCategory34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory39 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl;
        postLocationAttachmentResponse38.AttachmentCategory = attachmentCategory39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse41 = postLocationAttachmentResponse24.setAttachmentCategory(attachmentCategory39);
        postLocationAttachmentResponse0.AttachmentCategory = attachmentCategory39;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(attachmentCategory5);
        org.junit.Assert.assertNull(attachmentType6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(applyTagRequestList11);
        org.junit.Assert.assertTrue("'" + attachmentCategory14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.Channel + "'", attachmentCategory14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.Channel));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse24);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(postLocationAttachment32);
        org.junit.Assert.assertTrue("'" + attachmentCategory34 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl + "'", attachmentCategory34.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl));
        org.junit.Assert.assertNotNull(postLocationAttachment36);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse37);
        org.junit.Assert.assertTrue("'" + attachmentCategory39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl + "'", attachmentCategory39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl));
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse41);
    }

    @Test
    public void test41535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41535");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder();
        java.lang.String str1 = locationFolder0.getParentLocationFolderUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder3 = locationFolder0.setParentLocationFolderUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.String str4 = locationFolder0.getLocationFolderDescription();
        java.lang.String str5 = locationFolder0.getParentLocationFolderUniqueId();
        java.lang.String str6 = locationFolder0.getLocationFolderPath();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationFolder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str5, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test41536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41536");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum();
        java.lang.String str1 = putBaseStandardReferenceDatum0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum3 = putBaseStandardReferenceDatum0.setComments("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum5 = putBaseStandardReferenceDatum0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str6 = putBaseStandardReferenceDatum5.getStandardIdentifier();
        java.lang.String str7 = putBaseStandardReferenceDatum5.Comments;
        java.lang.String str8 = putBaseStandardReferenceDatum5.Method;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatum3);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatum5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxInstant" + "'", str7, "MaxInstant");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test41537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41537");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        java.lang.Object obj17 = importItemObservation16.getErrors();
        java.util.List<java.lang.String> strList18 = importItemObservation16.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = importItemObservation16.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan21 = postFieldVisit20.SamplingPlan;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList22 = postFieldVisit20.getPlannedFieldResults();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType23 = postFieldVisit20.PlanningStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = postFieldVisit20.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation25 = postFieldVisit20.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation26 = importItemObservation16.setErrors((java.lang.Object) samplingLocation25);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(observation19);
        org.junit.Assert.assertNull(samplingPlan21);
        org.junit.Assert.assertNull(plannedFieldResultList22);
        org.junit.Assert.assertNull(planningStatusType23);
        org.junit.Assert.assertNull(samplingLocation24);
        org.junit.Assert.assertNull(samplingLocation25);
        org.junit.Assert.assertNotNull(importItemObservation26);
    }

    @Test
    public void test41538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41538");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        metadataChangeTransaction0.AppliedByUser = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType.Default;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction5 = metadataChangeTransaction0.setContentType(metadataChangeContentType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation10 = correctionOperation8.setType(correctionType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation8.OperationType = metadataChangeOperationType11;
        java.time.Instant instant13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = correctionOperation8.setDateAppliedUtc(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType16 = methodOperation15.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation18 = methodOperation15.setOperationType(metadataChangeOperationType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation19 = correctionOperation14.setOperationType(metadataChangeOperationType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation22 = correctionOperation20.setType(correctionType21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation20.OperationType = metadataChangeOperationType23;
        java.time.Instant instant25 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation26 = correctionOperation20.setDateAppliedUtc(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType28 = methodOperation27.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation30 = methodOperation27.setOperationType(metadataChangeOperationType29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation31 = correctionOperation26.setOperationType(metadataChangeOperationType29);
        correctionOperation14.OperationType = metadataChangeOperationType29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType34 = trendLineAnalysisServiceRequest33.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark37 = locationRemark35.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        locationRemark37.FromTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark37.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod46 = timeSeriesThresholdPeriod44.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription49 = locationDescription47.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType51 = null;
        controlConditionActivity50.ControlCleaned = controlCleanedType51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        controlConditionActivity50.DateCleaned = instant54;
        locationDescription49.LastModified = instant54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod58 = timeSeriesThresholdPeriod46.setAppliedTime(instant54);
        locationRemark43.ToTime = instant54;
        trendLineAnalysisServiceRequest33.QueryFrom = instant54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation61 = correctionOperation14.setDateAppliedUtc(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList63, correctionOperationArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction65 = metadataChangeTransaction7.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction66 = metadataChangeTransaction6.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction67 = metadataChangeTransaction5.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList63);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation> gradeOperationList68 = metadataChangeTransaction5.GradeOperations;
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertTrue("'" + metadataChangeContentType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType.Default + "'", metadataChangeContentType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType.Default));
        org.junit.Assert.assertNotNull(metadataChangeTransaction5);
        org.junit.Assert.assertTrue("'" + correctionType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation10);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation14);
        org.junit.Assert.assertNull(metadataChangeOperationType16);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation18);
        org.junit.Assert.assertNotNull(correctionOperation19);
        org.junit.Assert.assertTrue("'" + correctionType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation22);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation26);
        org.junit.Assert.assertNull(metadataChangeOperationType28);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation30);
        org.junit.Assert.assertNotNull(correctionOperation31);
        org.junit.Assert.assertNull(trendLineAnalysisType34);
        org.junit.Assert.assertNotNull(locationRemark37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod46);
        org.junit.Assert.assertNotNull(locationDescription49);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod58);
        org.junit.Assert.assertNotNull(correctionOperation61);
        org.junit.Assert.assertNotNull(correctionOperationArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction65);
        org.junit.Assert.assertNotNull(metadataChangeTransaction66);
        org.junit.Assert.assertNotNull(metadataChangeTransaction67);
        org.junit.Assert.assertNull(gradeOperationList68);
    }

    @Test
    public void test41539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41539");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList74 = postSamplingLocation0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation76 = postSamplingLocation0.setLatitude("/AQUARIUS/Acquisition/v2");
        java.lang.String str77 = postSamplingLocation0.getVerticalDatum();
        java.lang.String str78 = postSamplingLocation0.Description;
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNull(importHistoryEventSimpleList74);
        org.junit.Assert.assertNotNull(postSamplingLocation76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test41540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41540");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        timeAlignedPoint0.NumericValue4 = 0.0d;
        java.lang.Long long11 = timeAlignedPoint0.ApprovalLevel9;
        java.lang.String str12 = timeAlignedPoint0.Qualifiers2;
        timeAlignedPoint0.GradeName9 = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test41541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41541");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity2 = samplingPlanPlannedActivity0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity2.AuditAttributes = auditAttributes3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = samplingPlanPlannedActivity2.AuditAttributes;
        samplingPlanPlannedActivity2.Id = "https";
        java.lang.String str10 = samplingPlanPlannedActivity2.Id;
        java.lang.String str11 = samplingPlanPlannedActivity2.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence12 = samplingPlanPlannedActivity2.Recurrence;
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(auditAttributes7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "https" + "'", str10, "https");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "https" + "'", str11, "https");
        org.junit.Assert.assertNull(samplingPlanPlannedActivityRecurrence12);
    }

    @Test
    public void test41542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41542");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        getLabReports0.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports4 = getLabReports0.setLimit((java.lang.Integer) 0);
        java.lang.Object obj5 = getLabReports0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports7 = getLabReports0.setCustomId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.util.List<java.lang.String> strList8 = getLabReports0.getLaboratoryIds();
        org.junit.Assert.assertNotNull(getLabReports4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertNotNull(getLabReports7);
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test41543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41543");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip getFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip getFieldTrip2 = getFieldTrip0.setId("9999-12-31T23:59:59.999Z");
        java.lang.String str3 = getFieldTrip2.getId();
        java.lang.String str4 = getFieldTrip2.getId();
        java.lang.String str5 = getFieldTrip2.getId();
        org.junit.Assert.assertNotNull(getFieldTrip2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str3, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str4, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str5, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test41544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41544");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.ActivityIds = strList14;
        getExportSamplingLocations2.SamplingLocationGroupIds = strList14;
        java.util.List<java.lang.String> strList19 = getExportSamplingLocations2.getSamplingLocationGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = getChartDataV2_0.setCollectionMethodIds(strList19);
        java.lang.Object obj21 = getChartDataV2_0.getResponseType();
        java.lang.Double double22 = getChartDataV2_0.DepthValue;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(getChartDataV2_20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$MultiChartData");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$MultiChartData");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$MultiChartData");
        org.junit.Assert.assertNull(double22);
    }

    @Test
    public void test41545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41545");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup0.Identifier = "";
        putQualifierGroup0.Identifier = "hi!";
        java.lang.String str5 = putQualifierGroup0.UniqueId;
        java.lang.String str6 = putQualifierGroup0.getIdentifier();
        java.lang.String str7 = putQualifierGroup0.Identifier;
        java.lang.String str8 = putQualifierGroup0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment11 = postReportAttachment9.setTitle("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment13 = postReportAttachment9.setTitle("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment15 = postReportAttachment9.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        java.util.List<java.lang.String> strList32 = getObservationsV2_17.getAnalyticalGroupIds();
        java.time.Instant instant33 = getObservationsV2_17.getEndResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean36 = roleFlattened35.CanRemoveFieldVisits;
        roleFlattened35.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str40 = putLocationType39.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_41.setDataClassifications((java.util.List<java.lang.String>) strList45);
        getObservationsV2_47.DepthUnitCustomId = "hi!";
        java.lang.String str50 = getObservationsV2_47.CustomId;
        java.util.List<java.lang.String> strList51 = getObservationsV2_47.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray62 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags58.setTagUniqueIds(strList63);
        getObservationsV2_52.QualityControlTypes = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = getObservationsV2_47.setMedia((java.util.List<java.lang.String>) strList63);
        putLocationType39.ExtendedAttributeDefinitionIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase69 = roleFlattened35.setRoleApprovalTransitions(strList63);
        putBulkEditResultGradesV2_34.ResultGrades = strList63;
        getObservationsV2_17.ProjectIds = strList63;
        getObservedProperties16.AnalysisTypes = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment73 = postReportAttachment15.setSourceTimeSeriesUniqueIds(strList63);
        putQualifierGroup0.QualifierCodeList = strList63;
        java.lang.String str75 = putQualifierGroup0.UniqueId;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postReportAttachment11);
        org.junit.Assert.assertNotNull(postReportAttachment13);
        org.junit.Assert.assertNotNull(postReportAttachment15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNotNull(getObservationsV2_67);
        org.junit.Assert.assertNotNull(roleFlattenedBase69);
        org.junit.Assert.assertNotNull(postReportAttachment73);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test41546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41546");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest2 = trendLineAnalysisServiceRequest0.setType(trendLineAnalysisType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType3 = trendLineAnalysisServiceRequest2.Type;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList4 = trendLineAnalysisServiceRequest2.getPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str8 = attachment7.getUrl();
        java.lang.String str9 = attachment7.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double11 = putBulkEditResultGradesV2_10.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        java.util.List<java.lang.String> strList27 = getObservationsV2_12.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList28 = getObservationsV2_12.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType29 = getObservationsV2_12.FieldResultType;
        java.time.Instant instant30 = getObservationsV2_12.getEndObservedTime();
        java.lang.String str31 = getObservationsV2_12.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        java.util.ArrayList<java.lang.String> strList40 = putLocationTags39.TagUniqueIds;
        getObservationsV2_12.ProjectIds = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = putBulkEditResultGradesV2_10.setSearch((java.util.List<java.lang.String>) strList40);
        java.util.List<java.lang.String> strList43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_44 = putBulkEditResultGradesV2_42.setLabResultLaboratoryIds(strList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType46 = calibrationCheck45.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay47 = calibrationCheck45.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary49.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse52.setNextToken(instant53);
        dischargeSummary49.MeasurementTime = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse48.setNextToken(instant53);
        java.time.Instant instant57 = locationDescriptionListServiceResponse48.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck58 = calibrationCheck45.setTime(instant57);
        putBulkEditResultGradesV2_44.StartResultTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment60 = attachment7.setDateUploaded(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = timeAlignedDataServiceRequest5.setQueryFrom(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest62 = trendLineAnalysisServiceRequest2.setQueryFrom(instant57);
        java.time.Instant instant63 = trendLineAnalysisServiceRequest2.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType64 = trendLineAnalysisServiceRequest2.getType();
        java.lang.Object obj65 = trendLineAnalysisServiceRequest2.getResponseType();
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest2);
        org.junit.Assert.assertNull(trendLineAnalysisType3);
        org.junit.Assert.assertNull(timeSeriesPointList4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(double11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(fieldResultType29);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_42);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_44);
        org.junit.Assert.assertNull(calibrationCheckType46);
        org.junit.Assert.assertNull(doubleWithDisplay47);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(calibrationCheck58);
        org.junit.Assert.assertNotNull(attachment60);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest61);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest62);
        org.junit.Assert.assertNull(instant63);
        org.junit.Assert.assertNull(trendLineAnalysisType64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TrendLineAnalysisServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TrendLineAnalysisServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TrendLineAnalysisServiceResponse");
    }

    @Test
    public void test41547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41547");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putSchedule3.EndDate = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = putSchedule3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime10 = putSchedule9.StartDate;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = putSchedule9.setEndDate(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = putSchedule12.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime14 = null;
        putSchedule12.EndDate = offsetDateTime14;
        java.time.OffsetDateTime offsetDateTime16 = putSchedule12.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType17 = putSchedule12.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime19 = putSchedule18.StartDate;
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = putSchedule18.setEndDate(offsetDateTime20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = putSchedule21.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime23 = null;
        putSchedule21.LastGenerationDate = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int26 = putSchedule25.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule28 = putSchedule25.setRecurrenceType(recurrenceType27);
        putSchedule21.RecurrenceType = recurrenceType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = putSchedule12.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule31 = putSchedule3.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime33 = putSchedule32.StartDate;
        java.time.OffsetDateTime offsetDateTime34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule35 = putSchedule32.setEndDate(offsetDateTime34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = putSchedule35.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime37 = putSchedule35.getEndDate();
        java.time.OffsetDateTime offsetDateTime38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule39 = putSchedule35.setStartDate(offsetDateTime38);
        java.lang.Integer int40 = putSchedule35.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule35.RecurrenceDayMonthly = recurrenceDayMonthlyType41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = unit43.AuditAttributes;
        unit43.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity50 = samplingPlanPlannedActivity48.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = auditAttributes51.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity50.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = samplingPlanPlannedActivity50.AuditAttributes;
        putAccessGroup47.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit57 = unit43.setAuditAttributes(auditAttributes55);
        putSchedule35.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule59 = putSchedule31.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime61 = postSchedule60.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime63 = putSchedule62.StartDate;
        java.time.OffsetDateTime offsetDateTime64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule65 = putSchedule62.setEndDate(offsetDateTime64);
        java.lang.Integer int66 = putSchedule62.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = putSchedule62.AuditAttributes;
        java.lang.Integer int68 = putSchedule62.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule71 = schedule69.setCustomId("");
        java.time.OffsetDateTime offsetDateTime72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule73 = schedule69.setStartDate(offsetDateTime72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime75 = putSchedule74.StartDate;
        java.time.OffsetDateTime offsetDateTime76 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule77 = putSchedule74.setEndDate(offsetDateTime76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup78 = putSchedule77.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule81 = schedule79.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList83 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList83, schedulePlannedActivityArray82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule85 = schedule81.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList83);
        putSchedule77.SchedulePlannedActivities = schedulePlannedActivityList83;
        schedule69.SchedulePlannedActivities = schedulePlannedActivityList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule88 = putSchedule62.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList83);
        postSchedule60.SchedulePlannedActivities = schedulePlannedActivityList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule90 = putSchedule59.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList83);
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(putSchedule8);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(putSchedule12);
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType17);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(putSchedule21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + recurrenceType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule28);
        org.junit.Assert.assertNotNull(putSchedule30);
        org.junit.Assert.assertNotNull(putSchedule31);
        org.junit.Assert.assertNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(putSchedule35);
        org.junit.Assert.assertNull(auditAttributes36);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(putSchedule39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes44);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity50);
        org.junit.Assert.assertNotNull(auditAttributes53);
        org.junit.Assert.assertNotNull(auditAttributes55);
        org.junit.Assert.assertNotNull(unit57);
        org.junit.Assert.assertNotNull(putSchedule59);
        org.junit.Assert.assertNull(offsetDateTime61);
        org.junit.Assert.assertNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(putSchedule65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNull(auditAttributes67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(schedule71);
        org.junit.Assert.assertNotNull(schedule73);
        org.junit.Assert.assertNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(putSchedule77);
        org.junit.Assert.assertNull(samplingLocationGroup78);
        org.junit.Assert.assertNotNull(schedule81);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(schedule85);
        org.junit.Assert.assertNotNull(putSchedule88);
        org.junit.Assert.assertNotNull(putSchedule90);
    }

    @Test
    public void test41548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41548");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder();
        java.lang.String str1 = locationFolder0.getParentLocationFolderUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder3 = locationFolder0.setParentLocationFolderUniqueId("9999-12-31T23:59:59.999Z");
        locationFolder3.ParentLocationFolderPath = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder7 = locationFolder3.setLocationFolderDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        locationFolder3.LocationFolderPath = "http://MaxDurationhttp/json/reply/Float";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationFolder3);
        org.junit.Assert.assertNotNull(locationFolder7);
    }

    @Test
    public void test41549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41549");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest3 = fieldVisitDataByLocationServiceRequest1.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty4 = importItemObservedProperty0.setErrors((java.lang.Object) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = importItemObservedProperty0.ExistingItem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = importItemObservedProperty0.getExistingItem();
        java.lang.String str7 = importItemObservedProperty0.RowId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType8 = importItemObservedProperty0.Status;
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest3);
        org.junit.Assert.assertNotNull(importItemObservedProperty4);
        org.junit.Assert.assertNull(observedProperty5);
        org.junit.Assert.assertNull(observedProperty6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(importItemStatusType8);
    }

    @Test
    public void test41550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41550");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        java.lang.String str1 = searchResultExtendedAttributeListItem0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        searchResultExtendedAttributeListItem2.TotalCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str6 = extendedAttributeListItem5.getId();
        java.lang.String str7 = extendedAttributeListItem5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str9 = extendedAttributeListItem8.CustomId;
        extendedAttributeListItem8.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str13 = extendedAttributeListItem12.getId();
        java.lang.String str14 = extendedAttributeListItem12.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        extendedAttributeListItem15.CustomId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str19 = extendedAttributeListItem18.getId();
        java.lang.String str20 = extendedAttributeListItem18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str22 = extendedAttributeListItem21.getId();
        java.lang.String str23 = extendedAttributeListItem21.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem5, extendedAttributeListItem8, extendedAttributeListItem12, extendedAttributeListItem15, extendedAttributeListItem18, extendedAttributeListItem21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList25, extendedAttributeListItemArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem27 = searchResultExtendedAttributeListItem2.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList25);
        searchResultExtendedAttributeListItem0.DomainObjects = extendedAttributeListItemList25;
        searchResultExtendedAttributeListItem0.TotalCount = 1;
        searchResultExtendedAttributeListItem0.Cursor = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList33 = searchResultExtendedAttributeListItem0.DomainObjects;
        java.lang.String str34 = searchResultExtendedAttributeListItem0.Cursor;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(searchResultExtendedAttributeListItem27);
        org.junit.Assert.assertNotNull(extendedAttributeListItemList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****" + "'", str34, "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
    }

    @Test
    public void test41551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41551");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit0.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit4 = postFieldVisit0.setStartTime(offsetDateTime3);
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit6 = postFieldVisit4.setEndTime(offsetDateTime5);
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit8 = postFieldVisit6.setEndTime(offsetDateTime7);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList9 = postFieldVisit8.PlannedFieldResults;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan10 = postFieldVisit8.SamplingPlan;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple11 = postFieldVisit8.Project;
        org.junit.Assert.assertNotNull(postFieldVisit4);
        org.junit.Assert.assertNotNull(postFieldVisit6);
        org.junit.Assert.assertNotNull(postFieldVisit8);
        org.junit.Assert.assertNull(plannedFieldResultList9);
        org.junit.Assert.assertNull(samplingPlan10);
        org.junit.Assert.assertNull(projectSimple11);
    }

    @Test
    public void test41552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41552");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest();
        java.lang.Object obj1 = expandedStageTableServiceRequest0.getResponseType();
        expandedStageTableServiceRequest0.StepSize = 0.0d;
        java.lang.String str4 = expandedStageTableServiceRequest0.TimeSeriesUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest6 = expandedStageTableServiceRequest0.setStepSize((java.lang.Double) 0.0d);
        java.lang.Double double7 = expandedStageTableServiceRequest0.EndValue;
        expandedStageTableServiceRequest0.EndValue = 100.0d;
        expandedStageTableServiceRequest0.StartValue = (-1.0d);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(expandedStageTableServiceRequest6);
        org.junit.Assert.assertNull(double7);
    }

    @Test
    public void test41553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41553");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription0.UtcOffset = 100.0d;
        timeSeriesDescription0.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        dischargeSummary6.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse5.setNextToken(instant10);
        java.time.Instant instant14 = locationDescriptionListServiceResponse5.getNextToken();
        java.time.Instant instant15 = locationDescriptionListServiceResponse5.getNextToken();
        timeSeriesDescription0.RawEndTime = instant15;
        timeSeriesDescription0.Publish = false;
        timeSeriesDescription0.Parameter = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str21 = timeSeriesDescription0.UniqueId;
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test41554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41554");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user5 = user3.setEmail("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.util.List<java.lang.String> strList7 = postUser6.Roles;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser9 = postUser6.setEmail("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser11 = postUser6.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser13 = postUser6.setUserType(userType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user14 = user3.setUserType(userType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType15 = user14.UserType;
        java.lang.String str16 = user14.getCustomId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNotNull(user5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(postUser9);
        org.junit.Assert.assertNotNull(postUser11);
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(postUser13);
        org.junit.Assert.assertNotNull(user14);
        org.junit.Assert.assertTrue("'" + userType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test41555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41555");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList3 = locationDescription0.Tags;
        java.lang.String str4 = locationDescription0.Identifier;
        locationDescription0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription8 = locationDescription0.setPrimaryFolder("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(tagMetadataList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locationDescription8);
    }

    @Test
    public void test41556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41556");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty();
        java.lang.Integer int1 = searchResultObservedProperty0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty3 = searchResultObservedProperty0.setCursor("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Integer int4 = searchResultObservedProperty0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty6 = searchResultObservedProperty0.setCursor("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = searchResultObservedProperty6.DomainObjects;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultObservedProperty3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(searchResultObservedProperty6);
        org.junit.Assert.assertNull(observedPropertyList7);
    }

    @Test
    public void test41557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41557");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple searchResultStandardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList1 = searchResultStandardSimple0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple searchResultStandardSimple3 = searchResultStandardSimple0.setTotalCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple searchResultStandardSimple5 = searchResultStandardSimple0.setCursor("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str6 = searchResultStandardSimple0.getCursor();
        java.lang.String str7 = searchResultStandardSimple0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple searchResultStandardSimple8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple();
        java.lang.String str9 = searchResultStandardSimple8.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation12 = putSamplingLocation10.setCustomId("https");
        java.lang.String str13 = putSamplingLocation10.getVerticalDatum();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple14.setApplicabilityRange(interval15);
        java.lang.Boolean boolean17 = standardSimple16.Active;
        standardSimple16.IssuingOrganization = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str20 = standardSimple16.CustomId;
        java.lang.String str21 = standardSimple16.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        java.lang.String str25 = standardSimple24.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple30 = standardSimple26.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple16, standardSimple24, standardSimple30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList32, standardSimpleArray31);
        putSamplingLocation10.Standards = standardSimpleList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple searchResultStandardSimple35 = searchResultStandardSimple8.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList32);
        java.lang.String str36 = searchResultStandardSimple8.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList37 = searchResultStandardSimple8.DomainObjects;
        searchResultStandardSimple0.DomainObjects = standardSimpleList37;
        org.junit.Assert.assertNull(standardSimpleList1);
        org.junit.Assert.assertNotNull(searchResultStandardSimple3);
        org.junit.Assert.assertNotNull(searchResultStandardSimple5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str6, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str7, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(putSamplingLocation12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimple30);
        org.junit.Assert.assertNotNull(standardSimpleArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(searchResultStandardSimple35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(standardSimpleList37);
    }

    @Test
    public void test41558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41558");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = importItemSamplingLocation0.ItemComparison;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList4 = importItemSamplingLocation0.ItemComparison;
        java.lang.Object obj5 = importItemSamplingLocation0.getErrors();
        java.util.List<java.lang.String> strList6 = importItemSamplingLocation0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType8 = importItemSpecimen7.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList10 = importItemObject9.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList12, importChangeItemArray11);
        importItemObject9.ItemComparison = importChangeItemList12;
        java.lang.String str15 = importItemObject9.Input;
        java.lang.String str16 = importItemObject9.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        java.util.List<java.lang.String> strList33 = getObservationsV2_18.getLabReportIds();
        importItem17.Errors = getObservationsV2_18;
        java.lang.Object obj35 = importItem17.getExistingItem();
        importItem17.Input = "hi!";
        java.lang.Object obj38 = importItem17.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem40 = importItem17.setStatus(importItemStatusType39);
        importItemObject9.Status = importItemStatusType39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen42 = importItemSpecimen7.setStatus(importItemStatusType39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation43 = importItemSamplingLocation0.setStatus(importItemStatusType39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType44 = importItemSamplingLocation43.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation45 = importItemSamplingLocation43.ExistingItem;
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNull(importChangeItemList3);
        org.junit.Assert.assertNull(importChangeItemList4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(importItemStatusType8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(importChangeItemArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + importItemStatusType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem40);
        org.junit.Assert.assertNotNull(importItemSpecimen42);
        org.junit.Assert.assertNotNull(importItemSamplingLocation43);
        org.junit.Assert.assertTrue("'" + importItemStatusType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNull(samplingLocation45);
    }

    @Test
    public void test41559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41559");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag2 = appliedTag0.setKey("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNotNull(appliedTag2);
    }

    @Test
    public void test41560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41560");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        postUnitGroup0.BaseUnitSymbol = "hi!";
        postUnitGroup0.BaseUnitIdentifier = "'.'SSSSSSS";
        java.lang.String str5 = postUnitGroup0.getBaseUnitPluralName();
        java.lang.String str6 = postUnitGroup0.getGroupIdentifier();
        java.lang.Integer int7 = postUnitGroup0.getTemperatureDimension();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test41561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41561");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutCredentialsUser putCredentialsUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutCredentialsUser();
        java.lang.String str1 = putCredentialsUser0.getPassword();
        putCredentialsUser0.Password = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.Object obj4 = putCredentialsUser0.getResponseType();
        java.lang.String str5 = putCredentialsUser0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserBase putUserBase7 = putCredentialsUser0.setUniqueId("****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.String str8 = putCredentialsUser0.Password;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putUserBase7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str8, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test41562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41562");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = laboratory1.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport6 = labReport0.setLaboratory(laboratory5);
        java.lang.String str7 = labReport6.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport9 = labReport6.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport11 = labReport6.setLaboratory(laboratory10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport13 = labReport11.setQcSummary("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str14 = labReport13.getCaseNarrative();
        labReport13.QcSummary = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.String str17 = labReport13.getQcSummary();
        org.junit.Assert.assertNotNull(laboratory5);
        org.junit.Assert.assertNotNull(labReport6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(labReport9);
        org.junit.Assert.assertNotNull(labReport11);
        org.junit.Assert.assertNotNull(labReport13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****" + "'", str17, "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
    }

    @Test
    public void test41563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41563");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod1 = postFieldVisitActivityFromPlannedActivity0.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = plannedFieldResult2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails4.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = plannedFieldResult2.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType11 = analyticalGroup10.getType();
        analyticalGroup10.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = null;
        analyticalGroupItem20.AnalysisMethod = analysisMethod23;
        java.lang.String str25 = analyticalGroupItem20.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = null;
        analyticalGroupItem31.AnalysisMethod = analysisMethod34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem15, analyticalGroupItem17, analyticalGroupItem20, analyticalGroupItem26, analyticalGroupItem29, analyticalGroupItem31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList37, analyticalGroupItemArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = analyticalGroup14.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList37);
        analyticalGroup10.AnalyticalGroupItems = analyticalGroupItemList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup10.AuditAttributes = auditAttributes41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult43 = plannedFieldResult9.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str45 = putActivityTemplate44.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate47 = putActivityTemplate44.setMedium(mediumType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult48 = plannedFieldResult9.setMedium(mediumType46);
        postFieldVisitActivityFromPlannedActivity0.Medium = mediumType46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate50 = postFieldVisitActivityFromPlannedActivity0.ActivityTemplate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType51 = postFieldVisitActivityFromPlannedActivity0.Medium;
        postFieldVisitActivityFromPlannedActivity0.Id = "multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****";
        org.junit.Assert.assertNull(collectionMethod1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertNotNull(labResultDetails8);
        org.junit.Assert.assertNotNull(plannedFieldResult9);
        org.junit.Assert.assertNull(analyticalGroupType11);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(analyticalGroup39);
        org.junit.Assert.assertNotNull(plannedFieldResult43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + mediumType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate47);
        org.junit.Assert.assertNotNull(plannedFieldResult48);
        org.junit.Assert.assertNull(activityTemplate50);
        org.junit.Assert.assertTrue("'" + mediumType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
    }

    @Test
    public void test41564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41564");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2();
        java.lang.String str1 = postObservationImportV2_0.getFileType();
        java.lang.Boolean boolean2 = postObservationImportV2_0.getLinkFieldVisitsForNewObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_4 = postObservationImportV2_0.setLinkFieldVisitsForNewObservations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_6 = postObservationImportV2_4.setFileType("/AQUARIUS/Publish/v2");
        postObservationImportV2_4.TimeZoneOffset = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(postObservationImportV2_4);
        org.junit.Assert.assertNotNull(postObservationImportV2_6);
    }

    @Test
    public void test41565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41565");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange2 = indexRange0.setDescription("9999-12-31T23:59:59.999Z");
        java.lang.String str3 = indexRange0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange5 = indexRange0.setDescription("0001-01-01T00:00:00.000Z");
        java.lang.String str6 = indexRange0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange8 = indexRange0.setResultingScore((java.lang.Integer) 0);
        indexRange8.Description = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNotNull(indexRange2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(indexRange5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str6, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(indexRange8);
    }

    @Test
    public void test41566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41566");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceResponse unitListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata> unitMetadataList1 = unitListServiceResponse0.getUnits();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata> unitMetadataList2 = unitListServiceResponse0.Units;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str4 = unitMetadata3.getBaseOffset();
        java.lang.String str5 = unitMetadata3.UniqueId;
        java.lang.String str6 = unitMetadata3.BaseMultiplier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str8 = unitMetadata7.getBaseOffset();
        java.lang.String str9 = unitMetadata7.UniqueId;
        java.lang.String str10 = unitMetadata7.BaseMultiplier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata12 = unitMetadata7.setGroupIdentifier("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata14 = unitMetadata7.setBaseMultiplier("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata16 = unitMetadata7.setGroupIdentifier("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str17 = unitMetadata7.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata19 = unitMetadata7.setUniqueId("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str21 = unitMetadata20.getBaseOffset();
        java.lang.String str22 = unitMetadata20.UniqueId;
        java.lang.String str23 = unitMetadata20.BaseMultiplier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata25 = unitMetadata20.setGroupIdentifier("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata27 = unitMetadata20.setBaseMultiplier("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str29 = unitMetadata28.getBaseOffset();
        java.lang.String str30 = unitMetadata28.getBaseOffset();
        unitMetadata28.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        unitMetadata28.Identifier = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata[] unitMetadataArray35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata[] { unitMetadata3, unitMetadata19, unitMetadata27, unitMetadata28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata> unitMetadataList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata>) unitMetadataList36, unitMetadataArray35);
        unitListServiceResponse0.Units = unitMetadataList36;
        org.junit.Assert.assertNull(unitMetadataList1);
        org.junit.Assert.assertNull(unitMetadataList2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(unitMetadata12);
        org.junit.Assert.assertNotNull(unitMetadata14);
        org.junit.Assert.assertNotNull(unitMetadata16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(unitMetadata19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(unitMetadata25);
        org.junit.Assert.assertNotNull(unitMetadata27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(unitMetadataArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test41567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41567");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        java.lang.String str3 = specimenWithObservations2.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = analyticalGroup4.getType();
        analyticalGroup4.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = null;
        analyticalGroupItem14.AnalysisMethod = analysisMethod17;
        java.lang.String str19 = analyticalGroupItem14.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = null;
        analyticalGroupItem25.AnalysisMethod = analysisMethod28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem9, analyticalGroupItem11, analyticalGroupItem14, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31, analyticalGroupItemArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = analyticalGroup8.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31);
        analyticalGroup4.AnalyticalGroupItems = analyticalGroupItemList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup4.AuditAttributes = auditAttributes35;
        java.lang.String str37 = analyticalGroup4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType38 = analyticalGroup4.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup40 = analyticalGroup4.setName("2021.4.62.0");
        specimenWithObservations2.AnalyticalGroup = analyticalGroup40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = null;
        analyticalGroupItem48.AnalysisMethod = analysisMethod51;
        java.lang.String str53 = analyticalGroupItem48.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem57.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = null;
        analyticalGroupItem59.AnalysisMethod = analysisMethod62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem43, analyticalGroupItem45, analyticalGroupItem48, analyticalGroupItem54, analyticalGroupItem57, analyticalGroupItem59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65, analyticalGroupItemArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup67 = analyticalGroup42.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65);
        java.lang.Integer int68 = analyticalGroup67.NumberOfAnalysisMethodsInGroupItems;
        java.lang.Integer int69 = analyticalGroup67.getNumberOfAnalysisMethodsInGroupItems();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList70 = analyticalGroup67.AnalyticalGroupItems;
        analyticalGroup40.AnalyticalGroupItems = analyticalGroupItemList70;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(analyticalGroupType5);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(analyticalGroup33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(analyticalGroupType38);
        org.junit.Assert.assertNotNull(analyticalGroup40);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(analyticalGroup67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(analyticalGroupItemList70);
    }

    @Test
    public void test41568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41568");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity2 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity0.Manufacturer = "2021.4.62.0";
        java.lang.Boolean boolean5 = pointVelocityDischargeActivity0.HorizontalCoefficientUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = pointVelocityDischargeActivity0.DischargeChannelMeasurement;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType9 = dischargeChannelMeasurement8.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = dischargeChannelMeasurement8.Discharge;
        java.time.Instant instant11 = dischargeChannelMeasurement8.EndTime;
        dischargeChannelMeasurement8.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity14 = engineeredStructureDischargeActivity7.setDischargeChannelMeasurement(dischargeChannelMeasurement8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity15 = pointVelocityDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement8);
        java.lang.Boolean boolean16 = pointVelocityDischargeActivity0.isHorizontalCoefficientUsed();
        java.lang.String str17 = pointVelocityDischargeActivity0.getMeterEquation();
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(dischargeChannelMeasurement6);
        org.junit.Assert.assertNull(channelMaterialType9);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity14);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test41569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41569");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList1 = chartData0.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData3 = chartData0.setDepthUnitGroupWithUnits(unitGroupWithUnits2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits4 = chartData0.UnitGroupWithUnits;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData6 = chartData0.setUnitGroupWithUnits(unitGroupWithUnits5);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList7 = chartData0.getDataPoints();
        org.junit.Assert.assertNull(chartDataPointList1);
        org.junit.Assert.assertNotNull(chartData3);
        org.junit.Assert.assertNull(unitGroupWithUnits4);
        org.junit.Assert.assertNotNull(chartData6);
        org.junit.Assert.assertNull(chartDataPointList7);
    }

    @Test
    public void test41570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41570");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.Object obj1 = importChangeItem0.getRight();
        java.lang.String str2 = importChangeItem0.getPropertyName();
        importChangeItem0.PropertyName = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier7 = putQualifier5.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        getObservationsV2_14.DepthUnitCustomId = "hi!";
        java.lang.String str17 = getObservationsV2_14.CustomId;
        java.util.List<java.lang.String> strList18 = getObservationsV2_14.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_14.setMedia((java.util.List<java.lang.String>) strList30);
        putQualifier5.GroupIdentifiers = strList30;
        importChangeItem0.Left = putQualifier5;
        java.lang.String str37 = putQualifier5.getUniqueId();
        java.util.ArrayList<java.lang.String> strList38 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier39 = putQualifier5.setGroupIdentifiers(strList38);
        putQualifier39.DisplayName = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier43 = putQualifier39.setPublicIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier45 = putQualifier39.setPublicIdentifier("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.lang.String str46 = putQualifier39.getPublicIdentifier();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putQualifier7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(putQualifier39);
        org.junit.Assert.assertNotNull(putQualifier43);
        org.junit.Assert.assertNotNull(putQualifier45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str46, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
    }

    @Test
    public void test41571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41571");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart2 = inputPart0.setHeaders((java.lang.Object) interpolationType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart4 = inputPart0.setContentTypeFromMessage((java.lang.Boolean) false);
        java.lang.Boolean boolean5 = inputPart0.getContentTypeFromMessage();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        java.lang.Boolean boolean7 = inputPart6.getContentTypeFromMessage();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart10 = inputPart8.setHeaders((java.lang.Object) interpolationType9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType11 = inputPart8.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart13 = inputPart8.setMediaType(mediaType12);
        inputPart6.MediaType = mediaType12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart15 = inputPart0.setMediaType(mediaType12);
        org.junit.Assert.assertTrue("'" + interpolationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart2);
        org.junit.Assert.assertNotNull(inputPart4);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + false + "'", boolean5, false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + interpolationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart10);
        org.junit.Assert.assertNull(mediaType11);
        org.junit.Assert.assertNotNull(inputPart13);
        org.junit.Assert.assertNotNull(inputPart15);
    }

    @Test
    public void test41572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41572");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard2 = postStandard0.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard4 = postStandard2.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str5 = postStandard2.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard7 = postStandard2.setName("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple8.setApplicabilityRange(interval9);
        java.lang.String str11 = standardSimple8.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple8.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple13.setName("");
        java.lang.String str16 = standardSimple15.Id;
        java.lang.String str17 = standardSimple15.Id;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant19 = interval18.Start;
        java.time.Instant instant20 = interval18.End;
        standardSimple15.ApplicabilityRange = interval18;
        postStandard7.ApplicabilityRange = interval18;
        postStandard7.Name = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        org.junit.Assert.assertNotNull(postStandard2);
        org.junit.Assert.assertNotNull(postStandard4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(postStandard7);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(instant20);
    }

    @Test
    public void test41573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41573");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation1.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation1.setCategoricalResult(categoricalResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7, importHistoryEventSimpleArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation1.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod10 = postLabAnalysisMethod0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = putUnit11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = putDetectioncondition13.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition16 = putDetectioncondition13.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = auditAttributes20.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = samplingPlanPlannedActivity19.AuditAttributes;
        putDetectioncondition13.AuditAttributes = auditAttributes24;
        putUnit11.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod27 = postLabAnalysisMethod10.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod10.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails32 = labResultDetails30.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails34 = labResultDetails32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod35 = postLabAnalysisMethod10.setAuditAttributes(auditAttributes33);
        java.lang.String str36 = postLabAnalysisMethod35.getId();
        java.lang.String str37 = postLabAnalysisMethod35.getDescription();
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(putDetectioncondition16);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod27);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(labResultDetails32);
        org.junit.Assert.assertNotNull(labResultDetails34);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str37, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test41574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41574");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        java.lang.String str22 = adcpDischargeActivity0.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity0.setModel("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity26 = adcpDischargeActivity0.setSoftwareVersion("-PT87591240H");
        java.lang.String str27 = adcpDischargeActivity0.NodeDetails;
        java.lang.String str28 = adcpDischargeActivity0.getSoftwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = adcpDischargeActivity0.MagneticVariation;
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNotNull(adcpDischargeActivity26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-PT87591240H" + "'", str28, "-PT87591240H");
        org.junit.Assert.assertNull(doubleWithDisplay29);
    }

    @Test
    public void test41575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41575");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        postUnitGroup0.BaseUnitSymbol = "hi!";
        postUnitGroup0.BaseUnitIdentifier = "'.'SSSSSSS";
        java.lang.Integer int5 = postUnitGroup0.getCurrentDimension();
        java.lang.String str6 = postUnitGroup0.BaseUnitSingularName;
        postUnitGroup0.CurrentDimension = 0;
        java.lang.Integer int9 = postUnitGroup0.TemperatureDimension;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup11 = postUnitGroup0.setDisplayName("'.'SSSSSSS");
        postUnitGroup11.MassDimension = 4;
        java.lang.String str14 = postUnitGroup11.DisplayName;
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(postUnitGroup11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "'.'SSSSSSS" + "'", str14, "'.'SSSSSSS");
    }

    @Test
    public void test41576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41576");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit2 = postUnitGroupWithUnit0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit4 = postUnitGroupWithUnit2.setSystemCode(unitGroupWithUnitsSystemCodeType3);
        java.lang.String str5 = postUnitGroupWithUnit4.getCustomId();
        java.lang.Boolean boolean6 = postUnitGroupWithUnit4.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit8 = postUnitGroupWithUnit4.setSupportsConversion((java.lang.Boolean) true);
        java.lang.Object obj9 = postUnitGroupWithUnit4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType10 = postUnitGroupWithUnit4.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit12 = postUnitGroupWithUnit4.setCustomId("****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit2);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit12);
    }

    @Test
    public void test41577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41577");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str9 = samplingContextTag8.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag11 = samplingContextTag8.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = samplingContextTag11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str15 = samplingContextTag14.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        samplingContextTag16.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str21 = samplingContextTag20.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = samplingContextTag20.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag13, samplingContextTag14, samplingContextTag16, samplingContextTag23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25, samplingContextTagArray24);
        postActivity3.SamplingContextTags = samplingContextTagList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity30 = putActivity28.setCustomId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails31.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime34 = activityWithDetails31.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation35 = activityWithDetails31.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str38 = metricConfiguration37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty39.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration42 = metricConfiguration37.setObservedProperty(observedProperty39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType43 = observedProperty39.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup45 = postObservedProperty44.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit47 = null;
        quantity46.Unit = unit47;
        postObservedProperty44.LowerLimit = quantity46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = postObservedProperty44.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = quantity50.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty52 = observedProperty39.setUpperLimit(quantity50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = samplingLocation36.setElevation(quantity50);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList54 = samplingLocation53.getAttachments();
        java.lang.String str55 = samplingLocation53.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList56 = samplingLocation53.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit58 = null;
        quantity57.Unit = unit58;
        samplingLocation53.Elevation = quantity57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails61 = activityWithDetails31.setSamplingLocation(samplingLocation53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails63 = activityWithDetails31.setSourceActivityId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit65 = indexConfiguration64.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = indexConfiguration64.AuditAttributes;
        activityWithDetails31.IndexConfiguration = indexConfiguration64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration69 = indexConfiguration64.setUseScoreRanges((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity70 = putActivity30.setIndexConfiguration(indexConfiguration69);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList71 = putActivity70.ExtendedAttributes;
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(samplingContextTag11);
        org.junit.Assert.assertNotNull(samplingContextTag13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(samplingContextTag23);
        org.junit.Assert.assertNotNull(samplingContextTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putActivity28);
        org.junit.Assert.assertNotNull(putActivity30);
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNull(samplingLocation35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(metricConfiguration42);
        org.junit.Assert.assertNull(resultType43);
        org.junit.Assert.assertNull(unitGroup45);
        org.junit.Assert.assertNotNull(quantity50);
        org.junit.Assert.assertNull(unit51);
        org.junit.Assert.assertNotNull(observedProperty52);
        org.junit.Assert.assertNotNull(samplingLocation53);
        org.junit.Assert.assertNull(domainObjectAttachmentList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(importHistoryEventSimpleList56);
        org.junit.Assert.assertNotNull(activityWithDetails61);
        org.junit.Assert.assertNotNull(activityWithDetails63);
        org.junit.Assert.assertNull(unit65);
        org.junit.Assert.assertNull(auditAttributes66);
        org.junit.Assert.assertNotNull(indexConfiguration69);
        org.junit.Assert.assertNotNull(putActivity70);
        org.junit.Assert.assertNull(extendedAttributeList71);
    }

    @Test
    public void test41578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41578");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType putThresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType();
        java.lang.Object obj1 = putThresholdType0.getResponseType();
        java.lang.Object obj2 = putThresholdType0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeRequestBase thresholdTypeRequestBase4 = putThresholdType0.setDescription("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        putThresholdType0.Description = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType putThresholdType8 = putThresholdType0.setReferenceValueCode("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType putThresholdType10 = putThresholdType8.setReferenceValueCode("http");
        java.lang.String str11 = putThresholdType8.ReferenceValueCode;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertNotNull(thresholdTypeRequestBase4);
        org.junit.Assert.assertNotNull(putThresholdType8);
        org.junit.Assert.assertNotNull(putThresholdType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http" + "'", str11, "http");
    }

    @Test
    public void test41579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41579");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int1 = searchResultSpreadsheetTemplate0.TotalCount;
        java.lang.Integer int2 = searchResultSpreadsheetTemplate0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int4 = searchResultSpreadsheetTemplate3.TotalCount;
        java.lang.Integer int5 = searchResultSpreadsheetTemplate3.TotalCount;
        java.lang.String str6 = searchResultSpreadsheetTemplate3.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate8 = searchResultSpreadsheetTemplate3.setCursor("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int10 = searchResultSpreadsheetTemplate9.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate12 = searchResultSpreadsheetTemplate9.setCursor("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate15 = spreadsheetTemplate13.setType(spreadsheetTemplateType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType17 = spreadsheetTemplate16.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType18 = spreadsheetTemplate16.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType19 = null;
        spreadsheetTemplate16.Type = spreadsheetTemplateType19;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList21 = spreadsheetTemplate16.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType23 = spreadsheetTemplate22.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType24 = spreadsheetTemplate22.getType();
        spreadsheetTemplate22.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate28 = spreadsheetTemplate22.setType(spreadsheetTemplateType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate31 = spreadsheetTemplate29.setType(spreadsheetTemplateType30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType33 = spreadsheetTemplate32.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType34 = spreadsheetTemplate32.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType37 = spreadsheetTemplate36.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType38 = spreadsheetTemplate36.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType39 = null;
        spreadsheetTemplate36.Type = spreadsheetTemplateType39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType42 = spreadsheetTemplate41.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType43 = spreadsheetTemplate41.getType();
        spreadsheetTemplate41.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate47 = spreadsheetTemplate41.setType(spreadsheetTemplateType46);
        java.lang.String str48 = spreadsheetTemplate47.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate51 = spreadsheetTemplate49.setType(spreadsheetTemplateType50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate54 = spreadsheetTemplate52.setType(spreadsheetTemplateType53);
        spreadsheetTemplate52.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType58 = spreadsheetTemplate57.getType();
        spreadsheetTemplate57.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] spreadsheetTemplateArray61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] { spreadsheetTemplate15, spreadsheetTemplate16, spreadsheetTemplate22, spreadsheetTemplate29, spreadsheetTemplate32, spreadsheetTemplate35, spreadsheetTemplate36, spreadsheetTemplate47, spreadsheetTemplate51, spreadsheetTemplate52, spreadsheetTemplate57 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList62, spreadsheetTemplateArray61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate64 = searchResultSpreadsheetTemplate9.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList62);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList65 = searchResultSpreadsheetTemplate64.DomainObjects;
        searchResultSpreadsheetTemplate8.DomainObjects = spreadsheetTemplateList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate67 = searchResultSpreadsheetTemplate0.setDomainObjects(spreadsheetTemplateList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate69 = searchResultSpreadsheetTemplate0.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate71 = searchResultSpreadsheetTemplate69.setCursor("http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate8);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate12);
        org.junit.Assert.assertNotNull(spreadsheetTemplate15);
        org.junit.Assert.assertNull(spreadsheetTemplateType17);
        org.junit.Assert.assertNull(spreadsheetTemplateType18);
        org.junit.Assert.assertNull(domainObjectAttachmentList21);
        org.junit.Assert.assertNull(spreadsheetTemplateType23);
        org.junit.Assert.assertNull(spreadsheetTemplateType24);
        org.junit.Assert.assertNotNull(spreadsheetTemplate28);
        org.junit.Assert.assertNotNull(spreadsheetTemplate31);
        org.junit.Assert.assertNull(spreadsheetTemplateType33);
        org.junit.Assert.assertNull(spreadsheetTemplateType34);
        org.junit.Assert.assertNull(spreadsheetTemplateType37);
        org.junit.Assert.assertNull(spreadsheetTemplateType38);
        org.junit.Assert.assertNull(spreadsheetTemplateType42);
        org.junit.Assert.assertNull(spreadsheetTemplateType43);
        org.junit.Assert.assertNotNull(spreadsheetTemplate47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "https" + "'", str48, "https");
        org.junit.Assert.assertNotNull(spreadsheetTemplate51);
        org.junit.Assert.assertNotNull(spreadsheetTemplate54);
        org.junit.Assert.assertNull(spreadsheetTemplateType58);
        org.junit.Assert.assertNotNull(spreadsheetTemplateArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate64);
        org.junit.Assert.assertNotNull(spreadsheetTemplateList65);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate67);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate69);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate71);
    }

    @Test
    public void test41580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41580");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition6 = standardDefinition4.setApplicabilityRange(interval5);
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = standardDefinition4.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple8.setApplicabilityRange(interval9);
        java.lang.String str11 = standardSimple8.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple8.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple13.setName("");
        standardSimple13.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str18 = standardSimple13.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = standardSimple13.setApplicabilityRange(interval19);
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval21 = standardSimple20.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval22 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary26.DifferenceDuringVisit = doubleWithDisplay27;
        reading23.Value = doubleWithDisplay27;
        java.lang.String str30 = reading23.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = reading31.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading31.ReadingType = readingType33;
        reading23.ReadingType = readingType33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary38.Reviewer = "";
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary38.MeasurementTime = instant41;
        postRecurringReport37.NextGenerationDate = instant41;
        java.time.Instant instant44 = postRecurringReport37.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset45 = statisticalDateTimeOffset36.setDateTimeOffset(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj48 = timeAlignedDataServiceRequest47.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse49.setNextToken(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest52 = timeAlignedDataServiceRequest47.setQueryFrom(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription53 = timeSeriesDescription46.setRawStartTime(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset54 = statisticalDateTimeOffset36.setDateTimeOffset(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading55 = reading23.setTime(instant50);
        interval22.Start = instant50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple57 = standardSimple20.setApplicabilityRange(interval22);
        standardDefinition4.ApplicabilityRange = interval22;
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNotNull(standardDefinition6);
        org.junit.Assert.assertNull(interval7);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(standardSimple20);
        org.junit.Assert.assertNull(interval21);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(doubleWithDisplay32);
        org.junit.Assert.assertTrue("'" + readingType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset45);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest52);
        org.junit.Assert.assertNotNull(timeSeriesDescription53);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset54);
        org.junit.Assert.assertNotNull(reading55);
        org.junit.Assert.assertNotNull(standardSimple57);
    }

    @Test
    public void test41581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41581");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str1 = referencePointPeriod0.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection2 = referencePointPeriod0.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod4 = referencePointPeriod0.setAppliedByUser("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        referencePointPeriod4.StandardIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection7 = referencePointPeriod4.getMeasurementDirection();
        java.time.Instant instant8 = referencePointPeriod4.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase11 = locationDatumPeriod9.setComment("'.'SSSSSSS");
        java.lang.String str12 = locationDatumPeriod9.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase14 = locationDatumPeriod9.setComment("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom;
        locationDatumPeriodBase14.MeasurementDirection = measurementDirection15;
        referencePointPeriod4.MeasurementDirection = measurementDirection15;
        java.time.Instant instant18 = referencePointPeriod4.ValidFrom;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(measurementDirection2);
        org.junit.Assert.assertNotNull(referencePointPeriod4);
        org.junit.Assert.assertNull(measurementDirection7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase14);
        org.junit.Assert.assertTrue("'" + measurementDirection15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom + "'", measurementDirection15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom));
        org.junit.Assert.assertNull(instant18);
    }

    @Test
    public void test41582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41582");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        putSamplingLocation0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation5.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setCategoricalResult(categoricalResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList11, importHistoryEventSimpleArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = postLabAnalysisMethod4.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = postObservedProperty3.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation16 = putSamplingLocation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList11);
        java.lang.String str17 = putSamplingLocation16.VerticalCollectionMethod;
        java.lang.String str18 = putSamplingLocation16.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = postObservedProperty19.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType22 = postObservedProperty19.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = postObservedProperty19.setUnitGroup(unitGroup23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty26 = postObservedProperty19.setResultType(resultType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        postObservedProperty26.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity30 = null;
        putActivity29.PlannedActivity = plannedActivity30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity32.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity32.setPlannedActivity(plannedActivity35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str38 = samplingContextTag37.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = samplingContextTag37.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag42 = samplingContextTag40.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str44 = samplingContextTag43.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str46 = samplingContextTag45.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = null;
        samplingContextTag45.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str50 = samplingContextTag49.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag52 = samplingContextTag49.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag42, samplingContextTag43, samplingContextTag45, samplingContextTag52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList54, samplingContextTagArray53);
        postActivity32.SamplingContextTags = samplingContextTagList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity57 = putActivity29.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration58 = null;
        putActivity29.IndexConfiguration = indexConfiguration58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str61 = metricConfiguration60.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty62.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration65 = metricConfiguration60.setObservedProperty(observedProperty62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType66 = observedProperty62.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup68 = postObservedProperty67.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit70 = null;
        quantity69.Unit = unit70;
        postObservedProperty67.LowerLimit = quantity69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity73 = postObservedProperty67.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit74 = quantity73.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty75 = observedProperty62.setUpperLimit(quantity73);
        putActivity29.Depth = quantity73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty77 = postObservedProperty26.setUpperLimit(quantity73);
        putSamplingLocation16.Elevation = quantity73;
        quantity73.Value = 0.0d;
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod14);
        org.junit.Assert.assertNotNull(postObservedProperty15);
        org.junit.Assert.assertNotNull(putSamplingLocation16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNull(analysisType22);
        org.junit.Assert.assertNotNull(postObservedProperty24);
        org.junit.Assert.assertTrue("'" + resultType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty26);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(samplingContextTag40);
        org.junit.Assert.assertNotNull(samplingContextTag42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(samplingContextTag52);
        org.junit.Assert.assertNotNull(samplingContextTagArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putActivity57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(metricConfiguration65);
        org.junit.Assert.assertNull(resultType66);
        org.junit.Assert.assertNull(unitGroup68);
        org.junit.Assert.assertNotNull(quantity73);
        org.junit.Assert.assertNull(unit74);
        org.junit.Assert.assertNotNull(observedProperty75);
        org.junit.Assert.assertNotNull(postObservedProperty77);
    }

    @Test
    public void test41583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41583");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics2 = fieldVisitStatistics0.setVerticalProfileCount((java.lang.Integer) 10);
        java.lang.Integer int3 = fieldVisitStatistics0.getRoutineSampleCount();
        java.lang.Integer int4 = fieldVisitStatistics0.getFieldSurveyCount();
        java.lang.Integer int5 = fieldVisitStatistics0.FieldResultCount;
        org.junit.Assert.assertNotNull(fieldVisitStatistics2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test41584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41584");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard2 = postStandard0.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard4 = postStandard2.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval5 = null;
        postStandard2.ApplicabilityRange = interval5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard8 = postStandard2.setAuditAttributes(auditAttributes7);
        java.lang.String str9 = postStandard2.getId();
        org.junit.Assert.assertNotNull(postStandard2);
        org.junit.Assert.assertNotNull(postStandard4);
        org.junit.Assert.assertNotNull(postStandard8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str9, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test41585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41585");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        postProject2.ApprovalAgency = "https";
        java.time.OffsetDateTime offsetDateTime5 = postProject2.getEndTime();
        java.lang.Boolean boolean6 = postProject2.Approved;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject8 = postProject2.setDescription("0001-01-01T00:00:00.000Z");
        postProject8.Id = "multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****";
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(postProject8);
    }

    @Test
    public void test41586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41586");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime1 = importHistoryEventSimple0.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple0.setId("http");
        java.lang.String str4 = importHistoryEventSimple0.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile5 = null;
        importHistoryEventSimple0.ImportedBy = userProfile5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType7 = importHistoryEventSimple0.getImportType();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(importType7);
    }

    @Test
    public void test41587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41587");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activityWithDetails0.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        java.lang.String str24 = samplingLocation22.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList25 = samplingLocation22.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        samplingLocation22.Elevation = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails30 = activityWithDetails0.setSamplingLocation(samplingLocation22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails32 = activityWithDetails0.setSourceActivityId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = indexConfiguration33.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = indexConfiguration33.AuditAttributes;
        indexConfiguration33.Description = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails38 = activityWithDetails0.setIndexConfiguration(indexConfiguration33);
        indexConfiguration33.Id = "";
        java.lang.String str41 = indexConfiguration33.IssuingOrganization;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        java.lang.String str43 = unit42.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration44 = indexConfiguration33.setUnit(unit42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = indexConfiguration44.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = indexConfiguration44.AuditAttributes;
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(importHistoryEventSimpleList25);
        org.junit.Assert.assertNotNull(activityWithDetails30);
        org.junit.Assert.assertNotNull(activityWithDetails32);
        org.junit.Assert.assertNull(unit34);
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNotNull(activityWithDetails38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(indexConfiguration44);
        org.junit.Assert.assertNull(auditAttributes45);
        org.junit.Assert.assertNull(auditAttributes46);
    }

    @Test
    public void test41588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41588");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        java.time.OffsetDateTime offsetDateTime3 = null;
        postProject0.StartTime = offsetDateTime3;
        java.time.OffsetDateTime offsetDateTime5 = postProject0.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject7 = postProject0.setScopeStatement("");
        postProject7.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject11 = postProject7.setScopeStatement("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.time.OffsetDateTime offsetDateTime12 = postProject11.StartTime;
        java.lang.String str13 = postProject11.ScopeStatement;
        java.lang.String str14 = postProject11.Id;
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(postProject7);
        org.junit.Assert.assertNotNull(postProject11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****" + "'", str13, "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "'.'SSSSSSS" + "'", str14, "'.'SSSSSSS");
    }

    @Test
    public void test41589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41589");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = specimen2.Laboratory;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList4 = specimen2.getExtendedAttributes();
        specimen2.FiltrationComment = "/AQUARIUS/Publish/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = specimen2.getLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = specimen2.getTemplateCreatedFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory9 = specimen2.Laboratory;
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNull(laboratory3);
        org.junit.Assert.assertNull(extendedAttributeList4);
        org.junit.Assert.assertNull(laboratory7);
        org.junit.Assert.assertNull(specimenTemplate8);
        org.junit.Assert.assertNull(laboratory9);
    }

    @Test
    public void test41590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41590");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading0.ReadingType = readingType2;
        java.time.Instant instant4 = reading0.Time;
        java.util.ArrayList<java.lang.String> strList5 = reading0.getReadingQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.CleaningBefore;
        reading0.ReadingType = readingType6;
        java.lang.String str8 = reading0.getReferencePointUniqueId();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertTrue("'" + readingType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + readingType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.CleaningBefore + "'", readingType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.CleaningBefore));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test41591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41591");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        java.lang.Double double22 = getObservationsV2_4.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str24 = deleteFieldVisits23.Sort;
        deleteFieldVisits23.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_27.setDataClassifications((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = getObservationsV2_27.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        getObservationsV2_27.StartResultTime = instant38;
        java.lang.String[] strArray50 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList51);
        deleteFieldVisits23.PlanningStatuses = strList51;
        getObservationsV2_4.Media = strList51;
        getChartDataV2_0.SpecimenIds = strList51;
        java.lang.Integer int57 = getChartDataV2_0.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_0.setDepthUnitId("/AQUARIUS/Acquisition/v2");
        java.lang.String str60 = getChartDataV2_59.getFieldVisitId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test41592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41592");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability1 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList3, extendedAttributeApplicabilityArray2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes5 = getExtendedAttributes0.setApplicability(extendedAttributeApplicabilityList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList6 = null;
        getExtendedAttributes5.Applicability = extendedAttributeApplicabilityList6;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList8 = getExtendedAttributes5.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList12, extendedAttributeApplicabilityArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes14 = getExtendedAttributes9.setApplicability(extendedAttributeApplicabilityList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability16 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList18, extendedAttributeApplicabilityArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes20 = getExtendedAttributes15.setApplicability(extendedAttributeApplicabilityList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes21 = getExtendedAttributes14.setApplicability(extendedAttributeApplicabilityList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList25, extendedAttributeApplicabilityArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes27 = getExtendedAttributes22.setApplicability(extendedAttributeApplicabilityList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes28 = getExtendedAttributes14.setApplicability(extendedAttributeApplicabilityList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes29 = getExtendedAttributes5.setApplicability(extendedAttributeApplicabilityList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList33, extendedAttributeApplicabilityArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes35 = getExtendedAttributes30.setApplicability(extendedAttributeApplicabilityList33);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList36 = null;
        getExtendedAttributes35.Applicability = extendedAttributeApplicabilityList36;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList38 = getExtendedAttributes35.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability40 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList42, extendedAttributeApplicabilityArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes44 = getExtendedAttributes39.setApplicability(extendedAttributeApplicabilityList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability46 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability46 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList48, extendedAttributeApplicabilityArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes50 = getExtendedAttributes45.setApplicability(extendedAttributeApplicabilityList48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes51 = getExtendedAttributes44.setApplicability(extendedAttributeApplicabilityList48);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList52 = getExtendedAttributes44.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes53 = getExtendedAttributes35.setApplicability(extendedAttributeApplicabilityList52);
        getExtendedAttributes5.Applicability = extendedAttributeApplicabilityList52;
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes5);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList8);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes14);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes20);
        org.junit.Assert.assertNotNull(getExtendedAttributes21);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes27);
        org.junit.Assert.assertNotNull(getExtendedAttributes28);
        org.junit.Assert.assertNotNull(getExtendedAttributes29);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes35);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList38);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability40 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability40.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes44);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability46 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability46.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes50);
        org.junit.Assert.assertNotNull(getExtendedAttributes51);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList52);
        org.junit.Assert.assertNotNull(getExtendedAttributes53);
    }

    @Test
    public void test41593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41593");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction2 = correction0.setProcessingOrder(correctionProcessingOrder1);
        java.time.Instant instant3 = correction2.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        timeSeriesThreshold4.DisplayColor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold8 = timeSeriesThreshold4.setDisplayColor("/AQUARIUS/Provisioning/v1");
        java.lang.String str9 = timeSeriesThreshold8.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        timeSeriesThreshold10.DisplayColor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal;
        timeSeriesThreshold10.ProcessingOrder = correctionProcessingOrder13;
        java.lang.String str15 = timeSeriesThreshold10.getReferenceCode();
        java.lang.String str16 = timeSeriesThreshold10.getReferenceCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder17 = timeSeriesThreshold10.ProcessingOrder;
        timeSeriesThreshold8.ProcessingOrder = correctionProcessingOrder17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction19 = correction2.setProcessingOrder(correctionProcessingOrder17);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing + "'", correctionProcessingOrder1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing));
        org.junit.Assert.assertNotNull(correction2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(timeSeriesThreshold8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal + "'", correctionProcessingOrder13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal + "'", correctionProcessingOrder17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.Normal));
        org.junit.Assert.assertNotNull(correction19);
    }

    @Test
    public void test41594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41594");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnitGroup deleteUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnitGroup();
        java.lang.String str1 = deleteUnitGroup0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnitGroup deleteUnitGroup3 = deleteUnitGroup0.setUniqueId("/AQUARIUS");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteUnitGroup3);
    }

    @Test
    public void test41595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41595");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postAnalysisMethod1.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod5 = postLabAnalysisMethod3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7, observedPropertyArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod5.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7);
        postAnalysisMethod1.ObservedProperties = observedPropertyList7;
        java.lang.String str11 = postAnalysisMethod1.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList13 = postAnalysisMethod12.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod16 = postLabAnalysisMethod14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18, observedPropertyArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod16.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        postAnalysisMethod12.ObservedProperties = observedPropertyList18;
        postAnalysisMethod1.ObservedProperties = observedPropertyList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod23 = putLabAnalysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        java.lang.String str24 = putLabAnalysisMethod23.getId();
        java.lang.String str25 = putLabAnalysisMethod23.getDescription();
        java.lang.String str26 = putLabAnalysisMethod23.getContext();
        putLabAnalysisMethod23.Description = "http";
        putLabAnalysisMethod23.MethodId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod5);
        org.junit.Assert.assertNotNull(observedPropertyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(importHistoryEventSimpleList13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod16);
        org.junit.Assert.assertNotNull(observedPropertyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test41596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41596");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint();
        java.time.Instant instant1 = referencePoint0.PrimarySinceDate;
        java.lang.String str2 = referencePoint0.getName();
        java.lang.String str3 = referencePoint0.LocationUniqueId;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test41597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41597");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = null;
        locationMonitoringMethod0.Tags = tagMetadataList2;
        java.lang.String str4 = locationMonitoringMethod0.getParameterId();
        java.lang.String str5 = locationMonitoringMethod0.Parameter;
        locationMonitoringMethod0.Comment = "";
        locationMonitoringMethod0.LocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str10 = locationMonitoringMethod0.getParameterId();
        java.lang.String str11 = locationMonitoringMethod0.SerialNumber;
        java.lang.String str12 = locationMonitoringMethod0.getModel();
        java.lang.String str13 = locationMonitoringMethod0.MethodCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str15 = crossSectionSurveyActivity14.Channel;
        java.lang.String str16 = crossSectionSurveyActivity14.Channel;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.util.List<java.lang.String> strList18 = getExportSamplingLocations17.getLocationGroupTypeIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList22 = locationDescriptionListServiceResponse21.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant24 = ratingCurveListServiceRequest23.QueryTo;
        java.lang.String str25 = ratingCurveListServiceRequest23.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary27.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        dischargeSummary27.MeasurementTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse26.setNextToken(instant31);
        java.time.Instant instant35 = locationDescriptionListServiceResponse26.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType38 = null;
        controlConditionActivity37.ControlCleaned = controlCleanedType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        controlConditionActivity37.DateCleaned = instant41;
        timeAlignedDataServiceRequest36.QueryFrom = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse26.setNextToken(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest46 = ratingCurveListServiceRequest23.setQueryTo(instant41);
        java.time.Instant instant47 = ratingCurveListServiceRequest46.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse21.setNextToken(instant47);
        getExportSamplingLocations17.StartModificationTime = instant47;
        java.time.Instant instant50 = getExportSamplingLocations17.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity51 = crossSectionSurveyActivity14.setEndTime(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod52 = locationMonitoringMethod0.setLastModifiedUtc(instant50);
        java.lang.String str53 = locationMonitoringMethod0.getMethodCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod55 = locationMonitoringMethod0.setModel("PT87591240H");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNull(locationDescriptionList22);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity51);
        org.junit.Assert.assertNotNull(locationMonitoringMethod52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locationMonitoringMethod55);
    }

    @Test
    public void test41598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41598");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment0.ContentType = "'.'SSSSSSS";
        java.lang.String str3 = attachment0.Longitude;
        java.lang.String str4 = attachment0.Latitude;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment6 = attachment0.setFileName("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull7 = attachment0.getAuditAttributes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(attachment6);
        org.junit.Assert.assertNull(auditAttributesFull7);
    }

    @Test
    public void test41599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41599");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList5 = standardDefinition4.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = standardDefinition4.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition8 = standardDefinition4.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard11 = postStandard9.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard13 = postStandard11.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList15, observationStandardArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard17 = postStandard13.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition18 = standardDefinition4.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList15);
        java.lang.Boolean boolean19 = standardDefinition4.getActive();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition21 = standardDefinition4.setCustomId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.String str22 = standardDefinition4.CustomId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList23 = standardDefinition4.ObservationStandards;
        java.lang.String str24 = standardDefinition4.getIssuingOrganization();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition26 = standardDefinition4.setDescription("");
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(samplingLocationSimpleList5);
        org.junit.Assert.assertNull(interval6);
        org.junit.Assert.assertNotNull(standardDefinition8);
        org.junit.Assert.assertNotNull(postStandard11);
        org.junit.Assert.assertNotNull(postStandard13);
        org.junit.Assert.assertNotNull(observationStandardArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postStandard17);
        org.junit.Assert.assertNotNull(standardDefinition18);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
        org.junit.Assert.assertNotNull(standardDefinition21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****" + "'", str22, "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertNotNull(observationStandardList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(standardDefinition26);
    }

    @Test
    public void test41600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41600");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList3 = getChartDataV2_2.getProjectIds();
        java.util.List<java.lang.String> strList4 = getChartDataV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.Sort;
        deleteFieldVisits5.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_9.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.getMedia();
        java.time.Instant instant28 = getObservationsV2_26.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_26.setProjectIds((java.util.List<java.lang.String>) strList32);
        deleteFieldVisits5.Search = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_37 = getChartDataV2_2.setSpecimenIds((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList39 = getFieldVisits38.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        java.util.ArrayList<java.lang.String> strList48 = putLocationTags47.TagUniqueIds;
        getFieldVisits38.ScheduleIds = strList48;
        java.lang.Integer int50 = getFieldVisits38.Limit;
        java.util.List<java.lang.String> strList51 = getFieldVisits38.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        getFieldVisits38.Search = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_37.setCollectionMethodIds((java.util.List<java.lang.String>) strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_60 = getObservationExportIIV2_0.setIds((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList61 = getObservationExportIIV2_60.getLabReportIds();
        java.lang.String str62 = getObservationExportIIV2_60.ActivityCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_64 = getObservationExportIIV2_60.setMinNumericResultValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_66 = getObservationExportIIV2_64.setMinNumericResultValue((java.lang.Double) 0.0d);
        getObservationExportIIV2_66.NumericResultValue = (-1.0d);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNotNull(getChartDataV2_37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_64);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_66);
    }

    @Test
    public void test41601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41601");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int3 = searchResultAttachment0.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList4 = searchResultAttachment0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] attachmentArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>) attachmentList7, attachmentArray6);
        searchResultAttachment5.DomainObjects = attachmentList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList10 = searchResultAttachment5.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment11 = searchResultAttachment0.setDomainObjects(attachmentList10);
        searchResultAttachment0.Cursor = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment15 = searchResultAttachment0.setCursor("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment17 = searchResultAttachment15.setCursor("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment19 = searchResultAttachment15.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment20.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int23 = searchResultAttachment20.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList24 = searchResultAttachment20.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] attachmentArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>) attachmentList27, attachmentArray26);
        searchResultAttachment25.DomainObjects = attachmentList27;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList30 = searchResultAttachment25.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment31 = searchResultAttachment20.setDomainObjects(attachmentList30);
        searchResultAttachment20.Cursor = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment35 = searchResultAttachment20.setCursor("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment37 = searchResultAttachment35.setCursor("9999-12-31T23:59:59.9999999Z");
        java.lang.Integer int38 = searchResultAttachment37.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment40 = searchResultAttachment37.setCursor("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Integer int41 = searchResultAttachment37.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment42.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        searchResultAttachment42.Cursor = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment47.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] attachmentArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>) attachmentList52, attachmentArray51);
        searchResultAttachment50.DomainObjects = attachmentList52;
        searchResultAttachment47.DomainObjects = attachmentList52;
        searchResultAttachment42.DomainObjects = attachmentList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment57 = searchResultAttachment37.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>) attachmentList52);
        searchResultAttachment15.DomainObjects = attachmentList52;
        java.lang.String str59 = searchResultAttachment15.Cursor;
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(attachmentList4);
        org.junit.Assert.assertNotNull(attachmentArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(attachmentList10);
        org.junit.Assert.assertNotNull(searchResultAttachment11);
        org.junit.Assert.assertNotNull(searchResultAttachment15);
        org.junit.Assert.assertNotNull(searchResultAttachment17);
        org.junit.Assert.assertNotNull(searchResultAttachment19);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(attachmentList24);
        org.junit.Assert.assertNotNull(attachmentArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(attachmentList30);
        org.junit.Assert.assertNotNull(searchResultAttachment31);
        org.junit.Assert.assertNotNull(searchResultAttachment35);
        org.junit.Assert.assertNotNull(searchResultAttachment37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(searchResultAttachment40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(attachmentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(searchResultAttachment57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str59, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test41602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41602");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod();
        java.lang.String str1 = deleteLabAnalysisMethod0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod3 = deleteLabAnalysisMethod0.setId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod5 = deleteLabAnalysisMethod0.setId("/AQUARIUS");
        deleteLabAnalysisMethod5.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod9 = deleteLabAnalysisMethod5.setId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteLabAnalysisMethod deleteLabAnalysisMethod11 = deleteLabAnalysisMethod5.setId("/api");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteLabAnalysisMethod3);
        org.junit.Assert.assertNotNull(deleteLabAnalysisMethod5);
        org.junit.Assert.assertNotNull(deleteLabAnalysisMethod9);
        org.junit.Assert.assertNotNull(deleteLabAnalysisMethod11);
    }

    @Test
    public void test41603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41603");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        location0.Elevation = 100.0d;
    }

    @Test
    public void test41604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41604");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setSystemCode(unitGroupSystemCodeType1);
        java.lang.String str3 = putUnitGroupWithUnit2.Id;
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test41605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41605");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon18.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str21 = putTaxon18.getComment();
        putTaxon18.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType25 = postObservedProperty24.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation27.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setCategoricalResult(categoricalResult30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33, importHistoryEventSimpleArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation27.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        observedProperty26.ImportHistoryEventSimples = importHistoryEventSimpleList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = postObservedProperty24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon38 = putTaxon18.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon39 = putTaxon17.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon41 = putTaxon39.setSource("http");
        java.lang.String str42 = putTaxon39.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon44 = putTaxon39.setItisComment("MaxInstant");
        java.lang.String str45 = putTaxon44.Comment;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(analysisType25);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(postObservedProperty37);
        org.junit.Assert.assertNotNull(putTaxon38);
        org.junit.Assert.assertNotNull(putTaxon39);
        org.junit.Assert.assertNotNull(putTaxon41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(putTaxon44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test41606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41606");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = importSummarySpecimen2.ImportJobErrors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen5 = importSummarySpecimen2.setSuccessCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList6 = importSummarySpecimen5.ImportItems;
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNotNull(importSummarySpecimen5);
        org.junit.Assert.assertNull(importItemSpecimenList6);
    }

    @Test
    public void test41607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41607");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime1 = fieldTripBasic0.getEndTime();
        java.lang.String str2 = fieldTripBasic0.CustomId;
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic4 = fieldTripBasic0.setStartTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = fieldTripBasic4.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = fieldTripBasic4.AuditAttributes;
        fieldTripBasic4.Participants = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic10 = fieldTripBasic4.setCustomId("9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(fieldTripBasic4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(fieldTripBasic10);
    }

    @Test
    public void test41608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41608");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset();
        java.lang.Double double1 = postBaseStandardReferenceDatumOffset0.OffsetToBaseReference;
        java.lang.Double double2 = postBaseStandardReferenceDatumOffset0.getUncertainty();
        java.lang.Object obj3 = postBaseStandardReferenceDatumOffset0.getResponseType();
        java.lang.Object obj4 = postBaseStandardReferenceDatumOffset0.getResponseType();
        java.lang.String str5 = postBaseStandardReferenceDatumOffset0.getStandardIdentifier();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test41609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41609");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem();
        putFixedDropDownListItem0.DropDownListId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem4 = putFixedDropDownListItem0.setId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem6 = putFixedDropDownListItem4.setDisplayName("/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(putFixedDropDownListItem4);
        org.junit.Assert.assertNotNull(putFixedDropDownListItem6);
    }

    @Test
    public void test41610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41610");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str1 = levelSurveyMeasurement0.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = levelSurveyMeasurement0.MeasuredElevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = levelSurveyMeasurement0.getMeasuredElevation();
        java.time.Instant instant4 = levelSurveyMeasurement0.MeasurementTime;
        java.lang.String str5 = levelSurveyMeasurement0.getReferencePointUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str7 = pointVelocityDischargeActivity6.getModel();
        java.lang.String str8 = pointVelocityDischargeActivity6.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = null;
        pointVelocityDischargeActivity6.Width = quantityWithDisplay9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType11 = null;
        pointVelocityDischargeActivity6.StartPoint = startPointType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = pointVelocityDischargeActivity6.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        pointVelocityDischargeActivity6.MeterInspectedAfter = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity18 = pointVelocityDischargeActivity6.setSoftwareVersion("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity20 = pointVelocityDischargeActivity6.setSerialNumber("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity23 = pointVelocityDischargeActivity21.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity21.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = pointVelocityDischargeActivity21.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = pointVelocityDischargeActivity27.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay31 = null;
        crossSectionPoint30.Distance = quantityWithDisplay31;
        crossSectionPoint30.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay35 = crossSectionPoint30.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint37 = crossSectionPoint30.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay38 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint39 = crossSectionPoint37.setElevation(quantityWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        crossSectionPoint39.Depth = quantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint39.Depth = datumConvertedQuantityWithDisplay42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = crossSectionPoint39.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity27.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity46 = pointVelocityDischargeActivity20.setDistanceToMeter(quantityWithDisplay44);
        levelSurveyMeasurement0.MeasuredElevation = quantityWithDisplay44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement49 = levelSurveyMeasurement0.setReferencePointUniqueId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading52 = fieldVisitReading50.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading52.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading56 = fieldVisitReading52.setSerialNumber("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList58 = fieldVisitReading57.DatumConvertedValues;
        fieldVisitReading57.SerialNumber = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay62 = volumetricDischargeReading61.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck65 = calibrationCheck63.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = doubleWithDisplay66.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str69 = doubleWithDisplay68.getDisplay();
        calibrationCheck65.Difference = doubleWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity73 = pointVelocityDischargeActivity71.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity71.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity77 = pointVelocityDischargeActivity71.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList78 = pointVelocityDischargeActivity77.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity77.DistanceToMeter = datumConvertedQuantityWithDisplay79;
        calibrationCheck65.Standard = datumConvertedQuantityWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading82 = volumetricDischargeReading61.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay79);
        fieldVisitReading57.AdjustmentAmount = datumConvertedQuantityWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading84 = fieldVisitReading52.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement85 = levelSurveyMeasurement0.setMeasuredElevation((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay79);
        levelSurveyMeasurement0.ReferencePointUniqueId = "multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity14);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity18);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity20);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity23);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity27);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity29);
        org.junit.Assert.assertNull(quantityWithDisplay35);
        org.junit.Assert.assertNotNull(crossSectionPoint37);
        org.junit.Assert.assertNotNull(crossSectionPoint39);
        org.junit.Assert.assertNotNull(quantityWithDisplay44);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity46);
        org.junit.Assert.assertNotNull(levelSurveyMeasurement49);
        org.junit.Assert.assertNotNull(fieldVisitReading52);
        org.junit.Assert.assertNotNull(fieldVisitReading56);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList58);
        org.junit.Assert.assertNull(doubleWithDisplay62);
        org.junit.Assert.assertNotNull(calibrationCheck65);
        org.junit.Assert.assertNotNull(doubleWithDisplay68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity73);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity77);
        org.junit.Assert.assertNull(verticalList78);
        org.junit.Assert.assertNotNull(volumetricDischargeReading82);
        org.junit.Assert.assertNotNull(fieldVisitReading84);
        org.junit.Assert.assertNotNull(levelSurveyMeasurement85);
    }

    @Test
    public void test41611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41611");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2();
        java.lang.String str1 = postObservationImportV2_0.getFileType();
        java.lang.Boolean boolean2 = postObservationImportV2_0.getLinkFieldVisitsForNewObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_4 = postObservationImportV2_0.setFileType("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_6 = postObservationImportV2_4.setTimeZoneOffset("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationImportV2 postObservationImportV2_8 = postObservationImportV2_6.setFileType("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.Boolean boolean9 = postObservationImportV2_6.LinkFieldVisitsForNewObservations;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(postObservationImportV2_4);
        org.junit.Assert.assertNotNull(postObservationImportV2_6);
        org.junit.Assert.assertNotNull(postObservationImportV2_8);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test41612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41612");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant1 = fieldVisitDescriptionListServiceRequest0.QueryTo;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str3 = getActivities2.getCustomId();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities5 = getActivities2.setFromStartTime(instant4);
        java.time.Instant instant6 = getActivities5.FromStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest7 = fieldVisitDescriptionListServiceRequest0.setQueryFrom(instant6);
        java.time.Instant instant8 = fieldVisitDescriptionListServiceRequest7.getChangesSinceToken();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(getActivities5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest7);
        org.junit.Assert.assertNull(instant8);
    }

    @Test
    public void test41613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41613");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        java.lang.String str3 = monitoringMethod0.ParameterUniqueId;
        java.lang.String str4 = monitoringMethod0.RoundingSpec;
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS" + "'", str3, "/AQUARIUS");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test41614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41614");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.time.OffsetDateTime offsetDateTime6 = fieldVisit5.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_7 = postObservationV2_2.setFieldVisit(fieldVisit5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium8 = postObservationV2_7.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str10 = labResultDetails9.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails9.setLaboratory(laboratory11);
        java.time.OffsetDateTime offsetDateTime13 = null;
        labResultDetails9.DatePrepared = offsetDateTime13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport15 = null;
        labResultDetails9.LabReport = labReport15;
        labResultDetails9.QualityFlag = "/AQUARIUS/Provisioning/v1";
        postObservationV2_7.LabResultDetails = labResultDetails9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport20 = labResultDetails9.LabReport;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory21 = labResultDetails9.Laboratory;
        java.time.OffsetDateTime offsetDateTime22 = labResultDetails9.DateReceived;
        java.time.OffsetDateTime offsetDateTime23 = labResultDetails9.DatePrepared;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(postObservationV2_7);
        org.junit.Assert.assertNull(medium8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNull(labReport20);
        org.junit.Assert.assertNull(laboratory21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(offsetDateTime23);
    }

    @Test
    public void test41615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41615");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.lang.Double double1 = postReferencePoint0.Latitude;
        org.junit.Assert.assertNull(double1);
    }

    @Test
    public void test41616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41616");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str3 = referencePointPeriod2.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase5 = referencePointPeriod2.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod2.Uncertainty = 10.0d;
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase9 = referencePointPeriod2.setValidFrom(instant8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        java.util.List<java.lang.String> strList17 = getObservationsV2_10.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        getObservationsV2_10.StartResultTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.ActivityIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setCollectionMethodIds((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary53.Reviewer = "";
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary53.MeasurementTime = instant56;
        postRecurringReport52.NextGenerationDate = instant56;
        java.time.Instant instant59 = postRecurringReport52.getNextGenerationDate();
        java.lang.String str60 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant59);
        metadataChangeTransactionListServiceRequest51.QueryFrom = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest62 = downchainProcessorListByRatingModelServiceRequest50.setQueryTo(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest64 = downchainProcessorListByRatingModelServiceRequest50.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant66 = qualifier65.DateApplied;
        java.lang.String str67 = qualifier65.User;
        java.lang.String str68 = qualifier65.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj70 = timeAlignedDataServiceRequest69.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant72 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse71.setNextToken(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest74 = timeAlignedDataServiceRequest69.setQueryFrom(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier75 = qualifier65.setDateApplied(instant72);
        java.time.Instant instant76 = qualifier75.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest77 = downchainProcessorListByRatingModelServiceRequest50.setQueryFrom(instant76);
        java.time.Instant instant78 = downchainProcessorListByRatingModelServiceRequest77.getQueryFrom();
        getObservationsV2_10.StartResultTime = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase80 = referencePointPeriodBase9.setValidFrom(instant78);
        referencePoint0.PrimarySinceDate = instant78;
        java.time.Instant instant82 = referencePoint0.getPrimarySinceDate();
        java.time.Instant instant83 = referencePoint0.getDecommissionedDate();
        java.lang.String str84 = referencePoint0.Description;
        java.lang.String str85 = referencePoint0.getUniqueId();
        referencePoint0.Description = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(referencePointPeriodBase5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(referencePointPeriodBase9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str60, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest62);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest64);
        org.junit.Assert.assertNull(instant66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest74);
        org.junit.Assert.assertNotNull(qualifier75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(referencePointPeriodBase80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNull(instant83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test41617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41617");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest0.ApplyShifts = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList8 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList8, doubleArray7);
        ratingModelOutputValuesServiceResponse3.OutputValues = doubleList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest11 = ratingModelOutputValuesServiceRequest0.setInputValues(doubleList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest13 = ratingModelOutputValuesServiceRequest11.setRatingModelIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest ratingModelInputValuesServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList20 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList20, doubleArray19);
        ratingModelOutputValuesServiceResponse15.OutputValues = doubleList20;
        ratingModelInputValuesServiceRequest14.OutputValues = doubleList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest24 = ratingModelOutputValuesServiceRequest13.setInputValues(doubleList20);
        java.lang.Object obj25 = ratingModelOutputValuesServiceRequest24.getResponseType();
        java.time.Instant instant26 = ratingModelOutputValuesServiceRequest24.EffectiveTime;
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest11);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelOutputValuesServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelOutputValuesServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelOutputValuesServiceResponse");
        org.junit.Assert.assertNull(instant26);
    }

    @Test
    public void test41618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41618");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        java.lang.String str36 = getGroupedObservationsV2_26.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField40 = extendedAttributeField38.setDisplayName("");
        java.lang.Boolean boolean41 = extendedAttributeField40.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj43 = timeAlignedDataServiceRequest42.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        getObservationsV2_50.DepthUnitCustomId = "hi!";
        java.lang.String str53 = getObservationsV2_50.CustomId;
        java.util.List<java.lang.String> strList54 = getObservationsV2_50.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_50.setMedia((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str72 = getObservationsV2_71.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        getObservationsV2_71.ProjectIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_50.setObservedPropertyIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest81 = timeAlignedDataServiceRequest42.setTimeSeriesOutputUnitIds(strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField82 = extendedAttributeField40.setValueOptions((java.util.List<java.lang.String>) strList76);
        putBulkEditResultGradesV2_37.AnalysisMethodSimpleIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_85 = putBulkEditResultGradesV2_37.setNumericResultValue((java.lang.Double) 100.0d);
        java.lang.String str86 = putBulkEditResultGradesV2_37.FieldVisitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType87 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_88 = putBulkEditResultGradesV2_37.setSampleFraction(sampleFractionType87);
        getGroupedObservationsV2_26.SampleFraction = sampleFractionType87;
        getGroupedObservationsV2_26.FilterId = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "/AQUARIUS" + "'", str36, "/AQUARIUS");
        org.junit.Assert.assertNotNull(extendedAttributeField40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest81);
        org.junit.Assert.assertNotNull(extendedAttributeField82);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + sampleFractionType87 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED + "'", sampleFractionType87.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED));
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_88);
    }

    @Test
    public void test41619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41619");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits();
        getUnitGroupWithUnits0.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str3 = getUnitGroupWithUnits0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType getUnitGroupWithUnitsSystemCodeType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits5 = getUnitGroupWithUnits0.setSystemCode(getUnitGroupWithUnitsSystemCodeType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType getUnitGroupWithUnitsSystemCodeType6 = getUnitGroupWithUnits0.SystemCode;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str3, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertTrue("'" + getUnitGroupWithUnitsSystemCodeType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH + "'", getUnitGroupWithUnitsSystemCodeType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroupWithUnits5);
        org.junit.Assert.assertTrue("'" + getUnitGroupWithUnitsSystemCodeType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH + "'", getUnitGroupWithUnitsSystemCodeType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH));
    }

    @Test
    public void test41620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41620");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin();
        java.lang.String str1 = postReportPlugin0.AssemblyName;
        java.lang.String str2 = postReportPlugin0.FolderName;
        java.lang.String str3 = postReportPlugin0.getFolderName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile4 = postReportPlugin0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin6 = postReportPlugin0.setFolderName("****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin8 = postReportPlugin0.setFolderName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(iHttpFile4);
        org.junit.Assert.assertNotNull(postReportPlugin6);
        org.junit.Assert.assertNotNull(postReportPlugin8);
    }

    @Test
    public void test41621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41621");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation6.setResultGrade(resultGrade11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics13 = observation6.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult14 = observation6.getPlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation15.CustomId = "hi!";
        java.lang.String str18 = observation15.CustomId;
        observation15.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation15.setNumericResult(numericResult21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType23 = observation22.getQualityControlType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue25 = categoricalResult24.getFixedValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult27 = categoricalResult24.setType("hi!");
        java.lang.String str28 = categoricalResult24.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue29 = null;
        categoricalResult24.FixedValue = categoricalValue29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation22.setCategoricalResult(categoricalResult24);
        observation6.CategoricalResult = categoricalResult24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen33.Activity = activity34;
        java.lang.String str36 = activity34.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType37 = activity34.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device40 = device38.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device42 = device40.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str43 = device40.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity44 = activity34.setDevice(device40);
        observation6.Device = device40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device47 = device40.setCustomId("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNull(observationStatistics13);
        org.junit.Assert.assertNull(plannedFieldResult14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNull(qualityControlType23);
        org.junit.Assert.assertNull(categoricalValue25);
        org.junit.Assert.assertNotNull(categoricalResult27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(activityType37);
        org.junit.Assert.assertNotNull(device40);
        org.junit.Assert.assertNotNull(device42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str43, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity44);
        org.junit.Assert.assertNotNull(device47);
    }

    @Test
    public void test41622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41622");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity4.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity4.setPlannedActivity(plannedActivity7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType9 = postActivity4.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate11.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList16 = specimenTemplate15.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = specimenTemplate17.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList22 = specimenTemplate21.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate11, specimenTemplate14, specimenTemplate15, specimenTemplate19, specimenTemplate20, specimenTemplate21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList24, specimenTemplateArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate26 = postFieldVisitActivityWithTemplate10.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate28 = postFieldVisitActivityWithTemplate26.setCollectionMethod(collectionMethod27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity29 = postActivity4.setCollectionMethod(collectionMethod27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity4.Medium = medium30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = medium30.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType33 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.AIR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium34 = medium30.setSystemCode(mediumSystemCodeType33);
        activityWithDetails0.Medium = medium34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_38 = postObservationV2_36.setLabInstruction(labInstruction37);
        java.lang.String str39 = postObservationV2_38.MediumSubdivision;
        java.lang.String str40 = postObservationV2_38.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_38.DataClassification = dataClassificationType41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = labResultDetails43.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails47 = labResultDetails43.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails49 = labResultDetails43.setAuditAttributes(auditAttributes48);
        postObservationV2_38.LabResultDetails = labResultDetails49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction51 = postObservationV2_38.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str53 = analysisMethodSimple52.getId();
        java.lang.String str54 = analysisMethodSimple52.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_55 = postObservationV2_38.setAnalysisMethod(analysisMethodSimple52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.time.OffsetDateTime offsetDateTime57 = fieldVisit56.getStartTime();
        java.time.OffsetDateTime offsetDateTime58 = fieldVisit56.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_59 = postObservationV2_38.setFieldVisit(fieldVisit56);
        java.time.OffsetDateTime offsetDateTime60 = null;
        fieldVisit56.EndTime = offsetDateTime60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails62 = activityWithDetails0.setFieldVisit(fieldVisit56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList64 = fieldVisit63.Attachments;
        java.time.OffsetDateTime offsetDateTime65 = null;
        fieldVisit63.EndTime = offsetDateTime65;
        java.lang.String str67 = fieldVisit63.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit69 = fieldVisit63.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan70.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType73 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan70.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup75 = samplingPlan70.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = samplingPlan70.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup77 = samplingPlan70.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan79 = samplingPlan70.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit80 = fieldVisit69.setSamplingPlan(samplingPlan70);
        fieldVisit56.SamplingPlan = samplingPlan70;
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNull(activityType9);
        org.junit.Assert.assertNull(labInstructionTemplateList16);
        org.junit.Assert.assertNotNull(specimenTemplate19);
        org.junit.Assert.assertNull(labInstructionTemplateList22);
        org.junit.Assert.assertNotNull(specimenTemplateArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate26);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate28);
        org.junit.Assert.assertNotNull(postActivity29);
        org.junit.Assert.assertNull(auditAttributes32);
        org.junit.Assert.assertTrue("'" + mediumSystemCodeType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.AIR + "'", mediumSystemCodeType33.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.AIR));
        org.junit.Assert.assertNotNull(medium34);
        org.junit.Assert.assertNotNull(postObservationV2_38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + dataClassificationType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails45);
        org.junit.Assert.assertNotNull(labResultDetails47);
        org.junit.Assert.assertNotNull(labResultDetails49);
        org.junit.Assert.assertNull(labInstruction51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(postObservationV2_55);
        org.junit.Assert.assertNull(offsetDateTime57);
        org.junit.Assert.assertNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(postObservationV2_59);
        org.junit.Assert.assertNotNull(activityWithDetails62);
        org.junit.Assert.assertNull(domainObjectAttachmentList64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(fieldVisit69);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType73 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType73.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup75);
        org.junit.Assert.assertNull(auditAttributes76);
        org.junit.Assert.assertNull(samplingLocationGroup77);
        org.junit.Assert.assertNotNull(samplingPlan79);
        org.junit.Assert.assertNotNull(fieldVisit80);
    }

    @Test
    public void test41623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41623");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setParameter("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore;
        fieldVisitReading2.ReadingType = fieldVisitReadingType5;
        java.util.ArrayList<java.lang.String> strList7 = fieldVisitReading2.getQualifiers();
        java.lang.Integer int8 = fieldVisitReading2.getGradeCode();
        java.lang.String str9 = fieldVisitReading2.getControlCondition();
        java.lang.String str10 = fieldVisitReading2.FieldVisitIdentifier;
        java.time.Instant instant11 = fieldVisitReading2.getTime();
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore + "'", fieldVisitReadingType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore));
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(instant11);
    }

    @Test
    public void test41624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41624");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary0.UpdateCount = (-1);
        java.lang.Integer int3 = observationImportSummary0.ExpectedCount;
        java.lang.String str4 = observationImportSummary0.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList6, importItemObservationArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary8 = observationImportSummary0.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList6);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList9 = observationImportSummary0.ImportItems;
        java.lang.Integer int10 = observationImportSummary0.getSkippedCount();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(importItemObservationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observationImportSummary8);
        org.junit.Assert.assertNotNull(importItemObservationList9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test41625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41625");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse4 = postLocationAttachmentResponse0.setComments("");
        java.lang.String str5 = postLocationAttachmentResponse0.getFileName();
        postLocationAttachmentResponse0.Url = "****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test41626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41626");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant3 = crossSectionSurveyActivity2.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str5 = pointVelocityDischargeActivity4.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity4.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = pointVelocityDischargeActivity4.setSoftwareVersion("");
        java.lang.String str10 = pointVelocityDischargeActivity9.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity9.StartPoint = startPointType11;
        crossSectionSurveyActivity2.StartingPoint = startPointType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        crossSectionPoint14.Distance = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint18 = crossSectionPoint14.setElevation(quantityWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint19.Distance = quantityWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay22 = null;
        crossSectionPoint19.Distance = quantityWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = null;
        crossSectionPoint24.Distance = quantityWithDisplay25;
        crossSectionPoint24.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = null;
        crossSectionPoint24.Depth = quantityWithDisplay29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay32 = null;
        crossSectionPoint31.Distance = quantityWithDisplay32;
        crossSectionPoint31.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = crossSectionPoint31.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint38 = crossSectionPoint31.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        crossSectionPoint39.Distance = quantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = null;
        crossSectionPoint39.Distance = quantityWithDisplay42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = null;
        crossSectionPoint44.Distance = quantityWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        crossSectionPoint47.Distance = quantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint51 = crossSectionPoint47.setElevation(quantityWithDisplay50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        crossSectionPoint53.Distance = quantityWithDisplay54;
        crossSectionPoint53.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = crossSectionPoint53.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = crossSectionPoint53.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint62 = crossSectionPoint53.setComments("2021.4.62.0");
        java.lang.String str63 = crossSectionPoint62.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] crossSectionPointArray64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] { crossSectionPoint14, crossSectionPoint19, crossSectionPoint24, crossSectionPoint31, crossSectionPoint39, crossSectionPoint44, crossSectionPoint47, crossSectionPoint52, crossSectionPoint62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint> crossSectionPointList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>) crossSectionPointList65, crossSectionPointArray64);
        crossSectionSurveyActivity2.CrossSectionPoints = crossSectionPointList65;
        crossSectionSurveyActivity0.CrossSectionPoints = crossSectionPointList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity70 = crossSectionSurveyActivity0.setParty("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity72 = crossSectionSurveyActivity0.setChannel("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType73 = crossSectionSurveyActivity72.getStartingPoint();
        java.lang.String str74 = crossSectionSurveyActivity72.Comments;
        java.lang.String str75 = crossSectionSurveyActivity72.RelativeLocation;
        java.lang.String str76 = crossSectionSurveyActivity72.getRelativeLocation();
        java.lang.String str77 = crossSectionSurveyActivity72.getParty();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + startPointType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(crossSectionPoint18);
        org.junit.Assert.assertNull(quantityWithDisplay36);
        org.junit.Assert.assertNotNull(crossSectionPoint38);
        org.junit.Assert.assertNotNull(crossSectionPoint51);
        org.junit.Assert.assertNull(quantityWithDisplay58);
        org.junit.Assert.assertNotNull(crossSectionPoint60);
        org.junit.Assert.assertNotNull(crossSectionPoint62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2021.4.62.0" + "'", str63, "2021.4.62.0");
        org.junit.Assert.assertNotNull(crossSectionPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity70);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity72);
        org.junit.Assert.assertNull(startPointType73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "'.'SSSSSSS" + "'", str77, "'.'SSSSSSS");
    }

    @Test
    public void test41627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41627");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary2 = observationImportSummary0.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Integer int3 = observationImportSummary2.UpdateCount;
        java.lang.Integer int4 = observationImportSummary2.UpdateCount;
        java.lang.Integer int5 = observationImportSummary2.SuccessCount;
        java.lang.Integer int6 = observationImportSummary2.getNewCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList7 = observationImportSummary2.ImportJobErrors;
        observationImportSummary2.ExpectedCount = 4;
        java.lang.Integer int10 = observationImportSummary2.UpdateCount;
        java.lang.Integer int11 = observationImportSummary2.getErrorCount();
        org.junit.Assert.assertNotNull(observationImportSummary2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importErrorList7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test41628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41628");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        java.lang.String str2 = dischargeSummary0.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = dischargeSummary3.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = dischargeSummary3.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = dischargeSummary3.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = doubleWithDisplay7.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary3.setDurationInHours(doubleWithDisplay7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType gageHeightCalculationType11 = dischargeSummary10.GageHeightCalculation;
        dischargeSummary10.QualityAssuranceComments = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary16.DifferenceDuringVisit = doubleWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment19 = dischargeSummary16.getAdjustment();
        java.time.Instant instant20 = dischargeSummary16.getMeasurementEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType21 = dischargeSummary16.getBaseFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType24 = null;
        controlConditionActivity23.ControlCleaned = controlCleanedType24;
        java.lang.String str26 = controlConditionActivity23.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        controlConditionActivity23.DateCleaned = instant30;
        gageHeightReading22.ReadingTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = doubleWithDisplay34.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str37 = doubleWithDisplay36.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading38 = gageHeightReading22.setGageHeight(doubleWithDisplay36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary41.Reviewer = "";
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary41.MeasurementTime = instant44;
        postRecurringReport40.NextGenerationDate = instant44;
        java.time.Instant instant47 = postRecurringReport40.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset48 = statisticalDateTimeOffset39.setDateTimeOffset(instant47);
        gageHeightReading38.ReadingTime = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] gageHeightReadingArray50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] { gageHeightReading38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>) gageHeightReadingList51, gageHeightReadingArray50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary16.setGageHeightReadings(gageHeightReadingList51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary10.setGageHeightReadings(gageHeightReadingList51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary0.setGageHeightReadings(gageHeightReadingList51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = dischargeSummary56.getMeanGageHeight();
        java.lang.String str58 = dischargeSummary56.MeanGageHeightMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = dischargeSummary56.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = null;
        dischargeSummary56.AlternateRatingDischarge = quantityWithDisplay61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay63 = dischargeSummary56.DurationInHours;
        java.time.Instant instant64 = dischargeSummary56.getMeasurementTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMeasurementReasonType dischargeMeasurementReasonType65 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMeasurementReasonType.Routine;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary66 = dischargeSummary56.setDischargeMeasurementReason(dischargeMeasurementReasonType65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary67 = dischargeSummary0.setDischargeMeasurementReason(dischargeMeasurementReasonType65);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertNotNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNull(gageHeightCalculationType11);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNull(adjustment19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(baseFlowType21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(doubleWithDisplay36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(gageHeightReading38);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset48);
        org.junit.Assert.assertNotNull(gageHeightReadingArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNull(quantityWithDisplay57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(dischargeSummary60);
        org.junit.Assert.assertNull(doubleWithDisplay63);
        org.junit.Assert.assertNull(instant64);
        org.junit.Assert.assertTrue("'" + dischargeMeasurementReasonType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMeasurementReasonType.Routine + "'", dischargeMeasurementReasonType65.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMeasurementReasonType.Routine));
        org.junit.Assert.assertNotNull(dischargeSummary66);
        org.junit.Assert.assertNotNull(dischargeSummary67);
    }

    @Test
    public void test41629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41629");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 0.0d);
        vertical0.PercentageOfTotalDischarge = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType6 = vertical0.getFlowDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation7 = vertical0.getVelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = vertical0.getTaglinePosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical11 = vertical9.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = vertical11.getSegmentWidth();
        java.lang.Double double13 = vertical11.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        vertical14.EffectiveDepth = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical18 = vertical14.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = dischargeSummary19.setPublish((java.lang.Boolean) false);
        java.lang.String str22 = dischargeSummary21.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary23.Reviewer = "";
        dischargeSummary23.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary23.MeasurementGrade = measurementGradeType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary21.setMeasurementGrade(measurementGradeType28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity31.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity31.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity31.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList38 = pointVelocityDischargeActivity37.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity37.DistanceToMeter = datumConvertedQuantityWithDisplay39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary21.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical42 = vertical18.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical43 = vertical11.setTaglinePosition((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = vertical44.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical47 = vertical44.setSegmentDischarge(quantityWithDisplay46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition48 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown;
        vertical44.MeasurementCondition = measurementCondition48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical50 = vertical11.setMeasurementCondition(measurementCondition48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical51 = vertical0.setMeasurementCondition(measurementCondition48);
        vertical51.IsDischargeEstimated = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition54 = vertical51.getMeasurementCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double56 = openWaterData55.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = openWaterData55.getDistanceToMeter();
        openWaterData55.WetLineCorrection = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay60 = openWaterData55.DistanceToWaterSurface;
        vertical51.OpenWaterData = openWaterData55;
        vertical51.PercentageOfTotalDischarge = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str65 = activeMeterDetails64.SoftwareVersion;
        java.lang.String str66 = activeMeterDetails64.Manufacturer;
        java.lang.String str67 = activeMeterDetails64.getFirmwareVersion();
        java.lang.String str68 = activeMeterDetails64.SerialNumber;
        java.lang.String str69 = activeMeterDetails64.getFirmwareVersion();
        java.lang.String str70 = activeMeterDetails64.getConfiguration();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList71 = activeMeterDetails64.getMeterCalibrations();
        vertical51.CurrentMeter = activeMeterDetails64;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(flowDirectionType6);
        org.junit.Assert.assertNull(velocityObservation7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNotNull(vertical11);
        org.junit.Assert.assertNull(quantityWithDisplay12);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNotNull(vertical18);
        org.junit.Assert.assertNotNull(dischargeSummary21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + measurementGradeType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNull(verticalList38);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(vertical42);
        org.junit.Assert.assertNotNull(vertical43);
        org.junit.Assert.assertNull(quantityWithDisplay45);
        org.junit.Assert.assertNotNull(vertical47);
        org.junit.Assert.assertTrue("'" + measurementCondition48 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown + "'", measurementCondition48.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown));
        org.junit.Assert.assertNotNull(vertical50);
        org.junit.Assert.assertNotNull(vertical51);
        org.junit.Assert.assertTrue("'" + measurementCondition54 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown + "'", measurementCondition54.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown));
        org.junit.Assert.assertNull(double56);
        org.junit.Assert.assertNull(quantityWithDisplay57);
        org.junit.Assert.assertNull(quantityWithDisplay60);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(activeMeterCalibrationList71);
    }

    @Test
    public void test41630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41630");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        reportPlugin0.FolderName = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin0.setFolderName("2021.4.62.0");
        java.lang.String str7 = reportPlugin0.Version;
        java.lang.Boolean boolean8 = reportPlugin0.IsEnabled;
        reportPlugin0.AssemblyName = "****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test41631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41631");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList1 = unitGroupWithUnits0.Units;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList2 = unitGroupWithUnits0.getUnits();
        unitGroupWithUnits0.CustomId = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit5.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList10, plannedActivityArray9);
        putFieldVisit8.PlannedActivities = plannedActivityList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit13 = putFieldVisit5.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = labResultDetails16.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit19 = putFieldVisit5.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty20.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = putDetectioncondition23.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition26 = putDetectioncondition23.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity29 = samplingPlanPlannedActivity27.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = auditAttributes30.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity29.AuditAttributes = auditAttributes30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = samplingPlanPlannedActivity29.AuditAttributes;
        putDetectioncondition23.AuditAttributes = auditAttributes34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty36 = observedProperty20.setAuditAttributes(auditAttributes34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit5.setAuditAttributes(auditAttributes34);
        unitGroupWithUnits0.AuditAttributes = auditAttributes34;
        org.junit.Assert.assertNull(unitList1);
        org.junit.Assert.assertNull(unitList2);
        org.junit.Assert.assertNotNull(plannedActivityArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(putFieldVisit13);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(labResultDetails18);
        org.junit.Assert.assertNotNull(putFieldVisit19);
        org.junit.Assert.assertNull(auditAttributes24);
        org.junit.Assert.assertNotNull(putDetectioncondition26);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity29);
        org.junit.Assert.assertNotNull(auditAttributes32);
        org.junit.Assert.assertNotNull(auditAttributes34);
        org.junit.Assert.assertNotNull(observedProperty36);
        org.junit.Assert.assertNotNull(putFieldVisit37);
    }

    @Test
    public void test41632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41632");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest0.Value = "'.'SSSSSSS";
        java.lang.String str3 = applyTagRequest0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest5 = applyTagRequest0.setValue("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest7 = applyTagRequest0.setValue("0001-01-01T00:00:00.000Z");
        java.lang.String str8 = applyTagRequest0.UniqueId;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "'.'SSSSSSS" + "'", str3, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(applyTagRequest5);
        org.junit.Assert.assertNotNull(applyTagRequest7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test41633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41633");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = labInstruction0.setAnalysisMethod(analysisMethod1);
        java.lang.String str3 = labInstruction0.getAnalysisComment();
        java.lang.String str4 = labInstruction0.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = labInstruction0.setPreparationMethod("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = labInstruction6.setAnalysisComment("https");
        java.lang.String str9 = labInstruction8.getAnalysisComment();
        java.lang.String str10 = labInstruction8.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction13 = labInstruction11.setAnalysisMethod(analysisMethod12);
        java.lang.String str14 = labInstruction11.getAnalysisComment();
        java.lang.String str15 = labInstruction11.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction17 = labInstruction11.setPreparationMethod("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction19 = labInstruction17.setAnalysisComment("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod22 = importItemAnalysisMethod20.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod24 = importItemAnalysisMethod22.setRowId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = importItemAnalysisMethod24.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod27 = importItemAnalysisMethod24.setItem(analysisMethod26);
        java.lang.String str28 = importItemAnalysisMethod24.RowId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList29 = importItemAnalysisMethod24.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str31 = analysisMethod30.getName();
        analysisMethod30.MethodId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        importItemAnalysisMethod24.Item = analysisMethod30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = importItemAnalysisMethod24.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str37 = analysisMethod36.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList38 = analysisMethod36.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analysisMethod36.setDescription("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str41 = analysisMethod40.getName();
        importItemAnalysisMethod24.Item = analysisMethod40;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList43 = analysisMethod40.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = postDetectioncondition44.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition47 = postDetectioncondition44.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition44.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition51 = postDetectioncondition44.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition44.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj54 = postDetectioncondition44.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity57 = samplingPlanPlannedActivity55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = auditAttributes58.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity57.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition62 = postDetectioncondition44.setAuditAttributes(auditAttributes58);
        analysisMethod40.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction64 = labInstruction19.setAnalysisMethod(analysisMethod40);
        labInstruction8.AnalysisMethod = analysisMethod40;
        org.junit.Assert.assertNotNull(labInstruction2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(labInstruction6);
        org.junit.Assert.assertNotNull(labInstruction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "https" + "'", str9, "https");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "https" + "'", str10, "https");
        org.junit.Assert.assertNotNull(labInstruction13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(labInstruction17);
        org.junit.Assert.assertNotNull(labInstruction19);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod22);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "https" + "'", str28, "https");
        org.junit.Assert.assertNull(importChangeItemList29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(importHistoryEventSimpleList38);
        org.junit.Assert.assertNotNull(analysisMethod40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(importHistoryEventSimpleList43);
        org.junit.Assert.assertNull(auditAttributes45);
        org.junit.Assert.assertNotNull(postDetectioncondition47);
        org.junit.Assert.assertNotNull(postDetectioncondition51);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity57);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(postDetectioncondition62);
        org.junit.Assert.assertNotNull(labInstruction64);
    }

    @Test
    public void test41634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41634");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation0.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase4 = postLocation0.setLocationType("/AQUARIUS/Acquisition/v2");
        java.lang.String str5 = postLocation0.getElevationUnits();
        java.lang.Double double6 = postLocation0.getLongitude();
        java.lang.Double double7 = postLocation0.getElevation();
        java.lang.String str8 = postLocation0.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList9 = postLocation0.ExtendedAttributeValues;
        postLocation0.LocationName = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        postLocation0.Publish = false;
        org.junit.Assert.assertNotNull(locationBase4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(extendedAttributeValueList9);
    }

    @Test
    public void test41635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41635");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier2 = putQualifier0.setUniqueId("");
        java.lang.String str3 = putQualifier2.getPublicIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier5 = putQualifier2.setPublicIdentifier("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier7 = putQualifier2.setUniqueId("MinDuration");
        java.lang.String str8 = putQualifier7.getDisplayName();
        java.util.ArrayList<java.lang.String> strList9 = putQualifier7.getGroupIdentifiers();
        putQualifier7.PublicIdentifier = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNotNull(putQualifier2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putQualifier5);
        org.junit.Assert.assertNotNull(putQualifier7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test41636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41636");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity2 = gageHeightAtZeroFlowActivity0.setApplicableSince(instant1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity4 = gageHeightAtZeroFlowActivity2.setIsObserved((java.lang.Boolean) true);
        java.time.Instant instant5 = gageHeightAtZeroFlowActivity2.getApplicableSince();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity7 = gageHeightAtZeroFlowActivity2.setParty("multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity9 = gageHeightAtZeroFlowActivity7.setIsObserved((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity2);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity7);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity9);
    }

    @Test
    public void test41637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41637");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList1 = locationMonitoringMethod0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod3 = locationMonitoringMethod0.setParameterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod5 = locationMonitoringMethod3.setParameter("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = locationMonitoringMethod3.setSerialNumber("ZZZZZ");
        java.lang.String str8 = locationMonitoringMethod3.ParameterUniqueId;
        java.lang.String str9 = locationMonitoringMethod3.getParameterUniqueId();
        org.junit.Assert.assertNull(tagMetadataList1);
        org.junit.Assert.assertNotNull(locationMonitoringMethod3);
        org.junit.Assert.assertNotNull(locationMonitoringMethod5);
        org.junit.Assert.assertNotNull(locationMonitoringMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41638");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        putActivity5.PlannedActivity = plannedActivity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str14 = samplingContextTag13.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = samplingContextTag13.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag18 = samplingContextTag16.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str20 = samplingContextTag19.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        samplingContextTag21.AuditAttributes = auditAttributes23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str26 = samplingContextTag25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = samplingContextTag25.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag18, samplingContextTag19, samplingContextTag21, samplingContextTag28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30, samplingContextTagArray29);
        postActivity8.SamplingContextTags = samplingContextTagList30;
        putActivity5.SamplingContextTags = samplingContextTagList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity4.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str36 = collectionMethod35.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod38 = collectionMethod35.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity39 = postActivity4.setCollectionMethod(collectionMethod38);
        java.lang.String str40 = postActivity4.getSourceActivityId();
        java.lang.String str41 = postActivity4.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity42.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity46 = postActivity42.setPlannedActivity(plannedActivity45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType47 = postActivity42.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate49.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList54 = specimenTemplate53.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate57 = specimenTemplate55.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList60 = specimenTemplate59.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate49, specimenTemplate52, specimenTemplate53, specimenTemplate57, specimenTemplate58, specimenTemplate59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList62, specimenTemplateArray61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate64 = postFieldVisitActivityWithTemplate48.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate66 = postFieldVisitActivityWithTemplate64.setCollectionMethod(collectionMethod65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity67 = postActivity42.setCollectionMethod(collectionMethod65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity42.Medium = medium68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType70 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium71 = medium68.setSystemCode(mediumSystemCodeType70);
        postActivity4.Medium = medium71;
        postActivity4.Id = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity75 = postActivity4.getDepth();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(samplingContextTag16);
        org.junit.Assert.assertNotNull(samplingContextTag18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(samplingContextTag28);
        org.junit.Assert.assertNotNull(samplingContextTagArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(collectionMethod38);
        org.junit.Assert.assertNotNull(postActivity39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(postActivity46);
        org.junit.Assert.assertNull(activityType47);
        org.junit.Assert.assertNull(labInstructionTemplateList54);
        org.junit.Assert.assertNotNull(specimenTemplate57);
        org.junit.Assert.assertNull(labInstructionTemplateList60);
        org.junit.Assert.assertNotNull(specimenTemplateArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate64);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate66);
        org.junit.Assert.assertNotNull(postActivity67);
        org.junit.Assert.assertTrue("'" + mediumSystemCodeType70 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER + "'", mediumSystemCodeType70.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER));
        org.junit.Assert.assertNotNull(medium71);
        org.junit.Assert.assertNull(quantity75);
    }

    @Test
    public void test41639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41639");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant1 = timeSeriesDescription0.RawEndTime;
        org.junit.Assert.assertNull(instant1);
    }

    @Test
    public void test41640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41640");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Status status0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Status();
        java.lang.String str1 = status0.getReleaseName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Status status3 = status0.setReleaseName("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        java.lang.String str4 = status3.getReleaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(status3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****" + "'", str4, "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
    }

    @Test
    public void test41641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41641");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest();
        java.lang.String str1 = timeSeriesDescriptionServiceRequest0.ComputationIdentifier;
        java.lang.String str2 = timeSeriesDescriptionServiceRequest0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest4 = timeSeriesDescriptionServiceRequest0.setParameter("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        timeSeriesDescriptionServiceRequest4.Parameter = "MinDuration";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList7 = timeSeriesDescriptionServiceRequest4.ExtendedFilters;
        java.lang.String str8 = timeSeriesDescriptionServiceRequest4.getParameter();
        java.lang.Object obj9 = timeSeriesDescriptionServiceRequest4.getResponseType();
        java.lang.String str10 = timeSeriesDescriptionServiceRequest4.LocationIdentifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionServiceRequest4);
        org.junit.Assert.assertNull(extendedAttributeFilterList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MinDuration" + "'", str8, "MinDuration");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListServiceResponse");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test41642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41642");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean1 = completedWork0.isWaterQualitySampleTaken();
        completedWork0.WaterQualitySampleTaken = true;
        java.lang.Boolean boolean4 = completedWork0.WaterQualitySampleTaken;
        completedWork0.OtherSampleTaken = true;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
    }

    @Test
    public void test41643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41643");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime1 = postFilter0.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postFilter0.getAuditAttributes();
        postFilter0.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime5 = postFilter0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter6.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList10, samplingLocationArray9);
        postFilter6.SamplingLocations = samplingLocationList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter13 = postFilter0.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList10);
        java.lang.Object obj14 = postFilter13.getResponseType();
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter16 = postFilter13.setEndTime(offsetDateTime15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter19 = filter17.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter21 = filter19.setId("POST");
        filter21.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList24 = filter21.ObservedProperties;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList25 = filter21.ObservedProperties;
        java.lang.String str26 = filter21.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter29 = filter27.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter31 = filter29.setId("POST");
        filter31.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList34 = filter31.ObservedProperties;
        filter31.Description = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime38 = postFilter37.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = postFilter37.getAuditAttributes();
        postFilter37.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime42 = postFilter37.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter43.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList47, samplingLocationArray46);
        postFilter43.SamplingLocations = samplingLocationList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter50 = postFilter37.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList47);
        filter31.SamplingLocations = samplingLocationList47;
        java.time.OffsetDateTime offsetDateTime52 = filter31.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter55 = filter53.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter57 = filter55.setId("POST");
        filter57.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList60 = filter57.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter61.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList65, samplingLocationArray64);
        postFilter61.SamplingLocations = samplingLocationList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter68 = filter57.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList65);
        filter31.SamplingLocations = samplingLocationList65;
        filter21.SamplingLocations = samplingLocationList65;
        postFilter13.SamplingLocations = samplingLocationList65;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList72 = postFilter13.ObservedProperties;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(samplingLocationArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(postFilter13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertNotNull(postFilter16);
        org.junit.Assert.assertNotNull(filter19);
        org.junit.Assert.assertNotNull(filter21);
        org.junit.Assert.assertNull(observedPropertyList24);
        org.junit.Assert.assertNull(observedPropertyList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(filter29);
        org.junit.Assert.assertNotNull(filter31);
        org.junit.Assert.assertNull(observedPropertyList34);
        org.junit.Assert.assertNull(offsetDateTime38);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(samplingLocationArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(postFilter50);
        org.junit.Assert.assertNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(filter55);
        org.junit.Assert.assertNotNull(filter57);
        org.junit.Assert.assertNull(observedPropertyList60);
        org.junit.Assert.assertNotNull(samplingLocationArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(filter68);
        org.junit.Assert.assertNull(observedPropertyList72);
    }

    @Test
    public void test41644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41644");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList2, adcpDischargeActivityArray1);
        dischargeActivity0.AdcpDischargeActivities = adcpDischargeActivityList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList6, engineeredStructureDischargeActivityArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity8 = dischargeActivity0.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList10, otherMethodDischargeActivityArray9);
        dischargeActivity0.OtherMethodDischargeActivities = otherMethodDischargeActivityList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] volumetricDischargeActivityArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity> volumetricDischargeActivityList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>) volumetricDischargeActivityList14, volumetricDischargeActivityArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity16 = dischargeActivity0.setVolumetricDischargeActivities(volumetricDischargeActivityList14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList19, adcpDischargeActivityArray18);
        dischargeActivity17.AdcpDischargeActivities = adcpDischargeActivityList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList23, engineeredStructureDischargeActivityArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity25 = dischargeActivity17.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList27, otherMethodDischargeActivityArray26);
        dischargeActivity17.OtherMethodDischargeActivities = otherMethodDischargeActivityList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity30 = dischargeActivity0.setOtherMethodDischargeActivities(otherMethodDischargeActivityList27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList33, adcpDischargeActivityArray32);
        dischargeActivity31.AdcpDischargeActivities = adcpDischargeActivityList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList37, engineeredStructureDischargeActivityArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity39 = dischargeActivity31.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList37);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList40 = dischargeActivity39.EngineeredStructureDischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity41 = dischargeActivity30.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList40);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dischargeActivity8);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(volumetricDischargeActivityArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dischargeActivity16);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dischargeActivity25);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dischargeActivity30);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dischargeActivity39);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList40);
        org.junit.Assert.assertNotNull(dischargeActivity41);
    }

    @Test
    public void test41645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41645");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList3 = pointVelocityDischargeActivity0.Verticals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = null;
        pointVelocityDischargeActivity0.Area = quantityWithDisplay4;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList6 = pointVelocityDischargeActivity0.getVerticals();
        java.lang.Boolean boolean7 = pointVelocityDischargeActivity0.isMeterInspectedAfter();
        java.lang.Boolean boolean8 = pointVelocityDischargeActivity0.isHorizontalCoefficientUsed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement9 = pointVelocityDischargeActivity0.DischargeChannelMeasurement;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(verticalList3);
        org.junit.Assert.assertNull(verticalList6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(dischargeChannelMeasurement9);
    }

    @Test
    public void test41646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41646");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_1.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType6 = null;
        controlConditionActivity5.ControlCleaned = controlCleanedType6;
        java.lang.String str8 = controlConditionActivity5.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary9.Reviewer = "";
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary9.MeasurementTime = instant12;
        controlConditionActivity5.DateCleaned = instant12;
        gageHeightReading4.ReadingTime = instant12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str19 = doubleWithDisplay18.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading20 = gageHeightReading4.setGageHeight(doubleWithDisplay18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = dischargeSummary22.setMeanGageHeightMethod("hi!");
        java.lang.String str25 = dischargeSummary24.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary24.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType29 = calibrationCheck28.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = calibrationCheck28.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = dischargeSummary32.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        dischargeSummary32.MeasurementTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse31.setNextToken(instant36);
        java.time.Instant instant40 = locationDescriptionListServiceResponse31.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck41 = calibrationCheck28.setTime(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary24.setMeasurementTime(instant40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_43 = getChartDataV2_21.setStartResultTime(instant40);
        gageHeightReading4.ReadingTime = instant40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_45 = getChartDataV2_1.setStartObservedTime(instant40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField49 = extendedAttributeField47.setDisplayName("");
        java.lang.Boolean boolean50 = extendedAttributeField49.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_53.setDataClassifications((java.util.List<java.lang.String>) strList57);
        getObservationsV2_59.DepthUnitCustomId = "hi!";
        java.lang.String str62 = getObservationsV2_59.CustomId;
        java.util.List<java.lang.String> strList63 = getObservationsV2_59.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray74 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = putLocationTags70.setTagUniqueIds(strList75);
        getObservationsV2_64.QualityControlTypes = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_59.setMedia((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str81 = getObservationsV2_80.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        getObservationsV2_82.SpecimenIds = strList85;
        getObservationsV2_80.ProjectIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_89 = getObservationsV2_59.setObservedPropertyIds((java.util.List<java.lang.String>) strList85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest90 = timeAlignedDataServiceRequest51.setTimeSeriesOutputUnitIds(strList85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField91 = extendedAttributeField49.setValueOptions((java.util.List<java.lang.String>) strList85);
        putBulkEditResultGradesV2_46.AnalysisMethodSimpleIds = strList85;
        java.lang.String str93 = putBulkEditResultGradesV2_46.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType94 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_95 = putBulkEditResultGradesV2_46.setSampleFraction(sampleFractionType94);
        getChartDataV2_45.SampleFraction = sampleFractionType94;
        getGroupedObservationsV2_0.SampleFraction = sampleFractionType94;
        java.lang.String str98 = getGroupedObservationsV2_0.FieldVisitId;
        java.lang.Double double99 = getGroupedObservationsV2_0.getMinNumericResultValue();
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(gageHeightReading20);
        org.junit.Assert.assertNotNull(dischargeSummary24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNull(calibrationCheckType29);
        org.junit.Assert.assertNull(doubleWithDisplay30);
        org.junit.Assert.assertNotNull(dischargeSummary34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(calibrationCheck41);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(getChartDataV2_43);
        org.junit.Assert.assertNotNull(getChartDataV2_45);
        org.junit.Assert.assertNotNull(extendedAttributeField49);
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(putLocationTags77);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_89);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest90);
        org.junit.Assert.assertNotNull(extendedAttributeField91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + sampleFractionType94 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED + "'", sampleFractionType94.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED));
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_95);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertNull(double99);
    }

    @Test
    public void test41647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41647");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest3 = fieldVisitDataByLocationServiceRequest1.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty4 = importItemObservedProperty0.setErrors((java.lang.Object) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = importItemObservedProperty0.ExistingItem;
        java.lang.String str6 = importItemObservedProperty0.Input;
        java.util.List<java.lang.String> strList7 = importItemObservedProperty0.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_9.setDataClassifications((java.util.List<java.lang.String>) strList13);
        java.time.Instant instant16 = getObservationsV2_9.getStartObservedTime();
        getObservationsV2_9.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList19 = null;
        getObservationsV2_9.SamplingContextTagIds = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription23 = locationDescription21.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType25 = null;
        controlConditionActivity24.ControlCleaned = controlCleanedType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        controlConditionActivity24.DateCleaned = instant28;
        locationDescription23.LastModified = instant28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_9.setStartResultTime(instant28);
        getExportObservations8.StartObservedTime = instant28;
        java.util.List<java.lang.String> strList34 = getExportObservations8.getLabReportIds();
        java.lang.String str35 = getExportObservations8.Sort;
        java.util.List<java.lang.String> strList36 = getExportObservations8.getSearch();
        importItemObservedProperty0.Errors = getExportObservations8;
        java.time.Instant instant38 = null;
        getExportObservations8.StartResultTime = instant38;
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest3);
        org.junit.Assert.assertNotNull(importItemObservedProperty4);
        org.junit.Assert.assertNull(observedProperty5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNotNull(locationDescription23);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(strList36);
    }

    @Test
    public void test41648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41648");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location0.setLocationName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        location5.LocationType = "MinDuration";
        java.lang.String str8 = location5.getLocationType();
        java.lang.String str9 = location5.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location11 = location5.setElevationUnits("multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****");
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MinDuration" + "'", str8, "MinDuration");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(location11);
    }

    @Test
    public void test41649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41649");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        java.util.List<java.lang.String> strList37 = putBulkEditResultGradesV2_0.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_39 = putBulkEditResultGradesV2_0.setSort("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList40 = putBulkEditResultGradesV2_0.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = putBulkEditResultGradesV2_0.setDepthUnitCustomId("http://MaxDurationhttp/json/reply/String");
        java.lang.String str43 = putBulkEditResultGradesV2_0.getImportHistoryEventId();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test41650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41650");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = schedule5.getLastGenerationDate();
        putFieldVisit0.Schedule = schedule5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = putFieldVisit0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple11 = null;
        putFieldVisit0.FieldTrip = fieldTripSimple11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = putFieldVisit0.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan15.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan15.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup20 = samplingPlan15.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan22 = samplingPlan15.setAuditAttributes(auditAttributes21);
        putFieldVisit0.SamplingPlan = samplingPlan15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule26 = schedule24.setCustomId("");
        putFieldVisit0.Schedule = schedule26;
        java.time.OffsetDateTime offsetDateTime28 = null;
        schedule26.LastGenerationDate = offsetDateTime28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int31 = samplingPlan30.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan33 = samplingPlan30.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        java.lang.String str34 = samplingPlan30.CustomId;
        java.time.OffsetDateTime offsetDateTime35 = null;
        samplingPlan30.LastGenerationDate = offsetDateTime35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan37.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType40 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan37.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup42 = samplingPlan37.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = samplingPlan37.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime44 = samplingPlan37.getStartDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType45 = samplingPlan37.getSamplingLocationGroupSelectionType();
        samplingPlan30.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType45;
        schedule26.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType45;
        java.time.OffsetDateTime offsetDateTime48 = schedule26.StartDate;
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(samplingLocation10);
        org.junit.Assert.assertNotNull(putFieldVisit14);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup20);
        org.junit.Assert.assertNotNull(samplingPlan22);
        org.junit.Assert.assertNotNull(schedule26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(samplingPlan33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType40.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup42);
        org.junit.Assert.assertNull(auditAttributes43);
        org.junit.Assert.assertNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(offsetDateTime48);
    }

    @Test
    public void test41651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41651");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = postObservedProperty0.setCasNumber("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty5 = postObservedProperty0.setId("http://MaxDurationhttp/json/reply/Double");
        postObservedProperty0.CasNumber = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNotNull(postObservedProperty3);
        org.junit.Assert.assertNotNull(postObservedProperty5);
    }

    @Test
    public void test41652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41652");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str2 = postFieldVisitActivityWithTemplate1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = plannedFieldResult5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult12.setAuditAttributes(auditAttributes44);
        postFieldVisitActivityWithTemplate4.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport48 = postLabReport0.setAuditAttributes(auditAttributes44);
        java.time.OffsetDateTime offsetDateTime49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport50 = postLabReport0.setDateReceived(offsetDateTime49);
        postLabReport0.CaseNarrative = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory54.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory58 = laboratory54.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport59 = labReport53.setLaboratory(laboratory58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = labReport59.getAuditAttributes();
        labReport59.CaseNarrative = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory64.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory68 = laboratory64.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport69 = labReport63.setLaboratory(laboratory68);
        java.lang.String str70 = laboratory68.getId();
        labReport59.Laboratory = laboratory68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport72 = postLabReport0.setLaboratory(laboratory68);
        java.lang.String str73 = postLabReport72.CustomId;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(plannedFieldResult12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(postLabReport48);
        org.junit.Assert.assertNotNull(postLabReport50);
        org.junit.Assert.assertNotNull(laboratory58);
        org.junit.Assert.assertNotNull(labReport59);
        org.junit.Assert.assertNull(auditAttributes60);
        org.junit.Assert.assertNotNull(laboratory68);
        org.junit.Assert.assertNotNull(labReport69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "MaxInstant" + "'", str70, "MaxInstant");
        org.junit.Assert.assertNotNull(postLabReport72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test41653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41653");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList4 = activityWithDetails0.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str6 = samplingLocation5.Description;
        java.lang.String str7 = samplingLocation5.VerticalCollectionMethod;
        java.lang.String str8 = samplingLocation5.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation9.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList12 = putSamplingLocation11.getSamplingLocationGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple14.setApplicabilityRange(interval15);
        java.lang.String str17 = standardSimple14.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = standardSimple18.setApplicabilityRange(interval19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = standardSimple18.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = standardSimple24.setApplicabilityRange(interval25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple24.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple31 = standardSimple29.setApplicabilityRange(interval30);
        java.lang.String str32 = standardSimple31.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple37 = standardSimple35.setApplicabilityRange(interval36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple40 = standardSimple38.setApplicabilityRange(interval39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple14, standardSimple18, standardSimple23, standardSimple24, standardSimple31, standardSimple33, standardSimple34, standardSimple37, standardSimple38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList42, standardSimpleArray41);
        postSamplingLocation13.Standards = standardSimpleList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation45 = putSamplingLocation11.setStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList42);
        samplingLocation5.Standards = standardSimpleList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails47 = activityWithDetails0.setSamplingLocation(samplingLocation5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium48 = activityWithDetails0.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList51, plannedActivityArray50);
        putFieldVisit49.PlannedActivities = plannedActivityList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        java.lang.String str56 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment58 = domainObjectAttachment54.setAttachment(attachment57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str60 = domainObjectAttachment59.getId();
        java.lang.String str61 = domainObjectAttachment59.getId();
        domainObjectAttachment59.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment65 = domainObjectAttachment59.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str67 = domainObjectAttachment66.getId();
        java.lang.String str68 = domainObjectAttachment66.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment70 = domainObjectAttachment66.setAttachment(attachment69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str72 = domainObjectAttachment71.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str74 = domainObjectAttachment73.getId();
        java.lang.String str75 = domainObjectAttachment73.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment76 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment77 = domainObjectAttachment73.setAttachment(attachment76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str79 = domainObjectAttachment78.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment54, domainObjectAttachment59, domainObjectAttachment66, domainObjectAttachment71, domainObjectAttachment73, domainObjectAttachment78 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList81 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList81, domainObjectAttachmentArray80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit83 = putFieldVisit49.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan84 = putFieldVisit49.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple85 = putFieldVisit49.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule86 = putFieldVisit49.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str88 = samplingLocation87.Description;
        java.lang.String str89 = samplingLocation87.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation91 = samplingLocation87.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit92 = putFieldVisit49.setSamplingLocation(samplingLocation87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address93 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation94 = samplingLocation87.setAddress(address93);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address95 = null;
        samplingLocation87.Address = address95;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes97 = samplingLocation87.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails98 = activityWithDetails0.setSamplingLocation(samplingLocation87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit99 = activityWithDetails0.getFieldVisit();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(specimenNestedInActivityList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNull(samplingLocationGroupList12);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(standardSimple20);
        org.junit.Assert.assertNotNull(standardSimple22);
        org.junit.Assert.assertNotNull(standardSimple26);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimple31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(standardSimple37);
        org.junit.Assert.assertNotNull(standardSimple40);
        org.junit.Assert.assertNotNull(standardSimpleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putSamplingLocation45);
        org.junit.Assert.assertNotNull(activityWithDetails47);
        org.junit.Assert.assertNull(medium48);
        org.junit.Assert.assertNotNull(plannedActivityArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(domainObjectAttachment58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(domainObjectAttachment65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(domainObjectAttachment70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(domainObjectAttachment77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(putFieldVisit83);
        org.junit.Assert.assertNull(samplingPlan84);
        org.junit.Assert.assertNull(fieldTripSimple85);
        org.junit.Assert.assertNull(schedule86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(samplingLocation91);
        org.junit.Assert.assertNotNull(putFieldVisit92);
        org.junit.Assert.assertNotNull(samplingLocation94);
        org.junit.Assert.assertNull(auditAttributes97);
        org.junit.Assert.assertNotNull(activityWithDetails98);
        org.junit.Assert.assertNull(fieldVisit99);
    }

    @Test
    public void test41654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41654");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple5 = observedPropertyImportSummary0.getImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary7 = observedPropertyImportSummary0.setSuccessCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary9 = observedPropertyImportSummary0.setNewCount((java.lang.Integer) 2);
        observedPropertyImportSummary0.SuccessCount = 100;
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNull(importHistoryEventSimple5);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary7);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary9);
    }

    @Test
    public void test41655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41655");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList3, importHistoryEventSimpleArray2);
        postObservedProperty0.ImportHistoryEventSimples = importHistoryEventSimpleList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str8 = metricConfiguration7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty9.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = metricConfiguration7.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType13 = observedProperty9.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup15 = postObservedProperty14.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit17 = null;
        quantity16.Unit = unit17;
        postObservedProperty14.LowerLimit = quantity16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = postObservedProperty14.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = quantity20.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = observedProperty9.setUpperLimit(quantity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation23 = samplingLocation6.setElevation(quantity20);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList24 = samplingLocation23.getAttachments();
        java.lang.String str25 = samplingLocation23.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList26 = samplingLocation23.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit28 = null;
        quantity27.Unit = unit28;
        samplingLocation23.Elevation = quantity27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty31 = postObservedProperty0.setLowerLimit(quantity27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation33.setPlannedFieldResult(plannedFieldResult34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction36 = null;
        observation35.LabInstruction = labInstruction36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation35.setStatistics(observationStatistics38);
        java.time.OffsetDateTime offsetDateTime40 = observation39.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList41 = observation39.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation39.setObservedProperty(observedProperty42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade44 = observation43.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails47 = labResultDetails45.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails49 = labResultDetails47.setAuditAttributes(auditAttributes48);
        observation43.AuditAttributes = auditAttributes48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str52 = metricConfiguration51.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty53.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration56 = metricConfiguration51.setObservedProperty(observedProperty53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType57 = observedProperty53.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup59 = postObservedProperty58.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit61 = null;
        quantity60.Unit = unit61;
        postObservedProperty58.LowerLimit = quantity60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity64 = postObservedProperty58.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit65 = quantity64.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty66 = observedProperty53.setUpperLimit(quantity64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup67 = observedProperty66.UnitGroup;
        observation43.ObservedProperty = observedProperty66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty70 = observedProperty66.setCustomId("/AQUARIUS");
        observationStandard32.ObservedProperty = observedProperty66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard73 = observationStandard32.setRuleText("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation76 = putSamplingLocation74.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup78 = postObservedProperty77.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit80 = null;
        quantity79.Unit = unit80;
        postObservedProperty77.LowerLimit = quantity79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity83 = postObservedProperty77.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit84 = quantity83.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation85 = putSamplingLocation76.setElevation(quantity83);
        observationStandard73.ResultUpperLimit = quantity83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty87 = postObservedProperty31.setLowerLimit(quantity83);
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(metricConfiguration12);
        org.junit.Assert.assertNull(resultType13);
        org.junit.Assert.assertNull(unitGroup15);
        org.junit.Assert.assertNotNull(quantity20);
        org.junit.Assert.assertNull(unit21);
        org.junit.Assert.assertNotNull(observedProperty22);
        org.junit.Assert.assertNotNull(samplingLocation23);
        org.junit.Assert.assertNull(domainObjectAttachmentList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(importHistoryEventSimpleList26);
        org.junit.Assert.assertNotNull(postObservedProperty31);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNull(offsetDateTime40);
        org.junit.Assert.assertNull(importHistoryEventSimpleList41);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNull(resultGrade44);
        org.junit.Assert.assertNotNull(labResultDetails47);
        org.junit.Assert.assertNotNull(labResultDetails49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(metricConfiguration56);
        org.junit.Assert.assertNull(resultType57);
        org.junit.Assert.assertNull(unitGroup59);
        org.junit.Assert.assertNotNull(quantity64);
        org.junit.Assert.assertNull(unit65);
        org.junit.Assert.assertNotNull(observedProperty66);
        org.junit.Assert.assertNull(unitGroup67);
        org.junit.Assert.assertNotNull(observedProperty70);
        org.junit.Assert.assertNotNull(observationStandard73);
        org.junit.Assert.assertNotNull(putSamplingLocation76);
        org.junit.Assert.assertNull(unitGroup78);
        org.junit.Assert.assertNotNull(quantity83);
        org.junit.Assert.assertNull(unit84);
        org.junit.Assert.assertNotNull(putSamplingLocation85);
        org.junit.Assert.assertNotNull(postObservedProperty87);
    }

    @Test
    public void test41656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41656");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        java.lang.String str1 = timeSeriesThreshold0.Name;
        timeSeriesThreshold0.Name = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold5 = timeSeriesThreshold0.setReferenceCode("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold7 = timeSeriesThreshold0.setReferenceCode("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(timeSeriesThreshold5);
        org.junit.Assert.assertNotNull(timeSeriesThreshold7);
    }

    @Test
    public void test41657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41657");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postDetectioncondition0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition10 = postDetectioncondition0.setCustomId("hi!");
        java.lang.String str11 = postDetectioncondition0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition13 = postDetectioncondition0.setSystemCode("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str15 = postLaboratory14.Address;
        java.lang.String str16 = postLaboratory14.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = auditAttributes20.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = samplingPlanPlannedActivity19.AuditAttributes;
        postLaboratory14.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory27 = postLaboratory14.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str28 = postLaboratory27.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = postLaboratory27.getAuditAttributes();
        postDetectioncondition0.AuditAttributes = auditAttributes29;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(postDetectioncondition10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(postDetectioncondition13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(postLaboratory27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(auditAttributes29);
    }

    @Test
    public void test41658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41658");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        postCalculatedDerivedTimeSeries0.Parameter = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = postCalculatedDerivedTimeSeries0.setUtcOffset("'.'SSSSSSS");
        postCalculatedDerivedTimeSeries0.ComputationIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = postCalculatedDerivedTimeSeries0.setLocationUniqueId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries10 = postCalculatedDerivedTimeSeries8.setSubLocationIdentifier("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str11 = postCalculatedDerivedTimeSeries8.UtcOffset;
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries4);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries8);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "'.'SSSSSSS" + "'", str11, "'.'SSSSSSS");
    }

    @Test
    public void test41659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41659");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.FieldVisitId;
        java.util.List<java.lang.String> strList3 = getExportSpecimens0.ActivityTypes;
        java.util.List<java.lang.String> strList4 = getExportSpecimens0.getActivityTypes();
        java.util.List<java.lang.String> strList5 = getExportSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment6.Description = "2021.4.62.0";
        java.lang.String str9 = postReportAttachment6.Title;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment11 = postReportAttachment6.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval12 = postReportAttachment6.getSourceTimeRange();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList14 = getExportSpecimens13.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant16 = qualifier15.DateApplied;
        java.lang.String str17 = qualifier15.User;
        java.lang.String str18 = qualifier15.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest19.setQueryFrom(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier25 = qualifier15.setDateApplied(instant22);
        getExportSpecimens13.Before = instant22;
        postReportAttachment6.CreatedTime = instant22;
        getExportSpecimens0.StartModificationTime = instant22;
        getExportSpecimens0.Cursor = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postReportAttachment11);
        org.junit.Assert.assertNull(interval12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(qualifier25);
    }

    @Test
    public void test41660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41660");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType1 = putUserV2_0.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_3 = putUserV2_0.setEmail("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = putUserV2_0.setUserProfile(userProfile4);
        java.lang.String str6 = putUserV2_5.CustomId;
        java.lang.String str7 = putUserV2_5.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile8 = putUserV2_5.getUserProfile();
        putUserV2_5.Email = "****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.String str11 = putUserV2_5.Id;
        java.lang.String str12 = putUserV2_5.Email;
        putUserV2_5.CustomId = "http://MaxDurationhttp";
        org.junit.Assert.assertNull(userType1);
        org.junit.Assert.assertNotNull(putUserV2_3);
        org.junit.Assert.assertNotNull(putUserV2_5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(userProfile8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "****26835278-3e68-484a-a157-468aab2e69a2****" + "'", str12, "****26835278-3e68-484a-a157-468aab2e69a2****");
    }

    @Test
    public void test41661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41661");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportResponse recurringReportResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport> recurringReportList1 = recurringReportResponse0.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportResponse recurringReportResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport5 = recurringReport3.setRecurrencePeriod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType7 = null;
        controlConditionActivity6.ControlCleaned = controlCleanedType7;
        java.lang.String str9 = controlConditionActivity6.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        controlConditionActivity6.DateCleaned = instant13;
        java.lang.String str16 = controlConditionActivity6.getFlowOverControl();
        java.time.Instant instant17 = controlConditionActivity6.getDateCleaned();
        recurringReport3.NextGenerationDate = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        java.time.Instant instant20 = recurringReport19.getNextGenerationDate();
        java.lang.String str21 = recurringReport19.RecurrencePeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        java.time.Instant instant23 = recurringReport22.getNextGenerationDate();
        java.lang.String str24 = recurringReport22.RecurrencePeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport27 = recurringReport25.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str28 = recurringReport27.getJsonTemplate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        java.time.Instant instant30 = recurringReport29.getNextGenerationDate();
        java.lang.String str31 = recurringReport29.RecurrencePeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport32.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant35 = recurringReport32.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport38 = recurringReport36.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str39 = recurringReport38.getJsonTemplate();
        recurringReport38.RecurrencePeriod = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.time.Instant instant42 = recurringReport38.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport45 = recurringReport43.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str46 = recurringReport43.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport49 = recurringReport47.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport50.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant53 = recurringReport50.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport56 = recurringReport54.setRecurrencePeriod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport59 = recurringReport57.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str60 = recurringReport59.getJsonTemplate();
        recurringReport59.RecurrencePeriod = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.time.Instant instant63 = recurringReport59.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport66 = recurringReport64.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str67 = recurringReport66.getJsonTemplate();
        recurringReport66.RecurrencePeriod = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        recurringReport66.RecurrencePeriod = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport[] recurringReportArray72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport[] { recurringReport3, recurringReport19, recurringReport22, recurringReport27, recurringReport29, recurringReport32, recurringReport38, recurringReport43, recurringReport49, recurringReport50, recurringReport56, recurringReport59, recurringReport66 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport> recurringReportList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport>) recurringReportList73, recurringReportArray72);
        recurringReportResponse2.Results = recurringReportList73;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport> recurringReportList76 = recurringReportResponse2.getResults();
        recurringReportResponse0.Results = recurringReportList76;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport> recurringReportList78 = recurringReportResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport> recurringReportList79 = recurringReportResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport> recurringReportList80 = recurringReportResponse0.getResults();
        org.junit.Assert.assertNull(recurringReportList1);
        org.junit.Assert.assertNotNull(recurringReport5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(recurringReport27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str28, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNotNull(recurringReport38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str39, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNotNull(recurringReport45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(recurringReport49);
        org.junit.Assert.assertNull(instant53);
        org.junit.Assert.assertNotNull(recurringReport56);
        org.junit.Assert.assertNotNull(recurringReport59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str60, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(instant63);
        org.junit.Assert.assertNotNull(recurringReport66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str67, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(recurringReportArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(recurringReportList76);
        org.junit.Assert.assertNotNull(recurringReportList78);
        org.junit.Assert.assertNotNull(recurringReportList79);
        org.junit.Assert.assertNotNull(recurringReportList80);
    }

    @Test
    public void test41662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41662");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str1 = shippingContainer0.TrackingId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer3 = shippingContainer0.setCustomId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str4 = shippingContainer3.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer6 = shippingContainer3.setTrackingId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = shippingContainer3.AuditAttributes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(shippingContainer3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(shippingContainer6);
        org.junit.Assert.assertNull(auditAttributes7);
    }

    @Test
    public void test41663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41663");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel[] approvalLevelArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel> approvalLevelList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel>) approvalLevelList4, approvalLevelArray3);
        approvalLevelsResponse2.Results = approvalLevelList4;
        approvalLevelsResponse1.Results = approvalLevelList4;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel> approvalLevelList8 = approvalLevelsResponse1.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel[] approvalLevelArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel> approvalLevelList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel>) approvalLevelList11, approvalLevelArray10);
        approvalLevelsResponse9.Results = approvalLevelList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse14 = approvalLevelsResponse1.setResults(approvalLevelList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel[] approvalLevelArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel> approvalLevelList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel>) approvalLevelList18, approvalLevelArray17);
        approvalLevelsResponse16.Results = approvalLevelList18;
        approvalLevelsResponse15.Results = approvalLevelList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse22 = approvalLevelsResponse1.setResults(approvalLevelList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevelsResponse approvalLevelsResponse23 = approvalLevelsResponse0.setResults(approvalLevelList18);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel> approvalLevelList24 = approvalLevelsResponse0.Results;
        org.junit.Assert.assertNotNull(approvalLevelArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(approvalLevelList8);
        org.junit.Assert.assertNotNull(approvalLevelArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(approvalLevelsResponse14);
        org.junit.Assert.assertNotNull(approvalLevelArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(approvalLevelsResponse22);
        org.junit.Assert.assertNotNull(approvalLevelsResponse23);
        org.junit.Assert.assertNotNull(approvalLevelList24);
    }

    @Test
    public void test41664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41664");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.ComputationPeriodIdentifier = "MaxInstant";
        java.lang.String str3 = postDatumConvertedTimeSeries0.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries5 = postDatumConvertedTimeSeries0.setComment("POST");
        java.lang.String str6 = postDatumConvertedTimeSeries5.getSubLocationIdentifier();
        java.lang.String str7 = postDatumConvertedTimeSeries5.TimeSeriesUniqueId;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MaxInstant" + "'", str3, "MaxInstant");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test41665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41665");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList3 = importSummarySpecimen0.ImportItems;
        java.lang.Integer int4 = importSummarySpecimen0.UpdateCount;
        java.lang.Integer int5 = importSummarySpecimen0.getErrorCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen7 = importSummarySpecimen0.setErrorCount((java.lang.Integer) 7);
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNull(importItemSpecimenList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(importSummarySpecimen7);
    }

    @Test
    public void test41666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41666");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.lang.Object obj1 = ratingCurveListServiceRequest0.getResponseType();
        java.time.Instant instant2 = ratingCurveListServiceRequest0.getQueryTo();
        java.time.Instant instant3 = ratingCurveListServiceRequest0.QueryTo;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList5 = getExportSpecimens4.getActivityTypes();
        java.util.List<java.lang.String> strList6 = getExportSpecimens4.LaboratoryIds;
        java.util.List<java.lang.String> strList7 = getExportSpecimens4.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = getActivities8.setToStartTime(instant18);
        java.lang.String str20 = getActivities19.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList22 = getObservationsV2_21.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        getObservationsV2_21.ResultGrades = strList34;
        getActivities19.Media = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens40 = getExportSpecimens4.setSearch((java.util.List<java.lang.String>) strList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double42 = putBulkEditResultGradesV2_41.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        java.util.List<java.lang.String> strList58 = getObservationsV2_43.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList59 = getObservationsV2_43.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType60 = getObservationsV2_43.FieldResultType;
        java.time.Instant instant61 = getObservationsV2_43.getEndObservedTime();
        java.lang.String str62 = getObservationsV2_43.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray67 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags63.setTagUniqueIds(strList68);
        java.util.ArrayList<java.lang.String> strList71 = putLocationTags70.TagUniqueIds;
        getObservationsV2_43.ProjectIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_73 = putBulkEditResultGradesV2_41.setSearch((java.util.List<java.lang.String>) strList71);
        java.util.List<java.lang.String> strList74 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_75 = putBulkEditResultGradesV2_73.setLabResultLaboratoryIds(strList74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType77 = calibrationCheck76.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay78 = calibrationCheck76.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary82 = dischargeSummary80.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant84 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse85 = locationDescriptionListServiceResponse83.setNextToken(instant84);
        dischargeSummary80.MeasurementTime = instant84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse87 = locationDescriptionListServiceResponse79.setNextToken(instant84);
        java.time.Instant instant88 = locationDescriptionListServiceResponse79.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck89 = calibrationCheck76.setTime(instant88);
        putBulkEditResultGradesV2_75.StartResultTime = instant88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens91 = getExportSpecimens40.setBefore(instant88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest92 = ratingCurveListServiceRequest0.setQueryTo(instant88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest94 = ratingCurveListServiceRequest92.setRatingModelIdentifier("/AQUARIUS");
        ratingCurveListServiceRequest94.RatingModelIdentifier = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(getActivities19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(getExportSpecimens40);
        org.junit.Assert.assertNull(double42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(fieldResultType60);
        org.junit.Assert.assertNull(instant61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_73);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_75);
        org.junit.Assert.assertNull(calibrationCheckType77);
        org.junit.Assert.assertNull(doubleWithDisplay78);
        org.junit.Assert.assertNotNull(dischargeSummary82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse85);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(calibrationCheck89);
        org.junit.Assert.assertNotNull(getExportSpecimens91);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest92);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest94);
    }

    @Test
    public void test41667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41667");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postObservedProperty0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType3 = postObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty5 = postObservedProperty0.setUnitGroup(unitGroup4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty0.setResultType(resultType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        postObservedProperty7.AuditAttributes = auditAttributes8;
        postObservedProperty7.CustomId = "MaxDuration";
        java.lang.String str12 = postObservedProperty7.getId();
        postObservedProperty7.CasNumber = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.lang.String str15 = postObservedProperty7.getCasNumber();
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNull(analysisType3);
        org.junit.Assert.assertNotNull(postObservedProperty5);
        org.junit.Assert.assertTrue("'" + resultType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str15, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
    }

    @Test
    public void test41668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41668");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.EndDate;
        java.time.OffsetDateTime offsetDateTime2 = postSchedule0.getStartDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule4 = postSchedule0.setId("/AQUARIUS");
        java.lang.String str5 = postSchedule0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        postSchedule6.Id = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule9.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList13, schedulePlannedActivityArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule15 = schedule11.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule16 = postSchedule6.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList13);
        postSchedule0.SchedulePlannedActivities = schedulePlannedActivityList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType18 = postSchedule0.RecurrenceDayWeekly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule20 = postSchedule0.setCustomId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.String str21 = postSchedule20.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime23 = putSchedule22.StartDate;
        java.time.OffsetDateTime offsetDateTime24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = putSchedule22.setEndDate(offsetDateTime24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup26 = putSchedule25.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule29 = schedule27.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList31, schedulePlannedActivityArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule33 = schedule29.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList31);
        putSchedule25.SchedulePlannedActivities = schedulePlannedActivityList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule36 = putSchedule25.setSamplingLocationGroup(samplingLocationGroup35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup39 = samplingLocationGroup37.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType40 = samplingLocationGroup39.LocationGroupType;
        putSchedule25.SamplingLocationGroup = samplingLocationGroup39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = samplingLocationGroup39.AuditAttributes;
        postSchedule20.SamplingLocationGroup = samplingLocationGroup39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType sourceRoundedValueType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult46 = numericResult44.setSourceRoundedValue(sourceRoundedValueType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str48 = postLaboratory47.Address;
        java.lang.String str49 = postLaboratory47.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity52 = samplingPlanPlannedActivity50.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = auditAttributes53.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity52.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = samplingPlanPlannedActivity52.AuditAttributes;
        postLaboratory47.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory60 = postLaboratory47.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon62 = taxonomicResult61.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = taxonomicResult61.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan65.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType68 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan65.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup70 = samplingPlan65.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan72 = samplingPlan65.setAuditAttributes(auditAttributes71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag73 = putTag64.setAuditAttributes(auditAttributes71);
        taxonomicResult61.AuditAttributes = auditAttributes71;
        postLaboratory60.AuditAttributes = auditAttributes71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult76 = numericResult46.setAuditAttributes(auditAttributes71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType sourceRoundedValueType77 = numericResult46.getSourceRoundedValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeterminationType determinationType78 = numericResult46.getDeterminationType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = numericResult46.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup80 = samplingLocationGroup39.setAuditAttributes(auditAttributes79);
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(postSchedule4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(schedule11);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(schedule15);
        org.junit.Assert.assertNotNull(postSchedule16);
        org.junit.Assert.assertNull(recurrenceDayWeeklyType18);
        org.junit.Assert.assertNotNull(postSchedule20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/AQUARIUS" + "'", str21, "/AQUARIUS");
        org.junit.Assert.assertNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(putSchedule25);
        org.junit.Assert.assertNull(samplingLocationGroup26);
        org.junit.Assert.assertNotNull(schedule29);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(schedule33);
        org.junit.Assert.assertNotNull(putSchedule36);
        org.junit.Assert.assertNotNull(samplingLocationGroup39);
        org.junit.Assert.assertNull(locationGroupType40);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertTrue("'" + sourceRoundedValueType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT + "'", sourceRoundedValueType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT));
        org.junit.Assert.assertNotNull(numericResult46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity52);
        org.junit.Assert.assertNotNull(auditAttributes55);
        org.junit.Assert.assertNotNull(auditAttributes57);
        org.junit.Assert.assertNotNull(postLaboratory60);
        org.junit.Assert.assertNull(taxon62);
        org.junit.Assert.assertNull(auditAttributes63);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType68.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup70);
        org.junit.Assert.assertNotNull(samplingPlan72);
        org.junit.Assert.assertNotNull(putTag73);
        org.junit.Assert.assertNotNull(numericResult76);
        org.junit.Assert.assertTrue("'" + sourceRoundedValueType77 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT + "'", sourceRoundedValueType77.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT));
        org.junit.Assert.assertNull(determinationType78);
        org.junit.Assert.assertNotNull(auditAttributes79);
        org.junit.Assert.assertNotNull(samplingLocationGroup80);
    }

    @Test
    public void test41669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41669");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.TagNames;
        java.lang.Object obj3 = locationDescriptionListServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        java.lang.String str5 = report4.Description;
        report4.Comments = "/AQUARIUS";
        java.lang.Boolean boolean8 = report4.getIsTransient();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition12 = tagDefinition10.setValueType(tagValueType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition14 = tagDefinition10.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition16 = tagDefinition14.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition18 = tagDefinition14.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest19.setQueryFrom(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = timeAlignedDataServiceRequest19.setTimeSeriesOutputUnitIds(strList30);
        tagDefinition18.PickListValues = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_35 = getGroupedObservationsV2_9.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList37 = putOpenIdConnectRelyingPartyConfiguration36.getScopes();
        java.lang.String str38 = putOpenIdConnectRelyingPartyConfiguration36.getOptionalIssuerDiscoveryUri();
        java.lang.String str39 = putOpenIdConnectRelyingPartyConfiguration36.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_41.setDataClassifications((java.util.List<java.lang.String>) strList45);
        postTag40.PickListValues = strList45;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList49 = postTag40.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase51 = postTag40.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType52 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase53 = tagRequestBase51.setValueType(tagValueType52);
        java.lang.String str54 = tagRequestBase53.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.ActivityIds = strList66;
        tagRequestBase53.PickListValues = strList66;
        putOpenIdConnectRelyingPartyConfiguration36.HostedDomains = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_72 = getGroupedObservationsV2_35.setSearch((java.util.List<java.lang.String>) strList66);
        report4.SourceTimeSeriesUniqueIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest74 = locationDescriptionListServiceRequest0.setTagValues(strList66);
        java.util.ArrayList<java.lang.String> strList75 = locationDescriptionListServiceRequest74.getTagValues();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDescriptionListServiceResponse");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(tagDefinition12);
        org.junit.Assert.assertNotNull(tagDefinition14);
        org.junit.Assert.assertNotNull(tagDefinition16);
        org.junit.Assert.assertNotNull(tagDefinition18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest33);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNull(tagApplicabilityList49);
        org.junit.Assert.assertNotNull(tagRequestBase51);
        org.junit.Assert.assertTrue("'" + tagValueType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType52.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest74);
        org.junit.Assert.assertNotNull(strList75);
    }

    @Test
    public void test41670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41670");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        java.lang.Double double27 = getGroupedObservationsV2_0.getDepthValue();
        java.lang.Double double28 = getGroupedObservationsV2_0.getNumericResultValue();
        java.util.List<java.lang.String> strList29 = getGroupedObservationsV2_0.getSearch();
        java.util.List<java.lang.String> strList30 = getGroupedObservationsV2_0.getAnalysisMethodSimpleIds();
        java.util.List<java.lang.String> strList31 = getGroupedObservationsV2_0.CollectionMethodIds;
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_0.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str34 = getChartDataV2_33.getActivityCustomId();
        java.util.List<java.lang.String> strList35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_36 = getChartDataV2_33.setSearch(strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList44 = getObservationsV2_37.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary45.Reviewer = "";
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary45.MeasurementTime = instant48;
        getObservationsV2_37.StartResultTime = instant48;
        java.lang.String[] strArray60 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_37.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription66 = locationDescription64.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType68 = null;
        controlConditionActivity67.ControlCleaned = controlCleanedType68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = locationDescriptionListServiceResponse70.setNextToken(instant71);
        controlConditionActivity67.DateCleaned = instant71;
        locationDescription66.LastModified = instant71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_63.setStartResultTime(instant71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_76 = getChartDataV2_33.setEndObservedTime(instant71);
        java.util.List<java.lang.String> strList77 = getChartDataV2_76.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType78 = getChartDataV2_76.FieldResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType79 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_80 = getChartDataV2_76.setFieldResultType(fieldResultType79);
        getGroupedObservationsV2_0.FieldResultType = fieldResultType79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_83 = getGroupedObservationsV2_0.setFieldVisitId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(getChartDataV2_36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNotNull(locationDescription66);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse72);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(getChartDataV2_76);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNull(fieldResultType78);
        org.junit.Assert.assertTrue("'" + fieldResultType79 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS + "'", fieldResultType79.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS));
        org.junit.Assert.assertNotNull(getChartDataV2_80);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_83);
    }

    @Test
    public void test41671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41671");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setDescription("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries7 = postBasicTimeSeries2.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries9 = postBasicTimeSeries7.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries11 = postBasicTimeSeries9.setComment("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries7);
        org.junit.Assert.assertNotNull(postBasicTimeSeries9);
        org.junit.Assert.assertNotNull(postBasicTimeSeries11);
    }

    @Test
    public void test41672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41672");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        java.lang.Integer int1 = searchResultAttachment0.TotalCount;
        searchResultAttachment0.TotalCount = 10;
        searchResultAttachment0.TotalCount = 1;
        java.lang.String str6 = searchResultAttachment0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList7 = searchResultAttachment0.DomainObjects;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(attachmentList7);
    }

    @Test
    public void test41673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41673");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        java.time.Instant instant2 = calibrationCheck0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck4 = calibrationCheck0.setModel("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck0.setModel("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = dischargeSummary7.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary9.DifferenceDuringVisit = doubleWithDisplay10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = doubleWithDisplay10.setNumeric((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck14 = calibrationCheck6.setStandard(doubleWithDisplay10);
        java.lang.String str15 = calibrationCheck6.SerialNumber;
        calibrationCheck6.SerialNumber = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck19 = calibrationCheck6.setNodeDetails("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setMeanGageHeightMethod("hi!");
        java.lang.String str23 = dischargeSummary22.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay24 = dischargeSummary22.DifferenceDuringVisit;
        dischargeSummary22.MeasurementId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType29 = calibrationCheck28.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = calibrationCheck28.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = dischargeSummary32.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        dischargeSummary32.MeasurementTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse31.setNextToken(instant36);
        java.time.Instant instant40 = locationDescriptionListServiceResponse31.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck41 = calibrationCheck28.setTime(instant40);
        monitoringMethodListServiceResponse27.ResponseTime = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest43.TimeSeriesUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType58 = null;
        controlConditionActivity57.ControlCleaned = controlCleanedType58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse60.setNextToken(instant61);
        controlConditionActivity57.DateCleaned = instant61;
        timeAlignedDataServiceRequest56.QueryFrom = instant61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = locationDescriptionListServiceResponse46.setNextToken(instant61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest66 = correctionListServiceRequest43.setQueryTo(instant61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = dischargeSummary68.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant72 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse71.setNextToken(instant72);
        dischargeSummary68.MeasurementTime = instant72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse67.setNextToken(instant72);
        java.time.Instant instant76 = locationDescriptionListServiceResponse67.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType79 = null;
        controlConditionActivity78.ControlCleaned = controlCleanedType79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant82 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = locationDescriptionListServiceResponse81.setNextToken(instant82);
        controlConditionActivity78.DateCleaned = instant82;
        timeAlignedDataServiceRequest77.QueryFrom = instant82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse86 = locationDescriptionListServiceResponse67.setNextToken(instant82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest87 = correctionListServiceRequest43.setQueryTo(instant82);
        monitoringMethodListServiceResponse27.ResponseTime = instant82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary89 = dischargeSummary22.setMeasurementEndTime(instant82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck90 = calibrationCheck6.setTime(instant82);
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(calibrationCheck4);
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertNotNull(dischargeSummary9);
        org.junit.Assert.assertNotNull(doubleWithDisplay13);
        org.junit.Assert.assertNotNull(calibrationCheck14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(calibrationCheck19);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(doubleWithDisplay24);
        org.junit.Assert.assertNull(calibrationCheckType29);
        org.junit.Assert.assertNull(doubleWithDisplay30);
        org.junit.Assert.assertNotNull(dischargeSummary34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(calibrationCheck41);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse65);
        org.junit.Assert.assertNotNull(correctionListServiceRequest66);
        org.junit.Assert.assertNotNull(dischargeSummary70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse86);
        org.junit.Assert.assertNotNull(correctionListServiceRequest87);
        org.junit.Assert.assertNotNull(dischargeSummary89);
        org.junit.Assert.assertNotNull(calibrationCheck90);
    }

    @Test
    public void test41674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41674");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        importSummarySpecimen0.ExpectedCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen6 = importSummarySpecimen0.setSummaryReportText("");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList7 = importSummarySpecimen0.ImportItems;
        java.lang.Integer int8 = importSummarySpecimen0.getErrorCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen10 = importSummarySpecimen0.setNonErrorImportItems(importItemSpecimenList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen12 = importSummarySpecimen10.setUpdateCount((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNotNull(importSummarySpecimen6);
        org.junit.Assert.assertNull(importItemSpecimenList7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(importSummarySpecimen10);
        org.junit.Assert.assertNotNull(importSummarySpecimen12);
    }

    @Test
    public void test41675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41675");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup populatedUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup();
        java.lang.String str1 = populatedUnitGroup0.getDisplayName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit> unitList2 = populatedUnitGroup0.Units;
        populatedUnitGroup0.BaseUnitIdentifier = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup6 = populatedUnitGroup0.setLengthDimension((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup8 = unitGroup6.setDisplayName("ZZZZZ");
        java.lang.String str9 = unitGroup6.GroupIdentifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(unitList2);
        org.junit.Assert.assertNotNull(unitGroup6);
        org.junit.Assert.assertNotNull(unitGroup8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41676");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str4 = deleteFieldVisits3.getSort();
        java.time.Instant instant5 = deleteFieldVisits3.EndStartTime;
        java.util.List<java.lang.String> strList6 = deleteFieldVisits3.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType8 = putUserV2_7.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities20 = getActivities9.setToStartTime(instant19);
        java.lang.String str21 = getActivities20.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList23 = getObservationsV2_22.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        getObservationsV2_22.ResultGrades = strList35;
        getActivities20.Media = strList35;
        putUserV2_7.AccessGroups = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits42 = deleteFieldVisits3.setSearch((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase43 = putOpenIdConnectRelyingPartyConfiguration0.setHostedDomains((java.util.List<java.lang.String>) strList35);
        java.lang.String str44 = putOpenIdConnectRelyingPartyConfiguration0.ClientSecret;
        putOpenIdConnectRelyingPartyConfiguration0.OptionalIssuerDiscoveryUri = "POST";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(userType8);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(getActivities20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(deleteFieldVisits42);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test41677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41677");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.lang.Double double1 = location0.getLongitude();
        java.lang.Boolean boolean2 = location0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift5 = effectiveShift3.setValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase8 = locationDatumPeriod6.setComment("'.'SSSSSSS");
        java.lang.String str9 = locationDatumPeriodBase8.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase13 = locationDatumPeriodBase8.setValidFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift14 = effectiveShift3.setTimestamp(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest15.ReportTitle = "MinDuration";
        java.lang.String str18 = reportListServiceRequest15.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        java.util.List<java.lang.String> strList34 = getObservationsV2_19.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_19.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList37 = getObservationsV2_36.getMedia();
        java.time.Instant instant38 = getObservationsV2_36.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_36.setProjectIds((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest46 = reportListServiceRequest15.setTagKeys(strList42);
        reportListServiceRequest15.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        java.util.ArrayList<java.lang.String> strList49 = reportListServiceRequest15.getTimeSeriesUniqueIds();
        reportListServiceRequest15.UserUniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant53 = ratingCurveListServiceRequest52.QueryTo;
        java.lang.String str54 = ratingCurveListServiceRequest52.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary56.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        dischargeSummary56.MeasurementTime = instant60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = locationDescriptionListServiceResponse55.setNextToken(instant60);
        java.time.Instant instant64 = locationDescriptionListServiceResponse55.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType67 = null;
        controlConditionActivity66.ControlCleaned = controlCleanedType67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        controlConditionActivity66.DateCleaned = instant70;
        timeAlignedDataServiceRequest65.QueryFrom = instant70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = locationDescriptionListServiceResponse55.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest75 = ratingCurveListServiceRequest52.setQueryTo(instant70);
        java.time.Instant instant76 = ratingCurveListServiceRequest75.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest77 = reportListServiceRequest15.setCreatedFrom(instant76);
        effectiveShift3.Timestamp = instant76;
        location0.LastModified = instant76;
        java.lang.String str80 = location0.getDescription();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(effectiveShift5);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase13);
        org.junit.Assert.assertNotNull(effectiveShift14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNotNull(reportListServiceRequest46);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(instant53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse74);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(reportListServiceRequest77);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test41678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41678");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType4 = null;
        controlConditionActivity3.ControlCleaned = controlCleanedType4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        controlConditionActivity3.DateCleaned = instant7;
        timeAlignedDataServiceRequest2.QueryFrom = instant7;
        getChartDataV2_0.StartResultTime = instant7;
        java.util.List<java.lang.String> strList12 = getChartDataV2_0.TaxonIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test41679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41679");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        ratingModelDescription0.TemplateName = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str3 = ratingModelDescription0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription5 = ratingModelDescription0.setTemplateName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str6 = ratingModelDescription5.OutputUnit;
        ratingModelDescription5.OutputParameter = "";
        java.lang.String str9 = ratingModelDescription5.LocationIdentifier;
        java.lang.String str10 = ratingModelDescription5.LocationIdentifier;
        java.lang.Boolean boolean11 = ratingModelDescription5.Publish;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(ratingModelDescription5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test41680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41680");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        postTag4.PickListValues = strList9;
        java.util.ArrayList<java.lang.String> strList13 = postTag4.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor14 = processor3.setInputTimeSeriesUniqueIds(strList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor16 = processor14.setOutputTimeSeriesUniqueId("2021.4.62.0");
        java.lang.String str17 = processor16.getOutputTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange18 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange19 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange20 = processor16.getProcessorPeriod();
        java.lang.String str21 = processor16.Description;
        java.util.ArrayList<java.lang.String> strList22 = processor16.getInputTimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute23 = extendedAttribute2.setPickListValues(strList22);
        java.lang.Boolean boolean24 = extendedAttribute2.isRequired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute26 = extendedAttribute2.setAppliesToLocations((java.lang.Boolean) false);
        java.lang.String str27 = extendedAttribute2.DefaultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute30 = postExtendedAttribute28.setDefaultValue("https");
        java.util.ArrayList<java.lang.String> strList31 = postExtendedAttribute28.getPickListValues();
        postExtendedAttribute28.DefaultValue = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute35 = postExtendedAttribute28.setRequired((java.lang.Boolean) false);
        java.util.ArrayList<java.lang.String> strList36 = postExtendedAttribute28.getPickListValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Unknown;
        postExtendedAttribute28.ValueType = tagValueType37;
        extendedAttribute2.ValueType = tagValueType37;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(processor14);
        org.junit.Assert.assertNotNull(processor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2021.4.62.0" + "'", str17, "2021.4.62.0");
        org.junit.Assert.assertNull(timeRange18);
        org.junit.Assert.assertNull(timeRange19);
        org.junit.Assert.assertNull(timeRange20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(extendedAttribute23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(extendedAttribute26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str27, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(editableExtendedAttribute30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(editableExtendedAttribute35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertTrue("'" + tagValueType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Unknown + "'", tagValueType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Unknown));
    }

    @Test
    public void test41681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41681");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.getStartResultTime();
        getObservationExportIIV2_0.DetectionCondition = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV;
        getObservationExportIIV2_0.Format = getObservationExportIIFormatType6;
        java.util.List<java.lang.String> strList8 = getObservationExportIIV2_0.SamplingLocationGroupIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertTrue("'" + getObservationExportIIFormatType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV + "'", getObservationExportIIFormatType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV));
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test41682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41682");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str3 = roleBase2.getName();
        roleBase2.CanEditData = true;
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str3, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test41683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41683");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = analyticalGroup4.getType();
        analyticalGroup4.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = null;
        analyticalGroupItem14.AnalysisMethod = analysisMethod17;
        java.lang.String str19 = analyticalGroupItem14.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = null;
        analyticalGroupItem25.AnalysisMethod = analysisMethod28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem9, analyticalGroupItem11, analyticalGroupItem14, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31, analyticalGroupItemArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = analyticalGroup8.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31);
        analyticalGroup4.AnalyticalGroupItems = analyticalGroupItemList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup4.AuditAttributes = auditAttributes35;
        java.lang.String str37 = analyticalGroup4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType38 = analyticalGroup4.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType40 = analyticalGroup39.getType();
        java.lang.String str41 = analyticalGroup39.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = analyticalGroup39.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup45 = analyticalGroup43.setType(analyticalGroupType44);
        analyticalGroup4.Type = analyticalGroupType44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup47 = postAnalyticalGroup0.setType(analyticalGroupType44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup50 = putAnalyticalGroup48.setAnalyticalGroupItems(analyticalGroupItemList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup52 = putAnalyticalGroup50.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup54 = putAnalyticalGroup52.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType55 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        putAnalyticalGroup54.Type = analyticalGroupType55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType58 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus57.SystemCode = resultStatusSystemCodeType58;
        resultStatus57.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str63 = categoricalValue62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate67 = specimenTemplate65.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType68 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate67.Preservative = preservativeType68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails72 = labResultDetails70.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails74 = labResultDetails72.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate75 = specimenTemplate67.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition76 = postDetectioncondition64.setAuditAttributes(auditAttributes73);
        categoricalValue62.AuditAttributes = auditAttributes73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus78 = resultStatus57.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup79 = putAnalyticalGroup54.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup80 = postAnalyticalGroup47.setAuditAttributes(auditAttributes73);
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNull(analyticalGroupType5);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(analyticalGroup33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(analyticalGroupType38);
        org.junit.Assert.assertNull(analyticalGroupType40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(analyticalGroup43);
        org.junit.Assert.assertTrue("'" + analyticalGroupType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup45);
        org.junit.Assert.assertNotNull(postAnalyticalGroup47);
        org.junit.Assert.assertNotNull(putAnalyticalGroup50);
        org.junit.Assert.assertNotNull(putAnalyticalGroup52);
        org.junit.Assert.assertNotNull(putAnalyticalGroup54);
        org.junit.Assert.assertTrue("'" + analyticalGroupType55 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType55.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(specimenTemplate67);
        org.junit.Assert.assertTrue("'" + preservativeType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType68.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails72);
        org.junit.Assert.assertNotNull(labResultDetails74);
        org.junit.Assert.assertNotNull(specimenTemplate75);
        org.junit.Assert.assertNotNull(postDetectioncondition76);
        org.junit.Assert.assertNotNull(resultStatus78);
        org.junit.Assert.assertNotNull(putAnalyticalGroup79);
        org.junit.Assert.assertNotNull(postAnalyticalGroup80);
    }

    @Test
    public void test41684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41684");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant1 = interpolationTypeOperation0.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType2 = interpolationTypeOperation0.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant4 = interpolationTypeOperation3.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation6 = interpolationTypeOperation3.setOperationType(metadataChangeOperationType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation7 = interpolationTypeOperation0.setOperationType(metadataChangeOperationType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int9 = gradeOperation8.StackPosition;
        java.lang.String str10 = gradeOperation8.getComments();
        java.lang.Integer int11 = gradeOperation8.getStackPosition();
        java.lang.String str12 = gradeOperation8.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        java.time.Instant instant14 = noteOperation13.getDateAppliedUtc();
        java.time.Instant instant15 = noteOperation13.DateAppliedUtc;
        java.lang.String str16 = noteOperation13.NoteText;
        java.lang.String str17 = noteOperation13.getUser();
        java.time.Instant instant18 = noteOperation13.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap20 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation21 = correctionOperation19.setParameters(strMap20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant23 = methodOperation22.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        dischargeSummary24.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation31 = methodOperation22.setDateAppliedUtc(instant28);
        methodOperation22.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation35 = methodOperation22.setStackPosition((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation38 = methodOperation36.setOperationType(metadataChangeOperationType37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType39 = methodOperation38.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation40 = methodOperation35.setOperationType(metadataChangeOperationType39);
        correctionOperation19.OperationType = metadataChangeOperationType39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation42 = noteOperation13.setOperationType(metadataChangeOperationType39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType43 = noteOperation13.getOperationType();
        gradeOperation8.OperationType = metadataChangeOperationType43;
        interpolationTypeOperation7.OperationType = metadataChangeOperationType43;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(metadataChangeOperationType2);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation6);
        org.junit.Assert.assertNotNull(interpolationTypeOperation7);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(correctionOperation21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(methodOperation31);
        org.junit.Assert.assertNotNull(methodOperation35);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation38);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation40);
        org.junit.Assert.assertNotNull(noteOperation42);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
    }

    @Test
    public void test41685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41685");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        java.lang.Object obj5 = postObservationV2_2.getResponseType();
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_7 = postObservationV2_2.setResultTime(offsetDateTime6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        postObservationV2_2.ResultTime = offsetDateTime8;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Observation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Observation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Observation");
        org.junit.Assert.assertNotNull(postObservationV2_7);
    }

    @Test
    public void test41686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41686");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries5 = postReflectedTimeSeries0.setInterpolationType(interpolationType4);
        java.lang.String str6 = postReflectedTimeSeries5.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries9 = putTimeSeries7.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries11 = putTimeSeries7.setComment("https");
        putTimeSeries11.SubLocationIdentifier = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList15 = location14.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location17 = location14.setUniqueId("MaxInstant");
        java.lang.String str18 = location14.getLocationPath();
        java.lang.String str19 = location14.getUtcOffset();
        location14.Publish = false;
        java.lang.Boolean boolean22 = location14.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        java.lang.String str24 = postStatisticalDerivedTimeSeries23.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList26 = postCalculatedDerivedTimeSeries25.TimeSeriesUniqueIds;
        java.lang.String str27 = postCalculatedDerivedTimeSeries25.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation28.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32, extendedAttributeValueArray31);
        postLocation28.ExtendedAttributeValues = extendedAttributeValueList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries35 = postCalculatedDerivedTimeSeries25.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries36 = postStatisticalDerivedTimeSeries23.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        location14.ExtendedAttributeValues = extendedAttributeValueList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries38 = putTimeSeries11.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries39 = postReflectedTimeSeries5.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        postReflectedTimeSeries5.Publish = false;
        java.lang.String str42 = postReflectedTimeSeries5.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + interpolationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postReflectedTimeSeries5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str6, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(putTimeSeries9);
        org.junit.Assert.assertNotNull(putTimeSeries11);
        org.junit.Assert.assertNull(appliedTagList15);
        org.junit.Assert.assertNotNull(location17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries35);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries36);
        org.junit.Assert.assertNotNull(putTimeSeries38);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries39);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test41687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41687");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        java.lang.String str7 = postDatumConvertedTimeSeries0.Parameter;
        java.lang.String str8 = postDatumConvertedTimeSeries0.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries10 = postDatumConvertedTimeSeries0.setLocationUniqueId("'.'SSSSSSS");
        java.lang.String str11 = postDatumConvertedTimeSeries10.getComputationPeriodIdentifier();
        java.lang.String str12 = postDatumConvertedTimeSeries10.getTargetStandardReferenceDatumIdentifier();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test41688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41688");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest0.Value = "'.'SSSSSSS";
        java.lang.String str3 = applyTagRequest0.UniqueId;
        applyTagRequest0.UniqueId = "hi!";
        applyTagRequest0.Value = "";
        java.lang.String str8 = applyTagRequest0.UniqueId;
        java.lang.String str9 = applyTagRequest0.getUniqueId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test41689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41689");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork2 = completedWork0.setGroundWaterLevelPerformed((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork4 = completedWork2.setBiologicalSampleTaken((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork6 = completedWork4.setSedimentSampleTaken((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork8 = completedWork4.setWaterQualitySampleTaken((java.lang.Boolean) true);
        java.lang.Boolean boolean9 = completedWork8.LevelsPerformed;
        java.lang.String str10 = completedWork8.getCollectionAgency();
        java.lang.Boolean boolean11 = completedWork8.WaterQualityCrossSectionPerformed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork13 = completedWork8.setOtherSampleTaken((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(completedWork2);
        org.junit.Assert.assertNotNull(completedWork4);
        org.junit.Assert.assertNotNull(completedWork6);
        org.junit.Assert.assertNotNull(completedWork8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(completedWork13);
    }

    @Test
    public void test41690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41690");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary4 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple3);
        java.lang.Integer int5 = importSummary0.getExpectedCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime8 = importHistoryEventSimple7.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple10 = importHistoryEventSimple7.setId("http");
        java.lang.String str11 = importHistoryEventSimple7.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary12 = observationImportSummary6.setImportHistoryEventSimple(importHistoryEventSimple7);
        java.lang.String str13 = importHistoryEventSimple7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary14 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime16 = importHistoryEventSimple15.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile17 = importHistoryEventSimple15.getImportedBy();
        java.time.OffsetDateTime offsetDateTime18 = null;
        importHistoryEventSimple15.ImportTime = offsetDateTime18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary20 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary22 = importSummary20.setErrorCount((java.lang.Integer) 4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList23 = importSummary20.NonErrorImportItems;
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(importSummary4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(importHistoryEventSimple10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(observationImportSummary12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http" + "'", str13, "http");
        org.junit.Assert.assertNotNull(importSummary14);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(userProfile17);
        org.junit.Assert.assertNotNull(importSummary20);
        org.junit.Assert.assertNotNull(importSummary22);
        org.junit.Assert.assertNull(importItemObjectList23);
    }

    @Test
    public void test41691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41691");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        getObservationsV2_0.StartResultTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType16 = null;
        controlConditionActivity15.ControlCleaned = controlCleanedType16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        controlConditionActivity15.DateCleaned = instant19;
        timeAlignedDataServiceRequest14.QueryFrom = instant19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.ActivityIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = timeAlignedDataServiceRequest14.setTimeSeriesOutputUnitIds(strList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_0.setCollectionMethodIds((java.util.List<java.lang.String>) strList34);
        java.lang.String str40 = getObservationsV2_0.getCursor();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest38);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test41692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41692");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = standardSimple0.setApplicabilityRange(interval1);
        java.lang.String str3 = standardSimple2.CustomId;
        java.lang.Boolean boolean4 = standardSimple2.Active;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = standardSimple2.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = standardSimple2.getApplicabilityRange();
        java.lang.Boolean boolean8 = standardSimple2.Active;
        java.lang.String str9 = standardSimple2.CustomId;
        java.lang.String str10 = standardSimple2.getIssuingOrganization();
        standardSimple2.CustomId = "/AQUARIUS/Acquisition/v2";
        org.junit.Assert.assertNotNull(standardSimple2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(standardSimple6);
        org.junit.Assert.assertNull(interval7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test41693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41693");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal2 = labInstructionMinimal0.setAnalysisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal4 = labInstructionMinimal0.setAnalysisMethod(analysisMethodMinimal3);
        java.lang.String str5 = analysisMethodMinimal3.Name;
        java.lang.String str6 = analysisMethodMinimal3.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal8 = analysisMethodMinimal3.setId("2021.4.62.0");
        java.lang.String str9 = analysisMethodMinimal8.getId();
        java.lang.String str10 = analysisMethodMinimal8.Name;
        org.junit.Assert.assertNotNull(labInstructionMinimal2);
        org.junit.Assert.assertNotNull(labInstructionMinimal4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(analysisMethodMinimal8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2021.4.62.0" + "'", str9, "2021.4.62.0");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test41694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41694");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str2 = postFieldVisitActivityWithTemplate1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = plannedFieldResult5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult12.setAuditAttributes(auditAttributes44);
        postFieldVisitActivityWithTemplate4.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport48 = postLabReport0.setAuditAttributes(auditAttributes44);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList49 = postLabReport0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport51 = postLabReport0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str52 = postLabReport0.getCaseNarrative();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = labResultDetails53.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory58.Id = "MaxInstant";
        java.lang.String str61 = laboratory58.PhoneNumber;
        java.lang.String str62 = laboratory58.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails63 = labResultDetails55.setLaboratory(laboratory58);
        postLabReport0.Laboratory = laboratory58;
        java.lang.String str65 = postLabReport0.CustomId;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(plannedFieldResult12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(postLabReport48);
        org.junit.Assert.assertNull(importHistoryEventSimpleList49);
        org.junit.Assert.assertNotNull(postLabReport51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(labResultDetails55);
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(labResultDetails63);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test41695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41695");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode2 = putQualityCode0.setColor("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode4 = putQualityCode2.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str5 = putQualityCode2.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode7 = putQualityCode2.setDisplayName("-PT87591240H");
        putQualityCode2.GradeCode = 4;
        java.lang.String str10 = putQualityCode2.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode12 = putQualityCode2.setDescription("MinInstant");
        org.junit.Assert.assertNotNull(putQualityCode2);
        org.junit.Assert.assertNotNull(putQualityCode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(putQualityCode7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(putQualityCode12);
    }

    @Test
    public void test41696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41696");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint2.Value;
        java.lang.String str4 = chartDataPoint2.getNumericResultUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint6 = chartDataPoint2.setValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint8 = chartDataPoint6.setValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint10 = chartDataPoint6.setObservationId("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint12 = chartDataPoint10.setMdlValue((java.lang.Double) 100.0d);
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(chartDataPoint6);
        org.junit.Assert.assertNotNull(chartDataPoint8);
        org.junit.Assert.assertNotNull(chartDataPoint10);
        org.junit.Assert.assertNotNull(chartDataPoint12);
    }

    @Test
    public void test41697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41697");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str3 = referencePointPeriod2.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase5 = referencePointPeriod2.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod2.Uncertainty = 10.0d;
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase9 = referencePointPeriod2.setValidFrom(instant8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        java.util.List<java.lang.String> strList17 = getObservationsV2_10.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        getObservationsV2_10.StartResultTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.ActivityIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setCollectionMethodIds((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary53.Reviewer = "";
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary53.MeasurementTime = instant56;
        postRecurringReport52.NextGenerationDate = instant56;
        java.time.Instant instant59 = postRecurringReport52.getNextGenerationDate();
        java.lang.String str60 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant59);
        metadataChangeTransactionListServiceRequest51.QueryFrom = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest62 = downchainProcessorListByRatingModelServiceRequest50.setQueryTo(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest64 = downchainProcessorListByRatingModelServiceRequest50.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant66 = qualifier65.DateApplied;
        java.lang.String str67 = qualifier65.User;
        java.lang.String str68 = qualifier65.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj70 = timeAlignedDataServiceRequest69.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant72 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse71.setNextToken(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest74 = timeAlignedDataServiceRequest69.setQueryFrom(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier75 = qualifier65.setDateApplied(instant72);
        java.time.Instant instant76 = qualifier75.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest77 = downchainProcessorListByRatingModelServiceRequest50.setQueryFrom(instant76);
        java.time.Instant instant78 = downchainProcessorListByRatingModelServiceRequest77.getQueryFrom();
        getObservationsV2_10.StartResultTime = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase80 = referencePointPeriodBase9.setValidFrom(instant78);
        referencePoint0.PrimarySinceDate = instant78;
        java.time.Instant instant82 = referencePoint0.getPrimarySinceDate();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList83 = referencePoint0.ReferencePointPeriods;
        java.lang.String str84 = referencePoint0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(referencePointPeriodBase5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(referencePointPeriodBase9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str60, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest62);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest64);
        org.junit.Assert.assertNull(instant66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest74);
        org.junit.Assert.assertNotNull(qualifier75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(referencePointPeriodBase80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNull(referencePointPeriodList83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test41698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41698");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = postAnalysisMethod0.setDescription("https");
        postAnalysisMethod0.Id = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod7 = postAnalysisMethod0.setDescription("/AQUARIUS/Acquisition/v2");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList8 = postAnalysisMethod7.ObservedProperties;
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postAnalysisMethod3);
        org.junit.Assert.assertNotNull(postAnalysisMethod7);
        org.junit.Assert.assertNull(observedPropertyList8);
    }

    @Test
    public void test41699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41699");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        java.lang.String str2 = getFieldVisitReadingsByLocationServiceRequest0.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest4 = getFieldVisitReadingsByLocationServiceRequest0.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        java.util.List<java.lang.String> strList21 = getObservationsV2_6.getLabReportIds();
        importItem5.Errors = getObservationsV2_6;
        java.lang.Object obj23 = importItem5.getExistingItem();
        importItem5.Input = "hi!";
        java.lang.Object obj26 = importItem5.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem28 = importItem5.setStatus(importItemStatusType27);
        importItem28.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate31.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = specimenTemplate31.setId("hi!");
        java.lang.Boolean boolean36 = specimenTemplate35.getFiltered();
        importItem28.Item = specimenTemplate35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray43 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_40.setDataClassifications((java.util.List<java.lang.String>) strList44);
        postTag39.PickListValues = strList44;
        java.util.ArrayList<java.lang.String> strList48 = postTag39.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor49 = processor38.setInputTimeSeriesUniqueIds(strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem50 = importItem28.setWarningMessages((java.util.List<java.lang.String>) strList48);
        getFieldVisitReadingsByLocationServiceRequest0.Parameters = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest53 = getFieldVisitReadingsByLocationServiceRequest0.setApplyDatumConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest55 = getFieldVisitReadingsByLocationServiceRequest0.setLocationIdentifier("2021.8.9990");
        java.lang.Boolean boolean56 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest0.ApplyDatumConversion = false;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + importItemStatusType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem28);
        org.junit.Assert.assertNotNull(specimenTemplate35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(processor49);
        org.junit.Assert.assertNotNull(importItem50);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest53);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest55);
        org.junit.Assert.assertNull(boolean56);
    }

    @Test
    public void test41700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41700");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location0.setUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.Double double6 = location0.Elevation;
        java.lang.Double double7 = location0.getLongitude();
        location0.UtcOffset = "/AQUARIUS/Acquisition/v2";
        location0.Longitude = 100.0d;
        java.lang.Double double12 = location0.getLatitude();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location14 = location0.setIdentifier("http");
        java.lang.Double double15 = location14.getElevation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList17 = getObservationsV2_16.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        getObservationsV2_16.ResultGrades = strList29;
        java.util.List<java.lang.String> strList34 = getObservationsV2_16.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary38.Reviewer = "";
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary38.MeasurementTime = instant41;
        postRecurringReport37.NextGenerationDate = instant41;
        java.time.Instant instant44 = postRecurringReport37.getNextGenerationDate();
        java.lang.String str45 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant44);
        metadataChangeTransactionListServiceRequest36.QueryFrom = instant44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest47 = downchainProcessorListByRatingModelServiceRequest35.setQueryTo(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest49 = downchainProcessorListByRatingModelServiceRequest35.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant51 = qualifier50.DateApplied;
        java.lang.String str52 = qualifier50.User;
        java.lang.String str53 = qualifier50.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary55.Reviewer = "";
        java.time.Instant instant58 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary55.MeasurementTime = instant58;
        postRecurringReport54.NextGenerationDate = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier61 = qualifier50.setDateApplied(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest62 = downchainProcessorListByRatingModelServiceRequest35.setQueryTo(instant58);
        getObservationsV2_16.EndObservedTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location64 = location14.setLastModified(instant58);
        java.time.Instant instant65 = location14.getLastModified();
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNotNull(location14);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str45, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest47);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest49);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(qualifier61);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest62);
        org.junit.Assert.assertNotNull(location64);
        org.junit.Assert.assertNotNull(instant65);
    }

    @Test
    public void test41701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41701");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        getObservationsV2_15.SpecimenIds = strList18;
        importItemObject14.WarningMessages = strList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject23 = importItemObject14.setRowId("'.'SSSSSSS");
        importItemObject14.RowId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.lang.String str26 = importItemObject14.getInput();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList27 = importItemObject14.getItemComparison();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(importItemObject23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(importChangeItemList27);
    }

    @Test
    public void test41702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41702");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocation getLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocation();
        getLocation0.LocationUniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocation getLocation4 = getLocation0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = getLocation4.LocationUniqueId;
        java.lang.String str6 = getLocation4.LocationUniqueId;
        org.junit.Assert.assertNotNull(getLocation4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test41703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41703");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory1 = attachment0.AttachmentCategory;
        java.lang.Double double2 = attachment0.GpsLongitude;
        java.lang.String str3 = attachment0.UploadedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment5 = attachment0.setUniqueId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.Double double7 = attachment6.getGpsLongitude();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList8 = attachment6.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment10 = attachment6.setUrl("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription13 = locationDescription11.setIdentifier("");
        locationDescription13.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str17 = locationMonitoringMethod16.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod19 = locationMonitoringMethod16.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList21, tagMetadataArray20);
        locationMonitoringMethod19.Tags = tagMetadataList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription24 = locationDescription13.setTags(tagMetadataList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment25 = attachment6.setTags(tagMetadataList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str27 = tagMetadata26.getValue();
        java.lang.String str28 = tagMetadata26.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str30 = tagMetadata29.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str32 = tagMetadata31.getValue();
        java.lang.String str33 = tagMetadata31.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] { tagMetadata26, tagMetadata29, tagMetadata31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList35, tagMetadataArray34);
        attachment25.Tags = tagMetadataList35;
        attachment5.Tags = tagMetadataList35;
        attachment5.FileName = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        java.lang.String str41 = attachment5.getUploadedByUser();
        org.junit.Assert.assertNull(attachmentCategory1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(tagMetadataList8);
        org.junit.Assert.assertNotNull(attachment10);
        org.junit.Assert.assertNotNull(locationDescription13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locationMonitoringMethod19);
        org.junit.Assert.assertNotNull(tagMetadataArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locationDescription24);
        org.junit.Assert.assertNotNull(attachment25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(tagMetadataArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test41704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41704");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report8 = report6.setDescription("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report10 = report8.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        report10.Comments = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report14 = report10.setUrl("POST");
        java.lang.String str15 = report10.getUserUniqueId();
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNotNull(report8);
        org.junit.Assert.assertNotNull(report10);
        org.junit.Assert.assertNotNull(report14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test41705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41705");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        java.time.Instant instant10 = locationDescriptionListServiceResponse1.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = getActivities0.setToStartTime(instant10);
        java.lang.String str12 = getActivities11.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = getActivities11.setLimit((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj16 = timeAlignedDataServiceRequest15.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        getObservationsV2_23.DepthUnitCustomId = "hi!";
        java.lang.String str26 = getObservationsV2_23.CustomId;
        java.util.List<java.lang.String> strList27 = getObservationsV2_23.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        getObservationsV2_28.SpecimenIds = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        getObservationsV2_28.QualityControlTypes = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_23.setMedia((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str45 = getObservationsV2_44.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        getObservationsV2_44.ProjectIds = strList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_23.setObservedPropertyIds((java.util.List<java.lang.String>) strList49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest54 = timeAlignedDataServiceRequest15.setTimeSeriesOutputUnitIds(strList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities55 = getActivities14.setActivityTypes((java.util.List<java.lang.String>) strList49);
        java.util.List<java.lang.String> strList56 = getActivities14.getActivityTemplateId();
        java.util.List<java.lang.String> strList57 = getActivities14.ActivityTypes;
        java.util.List<java.lang.String> strList58 = getActivities14.Media;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities60 = getActivities14.setFieldVisitId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(getActivities11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(getActivities14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest54);
        org.junit.Assert.assertNotNull(getActivities55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(getActivities60);
    }

    @Test
    public void test41706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41706");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.Long long9 = timeAlignedPoint8.getApprovalLevel2();
        java.lang.Long long10 = timeAlignedPoint8.ApprovalLevel1;
        timeAlignedPoint8.Method1 = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint8.setNumericValue7((java.lang.Double) 0.0d);
        java.lang.String str15 = timeAlignedPoint14.getMethod5();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test41707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41707");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate2 = postSpreadsheetTemplate0.setId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = postSpreadsheetTemplate2.getAuditAttributes();
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate2);
        org.junit.Assert.assertNull(auditAttributes3);
    }

    @Test
    public void test41708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41708");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        java.lang.String str4 = reading0.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading6 = reading0.setSensorUniqueId("hi!");
        reading6.MonitoringMethod = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        reading6.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = reading6.setManufacturer("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(reading6);
        org.junit.Assert.assertNotNull(reading12);
    }

    @Test
    public void test41709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41709");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation32 = importItemSamplingLocation30.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        java.util.List<java.lang.String> strList49 = getObservationsV2_34.getLabReportIds();
        importItem33.Errors = getObservationsV2_34;
        java.lang.Object obj51 = importItem33.getExistingItem();
        importItem33.Input = "hi!";
        java.lang.Object obj54 = importItem33.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType55 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem56 = importItem33.setStatus(importItemStatusType55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation57 = importItemSamplingLocation32.setStatus(importItemStatusType55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList59 = importItemObject58.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList61, importChangeItemArray60);
        importItemObject58.ItemComparison = importChangeItemList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject72 = importItemObject58.setExistingItem((java.lang.Object) putLocationTags64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser75 = openIdConnectUser73.setIdentifier("");
        java.lang.Boolean boolean76 = openIdConnectUser75.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject77 = importItemObject58.setErrors((java.lang.Object) openIdConnectUser75);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList78 = importItemObject77.ItemComparison;
        importItemSamplingLocation57.ItemComparison = importChangeItemList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon80 = importItemTaxon7.setItemComparison(importChangeItemList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon83 = importItemTaxon81.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str84 = importItemTaxon83.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon86 = importItemTaxon83.setInput("MinDuration");
        java.lang.Object obj87 = importItemTaxon86.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType88 = importItemTaxon86.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        importItemTaxon86.ExistingItem = taxon89;
        java.lang.String str91 = taxon89.Source;
        taxon89.ItisTsn = "/AQUARIUS";
        taxon89.ItisUrl = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon96 = importItemTaxon80.setExistingItem(taxon89);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNotNull(importItemSamplingLocation32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + importItemStatusType55 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType55.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem56);
        org.junit.Assert.assertNotNull(importItemSamplingLocation57);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(importChangeItemArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(importItemObject72);
        org.junit.Assert.assertNotNull(openIdConnectUser75);
        org.junit.Assert.assertNull(boolean76);
        org.junit.Assert.assertNotNull(importItemObject77);
        org.junit.Assert.assertNotNull(importChangeItemList78);
        org.junit.Assert.assertNotNull(importItemTaxon80);
        org.junit.Assert.assertNotNull(importItemTaxon83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(importItemTaxon86);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNull(importItemStatusType88);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(importItemTaxon96);
    }

    @Test
    public void test41710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41710");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.time.OffsetDateTime offsetDateTime1 = fieldVisit0.getStartTime();
        java.time.OffsetDateTime offsetDateTime2 = fieldVisit0.StartTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList3 = fieldVisit0.getPlannedFieldResults();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList4 = fieldVisit0.PlannedActivities;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = schedule5.setStartDate(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule9.setRecurrenceType(recurrenceType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule13 = schedule11.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 4);
        java.time.OffsetDateTime offsetDateTime14 = null;
        schedule11.LastGenerationDate = offsetDateTime14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule18 = schedule16.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType19 = schedule16.getRecurrenceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule21 = schedule16.setRecurrenceDayWeekly(recurrenceDayWeeklyType20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule22 = schedule11.setRecurrenceDayWeekly(recurrenceDayWeeklyType20);
        java.time.OffsetDateTime offsetDateTime23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule24 = schedule22.setLastGenerationDate(offsetDateTime23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime26 = postSchedule25.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime28 = putSchedule27.StartDate;
        java.time.OffsetDateTime offsetDateTime29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = putSchedule27.setEndDate(offsetDateTime29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = putSchedule30.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime32 = putSchedule30.getEndDate();
        java.time.OffsetDateTime offsetDateTime33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule34 = putSchedule30.setStartDate(offsetDateTime33);
        java.lang.Integer int35 = putSchedule30.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType36 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule30.RecurrenceDayMonthly = recurrenceDayMonthlyType36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule38 = postSchedule25.setRecurrenceDayMonthly(recurrenceDayMonthlyType36);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList39 = postSchedule38.SchedulePlannedActivities;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime41 = putSchedule40.StartDate;
        java.time.OffsetDateTime offsetDateTime42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule43 = putSchedule40.setEndDate(offsetDateTime42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = putSchedule43.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime45 = putSchedule43.getEndDate();
        java.time.OffsetDateTime offsetDateTime46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule47 = putSchedule43.setStartDate(offsetDateTime46);
        java.lang.Integer int48 = putSchedule43.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType49 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule43.RecurrenceDayMonthly = recurrenceDayMonthlyType49;
        postSchedule38.RecurrenceDayMonthly = recurrenceDayMonthlyType49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule52 = schedule24.setRecurrenceDayMonthly(recurrenceDayMonthlyType49);
        java.time.OffsetDateTime offsetDateTime53 = schedule52.getEndDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule55 = schedule52.setCustomId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        fieldVisit0.Schedule = schedule55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType57 = schedule55.RecurrenceDayMonthly;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNull(plannedFieldResultList3);
        org.junit.Assert.assertNull(plannedActivityList4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNotNull(schedule9);
        org.junit.Assert.assertTrue("'" + recurrenceType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule11);
        org.junit.Assert.assertNotNull(schedule13);
        org.junit.Assert.assertNotNull(schedule18);
        org.junit.Assert.assertNull(recurrenceType19);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY + "'", recurrenceDayWeeklyType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY));
        org.junit.Assert.assertNotNull(schedule21);
        org.junit.Assert.assertNotNull(schedule22);
        org.junit.Assert.assertNotNull(schedule24);
        org.junit.Assert.assertNull(offsetDateTime26);
        org.junit.Assert.assertNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(putSchedule30);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(putSchedule34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule38);
        org.junit.Assert.assertNull(schedulePlannedActivityList39);
        org.junit.Assert.assertNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(putSchedule43);
        org.junit.Assert.assertNull(auditAttributes44);
        org.junit.Assert.assertNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(putSchedule47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType49.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(schedule52);
        org.junit.Assert.assertNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(schedule55);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType57 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType57.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
    }

    @Test
    public void test41711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41711");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        java.lang.String str2 = postLaboratory0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        postLaboratory0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory13 = postLaboratory0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime15 = putSchedule14.StartDate;
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = putSchedule14.setEndDate(offsetDateTime16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putSchedule17.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime19 = null;
        putSchedule17.LastGenerationDate = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType21 = putSchedule17.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = plannedFieldResult22.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = labResultDetails26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult29 = plannedFieldResult22.setAuditAttributes(auditAttributes27);
        putSchedule17.AuditAttributes = auditAttributes27;
        postLaboratory13.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory33 = postLaboratory13.setEmailAddress("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = auditAttributes34.setCreationUserProfileId("'.'SSSSSSS");
        postLaboratory13.AuditAttributes = auditAttributes34;
        java.lang.String str38 = postLaboratory13.PointOfContact;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLaboratory13);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(putSchedule17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType21);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(labResultDetails28);
        org.junit.Assert.assertNotNull(plannedFieldResult29);
        org.junit.Assert.assertNotNull(postLaboratory33);
        org.junit.Assert.assertNotNull(auditAttributes36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test41712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41712");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str3 = tag2.Key;
        java.util.ArrayList<java.lang.String> strList4 = tag2.getPickListValues();
        java.lang.Boolean boolean5 = tag2.AppliesToLocationNotes;
        tag2.AppliesToSensorsGauges = false;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test41713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41713");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest2 = upchainProcessorListByTimeSeriesServiceRequest0.setTimeSeriesUniqueId("MaxDuration");
        java.time.Instant instant3 = upchainProcessorListByTimeSeriesServiceRequest0.QueryTo;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.ResultGrades;
        java.util.List<java.lang.String> strList9 = getChartDataV2_4.CollectionMethodIds;
        getChartDataV2_4.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        getObservationsV2_13.SpecimenIds = strList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray23 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = putLocationTags19.setTagUniqueIds(strList24);
        getObservationsV2_13.QualityControlTypes = strList24;
        java.util.List<java.lang.String> strList28 = getObservationsV2_13.getLabReportIds();
        importItem12.Errors = getObservationsV2_13;
        java.lang.Object obj30 = importItem12.getExistingItem();
        importItem12.Input = "hi!";
        java.lang.Object obj33 = importItem12.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = importItem12.setStatus(importItemStatusType34);
        importItem35.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate38.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = specimenTemplate38.setId("hi!");
        java.lang.Boolean boolean43 = specimenTemplate42.getFiltered();
        importItem35.Item = specimenTemplate42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_47.setDataClassifications((java.util.List<java.lang.String>) strList51);
        postTag46.PickListValues = strList51;
        java.util.ArrayList<java.lang.String> strList55 = postTag46.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor56 = processor45.setInputTimeSeriesUniqueIds(strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem57 = importItem35.setWarningMessages((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList58 = importItem35.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_4.setSpecimenIds(strList58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse60.setNextToken(instant61);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList63 = locationDescriptionListServiceResponse62.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant65 = ratingCurveListServiceRequest64.QueryTo;
        java.lang.String str66 = ratingCurveListServiceRequest64.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = dischargeSummary68.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant72 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse71.setNextToken(instant72);
        dischargeSummary68.MeasurementTime = instant72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse67.setNextToken(instant72);
        java.time.Instant instant76 = locationDescriptionListServiceResponse67.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType79 = null;
        controlConditionActivity78.ControlCleaned = controlCleanedType79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant82 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = locationDescriptionListServiceResponse81.setNextToken(instant82);
        controlConditionActivity78.DateCleaned = instant82;
        timeAlignedDataServiceRequest77.QueryFrom = instant82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse86 = locationDescriptionListServiceResponse67.setNextToken(instant82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest87 = ratingCurveListServiceRequest64.setQueryTo(instant82);
        java.time.Instant instant88 = ratingCurveListServiceRequest87.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse89 = locationDescriptionListServiceResponse62.setNextToken(instant88);
        getChartDataV2_4.EndResultTime = instant88;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest91 = upchainProcessorListByTimeSeriesServiceRequest0.setQueryFrom(instant88);
        java.time.Instant instant92 = upchainProcessorListByTimeSeriesServiceRequest0.getQueryFrom();
        java.time.Instant instant93 = upchainProcessorListByTimeSeriesServiceRequest0.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest95 = upchainProcessorListByTimeSeriesServiceRequest0.setTimeSeriesUniqueId("/AQUARIUS/Acquisition/v2");
        java.time.Instant instant96 = upchainProcessorListByTimeSeriesServiceRequest0.QueryTo;
        java.time.Instant instant97 = upchainProcessorListByTimeSeriesServiceRequest0.getQueryTo();
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(putLocationTags26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + importItemStatusType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem35);
        org.junit.Assert.assertNotNull(specimenTemplate42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(processor56);
        org.junit.Assert.assertNotNull(importItem57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNull(locationDescriptionList63);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(dischargeSummary70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse86);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse89);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNull(instant93);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest95);
        org.junit.Assert.assertNull(instant96);
        org.junit.Assert.assertNull(instant97);
    }

    @Test
    public void test41714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41714");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        java.lang.String str1 = tagDefinition0.UniqueId;
        tagDefinition0.UniqueId = "";
        java.lang.Boolean boolean4 = tagDefinition0.isAppliesToLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod7 = importItemAnalysisMethod5.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod9 = importItemAnalysisMethod7.setRowId("https");
        java.lang.String str10 = importItemAnalysisMethod7.RowId;
        java.util.List<java.lang.String> strList11 = importItemAnalysisMethod7.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList13 = importItemObject12.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList15, importChangeItemArray14);
        importItemObject12.ItemComparison = importChangeItemList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject26 = importItemObject12.setExistingItem((java.lang.Object) putLocationTags18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_29 = postUserV2_27.setUserProfile(userProfile28);
        java.lang.Object obj30 = postUserV2_29.getResponseType();
        java.util.List<java.lang.String> strList31 = postUserV2_29.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_33 = postUserV2_29.setEmail("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest35.ReportTitle = "MinDuration";
        java.lang.String str38 = reportListServiceRequest35.getLocationUniqueId();
        java.time.Instant instant39 = null;
        reportListServiceRequest35.CreatedFrom = instant39;
        java.lang.String[] strArray53 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        reportListServiceRequest35.TagValues = strList54;
        getExportSpecimens34.SamplingLocationIds = strList54;
        postUserV2_29.AccessGroups = strList54;
        importItemObject12.Fields = strList54;
        importItemAnalysisMethod7.WarningMessages = strList54;
        tagDefinition0.PickListValues = strList54;
        tagDefinition0.Key = "multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod7);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "https" + "'", str10, "https");
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(importChangeItemArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(importItemObject26);
        org.junit.Assert.assertNotNull(postUserV2_29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(postUserV2_33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test41715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41715");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        postSensor0.SerialNumber = "";
        java.lang.String str3 = postSensor0.getUnitId();
        java.lang.Object obj4 = postSensor0.getResponseType();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
    }

    @Test
    public void test41716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41716");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        java.lang.String str1 = postFieldTrip0.getCustomId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList2 = postFieldTrip0.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip4 = postFieldTrip0.setCustomId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        postFieldTrip0.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(domainObjectAttachmentList2);
        org.junit.Assert.assertNotNull(postFieldTrip4);
    }

    @Test
    public void test41717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41717");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.time.OffsetDateTime offsetDateTime8 = null;
        observation6.ObservedTime = offsetDateTime8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation6.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        observation11.ObservedProperty = observedProperty12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation11.setNumericResult(numericResult14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen20 = specimen18.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = specimen20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType22 = specimen20.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimen20.getTemplateCreatedFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = postSpecimen24.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = postSpecimen24.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        postSpecimen24.Preservative = preservativeType27;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList29 = postSpecimen24.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = postSpecimen30.AuditAttributes;
        java.lang.Boolean boolean32 = postSpecimen30.Filtered;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType34 = analyticalGroup33.getType();
        analyticalGroup33.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = null;
        analyticalGroupItem43.AnalysisMethod = analysisMethod46;
        java.lang.String str48 = analyticalGroupItem43.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = null;
        analyticalGroupItem54.AnalysisMethod = analysisMethod57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem38, analyticalGroupItem40, analyticalGroupItem43, analyticalGroupItem49, analyticalGroupItem52, analyticalGroupItem54 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList60, analyticalGroupItemArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup62 = analyticalGroup37.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList60);
        analyticalGroup33.AnalyticalGroupItems = analyticalGroupItemList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup33.AuditAttributes = auditAttributes64;
        java.lang.String str66 = analyticalGroup33.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType67 = analyticalGroup33.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType68 = analyticalGroup33.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType69 = analyticalGroup33.getType();
        postSpecimen30.AnalyticalGroup = analyticalGroup33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen71 = postSpecimen24.setAnalyticalGroup(analyticalGroup33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory72 = postSpecimen24.Laboratory;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList73 = postSpecimen24.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList75 = specimenWithObservations74.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType76 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations77 = specimenWithObservations74.setStatus(specimenViewStatusType76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType78 = specimenWithObservations77.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType79 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED;
        specimenWithObservations77.Status = specimenViewStatusType79;
        postSpecimen24.Status = specimenViewStatusType79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen82 = specimen20.setStatus(specimenViewStatusType79);
        observation17.Specimen = specimen20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType85 = analyticalGroup84.getType();
        analyticalGroup84.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup89 = analyticalGroup84.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        analyticalGroup84.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str92 = analyticalGroup84.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen93 = specimen20.setAnalyticalGroup(analyticalGroup84);
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(specimen20);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNull(specimenViewStatusType22);
        org.junit.Assert.assertNull(specimenTemplate23);
        org.junit.Assert.assertNull(auditAttributes25);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertTrue("'" + preservativeType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNull(extendedAttributeList29);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNull(analyticalGroupType34);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(analyticalGroup62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(analyticalGroupType67);
        org.junit.Assert.assertNull(analyticalGroupType68);
        org.junit.Assert.assertNull(analyticalGroupType69);
        org.junit.Assert.assertNotNull(postSpecimen71);
        org.junit.Assert.assertNull(laboratory72);
        org.junit.Assert.assertNull(extendedAttributeList73);
        org.junit.Assert.assertNull(extendedAttributeList75);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType76 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType76.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations77);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType78 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType78.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertTrue("'" + specimenViewStatusType79 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED + "'", specimenViewStatusType79.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED));
        org.junit.Assert.assertNotNull(specimen82);
        org.junit.Assert.assertNull(analyticalGroupType85);
        org.junit.Assert.assertNotNull(analyticalGroup89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str92, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(specimen93);
    }

    @Test
    public void test41718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41718");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = engineeredStructureDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = pointVelocityDischargeActivity8.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList10 = pointVelocityDischargeActivity8.Verticals;
        java.lang.String str11 = pointVelocityDischargeActivity8.SerialNumber;
        java.lang.Boolean boolean12 = pointVelocityDischargeActivity8.isMeterInspectedAfter();
        pointVelocityDischargeActivity8.MeterInspectedBefore = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        pointVelocityDischargeActivity8.Width = quantityWithDisplay15;
        pointVelocityDischargeActivity8.MeterInspectedBefore = true;
        java.lang.String str19 = pointVelocityDischargeActivity8.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        adcpDischargeActivity20.TransducerDepth = quantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary23.Reviewer = "";
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary23.MeasurementTime = instant26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary23.BaseFlow = baseFlowType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary23.DischargeUncertainty = dischargeUncertainty30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay33 = dischargeSummary32.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = dischargeSummary32.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay35 = dischargeSummary32.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = doubleWithDisplay36.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = dischargeSummary32.setDurationInHours(doubleWithDisplay36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty40 = dischargeUncertainty30.setQuantitativeUncertainty(doubleWithDisplay36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity41 = adcpDischargeActivity20.setTopEstimateExponent(doubleWithDisplay36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity43 = adcpDischargeActivity20.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = adcpDischargeActivity20.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str46 = datumConvertedQuantityWithDisplay45.TargetDatum;
        adcpDischargeActivity20.Area = datumConvertedQuantityWithDisplay45;
        pointVelocityDischargeActivity8.DistanceToMeter = datumConvertedQuantityWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity49 = engineeredStructureDischargeActivity0.setMeanHead((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay45);
        java.lang.String str50 = engineeredStructureDischargeActivity0.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement51 = engineeredStructureDischargeActivity0.DischargeChannelMeasurement;
        dischargeChannelMeasurement51.MonitoringMethod = "multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity7);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(verticalList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + baseFlowType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay33);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNull(doubleWithDisplay35);
        org.junit.Assert.assertNotNull(doubleWithDisplay38);
        org.junit.Assert.assertNotNull(dischargeSummary39);
        org.junit.Assert.assertNotNull(dischargeUncertainty40);
        org.junit.Assert.assertNotNull(adcpDischargeActivity41);
        org.junit.Assert.assertNotNull(adcpDischargeActivity43);
        org.junit.Assert.assertNull(doubleWithDisplay44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement51);
    }

    @Test
    public void test41719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41719");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultStatuseHistory getResultStatuseHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultStatuseHistory();
        java.lang.String str1 = getResultStatuseHistory0.Id;
        java.lang.Object obj2 = getResultStatuseHistory0.getResponseType();
        java.lang.String str3 = getResultStatuseHistory0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultStatuseHistory getResultStatuseHistory5 = getResultStatuseHistory0.setId("/api");
        getResultStatuseHistory5.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str8 = getResultStatuseHistory5.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getResultStatuseHistory5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str8, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test41720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41720");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        java.lang.String str4 = reading0.MonitoringMethod;
        reading0.SubLocationIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.util.ArrayList<java.lang.String> strList7 = reading0.ReadingQualifiers;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary8.BaseFlow = baseFlowType13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType15 = dischargeSummary8.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = dischargeSummary8.getDurationInHours();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = dischargeSummary8.Discharge;
        dischargeSummary8.MeanGageHeightWasDatumConverted = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment20 = dischargeSummary8.Adjustment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary8.DischargeUncertainty = dischargeUncertainty21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType24 = dischargeChannelMeasurement23.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement26 = dischargeChannelMeasurement23.setChannel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.time.Instant instant27 = null;
        dischargeChannelMeasurement26.EndTime = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType channelStabilityType29 = dischargeChannelMeasurement26.getChannelStability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay31 = null;
        adcpDischargeActivity30.TransducerDepth = quantityWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary33.Reviewer = "";
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary33.MeasurementTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType38 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary33.BaseFlow = baseFlowType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary33.DischargeUncertainty = dischargeUncertainty40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = dischargeSummary42.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = dischargeSummary42.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = dischargeSummary42.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay48 = doubleWithDisplay46.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary42.setDurationInHours(doubleWithDisplay46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty50 = dischargeUncertainty40.setQuantitativeUncertainty(doubleWithDisplay46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity51 = adcpDischargeActivity30.setTopEstimateExponent(doubleWithDisplay46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity53 = adcpDischargeActivity30.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay54 = adcpDischargeActivity30.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str56 = datumConvertedQuantityWithDisplay55.TargetDatum;
        adcpDischargeActivity30.Area = datumConvertedQuantityWithDisplay55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement58 = dischargeChannelMeasurement26.setDistanceToGage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay55);
        dischargeUncertainty21.QuantitativeUncertainty = datumConvertedQuantityWithDisplay55;
        reading0.AdjustmentAmount = datumConvertedQuantityWithDisplay55;
        datumConvertedQuantityWithDisplay55.Display = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + baseFlowType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNull(quantityWithDisplay17);
        org.junit.Assert.assertNull(adjustment20);
        org.junit.Assert.assertNull(channelMaterialType24);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement26);
        org.junit.Assert.assertNull(channelStabilityType29);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + baseFlowType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType38.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertNull(quantityWithDisplay44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(doubleWithDisplay48);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(dischargeUncertainty50);
        org.junit.Assert.assertNotNull(adcpDischargeActivity51);
        org.junit.Assert.assertNotNull(adcpDischargeActivity53);
        org.junit.Assert.assertNull(doubleWithDisplay54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement58);
    }

    @Test
    public void test41721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41721");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setMeanGageHeightMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeSummary0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary0.setParty("9999-12-31T23:59:59.999Z");
        java.time.Instant instant6 = dischargeSummary0.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType7 = dischargeSummary0.MeasurementGrade;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = dischargeSummary8.MeanGageHeight;
        java.time.Instant instant10 = dischargeSummary8.getMeasurementStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary8.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary13.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = dischargeSummary13.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = dischargeSummary13.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = doubleWithDisplay17.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary13.setDurationInHours(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType gageHeightCalculationType21 = dischargeSummary20.GageHeightCalculation;
        dischargeSummary20.QualityAssuranceComments = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary26.DifferenceDuringVisit = doubleWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment29 = dischargeSummary26.getAdjustment();
        java.time.Instant instant30 = dischargeSummary26.getMeasurementEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType31 = dischargeSummary26.getBaseFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType34 = null;
        controlConditionActivity33.ControlCleaned = controlCleanedType34;
        java.lang.String str36 = controlConditionActivity33.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary37.Reviewer = "";
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary37.MeasurementTime = instant40;
        controlConditionActivity33.DateCleaned = instant40;
        gageHeightReading32.ReadingTime = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = doubleWithDisplay44.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str47 = doubleWithDisplay46.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading48 = gageHeightReading32.setGageHeight(doubleWithDisplay46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary51.Reviewer = "";
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary51.MeasurementTime = instant54;
        postRecurringReport50.NextGenerationDate = instant54;
        java.time.Instant instant57 = postRecurringReport50.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset58 = statisticalDateTimeOffset49.setDateTimeOffset(instant57);
        gageHeightReading48.ReadingTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] gageHeightReadingArray60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] { gageHeightReading48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>) gageHeightReadingList61, gageHeightReadingArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = dischargeSummary26.setGageHeightReadings(gageHeightReadingList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary64 = dischargeSummary20.setGageHeightReadings(gageHeightReadingList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary65 = dischargeSummary12.setGageHeightReadings(gageHeightReadingList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary66 = dischargeSummary0.setGageHeightReadings(gageHeightReadingList61);
        java.lang.Boolean boolean67 = dischargeSummary66.IsValid;
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(measurementGradeType7);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(quantityWithDisplay15);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNotNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNull(gageHeightCalculationType21);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(adjustment29);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(baseFlowType31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(doubleWithDisplay46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(gageHeightReading48);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset58);
        org.junit.Assert.assertNotNull(gageHeightReadingArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dischargeSummary63);
        org.junit.Assert.assertNotNull(dischargeSummary64);
        org.junit.Assert.assertNotNull(dischargeSummary65);
        org.junit.Assert.assertNotNull(dischargeSummary66);
        org.junit.Assert.assertNull(boolean67);
    }

    @Test
    public void test41722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41722");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        java.lang.Integer int4 = putSchedule0.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup7 = samplingLocationGroup5.setDescription("POST");
        putSchedule0.SamplingLocationGroup = samplingLocationGroup7;
        java.lang.String str9 = samplingLocationGroup7.Id;
        samplingLocationGroup7.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit14 = putUnit12.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup15.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = unitGroup15.setSystemCode(unitGroupSystemCodeType18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit20 = putUnit14.setUnitGroup(unitGroup19);
        putUnit14.Id = "http://MaxDurationhttp/json/reply/Integer";
        putUnit14.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit26 = putUnit14.setId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity30 = samplingPlanPlannedActivity28.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = auditAttributes31.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity30.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = samplingPlanPlannedActivity30.AuditAttributes;
        putAccessGroup27.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup38 = putAccessGroup27.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putAccessGroup27.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime40 = auditAttributes39.ModificationTime;
        putUnit14.AuditAttributes = auditAttributes39;
        samplingLocationGroup7.AuditAttributes = auditAttributes39;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(samplingLocationGroup7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(putUnit14);
        org.junit.Assert.assertNotNull(unitGroup19);
        org.junit.Assert.assertNotNull(putUnit20);
        org.junit.Assert.assertNotNull(putUnit26);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity30);
        org.junit.Assert.assertNotNull(auditAttributes33);
        org.junit.Assert.assertNotNull(auditAttributes35);
        org.junit.Assert.assertNotNull(putAccessGroup38);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNull(offsetDateTime40);
    }

    @Test
    public void test41723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41723");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = correctionOperation0.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str3 = gapToleranceOperation2.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation5 = gapToleranceOperation2.setComments("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase8 = locationDatumPeriod6.setComment("'.'SSSSSSS");
        java.lang.String str9 = locationDatumPeriodBase8.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase13 = locationDatumPeriodBase8.setValidFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange14 = gapToleranceOperation2.setStartTime(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation17 = methodOperation15.setOperationType(metadataChangeOperationType16);
        java.lang.String str18 = methodOperation17.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType19 = methodOperation17.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation20 = gapToleranceOperation2.setOperationType(metadataChangeOperationType19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation21 = correctionOperation0.setOperationType(metadataChangeOperationType19);
        correctionOperation0.User = "http";
        java.lang.String str24 = correctionOperation0.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation26 = correctionOperation0.setComments("http://MaxDurationhttp/json/reply/String");
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(gapToleranceOperation5);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase13);
        org.junit.Assert.assertNotNull(timeRange14);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(gapToleranceOperation20);
        org.junit.Assert.assertNotNull(correctionOperation21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http" + "'", str24, "http");
        org.junit.Assert.assertNotNull(correctionOperation26);
    }

    @Test
    public void test41724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41724");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        reading5.MonitoringMethod = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement8 = reading5.getGroundWaterMeasurement();
        java.util.ArrayList<java.lang.String> strList9 = reading5.ReadingQualifiers;
        java.time.Instant instant10 = reading5.getTime();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(groundWaterMeasurement8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(instant10);
    }

    @Test
    public void test41725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41725");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPhoneNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory4 = putLaboratory2.setCustomId("");
        java.lang.String str5 = putLaboratory4.getPointOfContact();
        java.lang.String str6 = putLaboratory4.getPhoneNumber();
        java.lang.String str7 = putLaboratory4.getPointOfContact();
        putLaboratory4.PointOfContact = "zZZZZ";
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNotNull(putLaboratory4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str6, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test41726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41726");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4, observedPropertyArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod2.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod8 = postLabAnalysisMethod2.setAuditAttributes(auditAttributes7);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList9 = postLabAnalysisMethod8.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod8.setContext("/AQUARIUS/Acquisition/v2");
        java.lang.String str12 = postLabAnalysisMethod8.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = postLabAnalysisMethod8.setDescription("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str15 = postLabAnalysisMethod8.Name;
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observedPropertyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod8);
        org.junit.Assert.assertNotNull(observedPropertyList9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test41727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41727");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        java.time.OffsetDateTime offsetDateTime14 = labResultDetails13.getDateReceived();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation6.setLabResultDetails(labResultDetails13);
        java.time.OffsetDateTime offsetDateTime16 = null;
        labResultDetails13.DatePrepared = offsetDateTime16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails13.setAnalysisComment("/api");
        labResultDetails19.LabSampleId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(labResultDetails19);
    }

    @Test
    public void test41728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41728");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList3, samplingLocationGroupArray2);
        postAccessGroup1.SamplingLocationGroups = samplingLocationGroupList3;
        putAccessGroup0.SamplingLocationGroups = samplingLocationGroupList3;
        java.lang.String str7 = putAccessGroup0.Id;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList8 = putAccessGroup0.SamplingLocationGroups;
        org.junit.Assert.assertNotNull(samplingLocationGroupArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(samplingLocationGroupList8);
    }

    @Test
    public void test41729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41729");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList1 = importItem0.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.lang.Object obj3 = ratingCurveListServiceRequest2.getResponseType();
        java.lang.Object obj4 = ratingCurveListServiceRequest2.getResponseType();
        java.lang.Double double5 = ratingCurveListServiceRequest2.getUtcOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem6 = importItem0.setItem((java.lang.Object) double5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role9 = role7.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        role7.CanAddData = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role13 = role7.setCanAddOrRemoveLocations((java.lang.Boolean) false);
        role13.CanRemoveFieldVisits = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role17 = role13.setCanAssignUserRoles((java.lang.Boolean) true);
        java.lang.Boolean boolean18 = role17.isCanAddOrRemoveLocations();
        importItem6.Errors = role17;
        java.lang.Boolean boolean20 = role17.CanEditData;
        role17.UniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNull(importChangeItemList1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(importItem6);
        org.junit.Assert.assertNotNull(role9);
        org.junit.Assert.assertNotNull(role13);
        org.junit.Assert.assertNotNull(role17);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test41730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41730");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon38.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = putUnit45.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = putDetectioncondition47.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition50 = putDetectioncondition47.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity53 = samplingPlanPlannedActivity51.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = auditAttributes54.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity53.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = samplingPlanPlannedActivity53.AuditAttributes;
        putDetectioncondition47.AuditAttributes = auditAttributes58;
        putUnit45.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = auditAttributes58.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon63 = taxon38.setAuditAttributes(auditAttributes62);
        java.lang.String str64 = taxon63.Comment;
        java.lang.String str65 = taxon63.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon67 = taxon63.setSource("http://MaxDurationhttp");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(auditAttributes46);
        org.junit.Assert.assertNull(auditAttributes48);
        org.junit.Assert.assertNotNull(putDetectioncondition50);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity53);
        org.junit.Assert.assertNotNull(auditAttributes56);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(taxon63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(taxon67);
    }

    @Test
    public void test41731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41731");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries4 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType5 = postDatumConvertedTimeSeries0.InterpolationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries8 = postStatisticalDerivedTimeSeries6.setComment("'.'SSSSSSS");
        java.lang.String str9 = postStatisticalDerivedTimeSeries6.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries11 = postStatisticalDerivedTimeSeries6.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries13 = postStatisticalDerivedTimeSeries6.setInterpolationType(interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList15, extendedAttributeValueArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries17 = postStatisticalDerivedTimeSeries6.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries18 = postDatumConvertedTimeSeries0.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries20 = postDatumConvertedTimeSeries18.setUtcOffset("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Boolean boolean21 = postDatumConvertedTimeSeries20.isTargetIsLocalAssumedDatum();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries4);
        org.junit.Assert.assertNull(interpolationType5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries11);
        org.junit.Assert.assertTrue("'" + interpolationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries13);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries18);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries20);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test41732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41732");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList1 = locationDatumResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList3 = locationDatumResponse2.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList4 = locationDatumResponse2.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant6 = locationDatumPeriod5.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod8 = locationDatumPeriod5.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection9 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase10 = locationDatumPeriod5.setMeasurementDirection(measurementDirection9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase13 = locationDatumPeriod11.setComment("'.'SSSSSSS");
        java.lang.String str14 = locationDatumPeriod11.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase16 = locationDatumPeriod11.setComment("MaxInstant");
        locationDatumPeriod11.Uncertainty = 0.0d;
        java.lang.String str19 = locationDatumPeriod11.Comment;
        locationDatumPeriod11.AppliedByUser = "https";
        locationDatumPeriod11.Method = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase27 = locationDatumPeriod25.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase29 = locationDatumPeriod25.setComment("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection30 = locationDatumPeriod25.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection31 = locationDatumPeriod25.MeasurementDirection;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant33 = locationDatumPeriod32.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod35 = locationDatumPeriod32.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection36 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase37 = locationDatumPeriod32.setMeasurementDirection(measurementDirection36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod[] locationDatumPeriodArray38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod[] { locationDatumPeriod5, locationDatumPeriod11, locationDatumPeriod24, locationDatumPeriod25, locationDatumPeriod32 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod>) locationDatumPeriodList39, locationDatumPeriodArray38);
        locationDatumResponse2.Results = locationDatumPeriodList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse42 = locationDatumResponse0.setResults(locationDatumPeriodList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList44 = locationDatumResponse43.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList46 = locationDatumResponse45.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList48 = locationDatumResponse47.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList49 = locationDatumResponse47.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant51 = locationDatumPeriod50.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod53 = locationDatumPeriod50.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection54 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase55 = locationDatumPeriod50.setMeasurementDirection(measurementDirection54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase58 = locationDatumPeriod56.setComment("'.'SSSSSSS");
        java.lang.String str59 = locationDatumPeriod56.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase61 = locationDatumPeriod56.setComment("MaxInstant");
        locationDatumPeriod56.Uncertainty = 0.0d;
        java.lang.String str64 = locationDatumPeriod56.Comment;
        locationDatumPeriod56.AppliedByUser = "https";
        locationDatumPeriod56.Method = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase72 = locationDatumPeriod70.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase74 = locationDatumPeriod70.setComment("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection75 = locationDatumPeriod70.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection76 = locationDatumPeriod70.MeasurementDirection;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant78 = locationDatumPeriod77.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod80 = locationDatumPeriod77.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection81 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase82 = locationDatumPeriod77.setMeasurementDirection(measurementDirection81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod[] locationDatumPeriodArray83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod[] { locationDatumPeriod50, locationDatumPeriod56, locationDatumPeriod69, locationDatumPeriod70, locationDatumPeriod77 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList84 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod>) locationDatumPeriodList84, locationDatumPeriodArray83);
        locationDatumResponse47.Results = locationDatumPeriodList84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse87 = locationDatumResponse45.setResults(locationDatumPeriodList84);
        locationDatumResponse43.Results = locationDatumPeriodList84;
        locationDatumResponse0.Results = locationDatumPeriodList84;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList90 = locationDatumResponse0.Results;
        org.junit.Assert.assertNull(locationDatumPeriodList1);
        org.junit.Assert.assertNull(locationDatumPeriodList3);
        org.junit.Assert.assertNull(locationDatumPeriodList4);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(locationDatumPeriod8);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase10);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MaxInstant" + "'", str19, "MaxInstant");
        org.junit.Assert.assertNotNull(locationDatumPeriodBase27);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase29);
        org.junit.Assert.assertNull(measurementDirection30);
        org.junit.Assert.assertNull(measurementDirection31);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNotNull(locationDatumPeriod35);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase37);
        org.junit.Assert.assertNotNull(locationDatumPeriodArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locationDatumResponse42);
        org.junit.Assert.assertNull(locationDatumPeriodList44);
        org.junit.Assert.assertNull(locationDatumPeriodList46);
        org.junit.Assert.assertNull(locationDatumPeriodList48);
        org.junit.Assert.assertNull(locationDatumPeriodList49);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNotNull(locationDatumPeriod53);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase55);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "MaxInstant" + "'", str64, "MaxInstant");
        org.junit.Assert.assertNotNull(locationDatumPeriodBase72);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase74);
        org.junit.Assert.assertNull(measurementDirection75);
        org.junit.Assert.assertNull(measurementDirection76);
        org.junit.Assert.assertNull(instant78);
        org.junit.Assert.assertNotNull(locationDatumPeriod80);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase82);
        org.junit.Assert.assertNotNull(locationDatumPeriodArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(locationDatumResponse87);
        org.junit.Assert.assertNotNull(locationDatumPeriodList90);
    }

    @Test
    public void test41733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41733");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation();
        java.lang.String str1 = qualifierOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        java.time.Instant instant11 = postRecurringReport4.getNextGenerationDate();
        java.lang.String str12 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant11);
        metadataChangeTransactionListServiceRequest3.QueryFrom = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest14 = downchainProcessorListByRatingModelServiceRequest2.setQueryTo(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest16 = downchainProcessorListByRatingModelServiceRequest2.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant18 = qualifier17.DateApplied;
        java.lang.String str19 = qualifier17.User;
        java.lang.String str20 = qualifier17.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = qualifier17.setDateApplied(instant24);
        java.time.Instant instant28 = qualifier27.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest29 = downchainProcessorListByRatingModelServiceRequest2.setQueryFrom(instant28);
        downchainProcessorListByRatingModelServiceRequest29.RatingModelIdentifier = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str33 = inspection32.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection35 = inspection32.setSubLocationIdentifier("");
        inspection32.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str38 = inspection32.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str40 = timeSeriesDescription39.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark41.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList45 = fieldVisitDataServiceResponse44.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse47 = fieldVisitDataServiceResponse44.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary48.Reviewer = "";
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary48.MeasurementTime = instant51;
        fieldVisitDataServiceResponse44.ResponseTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark54 = locationRemark41.setCreateTime(instant51);
        timeSeriesDescription39.LastModified = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection56 = inspection32.setTime(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest57 = downchainProcessorListByRatingModelServiceRequest29.setQueryTo(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation58 = qualifierOperation0.setDateAppliedUtc(instant51);
        qualifierOperation0.User = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation62 = qualifierOperation0.setUser("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest();
        java.time.Instant instant64 = upchainProcessorListByTimeSeriesServiceRequest63.QueryFrom;
        java.lang.Object obj65 = upchainProcessorListByTimeSeriesServiceRequest63.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark68 = locationRemark66.setDescription("MaxInstant");
        java.lang.String str69 = locationRemark68.getTypeName();
        java.time.Instant instant70 = locationRemark68.CreateTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark72 = locationRemark68.setTypeName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str74 = referencePointPeriod73.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase76 = referencePointPeriod73.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod73.Uncertainty = 10.0d;
        java.time.Instant instant79 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase80 = referencePointPeriod73.setValidFrom(instant79);
        locationRemark68.ToTime = instant79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest82 = upchainProcessorListByTimeSeriesServiceRequest63.setQueryFrom(instant79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest84 = upchainProcessorListByTimeSeriesServiceRequest82.setTimeSeriesUniqueId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.time.Instant instant85 = upchainProcessorListByTimeSeriesServiceRequest82.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation86 = qualifierOperation0.setDateAppliedUtc(instant85);
        qualifierOperation86.User = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str12, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest14);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(qualifier27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(inspection35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList45);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationRemark54);
        org.junit.Assert.assertNotNull(inspection56);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest57);
        org.junit.Assert.assertNotNull(qualifierOperation58);
        org.junit.Assert.assertNotNull(qualifierOperation62);
        org.junit.Assert.assertNull(instant64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertNotNull(locationRemark68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(instant70);
        org.junit.Assert.assertNotNull(locationRemark72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(referencePointPeriodBase76);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(referencePointPeriodBase80);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest82);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(qualifierOperation86);
    }

    @Test
    public void test41734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41734");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription3 = locationDescription1.setIdentifier("");
        java.util.ArrayList<java.lang.String> strList4 = locationDescription3.getSecondaryFolders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType6 = getExtendedAttributes5.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str8 = deleteFieldVisits7.getSort();
        java.util.List<java.lang.String> strList9 = deleteFieldVisits7.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        java.util.List<java.lang.String> strList17 = getObservationsV2_10.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        getObservationsV2_10.StartResultTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.ActivityIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setCollectionMethodIds((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits50 = deleteFieldVisits7.setSamplingPlanIds((java.util.List<java.lang.String>) strList44);
        getExtendedAttributes5.Ids = strList44;
        locationDescription3.SecondaryFolders = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen53 = importItemSpecimen0.setWarningMessages((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen55 = importItemSpecimen0.setExistingItem(specimen54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = postSpecimen56.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = postSpecimen56.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType59 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        postSpecimen56.Preservative = preservativeType59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity61 = postSpecimen56.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList63 = specimenWithObservations62.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType64 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations65 = specimenWithObservations62.setStatus(specimenViewStatusType64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType66 = specimenWithObservations65.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType67 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED;
        specimenWithObservations65.Status = specimenViewStatusType67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen69 = postSpecimen56.setStatus(specimenViewStatusType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen71 = postSpecimen69.setName("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen72 = importItemSpecimen55.setErrors((java.lang.Object) postSpecimen71);
        java.lang.String str73 = importItemSpecimen55.RowId;
        org.junit.Assert.assertNotNull(locationDescription3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(appliesToType6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(deleteFieldVisits50);
        org.junit.Assert.assertNotNull(importItemSpecimen53);
        org.junit.Assert.assertNotNull(importItemSpecimen55);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNull(auditAttributes58);
        org.junit.Assert.assertTrue("'" + preservativeType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType59.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNull(activity61);
        org.junit.Assert.assertNull(extendedAttributeList63);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType64.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations65);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertTrue("'" + specimenViewStatusType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED + "'", specimenViewStatusType67.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED));
        org.junit.Assert.assertNotNull(postSpecimen69);
        org.junit.Assert.assertNotNull(postSpecimen71);
        org.junit.Assert.assertNotNull(importItemSpecimen72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test41735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41735");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser();
        java.lang.Object obj1 = postActiveDirectoryUser0.getResponseType();
        postActiveDirectoryUser0.ActiveDirectorySid = "****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser5 = postActiveDirectoryUser0.setUserPrincipalName("");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNotNull(postActiveDirectoryUser5);
    }

    @Test
    public void test41736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41736");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str1 = levelSurveyActivity0.getParty();
        java.lang.String str2 = levelSurveyActivity0.OriginReferencePointUniqueId;
        java.lang.String str3 = levelSurveyActivity0.Method;
        levelSurveyActivity0.Method = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity7 = levelSurveyActivity0.setParty("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(levelSurveyActivity7);
    }

    @Test
    public void test41737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41737");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity0.setRefreshed((java.lang.Boolean) true);
        java.lang.Object obj7 = postActivity6.getResponseType();
        java.lang.String str8 = postActivity6.CustomId;
        java.lang.Boolean boolean9 = postActivity6.Refreshed;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation12 = importItemSamplingLocation10.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList13 = importItemSamplingLocation10.ItemComparison;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList14 = importItemSamplingLocation10.ItemComparison;
        java.lang.Object obj15 = importItemSamplingLocation10.getErrors();
        java.util.List<java.lang.String> strList16 = importItemSamplingLocation10.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan18 = postFieldVisit17.SamplingPlan;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList19 = postFieldVisit17.getPlannedFieldResults();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType20 = postFieldVisit17.PlanningStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation21 = postFieldVisit17.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str24 = metricConfiguration23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty25.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration28 = metricConfiguration23.setObservedProperty(observedProperty25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType29 = observedProperty25.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup31 = postObservedProperty30.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = null;
        quantity32.Unit = unit33;
        postObservedProperty30.LowerLimit = quantity32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity36 = postObservedProperty30.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit37 = quantity36.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = observedProperty25.setUpperLimit(quantity36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation39 = samplingLocation22.setElevation(quantity36);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList40 = samplingLocation39.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList43, plannedActivityArray42);
        putFieldVisit41.PlannedActivities = plannedActivityList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str47 = domainObjectAttachment46.getId();
        java.lang.String str48 = domainObjectAttachment46.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = domainObjectAttachment46.setAttachment(attachment49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str52 = domainObjectAttachment51.getId();
        java.lang.String str53 = domainObjectAttachment51.getId();
        domainObjectAttachment51.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = domainObjectAttachment51.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str59 = domainObjectAttachment58.getId();
        java.lang.String str60 = domainObjectAttachment58.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = domainObjectAttachment58.setAttachment(attachment61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str64 = domainObjectAttachment63.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str66 = domainObjectAttachment65.getId();
        java.lang.String str67 = domainObjectAttachment65.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment69 = domainObjectAttachment65.setAttachment(attachment68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str71 = domainObjectAttachment70.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment46, domainObjectAttachment51, domainObjectAttachment58, domainObjectAttachment63, domainObjectAttachment65, domainObjectAttachment70 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList73, domainObjectAttachmentArray72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit75 = putFieldVisit41.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList73);
        samplingLocation39.Attachments = domainObjectAttachmentList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation78 = samplingLocation39.setId("2021.4.62.0");
        java.lang.String str79 = samplingLocation78.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit80 = postFieldVisit17.setSamplingLocation(samplingLocation78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation81 = importItemSamplingLocation10.setExistingItem(samplingLocation78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = locationType82.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType85 = locationType82.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType87 = locationType85.setId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation88 = samplingLocation78.setType(locationType87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity89 = postActivity6.setSamplingLocation(samplingLocation78);
        java.lang.String str90 = samplingLocation78.getHorizontalCollectionMethod();
        java.lang.String str91 = samplingLocation78.getName();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(importItemSamplingLocation12);
        org.junit.Assert.assertNull(importChangeItemList13);
        org.junit.Assert.assertNull(importChangeItemList14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(samplingPlan18);
        org.junit.Assert.assertNull(plannedFieldResultList19);
        org.junit.Assert.assertNull(planningStatusType20);
        org.junit.Assert.assertNull(samplingLocation21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(metricConfiguration28);
        org.junit.Assert.assertNull(resultType29);
        org.junit.Assert.assertNull(unitGroup31);
        org.junit.Assert.assertNotNull(quantity36);
        org.junit.Assert.assertNull(unit37);
        org.junit.Assert.assertNotNull(observedProperty38);
        org.junit.Assert.assertNotNull(samplingLocation39);
        org.junit.Assert.assertNull(domainObjectAttachmentList40);
        org.junit.Assert.assertNotNull(plannedActivityArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(domainObjectAttachment50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(domainObjectAttachment57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(domainObjectAttachment62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(domainObjectAttachment69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(putFieldVisit75);
        org.junit.Assert.assertNotNull(samplingLocation78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(postFieldVisit80);
        org.junit.Assert.assertNotNull(importItemSamplingLocation81);
        org.junit.Assert.assertNull(auditAttributes83);
        org.junit.Assert.assertNotNull(locationType85);
        org.junit.Assert.assertNotNull(locationType87);
        org.junit.Assert.assertNotNull(samplingLocation88);
        org.junit.Assert.assertNotNull(postActivity89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test41738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41738");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str4 = getExportObservations3.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = getExportObservations3.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = getExportObservations3.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport9.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant12 = recurringReport9.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit13.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant17 = locationDatumPeriod16.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod19 = locationDatumPeriod16.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription27 = timeSeriesDescription20.setRawStartTime(instant24);
        locationDatumPeriod16.ValidFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription29 = fieldVisit13.setLastMatchedTime(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport30 = recurringReport9.setNextGenerationDate(instant24);
        getExportObservations3.StartModificationTime = instant24;
        java.lang.String str32 = getExportObservations3.ActivityCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj34 = postQualifier33.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean38 = roleFlattened37.CanRemoveFieldVisits;
        roleFlattened37.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str42 = putLocationType41.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        java.util.List<java.lang.String> strList53 = getObservationsV2_49.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray64 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = putLocationTags60.setTagUniqueIds(strList65);
        getObservationsV2_54.QualityControlTypes = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_49.setMedia((java.util.List<java.lang.String>) strList65);
        putLocationType41.ExtendedAttributeDefinitionIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase71 = roleFlattened37.setRoleApprovalTransitions(strList65);
        putBulkEditResultGradesV2_36.ResultGrades = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities73 = getActivities35.setSamplingLocationIds((java.util.List<java.lang.String>) strList65);
        postQualifier33.GroupIdentifiers = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations75 = getExportObservations3.setActivityTypes((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_76 = getObservationExportIIV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList65);
        java.lang.Double double77 = getObservationExportIIV2_76.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_79 = getObservationExportIIV2_76.setMaxNumericResultValue((java.lang.Double) 100.0d);
        java.util.List<java.lang.String> strList80 = getObservationExportIIV2_76.getObservedPropertyIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getExportObservations6);
        org.junit.Assert.assertNotNull(getExportObservations8);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNotNull(locationDatumPeriod19);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(timeSeriesDescription27);
        org.junit.Assert.assertNotNull(fieldVisitDescription29);
        org.junit.Assert.assertNotNull(recurringReport30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putLocationTags67);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(roleFlattenedBase71);
        org.junit.Assert.assertNotNull(getActivities73);
        org.junit.Assert.assertNotNull(getExportObservations75);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_76);
        org.junit.Assert.assertNull(double77);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_79);
        org.junit.Assert.assertNull(strList80);
    }

    @Test
    public void test41739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41739");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setMethod("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries7 = postBasicTimeSeries5.setLocationUniqueId("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries9 = postBasicTimeSeries5.setDescription("9999-12-31T23:59:59.9999999Z");
        java.lang.String str10 = postBasicTimeSeries9.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries12 = postBasicTimeSeries9.setUtcOffset("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries7);
        org.junit.Assert.assertNotNull(postBasicTimeSeries9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postBasicTimeSeries12);
    }

    @Test
    public void test41740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41740");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod();
        java.lang.String str1 = postLocationDatumPeriod0.getStandardIdentifier();
        java.lang.String str2 = postLocationDatumPeriod0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod4 = postLocationDatumPeriod0.setStandardIdentifier("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str6 = referencePointPeriod5.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection7 = referencePointPeriod5.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod9 = referencePointPeriod5.setAppliedByUser("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase12 = locationDatumPeriod10.setComment("'.'SSSSSSS");
        java.lang.String str13 = locationDatumPeriod10.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase15 = locationDatumPeriod10.setComment("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom;
        locationDatumPeriodBase15.MeasurementDirection = measurementDirection16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase18 = referencePointPeriod9.setMeasurementDirection(measurementDirection16);
        postLocationDatumPeriod0.MeasurementDirection = measurementDirection16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod21 = postLocationDatumPeriod0.setStandardIdentifier("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod23 = postLocationDatumPeriod21.setLocationUniqueId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod25 = postLocationDatumPeriod21.setStandardIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLocationDatumPeriod4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(measurementDirection7);
        org.junit.Assert.assertNotNull(referencePointPeriod9);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase15);
        org.junit.Assert.assertTrue("'" + measurementDirection16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom + "'", measurementDirection16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom));
        org.junit.Assert.assertNotNull(referencePointPeriodBase18);
        org.junit.Assert.assertNotNull(postLocationDatumPeriod21);
        org.junit.Assert.assertNotNull(postLocationDatumPeriod23);
        org.junit.Assert.assertNotNull(postLocationDatumPeriod25);
    }

    @Test
    public void test41741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41741");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = gradeOperation0.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation3 = gradeOperation0.setStackPosition((java.lang.Integer) 4);
        gradeOperation3.StackPosition = 2;
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNotNull(gradeOperation3);
    }

    @Test
    public void test41742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41742");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = extendedAttributeDefinition0.setMandatory((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = extendedAttributeDefinition2.setDefaultValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType5 = extendedAttributeDefinition2.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = extendedAttributeDefinition2.AuditAttributes;
        extendedAttributeDefinition2.DefaultValue = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition10 = extendedAttributeDefinition2.setMandatory((java.lang.Boolean) true);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList11 = extendedAttributeDefinition10.getDropDownListItems();
        java.lang.Boolean boolean12 = extendedAttributeDefinition10.Mandatory;
        org.junit.Assert.assertNotNull(extendedAttributeDefinition2);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition4);
        org.junit.Assert.assertNull(appliesToType5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition10);
        org.junit.Assert.assertNull(extendedAttributeListItemList11);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
    }

    @Test
    public void test41743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41743");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = locationGroupType6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType9 = locationGroupType6.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = locationGroupType11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType14 = locationGroupType11.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = locationGroupType11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str17 = putActivityTemplate16.getId();
        java.lang.String str18 = putActivityTemplate16.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = auditAttributes19.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate22 = putActivityTemplate16.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType23 = locationGroupType11.setAuditAttributes(auditAttributes21);
        putSamplingLocationGroup0.LocationGroupType = locationGroupType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = putSamplingLocationGroup0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup27 = putSamplingLocationGroup0.setId("multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup29 = putSamplingLocationGroup27.setName("");
        putSamplingLocationGroup27.Name = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str32 = putSamplingLocationGroup27.getId();
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(locationGroupType9);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(locationGroupType14);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(auditAttributes21);
        org.junit.Assert.assertNotNull(putActivityTemplate22);
        org.junit.Assert.assertNotNull(locationGroupType23);
        org.junit.Assert.assertNull(auditAttributes25);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup27);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****" + "'", str32, "multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****");
    }

    @Test
    public void test41744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41744");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setSubjectIdentifier("");
        java.lang.String str3 = openIdConnectUser2.getLastName();
        openIdConnectUser2.SubjectIdentifier = "/AQUARIUS/Acquisition/v2";
        openIdConnectUser2.SubjectIdentifier = "https";
        java.lang.Boolean boolean8 = openIdConnectUser2.Active;
        java.lang.String str9 = openIdConnectUser2.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser11 = openIdConnectUser2.setSubjectIdentifier("MaxDuration");
        java.lang.Boolean boolean12 = openIdConnectUser2.isSystem();
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(openIdConnectUser11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test41745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41745");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_38 = getChartDataV2_36.setDepthValue((java.lang.Double) 10.0d);
        java.util.List<java.lang.String> strList39 = getChartDataV2_38.Search;
        java.util.List<java.lang.String> strList40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_41 = getChartDataV2_38.setObservedPropertyIds(strList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField43.setDisplayName("");
        java.lang.Boolean boolean46 = extendedAttributeField45.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj48 = timeAlignedDataServiceRequest47.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = getObservationsV2_49.setDataClassifications((java.util.List<java.lang.String>) strList53);
        getObservationsV2_55.DepthUnitCustomId = "hi!";
        java.lang.String str58 = getObservationsV2_55.CustomId;
        java.util.List<java.lang.String> strList59 = getObservationsV2_55.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray70 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags66.setTagUniqueIds(strList71);
        getObservationsV2_60.QualityControlTypes = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_55.setMedia((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str77 = getObservationsV2_76.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        getObservationsV2_78.SpecimenIds = strList81;
        getObservationsV2_76.ProjectIds = strList81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = getObservationsV2_55.setObservedPropertyIds((java.util.List<java.lang.String>) strList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest86 = timeAlignedDataServiceRequest47.setTimeSeriesOutputUnitIds(strList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField87 = extendedAttributeField45.setValueOptions((java.util.List<java.lang.String>) strList81);
        putBulkEditResultGradesV2_42.AnalysisMethodSimpleIds = strList81;
        java.lang.String str89 = putBulkEditResultGradesV2_42.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType90 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_91 = putBulkEditResultGradesV2_42.setSampleFraction(sampleFractionType90);
        getChartDataV2_41.SampleFraction = sampleFractionType90;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_93 = getGroupedObservationsV2_26.setSampleFraction(sampleFractionType90);
        java.util.List<java.lang.String> strList94 = getGroupedObservationsV2_93.getIds();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(getChartDataV2_38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(getChartDataV2_41);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_85);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest86);
        org.junit.Assert.assertNotNull(extendedAttributeField87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + sampleFractionType90 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED + "'", sampleFractionType90.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED));
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_91);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_93);
        org.junit.Assert.assertNull(strList94);
    }

    @Test
    public void test41746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41746");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        java.lang.String str2 = postLaboratory0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        postLaboratory0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory13 = postLaboratory0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime15 = putSchedule14.StartDate;
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = putSchedule14.setEndDate(offsetDateTime16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putSchedule17.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime19 = null;
        putSchedule17.LastGenerationDate = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType21 = putSchedule17.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = plannedFieldResult22.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = labResultDetails26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult29 = plannedFieldResult22.setAuditAttributes(auditAttributes27);
        putSchedule17.AuditAttributes = auditAttributes27;
        postLaboratory13.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory33 = postLaboratory13.setEmailAddress("0001-01-01T00:00:00.000Z");
        postLaboratory13.Name = "MaxInstant";
        java.lang.Object obj36 = postLaboratory13.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLaboratory13);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(putSchedule17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType21);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(labResultDetails28);
        org.junit.Assert.assertNotNull(plannedFieldResult29);
        org.junit.Assert.assertNotNull(postLaboratory33);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Laboratory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Laboratory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Laboratory");
    }

    @Test
    public void test41747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41747");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange auditChange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange();
        java.lang.String str1 = auditChange0.getToId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange auditChange3 = auditChange0.setFromId("9999-12-31T23:59:59.999Z");
        auditChange3.FromId = "0001-01-01T00:00:00.000Z";
        auditChange3.FromId = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(auditChange3);
    }

    @Test
    public void test41748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41748");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent4 = importHistoryEvent0.setImportedBy(userProfile3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile5 = importHistoryEvent4.ImportedBy;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition7.setValueType(tagValueType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition11 = tagDefinition7.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition13 = tagDefinition11.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition15 = tagDefinition11.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj17 = timeAlignedDataServiceRequest16.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = timeAlignedDataServiceRequest16.setQueryFrom(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest30 = timeAlignedDataServiceRequest16.setTimeSeriesOutputUnitIds(strList27);
        tagDefinition15.PickListValues = strList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_32 = getGroupedObservationsV2_6.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType33 = getGroupedObservationsV2_32.FieldResultType;
        getGroupedObservationsV2_32.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_37 = getGroupedObservationsV2_32.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList38 = getGroupedObservationsV2_32.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_40 = getGroupedObservationsV2_32.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_42 = getGroupedObservationsV2_32.setCustomId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str44 = getChartDataV2_43.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_43.setFilterId("");
        java.util.List<java.lang.String> strList47 = getChartDataV2_43.ResultGrades;
        getChartDataV2_43.MinNumericResultValue = 100.0d;
        java.lang.Double double50 = getChartDataV2_43.MaxNumericResultValue;
        java.util.List<java.lang.String> strList51 = getChartDataV2_43.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str53 = inspection52.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection55 = inspection52.setSubLocationIdentifier("");
        inspection52.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str58 = inspection52.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str60 = timeSeriesDescription59.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark63 = locationRemark61.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList65 = fieldVisitDataServiceResponse64.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse67 = fieldVisitDataServiceResponse64.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary68.Reviewer = "";
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary68.MeasurementTime = instant71;
        fieldVisitDataServiceResponse64.ResponseTime = instant71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark74 = locationRemark61.setCreateTime(instant71);
        timeSeriesDescription59.LastModified = instant71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection76 = inspection52.setTime(instant71);
        getChartDataV2_43.EndObservedTime = instant71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj79 = getActivityTemplates78.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        getObservationsV2_80.SpecimenIds = strList83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray90 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags93 = putLocationTags86.setTagUniqueIds(strList91);
        getObservationsV2_80.QualityControlTypes = strList91;
        getActivityTemplates78.Type = strList91;
        java.util.List<java.lang.String> strList96 = getActivityTemplates78.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_97 = getChartDataV2_43.setAnalysisMethodSimpleIds(strList96);
        getGroupedObservationsV2_42.DataClassifications = strList96;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent99 = importHistoryEvent4.setDomainObjectIds(strList96);
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertNotNull(importHistoryEvent4);
        org.junit.Assert.assertNull(userProfile5);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(tagDefinition11);
        org.junit.Assert.assertNotNull(tagDefinition13);
        org.junit.Assert.assertNotNull(tagDefinition15);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest30);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_32);
        org.junit.Assert.assertNull(fieldResultType33);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_40);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(double50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(inspection55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(locationRemark63);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList65);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse67);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationRemark74);
        org.junit.Assert.assertNotNull(inspection76);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(putLocationTags93);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(getChartDataV2_97);
        org.junit.Assert.assertNotNull(importHistoryEvent99);
    }

    @Test
    public void test41749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41749");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase();
        referencePointPeriodBase0.Method = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant3 = referencePointPeriodBase0.ValidFrom;
        org.junit.Assert.assertNull(instant3);
    }

    @Test
    public void test41750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41750");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        getObservationExportIIV2_0.Limit = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_7 = getObservationExportIIV2_0.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType9 = getObservationExportIIV2_8.getFormat();
        java.util.List<java.lang.String> strList10 = getObservationExportIIV2_8.SamplingLocationIds;
        getObservationExportIIV2_8.ActivityCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant14 = getExportSamplingLocations13.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = getObservationsV2_15.setDataClassifications((java.util.List<java.lang.String>) strList19);
        java.util.List<java.lang.String> strList22 = getObservationsV2_15.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType23 = null;
        getObservationsV2_15.FieldResultType = fieldResultType23;
        getObservationsV2_15.MaxNumericResultValue = 100.0d;
        java.lang.String str27 = getObservationsV2_15.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_15.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_15.setAnalysisMethodIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations37 = getExportSamplingLocations13.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList33);
        getExportSamplingLocations37.Sort = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str40 = getExportSamplingLocations37.Cursor;
        java.lang.Integer int41 = getExportSamplingLocations37.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_42.setDataClassifications((java.util.List<java.lang.String>) strList46);
        java.time.Instant instant49 = getObservationsV2_42.getStartObservedTime();
        java.util.List<java.lang.String> strList50 = getObservationsV2_42.Ids;
        java.util.List<java.lang.String> strList51 = getObservationsV2_42.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_42.setDepthUnitId("http://MaxDurationhttp/json/reply/Integer");
        java.util.List<java.lang.String> strList54 = getObservationsV2_53.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_56.setDataClassifications((java.util.List<java.lang.String>) strList60);
        postTag55.PickListValues = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_53.setResultStatuses((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations65 = getExportSamplingLocations37.setSearch((java.util.List<java.lang.String>) strList60);
        getObservationExportIIV2_8.Media = strList60;
        getObservationExportIIV2_7.SpecimenIds = strList60;
        java.lang.Double double68 = getObservationExportIIV2_7.MinNumericResultValue;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_7);
        org.junit.Assert.assertNull(getObservationExportIIFormatType9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(getExportSamplingLocations37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNull(instant49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(getExportSamplingLocations65);
        org.junit.Assert.assertNull(double68);
    }

    @Test
    public void test41751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41751");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit searchResultUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnit();
        java.lang.Integer int1 = searchResultUnit0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList2 = searchResultUnit0.getDomainObjects();
        java.lang.Integer int3 = searchResultUnit0.getTotalCount();
        java.lang.Integer int4 = searchResultUnit0.TotalCount;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(unitList2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test41752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41752");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean4 = metricConfiguration0.getUseScoreRanges();
        java.lang.String str5 = metricConfiguration0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = metricConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit7 = metricConfiguration0.Unit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList8 = metricConfiguration0.getTaxons();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon searchResultTaxon9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon();
        java.lang.String str10 = searchResultTaxon9.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = metricConfiguration11.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] taxonArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>) taxonList14, taxonArray13);
        metricConfiguration11.Taxons = taxonList14;
        searchResultTaxon9.DomainObjects = taxonList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration18 = metricConfiguration0.setTaxons((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>) taxonList14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange> metricRangeList19 = metricConfiguration0.getMetricRanges();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(unit6);
        org.junit.Assert.assertNull(unit7);
        org.junit.Assert.assertNull(taxonList8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(taxonArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(metricConfiguration18);
        org.junit.Assert.assertNull(metricRangeList19);
    }

    @Test
    public void test41753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41753");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.IsValid = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading0.setMonitoringMethod("9999-12-31T23:59:59.9999999Z");
        reading5.Model = "multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading5);
    }

    @Test
    public void test41754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41754");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        labResultDetails6.PreparationMethod = "";
        labResultDetails6.QualityFlag = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails6.setAnalysisComment("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory15.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory19 = laboratory15.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport20 = labReport14.setLaboratory(laboratory19);
        java.lang.String str21 = labReport20.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport23 = labReport20.setCustomId("http");
        java.time.OffsetDateTime offsetDateTime24 = null;
        labReport23.DateReceived = offsetDateTime24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport27 = labReport23.setCustomId("MinInstant");
        java.time.OffsetDateTime offsetDateTime28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport29 = labReport27.setDateReceived(offsetDateTime28);
        java.lang.String str30 = labReport29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod33 = postLabAnalysisMethod31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35, observedPropertyArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod37 = postLabAnalysisMethod33.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod39 = postLabAnalysisMethod33.setAuditAttributes(auditAttributes38);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList40 = postLabAnalysisMethod39.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod42 = postLabAnalysisMethod39.setContext("/AQUARIUS/Acquisition/v2");
        java.lang.String str43 = postLabAnalysisMethod39.getMethodId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType45 = postObservedProperty44.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation47.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation47.setCategoricalResult(categoricalResult50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53, importHistoryEventSimpleArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = observation47.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53);
        observedProperty46.ImportHistoryEventSimples = importHistoryEventSimpleList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty57 = postObservedProperty44.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod58 = postLabAnalysisMethod39.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport59 = labReport29.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails60 = labResultDetails13.setLabReport(labReport29);
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(laboratory19);
        org.junit.Assert.assertNotNull(labReport20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(labReport23);
        org.junit.Assert.assertNotNull(labReport27);
        org.junit.Assert.assertNotNull(labReport29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod33);
        org.junit.Assert.assertNotNull(observedPropertyArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod37);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod39);
        org.junit.Assert.assertNotNull(observedPropertyList40);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(analysisType45);
        org.junit.Assert.assertNotNull(observation51);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(observation55);
        org.junit.Assert.assertNotNull(postObservedProperty57);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod58);
        org.junit.Assert.assertNotNull(labReport59);
        org.junit.Assert.assertNotNull(labResultDetails60);
    }

    @Test
    public void test41755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41755");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = observation0.RelatedTaxon;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation0.setResultTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = observation11.getPlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen13 = observation11.Specimen;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str15 = analysisMethodSimple14.getId();
        analysisMethodSimple14.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        observation11.AnalysisMethod = analysisMethodSimple14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity19 = observation11.getActivity();
        java.lang.String str20 = observation11.CustomId;
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(taxon9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(plannedFieldResult12);
        org.junit.Assert.assertNull(specimen13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(activity19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test41756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41756");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        postActivity0.ExtendedAttributes = extendedAttributeList5;
        java.time.OffsetDateTime offsetDateTime7 = postActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = postActivity0.getDepth();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(quantity8);
    }

    @Test
    public void test41757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41757");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = importItemSamplingLocation0.ItemComparison;
        java.lang.Object obj4 = importItemSamplingLocation0.Errors;
        importItemSamplingLocation0.Input = "-PT87591240H";
        java.lang.String str7 = importItemSamplingLocation0.Input;
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNull(importChangeItemList3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-PT87591240H" + "'", str7, "-PT87591240H");
    }

    @Test
    public void test41758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41758");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset1 = timeSeriesPoint0.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = reading2.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading2.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = reading5.setModel("MaxInstant");
        reading7.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant10 = reading7.Time;
        java.lang.String str11 = reading7.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading7.Value = doubleWithDisplay12;
        timeSeriesPoint0.Value = doubleWithDisplay12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset15 = timeSeriesPoint0.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList17 = timeSeriesDataServiceResponse16.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse19 = timeSeriesDataServiceResponse16.setTimeRange(statisticalTimeRange18);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList20 = null;
        timeSeriesDataServiceResponse16.Approvals = approvalList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList23 = timeSeriesDataServiceResponse22.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange24 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse25 = timeSeriesDataServiceResponse22.setTimeRange(statisticalTimeRange24);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList26 = null;
        timeSeriesDataServiceResponse22.Approvals = approvalList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse29 = timeSeriesDataServiceResponse22.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse29.TimeRange = statisticalTimeRange30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset33 = timeSeriesPoint32.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset35 = null;
        timeSeriesPoint34.Timestamp = statisticalDateTimeOffset35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint38 = timeSeriesPoint34.setTimestamp(statisticalDateTimeOffset37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint39 = timeSeriesPoint32.setTimestamp(statisticalDateTimeOffset37);
        statisticalTimeRange30.EndTime = statisticalDateTimeOffset37;
        timeSeriesDataServiceResponse16.TimeRange = statisticalTimeRange30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary44.Reviewer = "";
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary44.MeasurementTime = instant47;
        postRecurringReport43.NextGenerationDate = instant47;
        java.time.Instant instant50 = postRecurringReport43.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset51 = statisticalDateTimeOffset42.setDateTimeOffset(instant50);
        statisticalTimeRange30.StartTime = statisticalDateTimeOffset51;
        timeSeriesPoint0.Timestamp = statisticalDateTimeOffset51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset54 = timeSeriesPoint0.Timestamp;
        org.junit.Assert.assertNull(statisticalDateTimeOffset1);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNotNull(reading7);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(statisticalDateTimeOffset15);
        org.junit.Assert.assertNull(interpolationTypeList17);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse19);
        org.junit.Assert.assertNull(interpolationTypeList23);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse25);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse29);
        org.junit.Assert.assertNull(statisticalDateTimeOffset33);
        org.junit.Assert.assertNotNull(timeSeriesPoint38);
        org.junit.Assert.assertNotNull(timeSeriesPoint39);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset51);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset54);
    }

    @Test
    public void test41759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41759");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup();
        java.lang.Object obj1 = getAnalyticalGroup0.getResponseType();
        java.lang.Object obj2 = getAnalyticalGroup0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup4 = getAnalyticalGroup0.setId("");
        java.lang.String str5 = getAnalyticalGroup0.Id;
        java.lang.String str6 = getAnalyticalGroup0.getId();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNotNull(getAnalyticalGroup4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test41760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41760");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = postSamplingLocation0.setAddress(address3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = postSamplingLocation4.getElevation();
        postSamplingLocation4.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postSamplingLocation4.getAuditAttributes();
        java.lang.String str9 = postSamplingLocation4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation11 = postSamplingLocation4.setTimeZone(timeZone10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation13 = postSamplingLocation11.setVerticalCollectionMethod("9999-12-31T23:59:59.9999999Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList14 = postSamplingLocation11.ExtendedAttributes;
        java.lang.String str15 = postSamplingLocation11.getLatitude();
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(postSamplingLocation4);
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postSamplingLocation11);
        org.junit.Assert.assertNotNull(postSamplingLocation13);
        org.junit.Assert.assertNull(extendedAttributeList14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test41761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41761");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport2 = recurringReport0.setJsonTemplate("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str3 = recurringReport2.getJsonTemplate();
        recurringReport2.RecurrencePeriod = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.time.Instant instant6 = recurringReport2.getNextGenerationDate();
        recurringReport2.JsonTemplate = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport10 = recurringReport2.setRecurrencePeriod("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str11 = recurringReport10.getTitle();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport13 = recurringReport10.setJsonTemplate("multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****");
        org.junit.Assert.assertNotNull(recurringReport2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str3, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(recurringReport10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(recurringReport13);
    }

    @Test
    public void test41762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41762");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType1 = expandedRatingCurve0.Type;
        expandedRatingCurve0.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve5 = expandedRatingCurve0.setIsBlended((java.lang.Boolean) true);
        java.lang.String str6 = expandedRatingCurve0.Id;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList7 = expandedRatingCurve0.AdjustedRatingTable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit8 = expandedRatingCurve0.OutputParameter;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList9 = expandedRatingCurve0.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit10 = expandedRatingCurve0.getOutputParameter();
        org.junit.Assert.assertNull(ratingCurveType1);
        org.junit.Assert.assertNotNull(expandedRatingCurve5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(ratingPointList7);
        org.junit.Assert.assertNull(parameterWithUnit8);
        org.junit.Assert.assertNull(ratingShiftList9);
        org.junit.Assert.assertNull(parameterWithUnit10);
    }

    @Test
    public void test41763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41763");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTag getTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTag();
        getTag0.Id = "POST";
        java.lang.String str3 = getTag0.Id;
        getTag0.Id = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        java.lang.String str6 = getTag0.Id;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****" + "'", str6, "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
    }

    @Test
    public void test41764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41764");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder();
        java.lang.String str1 = locationFolder0.getParentLocationFolderUniqueId();
        java.lang.String str2 = locationFolder0.ParentLocationFolderPath;
        java.lang.String str3 = locationFolder0.ParentLocationFolderPath;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder5 = locationFolder0.setUniqueId("/AQUARIUS/Provisioning/v1");
        locationFolder0.LocationFolderName = "MinInstant";
        java.lang.String str8 = locationFolder0.ParentLocationFolderUniqueId;
        locationFolder0.LocationFolderDescription = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str11 = locationFolder0.getLocationFolderName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locationFolder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MinInstant" + "'", str11, "MinInstant");
    }

    @Test
    public void test41765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41765");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType1 = importItemSpecimen0.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList3 = importItemObject2.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList5, importChangeItemArray4);
        importItemObject2.ItemComparison = importChangeItemList5;
        java.lang.String str8 = importItemObject2.Input;
        java.lang.String str9 = importItemObject2.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getLabReportIds();
        importItem10.Errors = getObservationsV2_11;
        java.lang.Object obj28 = importItem10.getExistingItem();
        importItem10.Input = "hi!";
        java.lang.Object obj31 = importItem10.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem33 = importItem10.setStatus(importItemStatusType32);
        importItemObject2.Status = importItemStatusType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen35 = importItemSpecimen0.setStatus(importItemStatusType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen37 = importItemSpecimen35.setRowId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE;
        importItemSpecimen37.Status = importItemStatusType38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen40 = importItemSpecimen37.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType41 = importItemSpecimen37.Status;
        org.junit.Assert.assertNull(importItemStatusType1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(importChangeItemArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + importItemStatusType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem33);
        org.junit.Assert.assertNotNull(importItemSpecimen35);
        org.junit.Assert.assertNotNull(importItemSpecimen37);
        org.junit.Assert.assertTrue("'" + importItemStatusType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE + "'", importItemStatusType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE));
        org.junit.Assert.assertNull(specimen40);
        org.junit.Assert.assertTrue("'" + importItemStatusType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE + "'", importItemStatusType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE));
    }

    @Test
    public void test41766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41766");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        roleFlattened0.CanAddOrRemoveLocations = false;
        java.lang.Boolean boolean3 = roleFlattened0.CanEditAppendConfigurations;
        java.lang.String str4 = roleFlattened0.getName();
        java.lang.Boolean boolean5 = roleFlattened0.isCanEditData();
        roleFlattened0.CanAddData = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase9 = roleFlattened0.setCanEditData((java.lang.Boolean) true);
        roleFlattened0.CanRemoveAppendConfigurations = false;
        java.lang.Boolean boolean12 = roleFlattened0.CanEditData;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase14 = roleFlattened0.setCanAddAppendConfigurations((java.lang.Boolean) true);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(roleFlattenedBase9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(roleFlattenedBase14);
    }

    @Test
    public void test41767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41767");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries2 = putTimeSeries0.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries4 = putTimeSeries0.setDescription("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries6 = putTimeSeries4.setComment("MinDuration");
        java.lang.String str7 = putTimeSeries4.TimeSeriesUniqueId;
        putTimeSeries4.Label = "zZZZZ";
        org.junit.Assert.assertNotNull(putTimeSeries2);
        org.junit.Assert.assertNotNull(putTimeSeries4);
        org.junit.Assert.assertNotNull(putTimeSeries6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test41768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41768");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        java.lang.String str1 = putProject0.ScopeStatement;
        java.lang.String str2 = putProject0.ScopeStatement;
        java.lang.String str3 = putProject0.getName();
        putProject0.CustomId = "****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test41769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41769");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        java.lang.String str2 = postLaboratory0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        postLaboratory0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory13 = postLaboratory0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime15 = putSchedule14.StartDate;
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = putSchedule14.setEndDate(offsetDateTime16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putSchedule17.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime19 = null;
        putSchedule17.LastGenerationDate = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType21 = putSchedule17.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = plannedFieldResult22.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = labResultDetails26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult29 = plannedFieldResult22.setAuditAttributes(auditAttributes27);
        putSchedule17.AuditAttributes = auditAttributes27;
        postLaboratory13.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory33 = postLaboratory13.setEmailAddress("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory35 = postLaboratory13.setId("/AQUARIUS");
        java.lang.String str36 = postLaboratory35.getDescription();
        postLaboratory35.EmailAddress = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLaboratory13);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(putSchedule17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType21);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(labResultDetails28);
        org.junit.Assert.assertNotNull(plannedFieldResult29);
        org.junit.Assert.assertNotNull(postLaboratory33);
        org.junit.Assert.assertNotNull(postLaboratory35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test41770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41770");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails5.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails5.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation2.setLabResultDetails(labResultDetails5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult13 = observation12.getTaxonomicResult();
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNull(taxonomicResult13);
    }

    @Test
    public void test41771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41771");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin2 = fieldDataPlugin0.setUniqueId("http");
        fieldDataPlugin2.UniqueId = "9999-12-31T23:59:59.9999999Z";
        fieldDataPlugin2.Name = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        java.lang.String str7 = fieldDataPlugin2.getName();
        fieldDataPlugin2.UniqueId = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        org.junit.Assert.assertNotNull(fieldDataPlugin2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****" + "'", str7, "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
    }

    @Test
    public void test41772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41772");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        java.lang.String str9 = observation0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = observation0.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen11 = observation0.getSpecimen();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList12 = observation0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation0.setObservedProperty(observedProperty13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod22 = observation21.getCollectionMethod();
        java.time.OffsetDateTime offsetDateTime23 = null;
        observation21.ResultTime = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation25.CustomId = "hi!";
        java.lang.String str28 = observation25.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation25.setStatistics(observationStatistics29);
        java.lang.Double double31 = observationStatistics29.getMin();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation21.setStatistics(observationStatistics29);
        observationStatistics29.P75 = (-1.0d);
        observation14.Statistics = observationStatistics29;
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(taxonomicResult10);
        org.junit.Assert.assertNull(specimen11);
        org.junit.Assert.assertNull(extendedAttributeList12);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(collectionMethod22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNull(double31);
        org.junit.Assert.assertNotNull(observation32);
    }

    @Test
    public void test41773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41773");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = analyticalGroupItem0.AnalysisMethod;
        java.lang.String str3 = analyticalGroupItem0.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem5 = analyticalGroupItem0.setObservedProperty(observedProperty4);
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNull(analysisMethod2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(analyticalGroupItem5);
    }

    @Test
    public void test41774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41774");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType5 = postActivity0.Type;
        java.time.OffsetDateTime offsetDateTime6 = postActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity0.setMedium(medium7);
        java.time.OffsetDateTime offsetDateTime9 = null;
        postActivity0.StartTime = offsetDateTime9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = null;
        putActivity11.Depth = quantity12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList15, metricResultArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity17 = putActivity11.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity19 = putActivity11.setType(activityWithDetailsType18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = putActivity19.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.SAMPLE_ROUTINE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity22 = putActivity19.setType(activityWithDetailsType21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str24 = samplingLocation23.Description;
        java.lang.String str25 = samplingLocation23.VerticalCollectionMethod;
        java.lang.String str26 = samplingLocation23.getLongitude();
        java.lang.String str27 = samplingLocation23.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_30 = postObservationV2_28.setLabInstruction(labInstruction29);
        java.lang.String str31 = postObservationV2_30.MediumSubdivision;
        java.lang.String str32 = postObservationV2_30.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_34 = postObservationV2_30.setLabResultDetails(labResultDetails33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier35 = postObservationV2_30.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList37 = fieldVisit36.Attachments;
        java.time.OffsetDateTime offsetDateTime38 = null;
        fieldVisit36.EndTime = offsetDateTime38;
        java.lang.String str40 = fieldVisit36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str42 = samplingLocation41.Description;
        java.lang.String str43 = samplingLocation41.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str46 = metricConfiguration45.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty47.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration50 = metricConfiguration45.setObservedProperty(observedProperty47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType51 = observedProperty47.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup53 = postObservedProperty52.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = null;
        quantity54.Unit = unit55;
        postObservedProperty52.LowerLimit = quantity54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity58 = postObservedProperty52.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit59 = quantity58.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty60 = observedProperty47.setUpperLimit(quantity58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation61 = samplingLocation44.setElevation(quantity58);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList62 = samplingLocation61.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65, extendedAttributeArray64);
        postActivity63.ExtendedAttributes = extendedAttributeList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation68 = samplingLocation61.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation69 = samplingLocation41.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65);
        fieldVisit36.ExtendedAttributes = extendedAttributeList65;
        postObservationV2_30.ExtendedAttributes = extendedAttributeList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation72 = samplingLocation23.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65);
        putActivity19.ExtendedAttributes = extendedAttributeList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity74 = postActivity0.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation75 = postActivity0.SamplingLocation;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(activityType5);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNotNull(metricResultArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(putActivity17);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity19);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.SAMPLE_ROUTINE + "'", activityWithDetailsType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.SAMPLE_ROUTINE));
        org.junit.Assert.assertNotNull(putActivity22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(postObservationV2_30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(postObservationV2_34);
        org.junit.Assert.assertNull(nullMeasureQualifier35);
        org.junit.Assert.assertNull(domainObjectAttachmentList37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(metricConfiguration50);
        org.junit.Assert.assertNull(resultType51);
        org.junit.Assert.assertNull(unitGroup53);
        org.junit.Assert.assertNotNull(quantity58);
        org.junit.Assert.assertNull(unit59);
        org.junit.Assert.assertNotNull(observedProperty60);
        org.junit.Assert.assertNotNull(samplingLocation61);
        org.junit.Assert.assertNull(domainObjectAttachmentList62);
        org.junit.Assert.assertNotNull(extendedAttributeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(samplingLocation68);
        org.junit.Assert.assertNotNull(samplingLocation69);
        org.junit.Assert.assertNotNull(samplingLocation72);
        org.junit.Assert.assertNotNull(postActivity74);
        org.junit.Assert.assertNull(samplingLocation75);
    }

    @Test
    public void test41775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41775");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase2 = putOpenIdConnectUser0.setCanConfigureSystem((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser4 = putOpenIdConnectUser0.setIdentifier("/AQUARIUS/Acquisition/v2");
        java.lang.String str5 = putOpenIdConnectUser0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase7 = putOpenIdConnectUser0.setLoginName("/AQUARIUS/Acquisition/v2");
        java.lang.String str8 = putOpenIdConnectUser0.getLastName();
        java.lang.String str9 = putOpenIdConnectUser0.SubjectIdentifier;
        org.junit.Assert.assertNotNull(userBase2);
        org.junit.Assert.assertNotNull(putOpenIdConnectUser4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str5, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(userBase7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41776");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeDefinition searchResultExtendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeDefinition searchResultExtendedAttributeDefinition2 = searchResultExtendedAttributeDefinition0.setCursor("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeDefinition searchResultExtendedAttributeDefinition4 = searchResultExtendedAttributeDefinition0.setTotalCount((java.lang.Integer) 100);
        java.lang.String str5 = searchResultExtendedAttributeDefinition0.getCursor();
        org.junit.Assert.assertNotNull(searchResultExtendedAttributeDefinition2);
        org.junit.Assert.assertNotNull(searchResultExtendedAttributeDefinition4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****" + "'", str5, "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
    }

    @Test
    public void test41777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41777");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor6 = sensor0.setLocationUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.String str7 = sensor6.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor9 = sensor6.setManufacturer("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.time.Instant instant10 = sensor6.getLastModifiedUtc();
        java.lang.String str11 = sensor6.getModel();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(sensor6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(sensor9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test41778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41778");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.lang.String str1 = postSchedule0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType2 = postSchedule0.RecurrenceType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule4 = postSchedule0.setCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str5 = postSchedule4.CustomId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList6 = postSchedule4.getSchedulePlannedActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule8 = postSchedule4.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType9 = postSchedule4.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType10 = postSchedule4.RecurrenceDayWeekly;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule12 = postSchedule4.setStartDate(offsetDateTime11);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(recurrenceType2);
        org.junit.Assert.assertNotNull(postSchedule4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str5, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(schedulePlannedActivityList6);
        org.junit.Assert.assertNotNull(postSchedule8);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType9);
        org.junit.Assert.assertNull(recurrenceDayWeeklyType10);
        org.junit.Assert.assertNotNull(postSchedule12);
    }

    @Test
    public void test41779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41779");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit2 = putUnit0.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit4 = putUnit0.setId("/AQUARIUS");
        java.lang.Double double5 = putUnit4.BaseMultiplier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem12 = analyticalGroupItem9.setAnalysisMethod(analysisMethod11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty13.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem16 = analyticalGroupItem12.setObservedProperty(observedProperty13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty17 = analyticalGroupItem16.ObservedProperty;
        observedProperty17.CustomId = "https";
        analyticalGroupItem6.ObservedProperty = observedProperty17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup21.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup25 = unitGroup21.setSystemCode(unitGroupSystemCodeType24);
        java.lang.Boolean boolean26 = unitGroup21.SupportsConversion;
        observedProperty17.UnitGroup = unitGroup21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit28 = putUnit4.setUnitGroup(unitGroup21);
        java.lang.Object obj29 = putUnit4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = null;
        putActivity31.Depth = quantity32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList35, metricResultArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity37 = putActivity31.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity39 = putActivity31.setType(activityWithDetailsType38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = putActivity39.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str43 = metricConfiguration42.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty44.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration47 = metricConfiguration42.setObservedProperty(observedProperty44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType48 = observedProperty44.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup50 = postObservedProperty49.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = null;
        quantity51.Unit = unit52;
        postObservedProperty49.LowerLimit = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity55 = postObservedProperty49.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit56 = quantity55.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty57 = observedProperty44.setUpperLimit(quantity55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation58 = samplingLocation41.setElevation(quantity55);
        java.lang.Double double59 = quantity55.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity60 = putActivity39.setDepth(quantity55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory61.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str64 = laboratory61.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = laboratory61.getAuditAttributes();
        java.lang.String str66 = laboratory61.getPointOfContact();
        java.lang.String str67 = laboratory61.EmailAddress;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList70 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList70, samplingLocationGroupArray69);
        postAccessGroup68.SamplingLocationGroups = samplingLocationGroupList70;
        java.lang.String str73 = postAccessGroup68.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str75 = postLaboratory74.Address;
        java.lang.String str76 = postLaboratory74.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity79 = samplingPlanPlannedActivity77.setAuditAttributes(auditAttributes78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = auditAttributes80.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity79.AuditAttributes = auditAttributes80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = samplingPlanPlannedActivity79.AuditAttributes;
        postLaboratory74.AuditAttributes = auditAttributes84;
        postAccessGroup68.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory87 = laboratory61.setAuditAttributes(auditAttributes84);
        putActivity39.AuditAttributes = auditAttributes84;
        unitGroup30.AuditAttributes = auditAttributes84;
        putUnit4.UnitGroup = unitGroup30;
        org.junit.Assert.assertNotNull(putUnit2);
        org.junit.Assert.assertNotNull(putUnit4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(analysisMethod8);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNotNull(analyticalGroupItem12);
        org.junit.Assert.assertNotNull(analyticalGroupItem16);
        org.junit.Assert.assertNotNull(observedProperty17);
        org.junit.Assert.assertNotNull(unitGroup25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(putUnit28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Unit");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Unit");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Unit");
        org.junit.Assert.assertNotNull(metricResultArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(putActivity37);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity39);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(metricConfiguration47);
        org.junit.Assert.assertNull(resultType48);
        org.junit.Assert.assertNull(unitGroup50);
        org.junit.Assert.assertNotNull(quantity55);
        org.junit.Assert.assertNull(unit56);
        org.junit.Assert.assertNotNull(observedProperty57);
        org.junit.Assert.assertNotNull(samplingLocation58);
        org.junit.Assert.assertNull(double59);
        org.junit.Assert.assertNotNull(putActivity60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(auditAttributes65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity79);
        org.junit.Assert.assertNotNull(auditAttributes82);
        org.junit.Assert.assertNotNull(auditAttributes84);
        org.junit.Assert.assertNotNull(laboratory87);
    }

    @Test
    public void test41780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41780");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainer getShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainer();
        java.lang.String str1 = getShippingContainer0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainer getShippingContainer3 = getShippingContainer0.setId("");
        java.lang.Object obj4 = getShippingContainer3.getResponseType();
        java.lang.String str5 = getShippingContainer3.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getShippingContainer3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ShippingContainer");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ShippingContainer");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ShippingContainer");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test41781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41781");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        timeAlignedPoint0.NumericValue8 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setDisplayValue4("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint0.setGradeCode3((java.lang.Long) 1L);
        java.lang.String str14 = timeAlignedPoint13.Method2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint13.setGradeName5("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.Long long17 = timeAlignedPoint13.getGradeCode4();
        timeAlignedPoint13.NumericValue4 = 0.0d;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNull(long17);
    }

    @Test
    public void test41782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41782");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str1 = setting0.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting3 = setting0.setIsSystem((java.lang.Boolean) true);
        java.time.Instant instant4 = setting0.getLastModifiedTime();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(setting3);
        org.junit.Assert.assertNull(instant4);
    }

    @Test
    public void test41783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41783");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str1 = timeSeriesApprovalsTransactionListServiceRequest0.getTimeSeriesUniqueId();
        java.time.Instant instant2 = timeSeriesApprovalsTransactionListServiceRequest0.QueryTo;
        java.time.Instant instant3 = timeSeriesApprovalsTransactionListServiceRequest0.getQueryTo();
        java.time.Instant instant4 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest5 = timeSeriesApprovalsTransactionListServiceRequest0.setQueryFrom(instant4);
        java.lang.String str6 = timeSeriesApprovalsTransactionListServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double8 = putBulkEditResultGradesV2_7.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList25 = getObservationsV2_9.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType26 = getObservationsV2_9.FieldResultType;
        java.time.Instant instant27 = getObservationsV2_9.getEndObservedTime();
        java.lang.String str28 = getObservationsV2_9.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        java.util.ArrayList<java.lang.String> strList37 = putLocationTags36.TagUniqueIds;
        getObservationsV2_9.ProjectIds = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_39 = putBulkEditResultGradesV2_7.setSearch((java.util.List<java.lang.String>) strList37);
        java.util.List<java.lang.String> strList40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_41 = putBulkEditResultGradesV2_39.setLabResultLaboratoryIds(strList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList43 = fieldVisitDataServiceResponse42.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse45 = fieldVisitDataServiceResponse42.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary46.Reviewer = "";
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary46.MeasurementTime = instant49;
        fieldVisitDataServiceResponse42.ResponseTime = instant49;
        putBulkEditResultGradesV2_41.EndModificationTime = instant49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest53 = timeSeriesApprovalsTransactionListServiceRequest0.setQueryFrom(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest55 = timeSeriesApprovalsTransactionListServiceRequest0.setTimeSeriesUniqueId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(fieldResultType26);
        org.junit.Assert.assertNull(instant27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_39);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_41);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList43);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse45);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest53);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest55);
    }

    @Test
    public void test41784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41784");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon38.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = putUnit45.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = putDetectioncondition47.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition50 = putDetectioncondition47.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity53 = samplingPlanPlannedActivity51.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = auditAttributes54.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity53.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = samplingPlanPlannedActivity53.AuditAttributes;
        putDetectioncondition47.AuditAttributes = auditAttributes58;
        putUnit45.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = auditAttributes58.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon63 = taxon38.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon65 = taxon63.setAuditAttributes(auditAttributes64);
        java.lang.String str66 = taxon65.Id;
        java.lang.String str67 = taxon65.ScientificName;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(auditAttributes46);
        org.junit.Assert.assertNull(auditAttributes48);
        org.junit.Assert.assertNotNull(putDetectioncondition50);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity53);
        org.junit.Assert.assertNotNull(auditAttributes56);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(taxon63);
        org.junit.Assert.assertNotNull(taxon65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test41785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41785");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon searchResultTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon();
        java.lang.String str1 = searchResultTaxon0.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList2 = searchResultTaxon0.DomainObjects;
        searchResultTaxon0.Cursor = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList5 = searchResultTaxon0.DomainObjects;
        java.lang.Integer int6 = searchResultTaxon0.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList7 = searchResultTaxon0.getDomainObjects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(taxonList2);
        org.junit.Assert.assertNull(taxonList5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(taxonList7);
    }

    @Test
    public void test41786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41786");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeSummary0.Discharge;
        java.lang.Integer int3 = dischargeSummary0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = dischargeSummary4.getMeanGageHeight();
        java.lang.String str6 = dischargeSummary4.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = dischargeSummary7.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = dischargeSummary7.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = dischargeSummary7.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = doubleWithDisplay11.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary7.setDurationInHours(doubleWithDisplay11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType gageHeightCalculationType15 = dischargeSummary14.GageHeightCalculation;
        dischargeSummary14.QualityAssuranceComments = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary18.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary20.DifferenceDuringVisit = doubleWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment23 = dischargeSummary20.getAdjustment();
        java.time.Instant instant24 = dischargeSummary20.getMeasurementEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType25 = dischargeSummary20.getBaseFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType28 = null;
        controlConditionActivity27.ControlCleaned = controlCleanedType28;
        java.lang.String str30 = controlConditionActivity27.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        controlConditionActivity27.DateCleaned = instant34;
        gageHeightReading26.ReadingTime = instant34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay40 = doubleWithDisplay38.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str41 = doubleWithDisplay40.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading42 = gageHeightReading26.setGageHeight(doubleWithDisplay40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary45.Reviewer = "";
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary45.MeasurementTime = instant48;
        postRecurringReport44.NextGenerationDate = instant48;
        java.time.Instant instant51 = postRecurringReport44.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset52 = statisticalDateTimeOffset43.setDateTimeOffset(instant51);
        gageHeightReading42.ReadingTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] gageHeightReadingArray54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading[] { gageHeightReading42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList55 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading>) gageHeightReadingList55, gageHeightReadingArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary20.setGageHeightReadings(gageHeightReadingList55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary14.setGageHeightReadings(gageHeightReadingList55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary4.setGageHeightReadings(gageHeightReadingList55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = dischargeSummary0.setGageHeightReadings(gageHeightReadingList55);
        dischargeSummary0.GradeCode = 100;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNotNull(doubleWithDisplay13);
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNull(gageHeightCalculationType15);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNull(adjustment23);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(baseFlowType25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(doubleWithDisplay40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(gageHeightReading42);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset52);
        org.junit.Assert.assertNotNull(gageHeightReadingArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(dischargeSummary60);
    }

    @Test
    public void test41787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41787");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = putFieldVisit0.getSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan6.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList9 = samplingPlan6.PlannedActivities;
        java.lang.String str10 = samplingPlan6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit11 = putFieldVisit0.setSamplingPlan(samplingPlan6);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList12 = samplingPlan6.getPlannedActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = samplingPlan6.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType14 = samplingPlan6.SamplingLocationGroupSelectionType;
        java.time.OffsetDateTime offsetDateTime15 = samplingPlan6.getStartDate();
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNull(schedule5);
        org.junit.Assert.assertNull(samplingPlanPlannedActivityList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(putFieldVisit11);
        org.junit.Assert.assertNull(samplingPlanPlannedActivityList12);
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNull(samplingLocationGroupSelectionType14);
        org.junit.Assert.assertNull(offsetDateTime15);
    }

    @Test
    public void test41788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41788");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean1 = roleFlattened0.CanEditAppendConfigurations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened3 = roleFlattened0.setUniqueId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase5 = roleFlattened3.setCanEditData((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = roleFlattenedBase5.isCanEditLocationDetails();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(roleFlattened3);
        org.junit.Assert.assertNotNull(roleFlattenedBase5);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test41789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41789");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int1 = samplingPlan0.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan3 = samplingPlan0.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan5 = samplingPlan3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = samplingPlanPlannedActivity6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = auditAttributes9.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity8.AuditAttributes = auditAttributes9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = samplingPlanPlannedActivity8.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity16 = samplingPlanPlannedActivity14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = auditAttributes17.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity16.AuditAttributes = auditAttributes17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = samplingPlanPlannedActivity16.AuditAttributes;
        samplingPlanPlannedActivity16.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity26 = samplingPlanPlannedActivity24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType27 = samplingPlanPlannedActivity26.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity30 = samplingPlanPlannedActivity28.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate31 = samplingPlanPlannedActivity28.getActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity[] samplingPlanPlannedActivityArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity[] { samplingPlanPlannedActivity8, samplingPlanPlannedActivity16, samplingPlanPlannedActivity26, samplingPlanPlannedActivity28, samplingPlanPlannedActivity32 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>) samplingPlanPlannedActivityList34, samplingPlanPlannedActivityArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan36 = samplingPlan5.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>) samplingPlanPlannedActivityList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int38 = samplingPlan37.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan40 = samplingPlan37.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int42 = samplingPlan41.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan44 = samplingPlan41.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan46 = samplingPlan44.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity49 = samplingPlanPlannedActivity47.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = auditAttributes50.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity49.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = samplingPlanPlannedActivity49.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity57 = samplingPlanPlannedActivity55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = auditAttributes58.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity57.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = samplingPlanPlannedActivity57.AuditAttributes;
        samplingPlanPlannedActivity57.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity67 = samplingPlanPlannedActivity65.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType68 = samplingPlanPlannedActivity67.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity71 = samplingPlanPlannedActivity69.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate72 = samplingPlanPlannedActivity69.getActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity[] samplingPlanPlannedActivityArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity[] { samplingPlanPlannedActivity49, samplingPlanPlannedActivity57, samplingPlanPlannedActivity67, samplingPlanPlannedActivity69, samplingPlanPlannedActivity73 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>) samplingPlanPlannedActivityList75, samplingPlanPlannedActivityArray74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan77 = samplingPlan46.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>) samplingPlanPlannedActivityList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan78 = samplingPlan37.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>) samplingPlanPlannedActivityList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan79 = samplingPlan5.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity>) samplingPlanPlannedActivityList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType80 = samplingPlan5.getSamplingLocationGroupSelectionType();
        java.time.OffsetDateTime offsetDateTime81 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan82 = samplingPlan5.setEndDate(offsetDateTime81);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(samplingPlan3);
        org.junit.Assert.assertNotNull(samplingPlan5);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity8);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity16);
        org.junit.Assert.assertNotNull(auditAttributes19);
        org.junit.Assert.assertNotNull(auditAttributes21);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity26);
        org.junit.Assert.assertNull(activityType27);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity30);
        org.junit.Assert.assertNull(activityTemplate31);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(samplingPlan36);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(samplingPlan40);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(samplingPlan44);
        org.junit.Assert.assertNotNull(samplingPlan46);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity49);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(auditAttributes54);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity57);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity67);
        org.junit.Assert.assertNull(activityType68);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity71);
        org.junit.Assert.assertNull(activityTemplate72);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(samplingPlan77);
        org.junit.Assert.assertNotNull(samplingPlan78);
        org.junit.Assert.assertNotNull(samplingPlan79);
        org.junit.Assert.assertNull(samplingLocationGroupSelectionType80);
        org.junit.Assert.assertNotNull(samplingPlan82);
    }

    @Test
    public void test41790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41790");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation3 = activity1.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity5 = activity1.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation6.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setCategoricalResult(categoricalResult9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList12, importHistoryEventSimpleArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation6.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon15 = observation6.RelatedTaxon;
        java.time.OffsetDateTime offsetDateTime16 = observation6.getObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit17 = observation6.FieldVisit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str19 = samplingLocation18.Description;
        java.lang.String str20 = samplingLocation18.VerticalCollectionMethod;
        java.lang.String str21 = samplingLocation18.getLongitude();
        java.lang.String str22 = samplingLocation18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_25 = postObservationV2_23.setLabInstruction(labInstruction24);
        java.lang.String str26 = postObservationV2_25.MediumSubdivision;
        java.lang.String str27 = postObservationV2_25.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_29 = postObservationV2_25.setLabResultDetails(labResultDetails28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier30 = postObservationV2_25.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = fieldVisit31.Attachments;
        java.time.OffsetDateTime offsetDateTime33 = null;
        fieldVisit31.EndTime = offsetDateTime33;
        java.lang.String str35 = fieldVisit31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str37 = samplingLocation36.Description;
        java.lang.String str38 = samplingLocation36.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str41 = metricConfiguration40.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty42.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration45 = metricConfiguration40.setObservedProperty(observedProperty42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType46 = observedProperty42.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup48 = postObservedProperty47.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit50 = null;
        quantity49.Unit = unit50;
        postObservedProperty47.LowerLimit = quantity49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity53 = postObservedProperty47.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit54 = quantity53.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty55 = observedProperty42.setUpperLimit(quantity53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation56 = samplingLocation39.setElevation(quantity53);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList57 = samplingLocation56.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList60, extendedAttributeArray59);
        postActivity58.ExtendedAttributes = extendedAttributeList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = samplingLocation56.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation64 = samplingLocation36.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList60);
        fieldVisit31.ExtendedAttributes = extendedAttributeList60;
        postObservationV2_25.ExtendedAttributes = extendedAttributeList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation67 = samplingLocation18.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList60);
        observation6.ExtendedAttributes = extendedAttributeList60;
        activity1.ExtendedAttributes = extendedAttributeList60;
        activity1.Refreshed = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit72 = activity1.getFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device73 = activity1.Device;
        org.junit.Assert.assertNull(samplingLocation3);
        org.junit.Assert.assertNotNull(activity5);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNull(taxon15);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(fieldVisit17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(postObservationV2_25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(postObservationV2_29);
        org.junit.Assert.assertNull(nullMeasureQualifier30);
        org.junit.Assert.assertNull(domainObjectAttachmentList32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(metricConfiguration45);
        org.junit.Assert.assertNull(resultType46);
        org.junit.Assert.assertNull(unitGroup48);
        org.junit.Assert.assertNotNull(quantity53);
        org.junit.Assert.assertNull(unit54);
        org.junit.Assert.assertNotNull(observedProperty55);
        org.junit.Assert.assertNotNull(samplingLocation56);
        org.junit.Assert.assertNull(domainObjectAttachmentList57);
        org.junit.Assert.assertNotNull(extendedAttributeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(samplingLocation63);
        org.junit.Assert.assertNotNull(samplingLocation64);
        org.junit.Assert.assertNotNull(samplingLocation67);
        org.junit.Assert.assertNull(fieldVisit72);
        org.junit.Assert.assertNull(device73);
    }

    @Test
    public void test41791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41791");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitsInGroup getUnitsInGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitsInGroup();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitsInGroup getUnitsInGroup2 = getUnitsInGroup0.setUniqueId("");
        java.lang.String str3 = getUnitsInGroup0.UniqueId;
        java.lang.String str4 = getUnitsInGroup0.UniqueId;
        java.lang.String str5 = getUnitsInGroup0.getUniqueId();
        java.lang.Object obj6 = getUnitsInGroup0.getResponseType();
        org.junit.Assert.assertNotNull(getUnitsInGroup2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitsResponse");
    }

    @Test
    public void test41792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41792");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList74 = postSamplingLocation73.ExtendedAttributes;
        java.lang.String str75 = postSamplingLocation73.getHorizontalDatum();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList76 = postSamplingLocation73.getStandards();
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNull(extendedAttributeList74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(standardSimpleList76);
    }

    @Test
    public void test41793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41793");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser2 = postActiveDirectoryUser0.setUserPrincipalName("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser4 = postActiveDirectoryUser0.setUserPrincipalName("MinInstant");
        postActiveDirectoryUser0.FirstName = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser8 = postActiveDirectoryUser0.setUserPrincipalName("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str9 = postActiveDirectoryUser8.getUserPrincipalName();
        org.junit.Assert.assertNotNull(postActiveDirectoryUser2);
        org.junit.Assert.assertNotNull(postActiveDirectoryUser4);
        org.junit.Assert.assertNotNull(postActiveDirectoryUser8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****" + "'", str9, "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
    }

    @Test
    public void test41794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41794");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary5.DifferenceDuringVisit = doubleWithDisplay6;
        reading2.Value = doubleWithDisplay6;
        velocityDepthObservation0.ObservationIntervalInSeconds = doubleWithDisplay6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation11 = velocityDepthObservation0.setRevolutionCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary12.setReviewer("/AQUARIUS/Provisioning/v1");
        dischargeSummary12.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails gageHeightAtZeroFlowCalculatedDetails19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint22 = crossSectionPoint20.setDistance(quantityWithDisplay21);
        java.lang.String str23 = crossSectionPoint20.getComments();
        java.lang.Integer int24 = crossSectionPoint20.getPointOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        volumetricDischargeReading25.IsUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = volumetricDischargeReading25.StartingVolume;
        java.lang.Boolean boolean29 = volumetricDischargeReading25.IsUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical32 = vertical30.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay33 = vertical32.getSegmentWidth();
        java.lang.Double double34 = vertical32.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = null;
        vertical35.EffectiveDepth = quantityWithDisplay36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical39 = vertical35.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary40.setPublish((java.lang.Boolean) false);
        java.lang.String str43 = dischargeSummary42.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary44.Reviewer = "";
        dischargeSummary44.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType49 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary44.MeasurementGrade = measurementGradeType49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary42.setMeasurementGrade(measurementGradeType49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity54 = pointVelocityDischargeActivity52.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity52.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity58 = pointVelocityDischargeActivity52.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList59 = pointVelocityDischargeActivity58.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity58.DistanceToMeter = datumConvertedQuantityWithDisplay60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = dischargeSummary42.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical63 = vertical39.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical64 = vertical32.setTaglinePosition((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay60);
        java.lang.String str65 = datumConvertedQuantityWithDisplay60.TargetDatum;
        volumetricDischargeReading25.VolumeChange = datumConvertedQuantityWithDisplay60;
        java.lang.String str67 = datumConvertedQuantityWithDisplay60.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint68 = crossSectionPoint20.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay60);
        gageHeightAtZeroFlowCalculatedDetails19.Depth = datumConvertedQuantityWithDisplay60;
        dischargeSummary12.MeanIndexVelocity = datumConvertedQuantityWithDisplay60;
        java.lang.Double double71 = datumConvertedQuantityWithDisplay60.Numeric;
        datumConvertedQuantityWithDisplay60.Display = "MaxDuration";
        velocityDepthObservation0.Velocity = datumConvertedQuantityWithDisplay60;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(velocityDepthObservation11);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNotNull(crossSectionPoint22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(doubleWithDisplay28);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + false + "'", boolean29, false);
        org.junit.Assert.assertNotNull(vertical32);
        org.junit.Assert.assertNull(quantityWithDisplay33);
        org.junit.Assert.assertNull(double34);
        org.junit.Assert.assertNotNull(vertical39);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + measurementGradeType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType49.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity54);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity58);
        org.junit.Assert.assertNull(verticalList59);
        org.junit.Assert.assertNotNull(dischargeSummary62);
        org.junit.Assert.assertNotNull(vertical63);
        org.junit.Assert.assertNotNull(vertical64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(crossSectionPoint68);
        org.junit.Assert.assertNull(double71);
    }

    @Test
    public void test41795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41795");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup2 = putAnalyticalGroup0.setAnalyticalGroupItems(analyticalGroupItemList1);
        java.lang.Integer int3 = putAnalyticalGroup2.NumberOfAnalysisMethodsInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup5 = putAnalyticalGroup2.setName("2021.4.62.0");
        java.lang.Integer int6 = putAnalyticalGroup2.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup8 = putAnalyticalGroup2.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 1);
        putAnalyticalGroup2.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup12 = putAnalyticalGroup2.setDescription("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNotNull(putAnalyticalGroup2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(putAnalyticalGroup5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(putAnalyticalGroup8);
        org.junit.Assert.assertNotNull(putAnalyticalGroup12);
    }

    @Test
    public void test41796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41796");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup();
        java.lang.String str1 = accessGroup0.Id;
        java.lang.Boolean boolean2 = accessGroup0.getCanEditAllData();
        java.lang.String str3 = accessGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup5 = accessGroup0.setName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup7 = accessGroup0.setCanEditAllData((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(accessGroup5);
        org.junit.Assert.assertNotNull(accessGroup7);
    }

    @Test
    public void test41797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41797");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = sensorBase2.setManufacturer("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase6 = sensorBase2.setParameterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase8 = sensorBase2.setSubLocationIdentifier("'.'SSSSSSS");
        sensorBase8.UnitId = "MaxInstant";
        sensorBase8.Name = "/AQUARIUS/Acquisition/v2";
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(sensorBase6);
        org.junit.Assert.assertNotNull(sensorBase8);
    }

    @Test
    public void test41798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41798");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod4 = monitoringMethod0.setRoundingSpec("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod6 = monitoringMethod0.setRoundingSpec("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod8 = monitoringMethod6.setSystem((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertNotNull(monitoringMethod4);
        org.junit.Assert.assertNotNull(monitoringMethod6);
        org.junit.Assert.assertNotNull(monitoringMethod8);
    }

    @Test
    public void test41799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41799");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        java.lang.String str3 = calibrationCheck0.getModel();
        java.time.Instant instant4 = calibrationCheck0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails5 = null;
        calibrationCheck0.StandardDetails = standardDetails5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck0.setSensorUniqueId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck10 = calibrationCheck8.setModel("http");
        java.lang.String str11 = calibrationCheck8.getNodeDetails();
        java.lang.String str12 = calibrationCheck8.getSensorUniqueId();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(calibrationCheck8);
        org.junit.Assert.assertNotNull(calibrationCheck10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str12, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test41800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41800");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        java.lang.Object obj17 = importItemObservation16.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation19 = importItemObservation16.setRowId("MaxDuration");
        java.util.List<java.lang.String> strList20 = importItemObservation19.Fields;
        importItemObservation19.Input = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_25 = postUserV2_23.setUserProfile(userProfile24);
        java.lang.Object obj26 = postUserV2_25.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile27 = postUserV2_25.UserProfile;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile28 = postUserV2_25.getUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList30 = getExportObservations29.getLabReportIds();
        java.lang.String str31 = getExportObservations29.DepthUnitCustomId;
        java.util.List<java.lang.String> strList32 = getExportObservations29.getSearch();
        java.util.List<java.lang.String> strList33 = getExportObservations29.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary36.Reviewer = "";
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary36.MeasurementTime = instant39;
        postRecurringReport35.NextGenerationDate = instant39;
        java.time.Instant instant42 = postRecurringReport35.getNextGenerationDate();
        java.lang.String str43 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant42);
        metadataChangeTransactionListServiceRequest34.QueryFrom = instant42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations45 = getExportObservations29.setEndObservedTime(instant42);
        java.lang.Double double46 = getExportObservations29.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations48 = getExportObservations29.setMinNumericResultValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType50 = timeSeriesPoint49.Type;
        java.time.Instant instant51 = timeSeriesPoint49.getTime();
        java.lang.Double double52 = timeSeriesPoint49.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList54 = getExportObservations53.getLabReportIds();
        java.lang.String str55 = getExportObservations53.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj57 = getActivityTemplates56.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        getObservationsV2_58.SpecimenIds = strList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        getObservationsV2_58.QualityControlTypes = strList69;
        getActivityTemplates56.Type = strList69;
        getExportObservations53.AnalyticalGroupIds = strList69;
        timeSeriesPoint49.Qualifiers = strList69;
        getExportObservations48.ResultGrades = strList69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_77 = postUserV2_25.setRoles((java.util.List<java.lang.String>) strList69);
        importItemObservation19.WarningMessages = strList69;
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(importItemObservation19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(postUserV2_25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(userProfile27);
        org.junit.Assert.assertNull(userProfile28);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str43, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations45);
        org.junit.Assert.assertNull(double46);
        org.junit.Assert.assertNotNull(getExportObservations48);
        org.junit.Assert.assertNull(pointType50);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(double52);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(postUserV2_77);
    }

    @Test
    public void test41801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41801");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRequestDto indexRequestDto0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRequestDto();
        java.lang.String str1 = indexRequestDto0.getIndexConfigId();
        java.lang.String str2 = indexRequestDto0.getIndexConfigId();
        java.lang.String str3 = indexRequestDto0.IndexConfigId;
        java.lang.String str4 = indexRequestDto0.IndexConfigId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test41802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41802");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        java.lang.String str3 = putActivity0.getSourceActivityId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device4 = putActivity0.getDevice();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = putActivity0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation6 = putActivity0.getSamplingLocation();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(device4);
        org.junit.Assert.assertNull(extendedAttributeList5);
        org.junit.Assert.assertNull(samplingLocation6);
    }

    @Test
    public void test41803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41803");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList1 = fieldVisitDescriptionListServiceResponse0.getDeletedFieldVisitDescriptions();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod5 = timeSeriesThresholdPeriod3.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod3.AppliedTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        postRecurringReport9.NextGenerationDate = instant13;
        java.time.Instant instant16 = postRecurringReport9.getNextGenerationDate();
        java.lang.String str17 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant16);
        metadataChangeTransactionListServiceRequest8.QueryFrom = instant16;
        timeSeriesThresholdPeriod3.AppliedTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse20 = fieldVisitDescriptionListServiceResponse2.setNextToken(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] fieldVisitDescriptionArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>) fieldVisitDescriptionList22, fieldVisitDescriptionArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse24 = fieldVisitDescriptionListServiceResponse20.setDeletedFieldVisitDescriptions(fieldVisitDescriptionList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod28 = timeSeriesThresholdPeriod26.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod26.AppliedTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary33.Reviewer = "";
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary33.MeasurementTime = instant36;
        postRecurringReport32.NextGenerationDate = instant36;
        java.time.Instant instant39 = postRecurringReport32.getNextGenerationDate();
        java.lang.String str40 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant39);
        metadataChangeTransactionListServiceRequest31.QueryFrom = instant39;
        timeSeriesThresholdPeriod26.AppliedTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse43 = fieldVisitDescriptionListServiceResponse25.setNextToken(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] fieldVisitDescriptionArray44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>) fieldVisitDescriptionList45, fieldVisitDescriptionArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse47 = fieldVisitDescriptionListServiceResponse43.setDeletedFieldVisitDescriptions(fieldVisitDescriptionList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse48 = fieldVisitDescriptionListServiceResponse20.setFieldVisitDescriptions(fieldVisitDescriptionList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse49 = fieldVisitDescriptionListServiceResponse0.setFieldVisitDescriptions(fieldVisitDescriptionList45);
        java.time.Instant instant50 = fieldVisitDescriptionListServiceResponse49.getResponseTime();
        org.junit.Assert.assertNull(fieldVisitDescriptionList1);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str17, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str40, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse49);
        org.junit.Assert.assertNull(instant50);
    }

    @Test
    public void test41804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41804");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade();
        grade0.Description = "ZZZZZ";
        java.lang.Integer int3 = grade0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade5 = grade0.setIsSystem((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade7 = grade5.setColor("'.'SSSSSSS");
        java.lang.Boolean boolean8 = grade7.IsSystem;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade10 = grade7.setGradeCode((java.lang.Integer) (-1));
        grade10.GradeCode = 2;
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(grade5);
        org.junit.Assert.assertNotNull(grade7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(grade10);
    }

    @Test
    public void test41805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41805");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList3, plannedActivityArray2);
        putFieldVisit1.PlannedActivities = plannedActivityList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str7 = domainObjectAttachment6.getId();
        java.lang.String str8 = domainObjectAttachment6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = domainObjectAttachment6.setAttachment(attachment9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str12 = domainObjectAttachment11.getId();
        java.lang.String str13 = domainObjectAttachment11.getId();
        domainObjectAttachment11.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = domainObjectAttachment11.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str19 = domainObjectAttachment18.getId();
        java.lang.String str20 = domainObjectAttachment18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = domainObjectAttachment18.setAttachment(attachment21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        java.lang.String str27 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = domainObjectAttachment25.setAttachment(attachment28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str31 = domainObjectAttachment30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment6, domainObjectAttachment11, domainObjectAttachment18, domainObjectAttachment23, domainObjectAttachment25, domainObjectAttachment30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33, domainObjectAttachmentArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit35 = putFieldVisit1.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33);
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit1.setEndTime(offsetDateTime36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule40 = schedule38.setCustomId("");
        java.time.OffsetDateTime offsetDateTime41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule42 = schedule38.setStartDate(offsetDateTime41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule44 = schedule42.setRecurrenceType(recurrenceType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit45 = putFieldVisit37.setSchedule(schedule42);
        java.time.OffsetDateTime offsetDateTime46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule47 = schedule42.setStartDate(offsetDateTime46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit48 = postFieldVisit0.setSchedule(schedule42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule49 = postFieldVisit48.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule50 = postFieldVisit48.getSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit51.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str54 = postFieldVisit51.Participants;
        java.lang.String str55 = postFieldVisit51.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple57 = fieldVisitSimple56.getSamplingLocation();
        java.time.OffsetDateTime offsetDateTime58 = fieldVisitSimple56.StartTime;
        java.time.OffsetDateTime offsetDateTime59 = null;
        fieldVisitSimple56.StartTime = offsetDateTime59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType61 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED;
        fieldVisitSimple56.PlanningStatus = planningStatusType61;
        postFieldVisit51.PlanningStatus = planningStatusType61;
        postFieldVisit48.PlanningStatus = planningStatusType61;
        org.junit.Assert.assertNotNull(plannedActivityArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(domainObjectAttachment10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(domainObjectAttachment17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(domainObjectAttachment22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(domainObjectAttachment29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putFieldVisit35);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNotNull(schedule40);
        org.junit.Assert.assertNotNull(schedule42);
        org.junit.Assert.assertTrue("'" + recurrenceType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule44);
        org.junit.Assert.assertNotNull(putFieldVisit45);
        org.junit.Assert.assertNotNull(schedule47);
        org.junit.Assert.assertNotNull(postFieldVisit48);
        org.junit.Assert.assertNotNull(schedule49);
        org.junit.Assert.assertNotNull(schedule50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str54, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(samplingLocationSimple57);
        org.junit.Assert.assertNull(offsetDateTime58);
        org.junit.Assert.assertTrue("'" + planningStatusType61 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED + "'", planningStatusType61.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED));
    }

    @Test
    public void test41806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41806");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str2 = domainObjectAttachment1.getId();
        java.lang.String str3 = domainObjectAttachment1.getId();
        domainObjectAttachment1.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment7 = domainObjectAttachment1.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment7.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment7, domainObjectAttachment10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList14, domainObjectAttachmentArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit16 = fieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList14);
        java.time.OffsetDateTime offsetDateTime17 = null;
        fieldVisit16.StartTime = offsetDateTime17;
        java.lang.String str19 = fieldVisit16.Id;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(domainObjectAttachment7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(fieldVisit16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test41807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41807");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setModel("MaxInstant");
        java.lang.Integer int6 = reading5.getGradeCode();
        reading5.ReadingQualifier = "http";
        java.lang.Boolean boolean9 = reading5.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str11 = pointVelocityDischargeActivity10.getModel();
        pointVelocityDischargeActivity10.Manufacturer = "'.'SSSSSSS";
        pointVelocityDischargeActivity10.HorizontalCoefficientUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity17 = pointVelocityDischargeActivity10.setModel("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        crossSectionPoint18.Distance = quantityWithDisplay19;
        crossSectionPoint18.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = crossSectionPoint18.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint25 = crossSectionPoint18.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint27 = crossSectionPoint25.setElevation(quantityWithDisplay26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay28 = null;
        crossSectionPoint27.Depth = quantityWithDisplay28;
        crossSectionPoint27.Comments = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList33 = fieldVisitReading32.DatumConvertedValues;
        fieldVisitReading32.SerialNumber = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = volumetricDischargeReading36.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck38.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay43 = doubleWithDisplay41.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str44 = doubleWithDisplay43.getDisplay();
        calibrationCheck40.Difference = doubleWithDisplay43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = pointVelocityDischargeActivity46.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity46.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity52 = pointVelocityDischargeActivity46.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList53 = pointVelocityDischargeActivity52.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity52.DistanceToMeter = datumConvertedQuantityWithDisplay54;
        calibrationCheck40.Standard = datumConvertedQuantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading57 = volumetricDischargeReading36.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay54);
        fieldVisitReading32.AdjustmentAmount = datumConvertedQuantityWithDisplay54;
        crossSectionPoint27.Elevation = datumConvertedQuantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity60 = pointVelocityDischargeActivity10.setWidth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str62 = pointVelocityDischargeActivity61.getModel();
        java.lang.String str63 = pointVelocityDischargeActivity61.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay64 = null;
        pointVelocityDischargeActivity61.Width = quantityWithDisplay64;
        java.lang.String str66 = pointVelocityDischargeActivity61.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay68 = null;
        crossSectionPoint67.Distance = quantityWithDisplay68;
        crossSectionPoint67.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay72 = crossSectionPoint67.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint74 = crossSectionPoint67.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay75 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint76 = crossSectionPoint74.setElevation(quantityWithDisplay75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay77 = null;
        crossSectionPoint76.Depth = quantityWithDisplay77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint76.Depth = datumConvertedQuantityWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint76.Elevation = datumConvertedQuantityWithDisplay81;
        datumConvertedQuantityWithDisplay81.Unit = "/AQUARIUS/Acquisition/v2";
        pointVelocityDischargeActivity61.DistanceToMeter = datumConvertedQuantityWithDisplay81;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity86 = pointVelocityDischargeActivity10.setArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading87 = reading5.setUncertainty((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay81);
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity17);
        org.junit.Assert.assertNull(quantityWithDisplay23);
        org.junit.Assert.assertNotNull(crossSectionPoint25);
        org.junit.Assert.assertNotNull(crossSectionPoint27);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList33);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(doubleWithDisplay43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity48);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity52);
        org.junit.Assert.assertNull(verticalList53);
        org.junit.Assert.assertNotNull(volumetricDischargeReading57);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(quantityWithDisplay72);
        org.junit.Assert.assertNotNull(crossSectionPoint74);
        org.junit.Assert.assertNotNull(crossSectionPoint76);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity86);
        org.junit.Assert.assertNotNull(reading87);
    }

    @Test
    public void test41808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41808");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary1.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary5 = observedPropertyImportSummary1.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        java.lang.String str7 = importError6.ErrorMessage;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] { importError6 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList9, importErrorArray8);
        observedPropertyImportSummary1.ImportJobErrors = importErrorList9;
        samplingLocationImportSummary0.ImportJobErrors = importErrorList9;
        samplingLocationImportSummary0.SuccessCount = 7;
        org.junit.Assert.assertNotNull(observedPropertyImportSummary5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(importErrorArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test41809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41809");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        java.util.List<java.lang.String> strList2 = getFieldVisits0.Ids;
        java.util.List<java.lang.String> strList3 = getFieldVisits0.getPlanningStatuses();
        java.util.List<java.lang.String> strList4 = getFieldVisits0.getFieldTripIds();
        java.lang.String str5 = getFieldVisits0.Cursor;
        getFieldVisits0.Cursor = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.util.List<java.lang.String> strList8 = getFieldVisits0.getSamplingPlanIds();
        java.lang.Object obj9 = getFieldVisits0.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
    }

    @Test
    public void test41810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41810");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate3 = specimenTemplate1.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate3.Preservative = preservativeType4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails6.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails8.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = specimenTemplate3.setAuditAttributes(auditAttributes9);
        extendedAttributeDefinition0.AuditAttributes = auditAttributes9;
        java.lang.Boolean boolean13 = extendedAttributeDefinition0.Mandatory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType14 = extendedAttributeDefinition0.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        java.time.OffsetDateTime offsetDateTime16 = putFieldVisit15.getEndTime();
        java.time.OffsetDateTime offsetDateTime17 = null;
        putFieldVisit15.StartTime = offsetDateTime17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit20 = putFieldVisit15.setFieldTrip(fieldTripSimple19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule23 = schedule21.setCustomId("");
        java.time.OffsetDateTime offsetDateTime24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule25 = schedule21.setStartDate(offsetDateTime24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule27 = schedule25.setRecurrenceType(recurrenceType26);
        java.time.OffsetDateTime offsetDateTime28 = schedule27.getEndDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        schedule27.RecurrenceDayMonthly = recurrenceDayMonthlyType29;
        java.time.OffsetDateTime offsetDateTime31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule32 = schedule27.setEndDate(offsetDateTime31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList33 = schedule27.SchedulePlannedActivities;
        schedule27.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit15.setSchedule(schedule27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        postUnitGroup37.AuditAttributes = auditAttributes38;
        postUnitGroup37.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = postUnitGroup37.AuditAttributes;
        java.lang.Boolean boolean43 = postUnitGroup37.getSupportsConversion();
        java.lang.Boolean boolean44 = postUnitGroup37.getSupportsConversion();
        java.lang.Object obj45 = postUnitGroup37.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = postSpecimen46.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = postSpecimen46.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType49 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        postSpecimen46.Preservative = preservativeType49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod53 = postLabAnalysisMethod51.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList55 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList55, observedPropertyArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod57 = postLabAnalysisMethod53.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType59 = analyticalGroup58.getType();
        analyticalGroup58.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem63.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod67 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod69 = analyticalGroupItem68.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod70 = analyticalGroupItem68.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod71 = null;
        analyticalGroupItem68.AnalysisMethod = analysisMethod71;
        java.lang.String str73 = analyticalGroupItem68.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod75 = analyticalGroupItem74.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod76 = analyticalGroupItem74.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod78 = analyticalGroupItem77.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod80 = analyticalGroupItem79.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod81 = analyticalGroupItem79.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod82 = null;
        analyticalGroupItem79.AnalysisMethod = analysisMethod82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem63, analyticalGroupItem65, analyticalGroupItem68, analyticalGroupItem74, analyticalGroupItem77, analyticalGroupItem79 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList85 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList85, analyticalGroupItemArray84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup87 = analyticalGroup62.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList85);
        analyticalGroup58.AnalyticalGroupItems = analyticalGroupItemList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup58.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod91 = postLabAnalysisMethod57.setAuditAttributes(auditAttributes89);
        java.time.OffsetDateTime offsetDateTime92 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes93 = auditAttributes89.setModificationTime(offsetDateTime92);
        postSpecimen46.AuditAttributes = auditAttributes93;
        postUnitGroup37.AuditAttributes = auditAttributes93;
        schedule27.AuditAttributes = auditAttributes93;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition97 = extendedAttributeDefinition0.setAuditAttributes(auditAttributes93);
        org.junit.Assert.assertNotNull(specimenTemplate3);
        org.junit.Assert.assertTrue("'" + preservativeType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails8);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertNotNull(specimenTemplate11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(dataType14);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(putFieldVisit20);
        org.junit.Assert.assertNotNull(schedule23);
        org.junit.Assert.assertNotNull(schedule25);
        org.junit.Assert.assertTrue("'" + recurrenceType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule27);
        org.junit.Assert.assertNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(schedule32);
        org.junit.Assert.assertNull(schedulePlannedActivityList33);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertNull(auditAttributes47);
        org.junit.Assert.assertNull(auditAttributes48);
        org.junit.Assert.assertTrue("'" + preservativeType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType49.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNotNull(postLabAnalysisMethod53);
        org.junit.Assert.assertNotNull(observedPropertyArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod57);
        org.junit.Assert.assertNull(analyticalGroupType59);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNull(analysisMethod67);
        org.junit.Assert.assertNull(analysisMethod69);
        org.junit.Assert.assertNull(analysisMethod70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(analysisMethod75);
        org.junit.Assert.assertNull(analysisMethod76);
        org.junit.Assert.assertNull(analysisMethod78);
        org.junit.Assert.assertNull(analysisMethod80);
        org.junit.Assert.assertNull(analysisMethod81);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(analyticalGroup87);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod91);
        org.junit.Assert.assertNotNull(auditAttributes93);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition97);
    }

    @Test
    public void test41811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41811");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin2 = putFieldDataPlugin0.setPluginPriority((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin4 = putFieldDataPlugin2.setUniqueId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin6 = putFieldDataPlugin4.setPluginPriority((java.lang.Integer) 10);
        putFieldDataPlugin4.IsEnabled = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin10 = putFieldDataPlugin4.setPluginPriority((java.lang.Integer) (-1));
        putFieldDataPlugin4.IsEnabled = false;
        org.junit.Assert.assertNotNull(putFieldDataPlugin2);
        org.junit.Assert.assertNotNull(putFieldDataPlugin4);
        org.junit.Assert.assertNotNull(putFieldDataPlugin6);
        org.junit.Assert.assertNotNull(putFieldDataPlugin10);
    }

    @Test
    public void test41812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41812");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = chartData0.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData3 = chartData0.setDepthUnitGroupWithUnits(unitGroupWithUnits2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty4.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = observedProperty4.getUpperLimit();
        java.lang.String str8 = observedProperty4.Id;
        java.lang.String str9 = observedProperty4.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod11 = postFieldVisitActivityFromPlannedActivity10.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = plannedFieldResult12.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = labResultDetails16.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult19 = plannedFieldResult12.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType21 = analyticalGroup20.getType();
        analyticalGroup20.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = null;
        analyticalGroupItem30.AnalysisMethod = analysisMethod33;
        java.lang.String str35 = analyticalGroupItem30.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem25, analyticalGroupItem27, analyticalGroupItem30, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47, analyticalGroupItemArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup49 = analyticalGroup24.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47);
        analyticalGroup20.AnalyticalGroupItems = analyticalGroupItemList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup20.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult53 = plannedFieldResult19.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str55 = putActivityTemplate54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType56 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate57 = putActivityTemplate54.setMedium(mediumType56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult58 = plannedFieldResult19.setMedium(mediumType56);
        postFieldVisitActivityFromPlannedActivity10.Medium = mediumType56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str61 = putActivityTemplate60.getId();
        java.lang.String str62 = putActivityTemplate60.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = auditAttributes63.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate66 = putActivityTemplate60.setAuditAttributes(auditAttributes65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity67 = postFieldVisitActivityFromPlannedActivity10.setAuditAttributes(auditAttributes65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty68 = observedProperty4.setAuditAttributes(auditAttributes65);
        observedProperty4.CustomId = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity71 = observedProperty4.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty73 = observedProperty4.setId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        chartData0.ObservedProperty = observedProperty4;
        org.junit.Assert.assertNull(observedProperty1);
        org.junit.Assert.assertNotNull(chartData3);
        org.junit.Assert.assertNull(quantity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(collectionMethod11);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(labResultDetails18);
        org.junit.Assert.assertNotNull(plannedFieldResult19);
        org.junit.Assert.assertNull(analyticalGroupType21);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(analyticalGroup49);
        org.junit.Assert.assertNotNull(plannedFieldResult53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + mediumType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType56.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate57);
        org.junit.Assert.assertNotNull(plannedFieldResult58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(auditAttributes65);
        org.junit.Assert.assertNotNull(putActivityTemplate66);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity67);
        org.junit.Assert.assertNotNull(observedProperty68);
        org.junit.Assert.assertNull(quantity71);
        org.junit.Assert.assertNotNull(observedProperty73);
    }

    @Test
    public void test41813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41813");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long5 = roleApprovalTransition4.getToApprovalLevel();
        java.lang.Long long6 = roleApprovalTransition4.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long8 = roleApprovalTransition7.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long18 = roleApprovalTransition17.getToApprovalLevel();
        java.lang.Long long19 = roleApprovalTransition17.ToApprovalLevel;
        java.lang.Long long20 = roleApprovalTransition17.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long22 = roleApprovalTransition21.getToApprovalLevel();
        java.lang.Long long23 = roleApprovalTransition21.ToApprovalLevel;
        java.lang.Long long24 = roleApprovalTransition21.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition4, roleApprovalTransition7, roleApprovalTransition11, roleApprovalTransition12, roleApprovalTransition17, roleApprovalTransition21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList26, roleApprovalTransitionArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase28 = postRole3.setRoleApprovalTransitions(roleApprovalTransitionList26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList29 = postRole3.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase30 = roleBase2.setRoleApprovalTransitions(roleApprovalTransitionList29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase32 = roleBase2.setCanEditData((java.lang.Boolean) false);
        java.lang.Boolean boolean33 = roleBase2.CanRemoveFieldVisits;
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(long8);
        org.junit.Assert.assertNotNull(roleApprovalTransition11);
        org.junit.Assert.assertNotNull(roleApprovalTransition14);
        org.junit.Assert.assertNotNull(roleApprovalTransition16);
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long22);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(roleBase28);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList29);
        org.junit.Assert.assertNotNull(roleBase30);
        org.junit.Assert.assertNotNull(roleBase32);
        org.junit.Assert.assertNull(boolean33);
    }

    @Test
    public void test41814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41814");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str1 = postUser0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser3 = postUser0.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType5 = putUserV2_4.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary8.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        dischargeSummary8.MeasurementTime = instant12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse7.setNextToken(instant12);
        java.time.Instant instant16 = locationDescriptionListServiceResponse7.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities17 = getActivities6.setToStartTime(instant16);
        java.lang.String str18 = getActivities17.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList20 = getObservationsV2_19.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.QualityControlTypes = strList32;
        getObservationsV2_19.ResultGrades = strList32;
        getActivities17.Media = strList32;
        putUserV2_4.AccessGroups = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_40 = putUserV2_4.setUserProfile(userProfile39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_42 = putUserV2_4.setUserType(userType41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser43 = postUser3.setUserType(userType41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser45 = postUser43.setUserType(userType44);
        java.util.List<java.lang.String> strList46 = postUser45.getRoles();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postUser3);
        org.junit.Assert.assertNull(userType5);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(getActivities17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(putUserV2_40);
        org.junit.Assert.assertTrue("'" + userType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_42);
        org.junit.Assert.assertNotNull(postUser43);
        org.junit.Assert.assertTrue("'" + userType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM + "'", userType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM));
        org.junit.Assert.assertNotNull(postUser45);
        org.junit.Assert.assertNull(strList46);
    }

    @Test
    public void test41815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41815");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesMetadata postTimeSeriesMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesMetadata();
        java.lang.String str1 = postTimeSeriesMetadata0.getUniqueId();
        java.lang.String str2 = postTimeSeriesMetadata0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesMetadata postTimeSeriesMetadata4 = postTimeSeriesMetadata0.setUniqueId("/AQUARIUS/Acquisition/v2");
        java.lang.String str5 = postTimeSeriesMetadata0.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postTimeSeriesMetadata4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str5, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test41816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41816");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        java.lang.Boolean boolean2 = putExtendedAttribute0.getMandatory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str4 = metricConfiguration3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty5.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType8 = postObservedProperty5.getAnalysisType();
        postObservedProperty5.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = postObservedProperty5.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = postLabAnalysisMethod12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList16, observedPropertyArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod18 = postLabAnalysisMethod14.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType20 = analyticalGroup19.getType();
        analyticalGroup19.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem24.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = null;
        analyticalGroupItem29.AnalysisMethod = analysisMethod32;
        java.lang.String str34 = analyticalGroupItem29.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = null;
        analyticalGroupItem40.AnalysisMethod = analysisMethod43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem24, analyticalGroupItem26, analyticalGroupItem29, analyticalGroupItem35, analyticalGroupItem38, analyticalGroupItem40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46, analyticalGroupItemArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup48 = analyticalGroup23.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46);
        analyticalGroup19.AnalyticalGroupItems = analyticalGroupItemList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup19.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod52 = postLabAnalysisMethod18.setAuditAttributes(auditAttributes50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = postObservedProperty5.setAuditAttributes(auditAttributes50);
        metricConfiguration3.AuditAttributes = auditAttributes50;
        putExtendedAttribute0.AuditAttributes = auditAttributes50;
        putExtendedAttribute0.CustomId = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute59 = putExtendedAttribute0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute61 = putExtendedAttribute0.setDefaultValue("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType62 = putExtendedAttribute0.getDataType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postObservedProperty7);
        org.junit.Assert.assertNull(analysisType8);
        org.junit.Assert.assertNull(quantity11);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod14);
        org.junit.Assert.assertNotNull(observedPropertyArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod18);
        org.junit.Assert.assertNull(analyticalGroupType20);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(analyticalGroup48);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod52);
        org.junit.Assert.assertNotNull(postObservedProperty53);
        org.junit.Assert.assertNotNull(putExtendedAttribute59);
        org.junit.Assert.assertNotNull(putExtendedAttribute61);
        org.junit.Assert.assertNull(dataType62);
    }

    @Test
    public void test41817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41817");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.Boolean boolean2 = role0.CanRemoveFieldVisits;
        role0.CanAddAppendConfigurations = false;
        role0.UniqueId = "2021.8.9990";
        java.lang.Boolean boolean7 = role0.isCanAddOrRemoveLocations();
        role0.CanAddOrRemoveLocations = true;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test41818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41818");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationTags getLocationTags0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationTags();
        java.lang.Object obj1 = getLocationTags0.getResponseType();
        java.lang.Object obj2 = getLocationTags0.getResponseType();
        java.lang.Object obj3 = getLocationTags0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTagsResponse");
    }

    @Test
    public void test41819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41819");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList2 = getSpecimens1.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = getSpecimens1.setSort("MinDuration");
        getSpecimens1.Sort = "POST";
        java.util.List<java.lang.String> strList7 = getSpecimens1.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription11 = locationDescription9.setIdentifier("");
        java.util.ArrayList<java.lang.String> strList12 = locationDescription11.getSecondaryFolders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType14 = getExtendedAttributes13.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str16 = deleteFieldVisits15.getSort();
        java.util.List<java.lang.String> strList17 = deleteFieldVisits15.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType34 = null;
        controlConditionActivity33.ControlCleaned = controlCleanedType34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        controlConditionActivity33.DateCleaned = instant37;
        timeAlignedDataServiceRequest32.QueryFrom = instant37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        getObservationsV2_41.SpecimenIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray51 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = putLocationTags47.setTagUniqueIds(strList52);
        getObservationsV2_41.ActivityIds = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest32.setTimeSeriesOutputUnitIds(strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_18.setCollectionMethodIds((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits58 = deleteFieldVisits15.setSamplingPlanIds((java.util.List<java.lang.String>) strList52);
        getExtendedAttributes13.Ids = strList52;
        locationDescription11.SecondaryFolders = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen61 = importItemSpecimen8.setWarningMessages((java.util.List<java.lang.String>) strList52);
        getSpecimens1.SamplingLocationGroupIds = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase63 = openIdConnectRelyingPartyConfigurationBase0.setHostedDomains((java.util.List<java.lang.String>) strList52);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getSpecimens4);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(locationDescription11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(appliesToType14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(putLocationTags54);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(deleteFieldVisits58);
        org.junit.Assert.assertNotNull(importItemSpecimen61);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase63);
    }

    @Test
    public void test41820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41820");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate2 = labInstructionTemplate0.setAuditAttributes(auditAttributes1);
        java.lang.String str3 = labInstructionTemplate0.getPreparationMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate5 = labInstructionTemplate0.setHoldingTime("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNotNull(labInstructionTemplate2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(labInstructionTemplate5);
    }

    @Test
    public void test41821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41821");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        java.util.List<java.lang.String> strList16 = getObservationsV2_1.getLabReportIds();
        importItem0.Errors = getObservationsV2_1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList19 = postCalculatedDerivedTimeSeries18.TimeSeriesUniqueIds;
        java.lang.String str20 = postCalculatedDerivedTimeSeries18.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation21.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList25, extendedAttributeValueArray24);
        postLocation21.ExtendedAttributeValues = extendedAttributeValueList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries28 = postCalculatedDerivedTimeSeries18.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList25);
        importItem0.Item = postCalculatedDerivedTimeSeries28;
        postCalculatedDerivedTimeSeries28.Comment = "";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries28);
    }

    @Test
    public void test41822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41822");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        java.lang.String str1 = putProject0.ScopeStatement;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        putProject0.AuditAttributes = auditAttributes2;
        java.time.OffsetDateTime offsetDateTime4 = putProject0.getStartTime();
        putProject0.Approved = true;
        java.lang.String str7 = putProject0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject9 = putProject0.setId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.String str10 = putProject9.CustomId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(putProject9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test41823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41823");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList9 = getObservationsV2_2.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType10 = null;
        getObservationsV2_2.FieldResultType = fieldResultType10;
        getObservationsV2_2.MaxNumericResultValue = 100.0d;
        java.lang.String str14 = getObservationsV2_2.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_2.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_2.setAnalysisMethodIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations24 = getExportSamplingLocations0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList20);
        java.lang.String str25 = getExportSamplingLocations0.Sort;
        getExportSamplingLocations0.Cursor = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.Integer int28 = getExportSamplingLocations0.Limit;
        java.time.Instant instant29 = getExportSamplingLocations0.EndModificationTime;
        java.lang.String str30 = getExportSamplingLocations0.getCustomId();
        java.util.List<java.lang.String> strList31 = getExportSamplingLocations0.LocationTypeIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations33 = getExportSamplingLocations0.setCursor("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.util.List<java.lang.String> strList34 = getExportSamplingLocations0.LocationGroupTypeIds;
        java.util.List<java.lang.String> strList35 = getExportSamplingLocations0.getSamplingLocationGroupIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        java.time.Instant instant37 = noteOperation36.getDateAppliedUtc();
        java.time.Instant instant38 = noteOperation36.DateAppliedUtc;
        java.lang.String str39 = noteOperation36.NoteText;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant41 = timeSeriesDescription40.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription43 = timeSeriesDescription40.setLabel("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant45 = timeSeriesDescription44.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType48 = null;
        controlConditionActivity47.ControlCleaned = controlCleanedType48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        controlConditionActivity47.DateCleaned = instant51;
        timeAlignedDataServiceRequest46.QueryFrom = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription55 = timeSeriesDescription44.setCorrectedEndTime(instant51);
        timeSeriesDescription40.RawEndTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription58 = timeSeriesDescription40.setComputationIdentifier("9999-12-31T23:59:59.9999999Z");
        java.time.Instant instant59 = timeSeriesDescription58.RawEndTime;
        noteOperation36.DateAppliedUtc = instant59;
        getExportSamplingLocations0.StartModificationTime = instant59;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSamplingLocations24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(getExportSamplingLocations33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(instant37);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNotNull(timeSeriesDescription43);
        org.junit.Assert.assertNull(instant45);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(timeSeriesDescription55);
        org.junit.Assert.assertNotNull(timeSeriesDescription58);
        org.junit.Assert.assertNotNull(instant59);
    }

    @Test
    public void test41824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41824");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        java.lang.String str2 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate6 = putActivityTemplate0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate6.Medium = mediumType7;
        java.lang.String str9 = putActivityTemplate6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate11.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList16 = specimenTemplate15.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = specimenTemplate17.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList22 = specimenTemplate21.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate11, specimenTemplate14, specimenTemplate15, specimenTemplate19, specimenTemplate20, specimenTemplate21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList24, specimenTemplateArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate26 = postFieldVisitActivityWithTemplate10.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList24);
        putActivityTemplate6.SpecimenTemplates = specimenTemplateList24;
        putActivityTemplate6.CustomId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate31.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList36 = specimenTemplate35.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = specimenTemplate37.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList42 = specimenTemplate41.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate31, specimenTemplate34, specimenTemplate35, specimenTemplate39, specimenTemplate40, specimenTemplate41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList44, specimenTemplateArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate46 = postFieldVisitActivityWithTemplate30.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate48 = postFieldVisitActivityWithTemplate46.setCollectionMethod(collectionMethod47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        postFieldVisitActivityWithTemplate46.CollectionMethod = collectionMethod49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate51 = putActivityTemplate6.setCollectionMethod(collectionMethod49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType52 = putActivityTemplate51.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity53 = putActivityTemplate51.Depth;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putActivityTemplate6);
        org.junit.Assert.assertTrue("'" + mediumType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(labInstructionTemplateList16);
        org.junit.Assert.assertNotNull(specimenTemplate19);
        org.junit.Assert.assertNull(labInstructionTemplateList22);
        org.junit.Assert.assertNotNull(specimenTemplateArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate26);
        org.junit.Assert.assertNull(labInstructionTemplateList36);
        org.junit.Assert.assertNotNull(specimenTemplate39);
        org.junit.Assert.assertNull(labInstructionTemplateList42);
        org.junit.Assert.assertNotNull(specimenTemplateArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate46);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate48);
        org.junit.Assert.assertNotNull(putActivityTemplate51);
        org.junit.Assert.assertTrue("'" + mediumType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(quantity53);
    }

    @Test
    public void test41825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41825");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        reportListServiceRequest0.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList6 = getExportSpecimens5.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant8 = qualifier7.DateApplied;
        java.lang.String str9 = qualifier7.User;
        java.lang.String str10 = qualifier7.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj12 = timeAlignedDataServiceRequest11.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = timeAlignedDataServiceRequest11.setQueryFrom(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = qualifier7.setDateApplied(instant14);
        getExportSpecimens5.Before = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark21 = locationRemark19.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList23 = fieldVisitDataServiceResponse22.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = fieldVisitDataServiceResponse22.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        fieldVisitDataServiceResponse22.ResponseTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark32 = locationRemark19.setCreateTime(instant29);
        getExportSpecimens5.EndModificationTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest34 = reportListServiceRequest0.setCreatedFrom(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest36 = reportListServiceRequest0.setMaxResults((java.lang.Integer) 10);
        java.lang.String str37 = reportListServiceRequest36.ReportTitle;
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest16);
        org.junit.Assert.assertNotNull(qualifier17);
        org.junit.Assert.assertNotNull(locationRemark21);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList23);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationRemark32);
        org.junit.Assert.assertNotNull(reportListServiceRequest34);
        org.junit.Assert.assertNotNull(reportListServiceRequest36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "MinDuration" + "'", str37, "MinDuration");
    }

    @Test
    public void test41826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41826");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAccessGroup getAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAccessGroup getAccessGroup2 = getAccessGroup0.setId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAccessGroup getAccessGroup4 = getAccessGroup0.setId("http");
        java.lang.String str5 = getAccessGroup0.getId();
        getAccessGroup0.Id = "9999-12-31T23:59:59.999Z";
        getAccessGroup0.Id = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        org.junit.Assert.assertNotNull(getAccessGroup2);
        org.junit.Assert.assertNotNull(getAccessGroup4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http" + "'", str5, "http");
    }

    @Test
    public void test41827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41827");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest6.ReportTitle = "MinDuration";
        java.lang.String str9 = reportListServiceRequest6.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_10.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList28 = getObservationsV2_27.getMedia();
        java.time.Instant instant29 = getObservationsV2_27.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_27.setProjectIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest37 = reportListServiceRequest6.setTagKeys(strList33);
        reportListServiceRequest6.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str41 = deleteFieldVisits40.Sort;
        deleteFieldVisits40.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList44 = deleteFieldVisits40.getScheduleIds();
        java.util.List<java.lang.String> strList45 = deleteFieldVisits40.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_47.setDataClassifications((java.util.List<java.lang.String>) strList51);
        postTag46.PickListValues = strList51;
        java.util.ArrayList<java.lang.String> strList55 = postTag46.PickListValues;
        deleteFieldVisits40.PlanningStatuses = strList55;
        reportListServiceRequest6.TagKeys = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_0.setSearch((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList59 = getChartDataV2_0.ProjectIds;
        java.lang.String str60 = getChartDataV2_0.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType61 = getChartDataV2_0.SampleFraction;
        java.util.List<java.lang.String> strList62 = getChartDataV2_0.ResultGrades;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(reportListServiceRequest37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(sampleFractionType61);
        org.junit.Assert.assertNull(strList62);
    }

    @Test
    public void test41828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41828");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList6 = postCalculatedDerivedTimeSeries5.TimeSeriesUniqueIds;
        java.lang.String str7 = postCalculatedDerivedTimeSeries5.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries9 = postCalculatedDerivedTimeSeries5.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str10 = postCalculatedDerivedTimeSeries9.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart13 = inputPart11.setHeaders((java.lang.Object) interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries14 = postCalculatedDerivedTimeSeries9.setInterpolationType(interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase15 = putParameter0.setInterpolationType(interpolationType12);
        putParameter0.UniqueId = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart13);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries14);
        org.junit.Assert.assertNotNull(parameterBase15);
    }

    @Test
    public void test41829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41829");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime1 = activity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = activity0.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activity0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = putActivity5.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity5.setEndTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device11 = device9.setType("/AQUARIUS/Acquisition/v2");
        putActivity5.Device = device11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device14 = device11.setDescription("9999-12-31T23:59:59.999Z");
        activity0.Device = device14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium16 = activity0.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit17 = activity0.FieldVisit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList18 = activity0.SamplingContextTags;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity20 = activity0.setSamplingContextTags(samplingContextTagList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType21 = null;
        activity20.Type = activityType21;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(activity3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(plannedActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(device11);
        org.junit.Assert.assertNotNull(device14);
        org.junit.Assert.assertNull(medium16);
        org.junit.Assert.assertNull(fieldVisit17);
        org.junit.Assert.assertNull(samplingContextTagList18);
        org.junit.Assert.assertNotNull(activity20);
    }

    @Test
    public void test41830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41830");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList1 = locationNote0.Tags;
        java.time.Instant instant2 = locationNote0.getFromTimeUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str4 = locationMonitoringMethod3.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList5 = null;
        locationMonitoringMethod3.Tags = tagMetadataList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str8 = locationMonitoringMethod7.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod10 = locationMonitoringMethod7.setParameter("MinDuration");
        locationMonitoringMethod10.Parameter = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory14 = attachment13.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment16 = attachment13.setFileName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription19 = locationDescription17.setIdentifier("");
        locationDescription19.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str23 = locationMonitoringMethod22.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod25 = locationMonitoringMethod22.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList27, tagMetadataArray26);
        locationMonitoringMethod25.Tags = tagMetadataList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription30 = locationDescription19.setTags(tagMetadataList27);
        attachment16.Tags = tagMetadataList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod32 = locationMonitoringMethod10.setTags(tagMetadataList27);
        locationMonitoringMethod3.Tags = tagMetadataList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote34 = locationNote0.setTags(tagMetadataList27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        locationNote34.ToTimeUtc = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod45 = timeSeriesThresholdPeriod43.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant46 = timeSeriesThresholdPeriod43.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary52.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        dischargeSummary52.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse51.setNextToken(instant56);
        java.time.Instant instant60 = locationDescriptionListServiceResponse51.getNextToken();
        java.time.Instant instant61 = locationDescriptionListServiceResponse51.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange62 = qualifier47.setStartTime(instant61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod63 = timeSeriesThresholdPeriod43.setEndTime(instant61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_65.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase70 = locationDatumPeriod68.setComment("'.'SSSSSSS");
        java.lang.String str71 = locationDatumPeriodBase70.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = locationDescriptionListServiceResponse72.setNextToken(instant73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase75 = locationDatumPeriodBase70.setValidFrom(instant73);
        getChartDataV2_65.StartModificationTime = instant73;
        interval64.End = instant73;
        timeSeriesThresholdPeriod43.StartTime = instant73;
        locationNote34.LastModifiedUtc = instant73;
        java.time.Instant instant80 = locationNote34.CreateTimeUtc;
        org.junit.Assert.assertNull(tagMetadataList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locationMonitoringMethod10);
        org.junit.Assert.assertNull(attachmentCategory14);
        org.junit.Assert.assertNotNull(attachment16);
        org.junit.Assert.assertNotNull(locationDescription19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locationMonitoringMethod25);
        org.junit.Assert.assertNotNull(tagMetadataArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locationDescription30);
        org.junit.Assert.assertNotNull(locationMonitoringMethod32);
        org.junit.Assert.assertNotNull(locationNote34);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod45);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(timeRange62);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod63);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse74);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase75);
        org.junit.Assert.assertNull(instant80);
    }

    @Test
    public void test41831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41831");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutNoteTag putNoteTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutNoteTag();
        putNoteTag0.UniqueId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
    }

    @Test
    public void test41832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41832");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        postTag4.PickListValues = strList9;
        java.util.ArrayList<java.lang.String> strList13 = postTag4.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor14 = processor3.setInputTimeSeriesUniqueIds(strList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor16 = processor14.setOutputTimeSeriesUniqueId("2021.4.62.0");
        java.lang.String str17 = processor16.getOutputTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange18 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange19 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange20 = processor16.getProcessorPeriod();
        java.lang.String str21 = processor16.Description;
        java.util.ArrayList<java.lang.String> strList22 = processor16.getInputTimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute23 = extendedAttribute2.setPickListValues(strList22);
        java.lang.Boolean boolean24 = extendedAttribute2.isVisibleInDatasetList();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute26 = extendedAttribute2.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute28 = extendedAttribute2.setRequired((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute30 = extendedAttribute28.setVisibleInDatasetList((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(processor14);
        org.junit.Assert.assertNotNull(processor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2021.4.62.0" + "'", str17, "2021.4.62.0");
        org.junit.Assert.assertNull(timeRange18);
        org.junit.Assert.assertNull(timeRange19);
        org.junit.Assert.assertNull(timeRange20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(extendedAttribute23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(extendedAttribute26);
        org.junit.Assert.assertNotNull(extendedAttribute28);
        org.junit.Assert.assertNotNull(extendedAttribute30);
    }

    @Test
    public void test41833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41833");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getName();
        java.time.OffsetDateTime offsetDateTime2 = null;
        project0.EndTime = offsetDateTime2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project5 = project0.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str7 = labInstructionTemplate6.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime9 = putSchedule8.StartDate;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule11 = putSchedule8.setEndDate(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = putSchedule11.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime13 = null;
        putSchedule11.LastGenerationDate = offsetDateTime13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType15 = putSchedule11.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = plannedFieldResult16.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult23 = plannedFieldResult16.setAuditAttributes(auditAttributes21);
        putSchedule11.AuditAttributes = auditAttributes21;
        labInstructionTemplate6.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project26 = project0.setAuditAttributes(auditAttributes21);
        java.lang.String str27 = project26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project29 = project26.setDescription("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(project5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(putSchedule11);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(plannedFieldResult23);
        org.junit.Assert.assertNotNull(project26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(project29);
    }

    @Test
    public void test41834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41834");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest3 = fieldVisitDataByLocationServiceRequest1.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty4 = importItemObservedProperty0.setErrors((java.lang.Object) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = importItemObservedProperty0.ExistingItem;
        java.lang.String str6 = importItemObservedProperty0.Input;
        java.util.List<java.lang.String> strList7 = importItemObservedProperty0.getFields();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList8 = importItemObservedProperty0.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList10 = importItemObject9.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList12, importChangeItemArray11);
        importItemObject9.ItemComparison = importChangeItemList12;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList15 = importItemObject9.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty16 = importItemObservedProperty0.setItemComparison(importChangeItemList15);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest3);
        org.junit.Assert.assertNotNull(importItemObservedProperty4);
        org.junit.Assert.assertNull(observedProperty5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(importChangeItemList8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(importChangeItemArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(importChangeItemList15);
        org.junit.Assert.assertNotNull(importItemObservedProperty16);
    }

    @Test
    public void test41835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41835");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str1 = deleteFieldVisits0.Sort;
        deleteFieldVisits0.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant4 = deleteFieldVisits0.EndStartTime;
        java.util.List<java.lang.String> strList5 = deleteFieldVisits0.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        java.time.Instant instant8 = getObservationsV2_6.getEndModificationTime();
        java.util.List<java.lang.String> strList9 = getObservationsV2_6.Media;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.ActivityTypes;
        java.util.List<java.lang.String> strList11 = getObservationsV2_6.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        getObservationsV2_6.LabResultLabAnalysisMethodIds = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits19 = deleteFieldVisits0.setFieldTripIds((java.util.List<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList20 = deleteFieldVisits19.PlanningStatuses;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits22 = deleteFieldVisits19.setCursor("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits24 = deleteFieldVisits19.setLimit((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList26 = getSpecimens25.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens28 = getSpecimens25.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_29.setDataClassifications((java.util.List<java.lang.String>) strList33);
        getObservationsV2_35.DepthUnitCustomId = "hi!";
        java.lang.String str38 = getObservationsV2_35.DepthUnitId;
        java.util.List<java.lang.String> strList39 = getObservationsV2_35.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = getObservationsV2_35.setSpecimenName("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType42 = getObservationsV2_41.getFieldResultType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse52.setNextToken(instant53);
        getObservationsV2_49.EndObservedTime = instant53;
        java.time.Instant instant56 = getObservationsV2_49.StartResultTime;
        java.util.List<java.lang.String> strList57 = getObservationsV2_49.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList59 = importItemObject58.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList61, importChangeItemArray60);
        importItemObject58.ItemComparison = importChangeItemList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject72 = importItemObject58.setExistingItem((java.lang.Object) putLocationTags64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        importItemObject72.WarningMessages = strList76;
        getObservationsV2_49.LabResultLabAnalysisMethodIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_81 = getObservationsV2_41.setObservedPropertyIds((java.util.List<java.lang.String>) strList76);
        getSpecimens28.ProjectIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits83 = deleteFieldVisits24.setSamplingLocationIds((java.util.List<java.lang.String>) strList76);
        java.lang.String str84 = deleteFieldVisits24.Cursor;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(deleteFieldVisits22);
        org.junit.Assert.assertNotNull(deleteFieldVisits24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(getSpecimens28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(getObservationsV2_41);
        org.junit.Assert.assertNull(fieldResultType42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNull(instant56);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(importChangeItemArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(importItemObject72);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_81);
        org.junit.Assert.assertNotNull(deleteFieldVisits83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str84, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test41836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41836");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType8 = null;
        getObservationsV2_0.FieldResultType = fieldResultType8;
        getObservationsV2_0.MaxNumericResultValue = 100.0d;
        java.lang.String str12 = getObservationsV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_0.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList16 = getAnalyticalGroups15.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType18 = putUserV2_17.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_20 = putUserV2_17.setEmail("MaxInstant");
        putUserV2_20.CustomId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest23.ReportTitle = "MinDuration";
        java.lang.String str26 = reportListServiceRequest23.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        java.util.List<java.lang.String> strList42 = getObservationsV2_27.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_27.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList45 = getObservationsV2_44.getMedia();
        java.time.Instant instant46 = getObservationsV2_44.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_44.setProjectIds((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest54 = reportListServiceRequest23.setTagKeys(strList50);
        java.lang.Object obj55 = reportListServiceRequest54.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = dischargeSummary58.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant62 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = locationDescriptionListServiceResponse61.setNextToken(instant62);
        dischargeSummary58.MeasurementTime = instant62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = locationDescriptionListServiceResponse57.setNextToken(instant62);
        java.time.Instant instant66 = locationDescriptionListServiceResponse57.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities67 = getActivities56.setToStartTime(instant66);
        java.lang.String str68 = getActivities67.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList70 = getObservationsV2_69.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        getObservationsV2_71.SpecimenIds = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray81 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags84 = putLocationTags77.setTagUniqueIds(strList82);
        getObservationsV2_71.QualityControlTypes = strList82;
        getObservationsV2_69.ResultGrades = strList82;
        getActivities67.Media = strList82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest88 = reportListServiceRequest54.setTimeSeriesUniqueIds(strList82);
        putUserV2_20.AccessGroups = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups90 = getAnalyticalGroups15.setObservedPropertyIds((java.util.List<java.lang.String>) strList82);
        java.util.List<java.lang.String> strList91 = getAnalyticalGroups15.ObservedPropertyIds;
        getObservationsV2_0.QualityControlTypes = strList91;
        java.lang.String str93 = getObservationsV2_0.SpecimenName;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(userType18);
        org.junit.Assert.assertNotNull(putUserV2_20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(reportListServiceRequest54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ReportListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ReportListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ReportListServiceResponse");
        org.junit.Assert.assertNotNull(dischargeSummary60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse63);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(getActivities67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putLocationTags84);
        org.junit.Assert.assertNotNull(reportListServiceRequest88);
        org.junit.Assert.assertNotNull(getAnalyticalGroups90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test41837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41837");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        java.lang.String str3 = postDatumConvertedTimeSeries0.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList5 = postCalculatedDerivedTimeSeries4.TimeSeriesUniqueIds;
        java.lang.String str6 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation7.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList11, extendedAttributeValueArray10);
        postLocation7.ExtendedAttributeValues = extendedAttributeValueList11;
        postCalculatedDerivedTimeSeries4.ExtendedAttributeValues = extendedAttributeValueList11;
        java.lang.String str15 = postCalculatedDerivedTimeSeries4.ComputationPeriodIdentifier;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList16 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        postDatumConvertedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries19 = postDatumConvertedTimeSeries0.setTargetIsLocalAssumedDatum((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries21 = postDatumConvertedTimeSeries0.setTimeSeriesUniqueId("PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries23 = postDatumConvertedTimeSeries0.setComputationIdentifier("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(extendedAttributeValueList16);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries19);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries21);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries23);
    }

    @Test
    public void test41838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41838");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_2.DataClassification = dataClassificationType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails7.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails7.setAuditAttributes(auditAttributes12);
        postObservationV2_2.LabResultDetails = labResultDetails13;
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails13.setDatePrepared(offsetDateTime15);
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + dataClassificationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(labResultDetails16);
    }

    @Test
    public void test41839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41839");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation1 = fieldVisit0.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit3 = fieldVisit0.setParticipants("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertNull(samplingLocation1);
        org.junit.Assert.assertNotNull(fieldVisit3);
    }

    @Test
    public void test41840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41840");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = analyticalGroup4.getType();
        analyticalGroup4.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = null;
        analyticalGroupItem14.AnalysisMethod = analysisMethod17;
        java.lang.String str19 = analyticalGroupItem14.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = null;
        analyticalGroupItem25.AnalysisMethod = analysisMethod28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem9, analyticalGroupItem11, analyticalGroupItem14, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31, analyticalGroupItemArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = analyticalGroup8.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31);
        analyticalGroup4.AnalyticalGroupItems = analyticalGroupItemList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup4.AuditAttributes = auditAttributes35;
        java.lang.String str37 = analyticalGroup4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType38 = analyticalGroup4.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType40 = analyticalGroup39.getType();
        java.lang.String str41 = analyticalGroup39.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = analyticalGroup39.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup45 = analyticalGroup43.setType(analyticalGroupType44);
        analyticalGroup4.Type = analyticalGroupType44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup47 = postAnalyticalGroup0.setType(analyticalGroupType44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup49 = postAnalyticalGroup47.setName("0001-01-01T00:00:00.000Z");
        java.lang.String str50 = postAnalyticalGroup47.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType51 = postAnalyticalGroup47.Type;
        java.lang.String str52 = postAnalyticalGroup47.getName();
        java.lang.String str53 = postAnalyticalGroup47.Id;
        java.lang.Integer int54 = postAnalyticalGroup47.getNumberOfObservedPropertiesInGroupItems();
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNull(analyticalGroupType5);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(analyticalGroup33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(analyticalGroupType38);
        org.junit.Assert.assertNull(analyticalGroupType40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(analyticalGroup43);
        org.junit.Assert.assertTrue("'" + analyticalGroupType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup45);
        org.junit.Assert.assertNotNull(postAnalyticalGroup47);
        org.junit.Assert.assertNotNull(postAnalyticalGroup49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str50, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + analyticalGroupType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str52, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "/AQUARIUS" + "'", str53, "/AQUARIUS");
        org.junit.Assert.assertNull(int54);
    }

    @Test
    public void test41841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41841");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit2 = fieldVisit0.setFieldTrip(fieldTripSimple1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5, plannedActivityArray4);
        putFieldVisit3.PlannedActivities = plannedActivityList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str9 = domainObjectAttachment8.getId();
        java.lang.String str10 = domainObjectAttachment8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment12 = domainObjectAttachment8.setAttachment(attachment11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str14 = domainObjectAttachment13.getId();
        java.lang.String str15 = domainObjectAttachment13.getId();
        domainObjectAttachment13.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = domainObjectAttachment13.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str21 = domainObjectAttachment20.getId();
        java.lang.String str22 = domainObjectAttachment20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = domainObjectAttachment20.setAttachment(attachment23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str28 = domainObjectAttachment27.getId();
        java.lang.String str29 = domainObjectAttachment27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = domainObjectAttachment27.setAttachment(attachment30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str33 = domainObjectAttachment32.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment8, domainObjectAttachment13, domainObjectAttachment20, domainObjectAttachment25, domainObjectAttachment27, domainObjectAttachment32 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35, domainObjectAttachmentArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit3.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan38 = putFieldVisit3.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple39 = putFieldVisit3.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule40 = putFieldVisit3.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str42 = samplingLocation41.Description;
        java.lang.String str43 = samplingLocation41.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation45 = samplingLocation41.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit46 = putFieldVisit3.setSamplingLocation(samplingLocation41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation48 = samplingLocation41.setAddress(address47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit49 = fieldVisit2.setSamplingLocation(samplingLocation48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation51 = samplingLocation48.setLongitude("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        samplingLocation51.Description = "9999-12-31T23:59:59.999Z";
        java.lang.String str54 = samplingLocation51.getLatitude();
        org.junit.Assert.assertNotNull(fieldVisit2);
        org.junit.Assert.assertNotNull(plannedActivityArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(domainObjectAttachment12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(domainObjectAttachment19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(domainObjectAttachment24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(domainObjectAttachment31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNull(samplingPlan38);
        org.junit.Assert.assertNull(fieldTripSimple39);
        org.junit.Assert.assertNull(schedule40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(samplingLocation45);
        org.junit.Assert.assertNotNull(putFieldVisit46);
        org.junit.Assert.assertNotNull(samplingLocation48);
        org.junit.Assert.assertNotNull(fieldVisit49);
        org.junit.Assert.assertNotNull(samplingLocation51);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test41842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41842");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.String str1 = getFieldVisits0.Sort;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test41843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41843");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin();
        putFieldDataPlugin0.PluginPriority = 100;
        putFieldDataPlugin0.PluginPriority = 2;
        putFieldDataPlugin0.IsEnabled = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin8 = putFieldDataPlugin0.setPluginPriority((java.lang.Integer) 0);
        java.lang.String str9 = putFieldDataPlugin0.UniqueId;
        org.junit.Assert.assertNotNull(putFieldDataPlugin8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41844");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType2 = getObservationsV2_0.getSampleFraction();
        java.time.Instant instant3 = getObservationsV2_0.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = getObservationsV2_0.setImportHistoryEventId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.Integer int6 = getObservationsV2_5.Limit;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(sampleFractionType2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(getObservationsV2_5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test41845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41845");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        standardDefinition4.Description = "ZZZZZ";
        standardDefinition4.Description = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval9 = standardDefinition4.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = standardSimple10.setApplicabilityRange(interval11);
        java.lang.String str13 = standardSimple10.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple10.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = standardSimple15.setName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = standardSimple17.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = standardSimple19.setApplicabilityRange(interval20);
        java.lang.String str22 = standardSimple19.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple19.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = standardSimple24.setName("");
        java.lang.String str27 = standardSimple26.Id;
        java.lang.String str28 = standardSimple26.Id;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval29 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant30 = interval29.Start;
        java.time.Instant instant31 = interval29.End;
        standardSimple26.ApplicabilityRange = interval29;
        standardSimple17.ApplicabilityRange = interval29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.lang.Object obj35 = ratingCurveListServiceRequest34.getResponseType();
        java.time.Instant instant36 = ratingCurveListServiceRequest34.getQueryTo();
        java.time.Instant instant37 = ratingCurveListServiceRequest34.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark40 = locationRemark38.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        locationRemark40.FromTime = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark46 = locationRemark40.setRemark("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str47 = locationRemark46.TypeName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary50 = dischargeSummary48.setMeanGageHeightMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = dischargeSummary48.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary48.setParty("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str56 = getObservationsV2_55.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        getObservationsV2_55.ProjectIds = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_64 = putBulkEditResultGradesV2_54.setTaxonIds((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant66 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = locationDescriptionListServiceResponse65.setNextToken(instant66);
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        locationDescriptionListServiceResponse65.NextToken = instant68;
        putBulkEditResultGradesV2_64.EndResultTime = instant68;
        dischargeSummary48.MeasurementTime = instant68;
        locationRemark46.ToTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest73 = ratingCurveListServiceRequest34.setQueryTo(instant68);
        interval29.End = instant68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition75 = standardDefinition4.setApplicabilityRange(interval29);
        java.lang.String str76 = standardDefinition4.Description;
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(interval9);
        org.junit.Assert.assertNotNull(standardSimple12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple17);
        org.junit.Assert.assertNull(interval18);
        org.junit.Assert.assertNotNull(standardSimple21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertNull(instant36);
        org.junit.Assert.assertNull(instant37);
        org.junit.Assert.assertNotNull(locationRemark40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(locationRemark46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dischargeSummary50);
        org.junit.Assert.assertNull(quantityWithDisplay51);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest73);
        org.junit.Assert.assertNotNull(standardDefinition75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "MinInstant" + "'", str76, "MinInstant");
    }

    @Test
    public void test41846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41846");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int4 = postUnitGroup0.IntensityDimension;
        java.lang.Integer int5 = postUnitGroup0.IntensityDimension;
        postUnitGroup0.DisplayName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup9 = postUnitGroup0.setBaseUnitSingularName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup11 = postUnitGroup9.setBaseUnitSingularName("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup13 = postUnitGroup11.setGroupIdentifier("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        postUnitGroup13.BaseUnitPluralName = "";
        java.lang.String str16 = postUnitGroup13.BaseUnitSingularName;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(postUnitGroup9);
        org.junit.Assert.assertNotNull(postUnitGroup11);
        org.junit.Assert.assertNotNull(postUnitGroup13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str16, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
    }

    @Test
    public void test41847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41847");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries5 = postReflectedTimeSeries0.setInterpolationType(interpolationType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str7 = postBasicTimeSeries6.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase10 = putParameter8.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str11 = putParameter8.getRoundingSpec();
        java.lang.String str12 = putParameter8.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList14 = postCalculatedDerivedTimeSeries13.TimeSeriesUniqueIds;
        java.lang.String str15 = postCalculatedDerivedTimeSeries13.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries13.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str18 = postCalculatedDerivedTimeSeries17.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart21 = inputPart19.setHeaders((java.lang.Object) interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries22 = postCalculatedDerivedTimeSeries17.setInterpolationType(interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase23 = putParameter8.setInterpolationType(interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase25 = parameterBase23.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType26 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase23.InterpolationType = interpolationType26;
        postBasicTimeSeries6.InterpolationType = interpolationType26;
        postReflectedTimeSeries5.InterpolationType = interpolationType26;
        postReflectedTimeSeries5.Method = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries33 = postReflectedTimeSeries5.setComputationIdentifier("");
        postReflectedTimeSeries33.ComputationPeriodIdentifier = "http";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + interpolationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postReflectedTimeSeries5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(parameterBase10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str18, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart21);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries22);
        org.junit.Assert.assertNotNull(parameterBase23);
        org.junit.Assert.assertNotNull(parameterBase25);
        org.junit.Assert.assertTrue("'" + interpolationType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postReflectedTimeSeries33);
    }

    @Test
    public void test41848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41848");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeStepCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries5.setParameter("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries7.setComputationIdentifier("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries11 = postStatisticalDerivedTimeSeries9.setParameter("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries11);
    }

    @Test
    public void test41849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41849");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType1 = fieldVisitReading0.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval2 = fieldVisitReading0.Approval;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        fieldVisitReading0.AdjustmentAmount = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading0.setControlCondition("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = null;
        adcpDischargeActivity7.TransducerDepth = quantityWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary10.BaseFlow = baseFlowType15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary10.DischargeUncertainty = dischargeUncertainty17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = dischargeSummary19.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = dischargeSummary19.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = dischargeSummary19.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = doubleWithDisplay23.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary19.setDurationInHours(doubleWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty27 = dischargeUncertainty17.setQuantitativeUncertainty(doubleWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity28 = adcpDischargeActivity7.setTopEstimateExponent(doubleWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity30 = adcpDischargeActivity7.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = adcpDischargeActivity7.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str33 = datumConvertedQuantityWithDisplay32.TargetDatum;
        adcpDischargeActivity7.Area = datumConvertedQuantityWithDisplay32;
        fieldVisitReading0.Value = datumConvertedQuantityWithDisplay32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = volumetricDischargeReading36.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck38.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay43 = doubleWithDisplay41.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str44 = doubleWithDisplay43.getDisplay();
        calibrationCheck40.Difference = doubleWithDisplay43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = pointVelocityDischargeActivity46.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity46.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity52 = pointVelocityDischargeActivity46.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList53 = pointVelocityDischargeActivity52.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity52.DistanceToMeter = datumConvertedQuantityWithDisplay54;
        calibrationCheck40.Standard = datumConvertedQuantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading57 = volumetricDischargeReading36.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay59 = datumConvertedQuantityWithDisplay54.setUnit("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading60 = fieldVisitReading0.setAdjustmentAmount(quantityWithDisplay59);
        java.lang.String str61 = fieldVisitReading60.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay62 = fieldVisitReading60.Value;
        java.lang.Integer int63 = fieldVisitReading60.getGradeCode();
        org.junit.Assert.assertNull(fieldVisitReadingType1);
        org.junit.Assert.assertNull(fieldVisitApproval2);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + baseFlowType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay20);
        org.junit.Assert.assertNull(quantityWithDisplay21);
        org.junit.Assert.assertNull(doubleWithDisplay22);
        org.junit.Assert.assertNotNull(doubleWithDisplay25);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(dischargeUncertainty27);
        org.junit.Assert.assertNotNull(adcpDischargeActivity28);
        org.junit.Assert.assertNotNull(adcpDischargeActivity30);
        org.junit.Assert.assertNull(doubleWithDisplay31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(doubleWithDisplay43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity48);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity52);
        org.junit.Assert.assertNull(verticalList53);
        org.junit.Assert.assertNotNull(volumetricDischargeReading57);
        org.junit.Assert.assertNotNull(quantityWithDisplay59);
        org.junit.Assert.assertNotNull(fieldVisitReading60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(quantityWithDisplay62);
        org.junit.Assert.assertNull(int63);
    }

    @Test
    public void test41850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41850");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType1 = null;
        controlConditionActivity0.ControlCleaned = controlCleanedType1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = controlConditionActivity0.getDistanceToGage();
        controlConditionActivity0.ControlCode = "/AQUARIUS/Acquisition/v2";
        java.lang.String str6 = controlConditionActivity0.Party;
        java.lang.String str7 = controlConditionActivity0.getControlCode();
        controlConditionActivity0.ControlCode = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType10 = controlConditionActivity0.getControlCleaned();
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(controlCleanedType10);
    }

    @Test
    public void test41851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41851");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList18 = getSpecimens17.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens20 = getSpecimens17.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_21.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        java.lang.String str28 = controlConditionActivity25.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary29.Reviewer = "";
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary29.MeasurementTime = instant32;
        controlConditionActivity25.DateCleaned = instant32;
        gageHeightReading24.ReadingTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = doubleWithDisplay36.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str39 = doubleWithDisplay38.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading40 = gageHeightReading24.setGageHeight(doubleWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = dischargeSummary42.setMeanGageHeightMethod("hi!");
        java.lang.String str45 = dischargeSummary44.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = dischargeSummary44.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType49 = calibrationCheck48.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay50 = calibrationCheck48.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary52.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        dischargeSummary52.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse51.setNextToken(instant56);
        java.time.Instant instant60 = locationDescriptionListServiceResponse51.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck61 = calibrationCheck48.setTime(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = dischargeSummary44.setMeasurementTime(instant60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_63 = getChartDataV2_41.setStartResultTime(instant60);
        gageHeightReading24.ReadingTime = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = getChartDataV2_21.setStartObservedTime(instant60);
        getSpecimens17.EndModificationTime = instant60;
        getExportObservations16.StartModificationTime = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType68 = getExportObservations16.getFieldResultType();
        java.util.List<java.lang.String> strList69 = getExportObservations16.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(getSpecimens20);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(doubleWithDisplay38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(gageHeightReading40);
        org.junit.Assert.assertNotNull(dischargeSummary44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(dischargeSummary47);
        org.junit.Assert.assertNull(calibrationCheckType49);
        org.junit.Assert.assertNull(doubleWithDisplay50);
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(calibrationCheck61);
        org.junit.Assert.assertNotNull(dischargeSummary62);
        org.junit.Assert.assertNotNull(getChartDataV2_63);
        org.junit.Assert.assertNotNull(getChartDataV2_65);
        org.junit.Assert.assertNull(fieldResultType68);
        org.junit.Assert.assertNull(strList69);
    }

    @Test
    public void test41852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41852");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        java.lang.String str5 = observation0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList7 = importItemTaxon6.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon9 = importItemTaxon6.setItem(taxon8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str11 = postCalculatedDerivedTimeSeries10.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList12 = postCalculatedDerivedTimeSeries10.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon13 = importItemTaxon9.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList15 = importItemObject14.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList17, importChangeItemArray16);
        importItemObject14.ItemComparison = importChangeItemList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray24 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags20.setTagUniqueIds(strList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject28 = importItemObject14.setExistingItem((java.lang.Object) putLocationTags20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser31 = openIdConnectUser29.setIdentifier("");
        java.lang.Boolean boolean32 = openIdConnectUser31.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject33 = importItemObject14.setErrors((java.lang.Object) openIdConnectUser31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList34 = importItemObject33.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon35 = importItemTaxon13.setItemComparison(importChangeItemList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList37 = importItemTaxon36.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon36.setItem(taxon38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str41 = postCalculatedDerivedTimeSeries40.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList42 = postCalculatedDerivedTimeSeries40.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon43 = importItemTaxon39.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon45 = importItemTaxon39.setExistingItem(taxon44);
        importItemTaxon13.Item = taxon44;
        taxon44.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon44.ItisTsn = "MaxDuration";
        java.lang.String str51 = taxon44.ScientificName;
        java.lang.String str52 = taxon44.ItisTsn;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation53 = observation0.setRelatedTaxon(taxon44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics54.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        observationStatistics54.P50 = 1.0d;
        java.lang.Double double59 = observationStatistics54.Max;
        observationStatistics54.Min = 0.0d;
        observationStatistics54.Max = 0.0d;
        observation0.Statistics = observationStatistics54;
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(importItemTaxon9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(extendedAttributeValueList12);
        org.junit.Assert.assertNotNull(importItemTaxon13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(importChangeItemArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNotNull(importItemObject28);
        org.junit.Assert.assertNotNull(openIdConnectUser31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(importItemObject33);
        org.junit.Assert.assertNotNull(importChangeItemList34);
        org.junit.Assert.assertNotNull(importItemTaxon35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(extendedAttributeValueList42);
        org.junit.Assert.assertNotNull(importItemTaxon43);
        org.junit.Assert.assertNotNull(importItemTaxon45);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "MaxDuration" + "'", str52, "MaxDuration");
        org.junit.Assert.assertNotNull(observation53);
        org.junit.Assert.assertNull(double59);
    }

    @Test
    public void test41853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41853");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = specimenTemplate4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate6.Preservative = preservativeType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = specimenTemplate6.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition15 = postDetectioncondition3.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard16 = putStandard0.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard18 = putStandard16.setDescription("ZZZZZ");
        java.lang.String str19 = putStandard18.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard21 = putStandard18.setName("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList22 = putStandard18.getObservationStandards();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard24 = putStandard18.setIssuingOrganization("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNotNull(specimenTemplate6);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(specimenTemplate14);
        org.junit.Assert.assertNotNull(postDetectioncondition15);
        org.junit.Assert.assertNotNull(putStandard16);
        org.junit.Assert.assertNotNull(putStandard18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(putStandard21);
        org.junit.Assert.assertNull(observationStandardList22);
        org.junit.Assert.assertNotNull(putStandard24);
    }

    @Test
    public void test41854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41854");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str7 = dischargeChannelMeasurement1.Channel;
        dischargeChannelMeasurement1.Channel = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement1.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark14 = locationRemark12.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark17 = locationRemark15.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        locationRemark17.FromTime = instant19;
        locationRemark14.CreateTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement23 = dischargeChannelMeasurement11.setEndTime(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity24 = volumetricDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = volumetricDischargeActivity24.getMeasurementContainerVolume();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity27 = volumetricDischargeActivity24.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay28 = volumetricDischargeActivity27.getMeasurementContainerVolume();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity30 = volumetricDischargeActivity27.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity32 = volumetricDischargeActivity30.setIsValid((java.lang.Boolean) true);
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNotNull(locationRemark14);
        org.junit.Assert.assertNotNull(locationRemark17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement23);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity24);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity27);
        org.junit.Assert.assertNull(quantityWithDisplay28);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity30);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity32);
    }

    @Test
    public void test41855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41855");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str1 = locationUserRoles0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str3 = locationUserRoles2.getLocationUniqueId();
        java.lang.String str4 = locationUserRoles2.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str6 = locationUserRoles5.LocationUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList7 = locationUserRoles5.getRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str9 = locationUserRole8.AppliedToLocationFolderName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str11 = locationUserRole10.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole13 = locationUserRole10.setUserLoginName("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str15 = locationUserRole14.UserUniqueId;
        java.lang.String str16 = locationUserRole14.getAppliedToLocationFolderName();
        java.lang.String str17 = locationUserRole14.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str19 = locationUserRole18.UserUniqueId;
        java.lang.String str20 = locationUserRole18.RoleName;
        java.lang.String str21 = locationUserRole18.getAppliedToLocationFolderName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] locationUserRoleArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] { locationUserRole8, locationUserRole10, locationUserRole14, locationUserRole18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>) locationUserRoleList23, locationUserRoleArray22);
        locationUserRoles5.Roles = locationUserRoleList23;
        locationUserRoles2.Roles = locationUserRoleList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles27 = locationUserRoles0.setRoles(locationUserRoleList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str29 = locationUserRoles28.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str31 = locationUserRoles30.getLocationUniqueId();
        java.lang.String str32 = locationUserRoles30.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str34 = locationUserRoles33.LocationUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList35 = locationUserRoles33.getRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str37 = locationUserRole36.AppliedToLocationFolderName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str39 = locationUserRole38.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole41 = locationUserRole38.setUserLoginName("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str43 = locationUserRole42.UserUniqueId;
        java.lang.String str44 = locationUserRole42.getAppliedToLocationFolderName();
        java.lang.String str45 = locationUserRole42.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str47 = locationUserRole46.UserUniqueId;
        java.lang.String str48 = locationUserRole46.RoleName;
        java.lang.String str49 = locationUserRole46.getAppliedToLocationFolderName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] locationUserRoleArray50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] { locationUserRole36, locationUserRole38, locationUserRole42, locationUserRole46 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>) locationUserRoleList51, locationUserRoleArray50);
        locationUserRoles33.Roles = locationUserRoleList51;
        locationUserRoles30.Roles = locationUserRoleList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles55 = locationUserRoles28.setRoles(locationUserRoleList51);
        locationUserRoles0.Roles = locationUserRoleList51;
        java.lang.String str57 = locationUserRoles0.LocationUniqueId;
        java.lang.String str58 = locationUserRoles0.LocationUniqueId;
        java.lang.String str59 = locationUserRoles0.getLocationUniqueId();
        locationUserRoles0.LocationUniqueId = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(locationUserRoleList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locationFolderUserRole13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locationUserRoleArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locationUserRoles27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(locationUserRoleList35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locationFolderUserRole41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locationUserRoleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locationUserRoles55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test41856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41856");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str1 = attachment0.getUrl();
        java.lang.String str2 = attachment0.FileName;
        java.lang.String str3 = attachment0.getFileName();
        java.lang.String str4 = attachment0.getFileName();
        attachment0.Url = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType attachmentType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.LoggerFile;
        attachment0.AttachmentType = attachmentType7;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + attachmentType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.LoggerFile + "'", attachmentType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.LoggerFile));
    }

    @Test
    public void test41857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41857");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity2 = samplingPlanPlannedActivity0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity2.AuditAttributes = auditAttributes3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = samplingPlanPlannedActivity2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity9 = samplingPlanPlannedActivity2.setInstruction("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity();
        schedulePlannedActivity10.Instruction = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate15 = activityTemplate13.setMedium(mediumType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity16 = schedulePlannedActivity10.setActivityTemplate(activityTemplate15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType17 = schedulePlannedActivity10.getActivityType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate18 = schedulePlannedActivity10.getActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity2.setActivityTemplate(activityTemplate18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType20 = activityTemplate18.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity22 = putObservedProperty21.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit23 = putObservedProperty21.getDefaultUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup24 = putObservedProperty21.getUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit26 = null;
        quantity25.Unit = unit26;
        java.lang.Double double28 = quantity25.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity30 = quantity25.setValue((java.lang.Double) (-1.0d));
        putObservedProperty21.LowerLimit = quantity25;
        activityTemplate18.Depth = quantity25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate35 = activityTemplate33.setMedium(mediumType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate37 = activityTemplate33.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = plannedFieldResult38.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails42 = labResultDetails40.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails44 = labResultDetails42.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult45 = plannedFieldResult38.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType47 = analyticalGroup46.getType();
        analyticalGroup46.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem51.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = analyticalGroupItem56.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem56.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = null;
        analyticalGroupItem56.AnalysisMethod = analysisMethod59;
        java.lang.String str61 = analyticalGroupItem56.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod68 = analyticalGroupItem67.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod69 = analyticalGroupItem67.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod70 = null;
        analyticalGroupItem67.AnalysisMethod = analysisMethod70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem51, analyticalGroupItem53, analyticalGroupItem56, analyticalGroupItem62, analyticalGroupItem65, analyticalGroupItem67 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList73, analyticalGroupItemArray72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup75 = analyticalGroup50.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList73);
        analyticalGroup46.AnalyticalGroupItems = analyticalGroupItemList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup46.AuditAttributes = auditAttributes77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult79 = plannedFieldResult45.setAuditAttributes(auditAttributes77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str81 = putActivityTemplate80.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType82 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate83 = putActivityTemplate80.setMedium(mediumType82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult84 = plannedFieldResult45.setMedium(mediumType82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate85 = activityTemplate33.setMedium(mediumType82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType86 = activityTemplate85.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate87 = activityTemplate18.setMedium(mediumType86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod88 = activityTemplate87.CollectionMethod;
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(auditAttributes7);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity9);
        org.junit.Assert.assertTrue("'" + mediumType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate15);
        org.junit.Assert.assertNotNull(schedulePlannedActivity16);
        org.junit.Assert.assertNull(activityType17);
        org.junit.Assert.assertNotNull(activityTemplate18);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertTrue("'" + mediumType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNull(quantity22);
        org.junit.Assert.assertNull(unit23);
        org.junit.Assert.assertNull(unitGroup24);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNotNull(quantity30);
        org.junit.Assert.assertTrue("'" + mediumType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate35);
        org.junit.Assert.assertNotNull(activityTemplate37);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNotNull(labResultDetails42);
        org.junit.Assert.assertNotNull(labResultDetails44);
        org.junit.Assert.assertNotNull(plannedFieldResult45);
        org.junit.Assert.assertNull(analyticalGroupType47);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod57);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(analysisMethod63);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNull(analysisMethod68);
        org.junit.Assert.assertNull(analysisMethod69);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(analyticalGroup75);
        org.junit.Assert.assertNotNull(plannedFieldResult79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + mediumType82 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType82.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate83);
        org.junit.Assert.assertNotNull(plannedFieldResult84);
        org.junit.Assert.assertNotNull(activityTemplate85);
        org.junit.Assert.assertTrue("'" + mediumType86 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType86.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate87);
        org.junit.Assert.assertNull(collectionMethod88);
    }

    @Test
    public void test41858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41858");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetTag getTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetTag();
        java.lang.String str1 = getTag0.getUniqueId();
        java.lang.Object obj2 = getTag0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetTag getTag4 = getTag0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetTag getTag6 = getTag0.setUniqueId("0001-01-01T00:00:00.000Z");
        java.lang.String str7 = getTag0.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertNotNull(getTag4);
        org.junit.Assert.assertNotNull(getTag6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str7, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test41859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41859");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str34 = getObservationsV2_33.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        getObservationsV2_33.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_12.setObservedPropertyIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest4.setTimeSeriesOutputUnitIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField44 = extendedAttributeField2.setValueOptions((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField46 = extendedAttributeField44.setDisplayName("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField48 = extendedAttributeField46.setNumericType("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        extendedAttributeField46.NumericPrecision = 7;
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(extendedAttributeField44);
        org.junit.Assert.assertNotNull(extendedAttributeField46);
        org.junit.Assert.assertNotNull(extendedAttributeField48);
    }

    @Test
    public void test41860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41860");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        java.lang.String str2 = timeSeries0.getSubLocationIdentifier();
        java.lang.String str3 = timeSeries0.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries5 = timeSeries0.setDescription("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str6 = timeSeries0.Parameter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(timeSeries5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test41861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41861");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostParameter postParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostParameter();
        java.lang.Object obj1 = postParameter0.getResponseType();
        java.lang.String str2 = postParameter0.UnitIdentifier;
        postParameter0.MinValue = 0.0d;
        java.lang.Object obj5 = postParameter0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Parameter");
    }

    @Test
    public void test41862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41862");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_2.setObservedTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = putObservationV2_2.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_12 = putObservationV2_2.setNumericResult(numericResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart15 = inputPart13.setHeaders((java.lang.Object) interpolationType14);
        java.lang.String str16 = inputPart13.BodyAsString;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime18 = activity17.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity20 = activity17.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation21 = activity17.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity23 = putActivity22.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity25 = putActivity22.setEndTime(offsetDateTime24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device28 = device26.setType("/AQUARIUS/Acquisition/v2");
        putActivity22.Device = device28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device31 = device28.setDescription("9999-12-31T23:59:59.999Z");
        activity17.Device = device31;
        java.lang.String str33 = activity17.getLoggerFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity34.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity38 = postActivity34.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity40 = null;
        putActivity39.PlannedActivity = plannedActivity40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity42.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity46 = postActivity42.setPlannedActivity(plannedActivity45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str48 = samplingContextTag47.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag50 = samplingContextTag47.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag52 = samplingContextTag50.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str54 = samplingContextTag53.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str56 = samplingContextTag55.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = null;
        samplingContextTag55.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str60 = samplingContextTag59.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag62 = samplingContextTag59.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag52, samplingContextTag53, samplingContextTag55, samplingContextTag62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList64, samplingContextTagArray63);
        postActivity42.SamplingContextTags = samplingContextTagList64;
        putActivity39.SamplingContextTags = samplingContextTagList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity68 = postActivity38.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList64);
        activity17.SamplingContextTags = samplingContextTagList64;
        java.time.OffsetDateTime offsetDateTime70 = null;
        activity17.EndTime = offsetDateTime70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart72 = inputPart13.setHeaders((java.lang.Object) activity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_73 = putObservationV2_2.setActivity(activity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity74 = activity17.PlannedActivity;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(taxonomicResult10);
        org.junit.Assert.assertNotNull(putObservationV2_12);
        org.junit.Assert.assertTrue("'" + interpolationType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(activity20);
        org.junit.Assert.assertNull(samplingLocation21);
        org.junit.Assert.assertNull(plannedActivity23);
        org.junit.Assert.assertNotNull(putActivity25);
        org.junit.Assert.assertNotNull(device28);
        org.junit.Assert.assertNotNull(device31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "'.'SSSSSSS" + "'", str33, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(postActivity38);
        org.junit.Assert.assertNotNull(postActivity46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(samplingContextTag50);
        org.junit.Assert.assertNotNull(samplingContextTag52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(samplingContextTag62);
        org.junit.Assert.assertNotNull(samplingContextTagArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(postActivity68);
        org.junit.Assert.assertNotNull(inputPart72);
        org.junit.Assert.assertNotNull(putObservationV2_73);
        org.junit.Assert.assertNull(plannedActivity74);
    }

    @Test
    public void test41863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41863");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit getUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit();
        java.lang.String str1 = getUnitGroupWithUnit0.getId();
        java.lang.Object obj2 = getUnitGroupWithUnit0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit getUnitGroupWithUnit4 = getUnitGroupWithUnit0.setId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit getUnitGroupWithUnit6 = getUnitGroupWithUnit4.setId("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertNotNull(getUnitGroupWithUnit4);
        org.junit.Assert.assertNotNull(getUnitGroupWithUnit6);
    }

    @Test
    public void test41864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41864");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement3 = dischargeChannelMeasurement0.setChannel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement5 = dischargeChannelMeasurement0.setMeasurementLocationToGage(measurementLocationToGageType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType6 = dischargeChannelMeasurement0.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement8 = dischargeChannelMeasurement0.setChannel("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.lang.String str9 = dischargeChannelMeasurement0.getMonitoringMethod();
        java.lang.String str10 = dischargeChannelMeasurement0.getChannel();
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement3);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown + "'", measurementLocationToGageType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement5);
        org.junit.Assert.assertNull(horizontalFlowType6);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str10, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
    }

    @Test
    public void test41865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41865");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType1 = putUserV2_0.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_3 = putUserV2_0.setEmail("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = putUserV2_0.setUserProfile(userProfile4);
        java.lang.String str6 = putUserV2_5.CustomId;
        java.lang.String str7 = putUserV2_5.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile8 = putUserV2_5.getUserProfile();
        putUserV2_5.Email = "****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.String str11 = putUserV2_5.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList13 = getFieldVisits12.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        java.util.ArrayList<java.lang.String> strList22 = putLocationTags21.TagUniqueIds;
        getFieldVisits12.ScheduleIds = strList22;
        java.lang.Integer int24 = getFieldVisits12.Limit;
        java.util.List<java.lang.String> strList25 = getFieldVisits12.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        getObservationsV2_26.SpecimenIds = strList29;
        getFieldVisits12.Search = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits34 = getFieldVisits12.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj37 = timeAlignedDataServiceRequest36.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = timeAlignedDataServiceRequest36.setQueryFrom(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest50 = timeAlignedDataServiceRequest36.setTimeSeriesOutputUnitIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation51 = importItemObservation35.setFields((java.util.List<java.lang.String>) strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits52 = getFieldVisits34.setFieldTripIds((java.util.List<java.lang.String>) strList47);
        putUserV2_5.Roles = strList47;
        org.junit.Assert.assertNull(userType1);
        org.junit.Assert.assertNotNull(putUserV2_3);
        org.junit.Assert.assertNotNull(putUserV2_5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(userProfile8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(getFieldVisits34);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest50);
        org.junit.Assert.assertNotNull(importItemObservation51);
        org.junit.Assert.assertNotNull(getFieldVisits52);
    }

    @Test
    public void test41866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41866");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setNumberOfTransects((java.lang.Integer) 10);
        java.lang.String str3 = adcpDischargeActivity2.getTopEstimateMethod();
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test41867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41867");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries19 = timeSeries0.setUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries21 = timeSeries19.setLocationName("hi!");
        java.lang.String str22 = timeSeries21.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType timeSeriesType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived;
        timeSeries21.TimeSeriesType = timeSeriesType23;
        int int25 = timeSeriesType23.getValue();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2021.4.62.0" + "'", str22, "2021.4.62.0");
        org.junit.Assert.assertTrue("'" + timeSeriesType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived + "'", timeSeriesType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test41868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41868");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        java.lang.String str2 = openWaterData0.getSuspensionWeight();
        java.lang.String str3 = openWaterData0.SuspensionWeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary4.BaseFlow = baseFlowType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType11 = dischargeSummary4.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = dischargeSummary4.getDurationInHours();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary4.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant15 = crossSectionSurveyActivity14.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str17 = pointVelocityDischargeActivity16.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity19 = pointVelocityDischargeActivity16.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity21 = pointVelocityDischargeActivity16.setSoftwareVersion("");
        java.lang.String str22 = pointVelocityDischargeActivity21.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity21.StartPoint = startPointType23;
        crossSectionSurveyActivity14.StartingPoint = startPointType23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant27 = crossSectionSurveyActivity26.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str29 = pointVelocityDischargeActivity28.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = pointVelocityDischargeActivity28.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity28.setSoftwareVersion("");
        java.lang.String str34 = pointVelocityDischargeActivity33.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity33.StartPoint = startPointType35;
        crossSectionSurveyActivity26.StartingPoint = startPointType35;
        crossSectionSurveyActivity14.StartingPoint = startPointType35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity14.Stage = datumConvertedQuantityWithDisplay39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary4.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData42 = openWaterData0.setDistanceToWaterSurface((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        openWaterData0.SurfaceCoefficient = 0.0d;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + baseFlowType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(doubleWithDisplay12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity19);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + startPointType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity31);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + startPointType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(openWaterData42);
    }

    @Test
    public void test41869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41869");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str1 = referencePointPeriod0.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase3 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        java.lang.String str4 = referencePointPeriod0.ReferencePointUniqueId;
        referencePointPeriod0.ReferencePointUniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str7 = referencePointPeriod0.getReferencePointUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(referencePointPeriodBase3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str7, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test41870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41870");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart2 = inputPart0.setHeaders((java.lang.Object) interpolationType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType3 = inputPart0.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart5 = inputPart0.setMediaType(mediaType4);
        java.lang.String str6 = mediaType4.getSubtype();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest8.ReportTitle = "MinDuration";
        reportListServiceRequest8.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList14 = getExportSpecimens13.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant16 = qualifier15.DateApplied;
        java.lang.String str17 = qualifier15.User;
        java.lang.String str18 = qualifier15.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest19.setQueryFrom(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier25 = qualifier15.setDateApplied(instant22);
        getExportSpecimens13.Before = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = locationRemark27.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList31 = fieldVisitDataServiceResponse30.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse33 = fieldVisitDataServiceResponse30.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary34.Reviewer = "";
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary34.MeasurementTime = instant37;
        fieldVisitDataServiceResponse30.ResponseTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark40 = locationRemark27.setCreateTime(instant37);
        getExportSpecimens13.EndModificationTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest42 = reportListServiceRequest8.setCreatedFrom(instant37);
        getSamplingLocations7.StartModificationTime = instant37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType44 = mediaType4.setParameters((java.lang.Object) instant37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule47 = schedule45.setCustomId("");
        java.time.OffsetDateTime offsetDateTime48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule49 = schedule45.setStartDate(offsetDateTime48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = schedule49.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = schedule49.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup52 = schedule49.SamplingLocationGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType53 = mediaType4.setParameters((java.lang.Object) schedule49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType55 = mediaType53.setWildcardType((java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + interpolationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart2);
        org.junit.Assert.assertNull(mediaType3);
        org.junit.Assert.assertNotNull(inputPart5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(qualifier25);
        org.junit.Assert.assertNotNull(locationRemark29);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList31);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationRemark40);
        org.junit.Assert.assertNotNull(reportListServiceRequest42);
        org.junit.Assert.assertNotNull(mediaType44);
        org.junit.Assert.assertNotNull(schedule47);
        org.junit.Assert.assertNotNull(schedule49);
        org.junit.Assert.assertNull(auditAttributes50);
        org.junit.Assert.assertNull(auditAttributes51);
        org.junit.Assert.assertNull(samplingLocationGroup52);
        org.junit.Assert.assertNotNull(mediaType53);
        org.junit.Assert.assertNotNull(mediaType55);
    }

    @Test
    public void test41871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41871");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint8.setNumericValue4((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint8.setQualifiers1("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str13 = timeAlignedPoint8.getGradeName2();
        java.lang.String str14 = timeAlignedPoint8.DisplayValue1;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test41872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41872");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser2 = deleteUser0.setUniqueId("'.'SSSSSSS");
        java.lang.String str3 = deleteUser0.UniqueId;
        java.lang.String str4 = deleteUser0.UniqueId;
        org.junit.Assert.assertNotNull(deleteUser2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "'.'SSSSSSS" + "'", str3, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "'.'SSSSSSS" + "'", str4, "'.'SSSSSSS");
    }

    @Test
    public void test41873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41873");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setSpecimen(specimenNestedInActivity1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = observationMinimal0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon5 = taxonomicResult4.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon6 = null;
        taxonomicResult4.Taxon = taxon6;
        observationMinimal0.TaxonomicResult = taxonomicResult4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple10 = specimenNestedInActivity9.AnalyticalGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity12 = specimenNestedInActivity9.setName("");
        java.lang.Boolean boolean13 = specimenNestedInActivity9.Filtered;
        observationMinimal0.Specimen = specimenNestedInActivity9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity16 = specimenNestedInActivity9.setName("zZZZZ");
        specimenNestedInActivity9.FiltrationComment = "multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****";
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(observedProperty3);
        org.junit.Assert.assertNull(taxon5);
        org.junit.Assert.assertNull(analyticalGroupSimple10);
        org.junit.Assert.assertNotNull(specimenNestedInActivity12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(specimenNestedInActivity16);
    }

    @Test
    public void test41874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41874");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        getObservationExportIIV2_0.DetectionCondition = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        getObservationsV2_11.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        getObservationsV2_11.EndObservedTime = instant15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_18 = getObservationExportIIV2_0.setEndModificationTime(instant15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationExportIIV2_18.getFieldResultType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_18);
        org.junit.Assert.assertNull(fieldResultType19);
    }

    @Test
    public void test41875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41875");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.lang.String str3 = fieldVisitReading0.MonitoringMethod;
        java.lang.Boolean boolean4 = fieldVisitReading0.UseLocationDatumAsReference;
        fieldVisitReading0.ParameterId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        fieldVisitReading0.Publish = false;
        java.time.Instant instant9 = fieldVisitReading0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading11 = fieldVisitReading0.setModel("/AQUARIUS/Publish/v2");
        java.lang.String str12 = fieldVisitReading11.getSubLocationIdentifier();
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNotNull(fieldVisitReading11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test41876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41876");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        java.lang.String str3 = putStandard0.Id;
        java.lang.String str4 = putStandard0.Id;
        java.lang.String str5 = putStandard0.getDescription();
        java.lang.String str6 = putStandard0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard8 = putStandard0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard10 = putStandard8.setIssuingOrganization("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard12 = putStandard8.setCustomId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard14 = putStandard12.setActive((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str16 = labInstructionTemplate15.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty17 = labInstructionTemplate15.getObservedProperty();
        java.lang.String str18 = labInstructionTemplate15.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = null;
        labInstructionTemplate15.AnalysisMethod = analysisMethod19;
        java.lang.String str21 = labInstructionTemplate15.AnalysisComment;
        java.lang.String str22 = labInstructionTemplate15.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter26 = filter24.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter28 = filter26.setId("POST");
        filter28.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList31 = filter28.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter33 = filter28.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod36 = postLabAnalysisMethod34.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList38, observedPropertyArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod40 = postLabAnalysisMethod36.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod42 = postLabAnalysisMethod36.setAuditAttributes(auditAttributes41);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList43 = postLabAnalysisMethod42.getObservedProperties();
        filter33.ObservedProperties = observedPropertyList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod45 = putLabAnalysisMethod23.setObservedProperties(observedPropertyList43);
        java.lang.String str46 = putLabAnalysisMethod45.getContext();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory48.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory52 = laboratory48.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport53 = labReport47.setLaboratory(laboratory52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = labReport53.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit56 = indexConfiguration55.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = indexConfiguration55.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList58 = indexConfiguration55.getIndexRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration60 = indexConfiguration55.setIssuingOrganization("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit61 = indexConfiguration55.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty62 = indexConfiguration55.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = postSamplingLocationGroup64.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = locationGroupType66.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType69 = locationGroupType66.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup64.LocationGroupType = locationGroupType69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup72 = postSamplingLocationGroup64.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity76 = samplingPlanPlannedActivity74.setAuditAttributes(auditAttributes75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = auditAttributes77.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity76.AuditAttributes = auditAttributes77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = samplingPlanPlannedActivity76.AuditAttributes;
        putAccessGroup73.AuditAttributes = auditAttributes81;
        postSamplingLocationGroup64.AuditAttributes = auditAttributes81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup84 = unitGroup63.setAuditAttributes(auditAttributes81);
        indexConfiguration55.AuditAttributes = auditAttributes81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport86 = labReport53.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod87 = putLabAnalysisMethod45.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate88 = labInstructionTemplate15.setAuditAttributes(auditAttributes81);
        putStandard14.AuditAttributes = auditAttributes81;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(putStandard8);
        org.junit.Assert.assertNotNull(putStandard10);
        org.junit.Assert.assertNotNull(putStandard12);
        org.junit.Assert.assertNotNull(putStandard14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(observedProperty17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(filter26);
        org.junit.Assert.assertNotNull(filter28);
        org.junit.Assert.assertNull(observedPropertyList31);
        org.junit.Assert.assertNotNull(filter33);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod36);
        org.junit.Assert.assertNotNull(observedPropertyArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod40);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod42);
        org.junit.Assert.assertNotNull(observedPropertyList43);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(laboratory52);
        org.junit.Assert.assertNotNull(labReport53);
        org.junit.Assert.assertNull(auditAttributes54);
        org.junit.Assert.assertNull(unit56);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNull(indexRangeList58);
        org.junit.Assert.assertNotNull(indexConfiguration60);
        org.junit.Assert.assertNull(unit61);
        org.junit.Assert.assertNull(observedProperty62);
        org.junit.Assert.assertNull(auditAttributes65);
        org.junit.Assert.assertNull(auditAttributes67);
        org.junit.Assert.assertNotNull(locationGroupType69);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup72);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity76);
        org.junit.Assert.assertNotNull(auditAttributes79);
        org.junit.Assert.assertNotNull(auditAttributes81);
        org.junit.Assert.assertNotNull(unitGroup84);
        org.junit.Assert.assertNotNull(labReport86);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod87);
        org.junit.Assert.assertNotNull(labInstructionTemplate88);
    }

    @Test
    public void test41877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41877");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = resultDetectionCondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition3 = resultDetectionCondition0.setId("/AQUARIUS");
        java.lang.String str4 = resultDetectionCondition0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition6 = resultDetectionCondition0.setDescription("POST");
        resultDetectionCondition0.Description = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str10 = standardDefinition9.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime12 = putSchedule11.StartDate;
        java.time.OffsetDateTime offsetDateTime13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = putSchedule11.setEndDate(offsetDateTime13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = putSchedule14.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime16 = null;
        putSchedule14.LastGenerationDate = offsetDateTime16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType18 = putSchedule14.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = plannedFieldResult19.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = labResultDetails21.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails23.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult26 = plannedFieldResult19.setAuditAttributes(auditAttributes24);
        putSchedule14.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition28 = standardDefinition9.setAuditAttributes(auditAttributes24);
        java.time.OffsetDateTime offsetDateTime29 = auditAttributes24.getCreationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition30 = resultDetectionCondition0.setAuditAttributes(auditAttributes24);
        resultDetectionCondition0.SystemCode = "****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition34 = resultDetectionCondition0.setName("hi!:///AQUARIUS/Provisioning/v1");
        resultDetectionCondition0.SystemCode = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(resultDetectionCondition3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(resultDetectionCondition6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(putSchedule14);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType18);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertNotNull(labResultDetails23);
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(plannedFieldResult26);
        org.junit.Assert.assertNotNull(standardDefinition28);
        org.junit.Assert.assertNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(resultDetectionCondition30);
        org.junit.Assert.assertNotNull(resultDetectionCondition34);
    }

    @Test
    public void test41878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41878");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = null;
        postExtendedAttribute0.DataType = dataType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute4 = postExtendedAttribute0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str6 = extendedAttributeListItem5.getId();
        java.lang.String str7 = extendedAttributeListItem5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str11 = extendedAttributeListItem10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str13 = extendedAttributeListItem12.CustomId;
        extendedAttributeListItem12.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem5, extendedAttributeListItem8, extendedAttributeListItem9, extendedAttributeListItem10, extendedAttributeListItem12 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList17, extendedAttributeListItemArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute19 = postExtendedAttribute4.setDropDownListItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType20 = postExtendedAttribute4.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity21.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = postActivity21.setPlannedActivity(plannedActivity24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType26 = postActivity21.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate28.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList33 = specimenTemplate32.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = specimenTemplate34.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList39 = specimenTemplate38.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate28, specimenTemplate31, specimenTemplate32, specimenTemplate36, specimenTemplate37, specimenTemplate38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList41, specimenTemplateArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate43 = postFieldVisitActivityWithTemplate27.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate45 = postFieldVisitActivityWithTemplate43.setCollectionMethod(collectionMethod44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity46 = postActivity21.setCollectionMethod(collectionMethod44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity21.Medium = medium47;
        medium47.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType52 = analyticalGroup51.getType();
        analyticalGroup51.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = analyticalGroupItem56.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = analyticalGroupItem58.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem58.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = analyticalGroupItem61.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = analyticalGroupItem61.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = null;
        analyticalGroupItem61.AnalysisMethod = analysisMethod64;
        java.lang.String str66 = analyticalGroupItem61.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod68 = analyticalGroupItem67.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod69 = analyticalGroupItem67.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod71 = analyticalGroupItem70.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod73 = analyticalGroupItem72.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod74 = analyticalGroupItem72.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod75 = null;
        analyticalGroupItem72.AnalysisMethod = analysisMethod75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem56, analyticalGroupItem58, analyticalGroupItem61, analyticalGroupItem67, analyticalGroupItem70, analyticalGroupItem72 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList78 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList78, analyticalGroupItemArray77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup80 = analyticalGroup55.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList78);
        analyticalGroup51.AnalyticalGroupItems = analyticalGroupItemList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup51.AuditAttributes = auditAttributes82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium84 = medium47.setAuditAttributes(auditAttributes82);
        postExtendedAttribute4.AuditAttributes = auditAttributes82;
        java.lang.Object obj86 = postExtendedAttribute4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute88 = postExtendedAttribute4.setMandatory((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType89 = postExtendedAttribute88.DataType;
        org.junit.Assert.assertNotNull(postExtendedAttribute4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(postExtendedAttribute19);
        org.junit.Assert.assertNull(dataType20);
        org.junit.Assert.assertNotNull(postActivity25);
        org.junit.Assert.assertNull(activityType26);
        org.junit.Assert.assertNull(labInstructionTemplateList33);
        org.junit.Assert.assertNotNull(specimenTemplate36);
        org.junit.Assert.assertNull(labInstructionTemplateList39);
        org.junit.Assert.assertNotNull(specimenTemplateArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate43);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate45);
        org.junit.Assert.assertNotNull(postActivity46);
        org.junit.Assert.assertNull(analyticalGroupType52);
        org.junit.Assert.assertNull(analysisMethod57);
        org.junit.Assert.assertNull(analysisMethod59);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod62);
        org.junit.Assert.assertNull(analysisMethod63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(analysisMethod68);
        org.junit.Assert.assertNull(analysisMethod69);
        org.junit.Assert.assertNull(analysisMethod71);
        org.junit.Assert.assertNull(analysisMethod73);
        org.junit.Assert.assertNull(analysisMethod74);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(analyticalGroup80);
        org.junit.Assert.assertNotNull(medium84);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNotNull(postExtendedAttribute88);
        org.junit.Assert.assertNull(dataType89);
    }

    @Test
    public void test41879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41879");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        fieldVisit0.Party = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult7 = datumConversionResult5.setTargetDatum("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit8 = fieldVisit0.setDatumConversionResult(datumConversionResult7);
        java.lang.String str9 = datumConversionResult7.getTargetDatum();
        java.lang.String str10 = datumConversionResult7.FailureReason;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumConversionResult7);
        org.junit.Assert.assertNotNull(fieldVisit8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http" + "'", str9, "http");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test41880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41880");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest();
        java.lang.String str1 = timeSeriesDescriptionServiceRequest0.ComputationIdentifier;
        java.lang.String str2 = timeSeriesDescriptionServiceRequest0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest4 = timeSeriesDescriptionServiceRequest0.setPublish((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionServiceRequest4);
    }

    @Test
    public void test41881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41881");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData2 = postImportVerticalProfileData0.setActivityId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData4 = postImportVerticalProfileData0.setSamplingLocationIds("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData6 = postImportVerticalProfileData0.setSamplingLocationIds("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData8 = postImportVerticalProfileData6.setSamplingLocationIds("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = postImportVerticalProfileData6.ActivityId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData11 = postImportVerticalProfileData6.setSamplingLocationIds("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        postImportVerticalProfileData11.TimeZoneOffset = "9999-12-31T23:59:59.999Z";
        java.lang.String str14 = postImportVerticalProfileData11.SamplingLocationIds;
        java.lang.String str15 = postImportVerticalProfileData11.SamplingLocationIds;
        org.junit.Assert.assertNotNull(postImportVerticalProfileData2);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData4);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData6);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
        org.junit.Assert.assertNotNull(postImportVerticalProfileData11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str14, "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str15, "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
    }

    @Test
    public void test41882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41882");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        java.time.Instant instant8 = getObservationsV2_1.getStartObservedTime();
        getObservationsV2_1.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList11 = null;
        getObservationsV2_1.SamplingContextTagIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription15 = locationDescription13.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType17 = null;
        controlConditionActivity16.ControlCleaned = controlCleanedType17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        controlConditionActivity16.DateCleaned = instant20;
        locationDescription15.LastModified = instant20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_1.setStartResultTime(instant20);
        getExportObservations0.StartObservedTime = instant20;
        java.util.List<java.lang.String> strList26 = getExportObservations0.getLabReportIds();
        java.lang.String str27 = getExportObservations0.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        putUser28.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        dischargeSummary33.MeasurementTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse32.setNextToken(instant37);
        java.time.Instant instant41 = locationDescriptionListServiceResponse32.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities42 = getActivities31.setToStartTime(instant41);
        java.lang.String str43 = getActivities42.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities45 = getActivities42.setLimit((java.lang.Integer) 1);
        getActivities45.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList55 = getObservationsV2_48.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary56.Reviewer = "";
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary56.MeasurementTime = instant59;
        getObservationsV2_48.StartResultTime = instant59;
        java.lang.String[] strArray71 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = getObservationsV2_48.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList72);
        getActivities45.ActivityTypes = strList72;
        putUser28.AccessGroups = strList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations77 = getExportObservations0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList72);
        java.util.List<java.lang.String> strList78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations79 = getExportObservations77.setAnalyticalGroupIds(strList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations81 = getExportObservations77.setDepthUnitId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations83 = getExportObservations81.setDepthUnitId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDescription15);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(getActivities42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(getActivities45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_74);
        org.junit.Assert.assertNotNull(getExportObservations77);
        org.junit.Assert.assertNotNull(getExportObservations79);
        org.junit.Assert.assertNotNull(getExportObservations81);
        org.junit.Assert.assertNotNull(getExportObservations83);
    }

    @Test
    public void test41883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41883");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str1 = openIdConnectRelyingPartyConfiguration0.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration0.ClientIdentifier = "MinInstant";
        java.util.List<java.lang.String> strList4 = openIdConnectRelyingPartyConfiguration0.Scopes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration6 = openIdConnectRelyingPartyConfiguration0.setIdentifierClaim("PT87591240H");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration6);
    }

    @Test
    public void test41884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41884");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int1 = samplingLocationImportSummary0.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList2 = samplingLocationImportSummary0.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = samplingLocationImportSummary0.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = samplingLocationImportSummary0.getImportHistoryEventSimple();
        samplingLocationImportSummary0.InvalidRowsCsvUrl = "";
        samplingLocationImportSummary0.NewCount = 4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple11 = importHistoryEventSimple9.setImportTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple13 = importHistoryEventSimple9.setTimeZoneOffset("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str14 = importHistoryEventSimple13.getTimeZoneOffset();
        java.lang.String str15 = importHistoryEventSimple13.Id;
        samplingLocationImportSummary0.ImportHistoryEventSimple = importHistoryEventSimple13;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList17 = samplingLocationImportSummary0.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple18 = samplingLocationImportSummary0.getImportHistoryEventSimple();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList19 = samplingLocationImportSummary0.ImportJobErrors;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList20 = samplingLocationImportSummary0.getImportItems();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(importItemSamplingLocationList2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(importHistoryEventSimple4);
        org.junit.Assert.assertNotNull(importHistoryEventSimple11);
        org.junit.Assert.assertNotNull(importHistoryEventSimple13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str14, "http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(importItemSamplingLocationList17);
        org.junit.Assert.assertNotNull(importHistoryEventSimple18);
        org.junit.Assert.assertNull(importErrorList19);
        org.junit.Assert.assertNull(importItemSamplingLocationList20);
    }

    @Test
    public void test41885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41885");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList2, referenceStandardOffsetArray1);
        locationReferenceStandard0.ReferenceStandardOffsets = referenceStandardOffsetList2;
        locationReferenceStandard0.ReferenceStandard = "2021.4.62.0";
        java.lang.String str7 = locationReferenceStandard0.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard9 = locationReferenceStandard0.setReferenceStandard("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList10 = locationReferenceStandard9.getReferenceStandardOffsets();
        java.lang.String str11 = locationReferenceStandard9.ReferenceStandard;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard13 = locationReferenceStandard9.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList16, referenceStandardOffsetArray15);
        locationReferenceStandard14.ReferenceStandardOffsets = referenceStandardOffsetList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard19 = locationReferenceStandard9.setReferenceStandardOffsets(referenceStandardOffsetList16);
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locationReferenceStandard9);
        org.junit.Assert.assertNotNull(referenceStandardOffsetList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "https" + "'", str11, "https");
        org.junit.Assert.assertNotNull(locationReferenceStandard13);
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locationReferenceStandard19);
    }

    @Test
    public void test41886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41886");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList1 = unitGroupWithUnits0.Units;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = unitGroupWithUnits0.AuditAttributes;
        java.lang.String str3 = unitGroupWithUnits0.getCustomId();
        java.lang.Boolean boolean4 = unitGroupWithUnits0.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit7 = postUnitGroupWithUnit5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit9 = postUnitGroupWithUnit7.setSystemCode(unitGroupWithUnitsSystemCodeType8);
        java.lang.String str10 = postUnitGroupWithUnit9.getCustomId();
        java.lang.Boolean boolean11 = postUnitGroupWithUnit9.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit13 = postUnitGroupWithUnit9.setSupportsConversion((java.lang.Boolean) true);
        java.lang.Object obj14 = postUnitGroupWithUnit9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType15 = postUnitGroupWithUnit9.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits16 = unitGroupWithUnits0.setSystemCode(unitGroupWithUnitsSystemCodeType15);
        unitGroupWithUnits0.Id = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNull(unitList1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit7);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(unitGroupWithUnits16);
    }

    @Test
    public void test41887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41887");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime8 = null;
        labReport7.DateReceived = offsetDateTime8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails6.setLabReport(labReport7);
        java.time.OffsetDateTime offsetDateTime11 = labReport7.getDateReceived();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList13 = specimenWithObservations12.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations15 = specimenWithObservations12.setStatus(specimenViewStatusType14);
        specimenWithObservations12.Id = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation18.CustomId = "hi!";
        java.lang.String str21 = observation18.CustomId;
        java.lang.String str22 = observation18.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium23 = null;
        observation18.Medium = medium23;
        java.lang.String str25 = observation18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier28 = putNullMeasureQualifier26.setId("hi!");
        java.lang.String str29 = putNullMeasureQualifier26.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod32 = postLabAnalysisMethod30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList34, observedPropertyArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod36 = postLabAnalysisMethod32.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod38 = postLabAnalysisMethod32.setAuditAttributes(auditAttributes37);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList39 = postLabAnalysisMethod38.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier42 = putNullMeasureQualifier40.setDescription("");
        putNullMeasureQualifier40.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str46 = standardDefinition45.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime48 = putSchedule47.StartDate;
        java.time.OffsetDateTime offsetDateTime49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule50 = putSchedule47.setEndDate(offsetDateTime49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = putSchedule50.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime52 = null;
        putSchedule50.LastGenerationDate = offsetDateTime52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType54 = putSchedule50.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = plannedFieldResult55.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails59 = labResultDetails57.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails61 = labResultDetails59.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult62 = plannedFieldResult55.setAuditAttributes(auditAttributes60);
        putSchedule50.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition64 = standardDefinition45.setAuditAttributes(auditAttributes60);
        java.time.OffsetDateTime offsetDateTime65 = auditAttributes60.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier66 = putNullMeasureQualifier40.setAuditAttributes(auditAttributes60);
        postLabAnalysisMethod38.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier68 = putNullMeasureQualifier26.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = observation18.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations70 = specimenWithObservations12.setAuditAttributes(auditAttributes60);
        java.lang.String str71 = specimenWithObservations12.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory72.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str75 = laboratory72.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = laboratory72.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations77 = specimenWithObservations12.setLaboratory(laboratory72);
        java.lang.String str78 = laboratory72.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport79 = labReport7.setLaboratory(laboratory72);
        labReport79.CustomId = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertNull(extendedAttributeList13);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod32);
        org.junit.Assert.assertNotNull(observedPropertyArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod36);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod38);
        org.junit.Assert.assertNotNull(observedPropertyList39);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(putSchedule50);
        org.junit.Assert.assertNull(auditAttributes51);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType54);
        org.junit.Assert.assertNull(auditAttributes56);
        org.junit.Assert.assertNotNull(labResultDetails59);
        org.junit.Assert.assertNotNull(labResultDetails61);
        org.junit.Assert.assertNotNull(plannedFieldResult62);
        org.junit.Assert.assertNotNull(standardDefinition64);
        org.junit.Assert.assertNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier66);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier68);
        org.junit.Assert.assertNotNull(observation69);
        org.junit.Assert.assertNotNull(specimenWithObservations70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(auditAttributes76);
        org.junit.Assert.assertNotNull(specimenWithObservations77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(labReport79);
    }

    @Test
    public void test41888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41888");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        java.lang.String str3 = postLocationAttachmentResponse0.LocationUniqueId;
        postLocationAttachmentResponse0.Url = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse7 = postLocationAttachmentResponse0.setUniqueId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse9 = postLocationAttachmentResponse7.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse11 = postLocationAttachmentResponse7.setFileName("MaxDuration");
        postLocationAttachmentResponse7.Url = "";
        postLocationAttachmentResponse7.LocationUniqueId = "'.'SSSSSSS";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse7);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse9);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse11);
    }

    @Test
    public void test41889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41889");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setPlannedActivity(plannedActivity4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType6 = postActivity1.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList13 = specimenTemplate12.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList19 = specimenTemplate18.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate8, specimenTemplate11, specimenTemplate12, specimenTemplate16, specimenTemplate17, specimenTemplate18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21, specimenTemplateArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = postFieldVisitActivityWithTemplate7.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate23.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity1.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity1.Medium = medium27;
        medium27.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType32 = analyticalGroup31.getType();
        analyticalGroup31.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        java.lang.String str46 = analyticalGroupItem41.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem36, analyticalGroupItem38, analyticalGroupItem41, analyticalGroupItem47, analyticalGroupItem50, analyticalGroupItem52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58, analyticalGroupItemArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup60 = analyticalGroup35.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58);
        analyticalGroup31.AnalyticalGroupItems = analyticalGroupItemList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup31.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium64 = medium27.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute65 = putExtendedAttribute0.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute67 = putExtendedAttribute65.setDescription("/api");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute69 = putExtendedAttribute65.setId("0001-01-01T00:00:00.0000000Z");
        putExtendedAttribute69.Mandatory = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str73 = putExtendedAttribute72.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList75 = extendedAttributeDefinition74.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = extendedAttributeDefinition74.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType77 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition74.DataType = dataType77;
        putExtendedAttribute72.DataType = dataType77;
        java.lang.Object obj80 = putExtendedAttribute72.getResponseType();
        java.lang.String str81 = putExtendedAttribute72.getDefaultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList83 = extendedAttributeDefinition82.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = extendedAttributeDefinition82.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType85 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition82.DataType = dataType85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute87 = putExtendedAttribute72.setDataType(dataType85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute88 = putExtendedAttribute69.setDataType(dataType85);
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNull(activityType6);
        org.junit.Assert.assertNull(labInstructionTemplateList13);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNull(labInstructionTemplateList19);
        org.junit.Assert.assertNotNull(specimenTemplateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(analyticalGroupType32);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(analyticalGroup60);
        org.junit.Assert.assertNotNull(medium64);
        org.junit.Assert.assertNotNull(putExtendedAttribute65);
        org.junit.Assert.assertNotNull(putExtendedAttribute67);
        org.junit.Assert.assertNotNull(putExtendedAttribute69);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(extendedAttributeListItemList75);
        org.junit.Assert.assertNull(auditAttributes76);
        org.junit.Assert.assertTrue("'" + dataType77 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType77.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(extendedAttributeListItemList83);
        org.junit.Assert.assertNull(auditAttributes84);
        org.junit.Assert.assertTrue("'" + dataType85 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType85.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNotNull(putExtendedAttribute87);
        org.junit.Assert.assertNotNull(putExtendedAttribute88);
    }

    @Test
    public void test41890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41890");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str1 = gapToleranceOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation3 = gapToleranceOperation0.setComments("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase6 = locationDatumPeriod4.setComment("'.'SSSSSSS");
        java.lang.String str7 = locationDatumPeriodBase6.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase11 = locationDatumPeriodBase6.setValidFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange12 = gapToleranceOperation0.setStartTime(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary13.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = dischargeSummary13.Discharge;
        java.lang.Integer int16 = dischargeSummary13.getGradeCode();
        java.lang.String str17 = dischargeSummary13.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        dischargeSummary20.MeasurementTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse19.setNextToken(instant24);
        java.time.Instant instant28 = locationDescriptionListServiceResponse19.getNextToken();
        attachment18.DateLastAccessed = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary13.setMeasurementStartTime(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = dischargeSummary32.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        dischargeSummary32.MeasurementTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse31.setNextToken(instant36);
        java.time.Instant instant40 = locationDescriptionListServiceResponse31.getNextToken();
        java.time.Instant instant41 = locationDescriptionListServiceResponse31.getNextToken();
        dischargeSummary30.MeasurementTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation43 = gapToleranceOperation0.setDateAppliedUtc(instant41);
        java.lang.Double double44 = gapToleranceOperation0.ToleranceInMinutes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(gapToleranceOperation3);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase11);
        org.junit.Assert.assertNotNull(timeRange12);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(quantityWithDisplay15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(dischargeSummary34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(gapToleranceOperation43);
        org.junit.Assert.assertNull(double44);
    }

    @Test
    public void test41891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41891");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        timeAlignedPoint0.NumericValue8 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setDisplayValue4("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint0.setGradeCode3((java.lang.Long) 1L);
        java.lang.String str14 = timeAlignedPoint13.Method2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint13.setGradeName5("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint18 = timeAlignedPoint16.setNumericValue6((java.lang.Double) 0.0d);
        timeAlignedPoint18.ApprovalName5 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNotNull(timeAlignedPoint18);
    }

    @Test
    public void test41892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41892");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList2 = getObservationsV2_1.SamplingContextTagIds;
        java.time.Instant instant3 = getObservationsV2_1.getEndModificationTime();
        java.util.List<java.lang.String> strList4 = getObservationsV2_1.Media;
        java.util.List<java.lang.String> strList5 = getObservationsV2_1.ActivityTypes;
        java.util.List<java.lang.String> strList6 = getObservationsV2_1.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj8 = timeAlignedDataServiceRequest7.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_9.setDataClassifications((java.util.List<java.lang.String>) strList13);
        getObservationsV2_15.DepthUnitCustomId = "hi!";
        java.lang.String str18 = getObservationsV2_15.CustomId;
        java.util.List<java.lang.String> strList19 = getObservationsV2_15.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_15.setMedia((java.util.List<java.lang.String>) strList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str37 = getObservationsV2_36.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        getObservationsV2_38.SpecimenIds = strList41;
        getObservationsV2_36.ProjectIds = strList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_15.setObservedPropertyIds((java.util.List<java.lang.String>) strList41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = timeAlignedDataServiceRequest7.setTimeSeriesOutputUnitIds(strList41);
        getObservationsV2_1.DataClassifications = strList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods48 = getLabAnalysisMethods0.setObservedPropertyIds((java.util.List<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList49 = getLabAnalysisMethods48.getObservedPropertyIds();
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest46);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods48);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test41893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41893");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity0.setSoftwareVersion("");
        java.lang.String str6 = pointVelocityDischargeActivity5.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity5.StartPoint = startPointType7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = pointVelocityDischargeActivity5.setMeterInspectedAfter((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity5.setMeterInspectedBefore((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + startPointType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
    }

    @Test
    public void test41894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41894");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem getExtendedAttributeDropdownlistitemListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem();
        java.lang.String str1 = getExtendedAttributeDropdownlistitemListItem0.Id;
        getExtendedAttributeDropdownlistitemListItem0.DropDownListItemId = "https";
        java.lang.String str4 = getExtendedAttributeDropdownlistitemListItem0.getDropDownListItemId();
        java.lang.String str5 = getExtendedAttributeDropdownlistitemListItem0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "https" + "'", str4, "https");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test41895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41895");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser getUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser getUser2 = getUser0.setUniqueId("");
        java.lang.String str3 = getUser2.UniqueId;
        java.lang.Object obj4 = getUser2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser getUser6 = getUser2.setUniqueId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNotNull(getUser2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNotNull(getUser6);
    }

    @Test
    public void test41896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41896");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest0.Publish = true;
        timeSeriesUniqueIdListServiceRequest0.Publish = false;
        java.lang.String str5 = timeSeriesUniqueIdListServiceRequest0.ComputationIdentifier;
        java.time.Instant instant6 = timeSeriesUniqueIdListServiceRequest0.ChangesSinceToken;
        java.lang.String str7 = timeSeriesUniqueIdListServiceRequest0.Parameter;
        timeSeriesUniqueIdListServiceRequest0.Publish = true;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test41897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41897");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType15 = importItemObject0.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult18 = categoricalResult16.setValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setExistingItem((java.lang.Object) "https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList20 = importItemObject0.getItemComparison();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNull(importItemStatusType15);
        org.junit.Assert.assertNotNull(categoricalResult18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(importChangeItemList20);
    }

    @Test
    public void test41898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41898");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putAnalysisMethod0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal4 = observationMinimal2.setSpecimen(specimenNestedInActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = observationMinimal4.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue7 = categoricalResult6.getFixedValue();
        observationMinimal4.CategoricalResult = categoricalResult6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult9.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue12 = categoricalResult9.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult9.NullMeasureQualifier = nullMeasureQualifier13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult15 = categoricalResult6.setNullMeasureQualifier(nullMeasureQualifier13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier16 = categoricalResult6.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup19 = putAnalyticalGroup17.setAnalyticalGroupItems(analyticalGroupItemList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan23.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime26 = samplingPlan23.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit29 = putUnitGroupWithUnit27.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType30 = putUnitGroupWithUnit27.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = samplingPlanPlannedActivity32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = auditAttributes35.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity34.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = samplingPlanPlannedActivity34.AuditAttributes;
        putAccessGroup31.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit41 = putUnitGroupWithUnit27.setAuditAttributes(auditAttributes39);
        samplingPlan23.AuditAttributes = auditAttributes39;
        java.time.OffsetDateTime offsetDateTime43 = null;
        auditAttributes39.ModificationTime = offsetDateTime43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = labResultDetails20.setAuditAttributes(auditAttributes39);
        putAnalyticalGroup19.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier47 = nullMeasureQualifier16.setAuditAttributes(auditAttributes39);
        putAnalysisMethod0.AuditAttributes = auditAttributes39;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList49 = null;
        putAnalysisMethod0.ObservedProperties = observedPropertyList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod52 = putAnalysisMethod0.setId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod54 = putAnalysisMethod52.setContext("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str55 = putAnalysisMethod52.Description;
        java.lang.String str56 = putAnalysisMethod52.getMethodId();
        java.lang.String str57 = putAnalysisMethod52.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod59 = putAnalysisMethod52.setMethodId("2021.4.62.0");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(observationMinimal4);
        org.junit.Assert.assertNull(observedProperty5);
        org.junit.Assert.assertNull(categoricalValue7);
        org.junit.Assert.assertNull(categoricalValue12);
        org.junit.Assert.assertNotNull(categoricalResult15);
        org.junit.Assert.assertNotNull(nullMeasureQualifier16);
        org.junit.Assert.assertNotNull(putAnalyticalGroup19);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit29);
        org.junit.Assert.assertNull(unitGroupSystemCodeType30);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity34);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit41);
        org.junit.Assert.assertNotNull(labResultDetails45);
        org.junit.Assert.assertNotNull(nullMeasureQualifier47);
        org.junit.Assert.assertNotNull(putAnalysisMethod52);
        org.junit.Assert.assertNotNull(putAnalysisMethod54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(putAnalysisMethod59);
    }

    @Test
    public void test41899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41899");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str1 = postCalculatedDerivedTimeSeries0.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList2 = postCalculatedDerivedTimeSeries0.getExtendedAttributeValues();
        java.lang.String str3 = postCalculatedDerivedTimeSeries0.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries5 = postCalculatedDerivedTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Boolean boolean6 = postCalculatedDerivedTimeSeries5.isPublish();
        java.lang.String str7 = postCalculatedDerivedTimeSeries5.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries9 = postCalculatedDerivedTimeSeries5.setComputationPeriodIdentifier("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        java.util.ArrayList<java.lang.String> strList10 = postCalculatedDerivedTimeSeries5.TimeSeriesUniqueIds;
        java.lang.Object obj11 = postCalculatedDerivedTimeSeries5.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeValueList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
    }

    @Test
    public void test41900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41900");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = openWaterData0.getDistanceToWaterSurface();
        java.lang.Double double2 = openWaterData0.getWetLineCorrection();
        java.lang.String str3 = openWaterData0.getSuspensionWeight();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test41901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41901");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setLocationUniqueId("https");
        sensor7.MethodCode = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor11 = sensor7.setParameterId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor13 = sensor7.setLocationUniqueId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor15 = sensor7.setUniqueId("MinDuration");
        java.lang.String str16 = sensor7.SubLocationIdentifier;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNotNull(sensor11);
        org.junit.Assert.assertNotNull(sensor13);
        org.junit.Assert.assertNotNull(sensor15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test41902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41902");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        java.util.ArrayList<java.lang.String> strList1 = sensorsAndGaugesServiceRequest0.TagKeys;
        java.util.ArrayList<java.lang.String> strList2 = sensorsAndGaugesServiceRequest0.TagKeys;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_3.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str6 = getChartDataV2_3.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_3.setCursor("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str10 = openIdConnectRelyingPartyConfiguration9.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration9.ClientIdentifier = "MaxDuration";
        openIdConnectRelyingPartyConfiguration9.IssuerIdentifier = "MinInstant";
        java.util.List<java.lang.String> strList15 = openIdConnectRelyingPartyConfiguration9.Scopes;
        java.lang.String str16 = openIdConnectRelyingPartyConfiguration9.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        processor17.ProcessorType = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities20.Limit = 10;
        java.util.List<java.lang.String> strList23 = getActivities20.ActivityTemplateId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList25 = getExportObservations24.getLabReportIds();
        java.lang.String str26 = getExportObservations24.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj28 = getActivityTemplates27.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray39 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTagUniqueIds(strList40);
        getObservationsV2_29.QualityControlTypes = strList40;
        getActivityTemplates27.Type = strList40;
        getExportObservations24.AnalyticalGroupIds = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities46 = getActivities20.setMedia((java.util.List<java.lang.String>) strList40);
        processor17.InputTimeSeriesUniqueIds = strList40;
        openIdConnectRelyingPartyConfiguration9.Scopes = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_8.setSpecimenIds((java.util.List<java.lang.String>) strList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest50 = sensorsAndGaugesServiceRequest0.setTagKeys(strList40);
        java.util.ArrayList<java.lang.String> strList51 = null;
        sensorsAndGaugesServiceRequest50.TagKeys = strList51;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(getActivities46);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest50);
    }

    @Test
    public void test41903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41903");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetActiveDirectoryUser getActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetActiveDirectoryUser();
        getActiveDirectoryUser0.UniqueId = "9999-12-31T23:59:59.999Z";
        java.lang.String str3 = getActiveDirectoryUser0.getUniqueId();
        java.lang.String str4 = getActiveDirectoryUser0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetActiveDirectoryUser getActiveDirectoryUser6 = getActiveDirectoryUser0.setUniqueId("POST");
        java.lang.String str7 = getActiveDirectoryUser6.getUniqueId();
        java.lang.Object obj8 = getActiveDirectoryUser6.getResponseType();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str3, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str4, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getActiveDirectoryUser6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "POST" + "'", str7, "POST");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ActiveDirectoryUser");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ActiveDirectoryUser");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ActiveDirectoryUser");
    }

    @Test
    public void test41904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41904");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setFieldVisit(fieldVisit5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = postActivity6.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity10 = samplingPlanPlannedActivity8.setRecurrence(samplingPlanPlannedActivityRecurrence9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        activityTemplate11.AuditAttributes = auditAttributes12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod14 = activityTemplate11.CollectionMethod;
        activityTemplate11.Comment = "MaxInstant";
        samplingPlanPlannedActivity8.ActivityTemplate = activityTemplate11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType19 = samplingPlanPlannedActivityRecurrence18.getTemporalExpression();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity20 = samplingPlanPlannedActivity8.setRecurrence(samplingPlanPlannedActivityRecurrence18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence21 = samplingPlanPlannedActivity8.Recurrence;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity23 = samplingPlanPlannedActivity8.setActivityType(activityType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = postActivity6.setType(activityType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType26 = null;
        samplingPlanPlannedActivity25.ActivityType = activityType26;
        samplingPlanPlannedActivity25.Id = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity();
        schedulePlannedActivity30.Instruction = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate35 = activityTemplate33.setMedium(mediumType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity36 = schedulePlannedActivity30.setActivityTemplate(activityTemplate35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity38 = schedulePlannedActivity30.setInstruction("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE;
        schedulePlannedActivity38.ActivityType = activityType39;
        samplingPlanPlannedActivity25.ActivityType = activityType39;
        postActivity24.Type = activityType39;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNull(quantity7);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity10);
        org.junit.Assert.assertNull(collectionMethod14);
        org.junit.Assert.assertNull(temporalExpressionType19);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity20);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence21);
        org.junit.Assert.assertTrue("'" + activityType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY + "'", activityType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity23);
        org.junit.Assert.assertNotNull(postActivity24);
        org.junit.Assert.assertTrue("'" + mediumType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate35);
        org.junit.Assert.assertNotNull(schedulePlannedActivity36);
        org.junit.Assert.assertNotNull(schedulePlannedActivity38);
        org.junit.Assert.assertTrue("'" + activityType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE + "'", activityType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE));
    }

    @Test
    public void test41905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41905");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation1 = fieldVisit0.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation2 = fieldVisit0.getSamplingLocation();
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit4 = fieldVisit0.setStartTime(offsetDateTime3);
        java.lang.String str5 = fieldVisit0.getParticipants();
        org.junit.Assert.assertNull(samplingLocation1);
        org.junit.Assert.assertNull(samplingLocation2);
        org.junit.Assert.assertNotNull(fieldVisit4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test41906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41906");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation4 = importSummaryObservation0.setUpdateCount((java.lang.Integer) (-1));
        java.lang.Integer int5 = importSummaryObservation4.getExpectedCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple6 = importSummaryObservation4.ImportHistoryEventSimple;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation8 = importSummaryObservation4.setInvalidRowsCsvUrl("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple9 = importSummaryObservation4.getImportHistoryEventSimple();
        importSummaryObservation4.NewCount = 2;
        java.lang.Integer int12 = importSummaryObservation4.getSkippedCount();
        importSummaryObservation4.InvalidRowsCsvUrl = "multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple15 = importSummaryObservation4.ImportHistoryEventSimple;
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNotNull(importSummaryObservation4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(importHistoryEventSimple6);
        org.junit.Assert.assertNotNull(importSummaryObservation8);
        org.junit.Assert.assertNull(importHistoryEventSimple9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(importHistoryEventSimple15);
    }

    @Test
    public void test41907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41907");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int1 = samplingPlan0.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan3 = samplingPlan0.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        java.time.OffsetDateTime offsetDateTime4 = null;
        samplingPlan0.LastGenerationDate = offsetDateTime4;
        java.time.OffsetDateTime offsetDateTime6 = samplingPlan0.LastGenerationDate;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(samplingPlan3);
        org.junit.Assert.assertNull(offsetDateTime6);
    }

    @Test
    public void test41908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41908");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        java.lang.String str2 = getFieldVisitReadingsByLocationServiceRequest0.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest4 = getFieldVisitReadingsByLocationServiceRequest0.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest6 = getFieldVisitReadingsByLocationServiceRequest0.setApplyDatumConversion((java.lang.Boolean) false);
        java.lang.Boolean boolean7 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest4);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test41909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41909");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter searchResultFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter> filterList1 = searchResultFilter0.getDomainObjects();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter> filterList2 = searchResultFilter0.DomainObjects;
        java.lang.Integer int3 = searchResultFilter0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter> filterList4 = searchResultFilter0.getDomainObjects();
        org.junit.Assert.assertNull(filterList1);
        org.junit.Assert.assertNull(filterList2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(filterList4);
    }

    @Test
    public void test41910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41910");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = observation1.setPlannedFieldResult(plannedFieldResult2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction4 = null;
        observation3.LabInstruction = labInstruction4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setStatistics(observationStatistics6);
        java.time.OffsetDateTime offsetDateTime8 = observation7.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade9 = observation7.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = auditAttributes10.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation7.setAuditAttributes(auditAttributes10);
        putAccessGroup0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = putAccessGroup0.AuditAttributes;
        java.lang.Boolean boolean16 = putAccessGroup0.CanEditAllData;
        org.junit.Assert.assertNotNull(observation3);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(resultGrade9);
        org.junit.Assert.assertNotNull(auditAttributes12);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNull(boolean16);
    }

    @Test
    public void test41911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41911");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        java.lang.String str3 = specimenWithObservations2.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen6 = putSpecimen4.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str7 = putSpecimen6.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer8 = putSpecimen6.getShippingContainer();
        java.lang.String str9 = putSpecimen6.getFiltrationComment();
        java.lang.String str10 = putSpecimen6.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList12 = specimenWithObservations11.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations14 = specimenWithObservations11.setStatus(specimenViewStatusType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType15 = specimenWithObservations14.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen16 = putSpecimen6.setStatus(specimenViewStatusType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations17 = specimenWithObservations2.setStatus(specimenViewStatusType15);
        specimenWithObservations17.NumberOfReceivedObservations = (-1);
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putSpecimen6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(shippingContainer8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(extendedAttributeList12);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations14);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(putSpecimen16);
        org.junit.Assert.assertNotNull(specimenWithObservations17);
    }

    @Test
    public void test41912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41912");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList8, verticalArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = pointVelocityDischargeActivity0.setVerticals(verticalList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity0.setSuspensionWeight("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = pointVelocityDischargeActivity12.setDistanceToMeter(quantityWithDisplay13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading17 = fieldVisitReading15.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading17.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading21 = fieldVisitReading17.setSerialNumber("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList23 = fieldVisitReading22.DatumConvertedValues;
        fieldVisitReading22.SerialNumber = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = volumetricDischargeReading26.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck30 = calibrationCheck28.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = doubleWithDisplay31.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str34 = doubleWithDisplay33.getDisplay();
        calibrationCheck30.Difference = doubleWithDisplay33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity38 = pointVelocityDischargeActivity36.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity36.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity42 = pointVelocityDischargeActivity36.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList43 = pointVelocityDischargeActivity42.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity42.DistanceToMeter = datumConvertedQuantityWithDisplay44;
        calibrationCheck30.Standard = datumConvertedQuantityWithDisplay44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading47 = volumetricDischargeReading26.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay44);
        fieldVisitReading22.AdjustmentAmount = datumConvertedQuantityWithDisplay44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading49 = fieldVisitReading17.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity50 = pointVelocityDischargeActivity12.setArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay44);
        java.lang.Boolean boolean51 = pointVelocityDischargeActivity12.MeterInspectedAfter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType54 = dischargeChannelMeasurement53.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = dischargeChannelMeasurement53.Discharge;
        java.time.Instant instant56 = dischargeChannelMeasurement53.EndTime;
        dischargeChannelMeasurement53.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity59 = engineeredStructureDischargeActivity52.setDischargeChannelMeasurement(dischargeChannelMeasurement53);
        java.lang.String str60 = engineeredStructureDischargeActivity59.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement61 = engineeredStructureDischargeActivity59.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay62 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement63 = dischargeChannelMeasurement61.setDistanceToGage(quantityWithDisplay62);
        java.lang.String str64 = dischargeChannelMeasurement61.getChannel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType65 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Even;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement66 = dischargeChannelMeasurement61.setHorizontalFlow(horizontalFlowType65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity67 = pointVelocityDischargeActivity12.setDischargeChannelMeasurement(dischargeChannelMeasurement66);
        pointVelocityDischargeActivity12.NodeDetails = "multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(verticalArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity14);
        org.junit.Assert.assertNotNull(fieldVisitReading17);
        org.junit.Assert.assertNotNull(fieldVisitReading21);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList23);
        org.junit.Assert.assertNull(doubleWithDisplay27);
        org.junit.Assert.assertNotNull(calibrationCheck30);
        org.junit.Assert.assertNotNull(doubleWithDisplay33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity38);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity42);
        org.junit.Assert.assertNull(verticalList43);
        org.junit.Assert.assertNotNull(volumetricDischargeReading47);
        org.junit.Assert.assertNotNull(fieldVisitReading49);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNull(channelMaterialType54);
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertNull(instant56);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement61);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str64, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertTrue("'" + horizontalFlowType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Even + "'", horizontalFlowType65.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Even));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement66);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity67);
    }

    @Test
    public void test41913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41913");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup0.Identifier = "";
        java.lang.Object obj3 = putQualifierGroup0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup5 = putQualifierGroup0.setUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Object obj6 = putQualifierGroup5.getResponseType();
        java.util.ArrayList<java.lang.String> strList7 = putQualifierGroup5.QualifierCodeList;
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertNotNull(putQualifierGroup5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test41914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41914");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        java.time.Instant instant2 = getObservationsV2_0.getEndModificationTime();
        java.util.List<java.lang.String> strList3 = getObservationsV2_0.Media;
        java.util.List<java.lang.String> strList4 = getObservationsV2_0.Ids;
        java.time.Instant instant5 = getObservationsV2_0.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_0.setMaxNumericResultValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest8.ReportTitle = "MinDuration";
        java.lang.String str11 = reportListServiceRequest8.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        java.util.List<java.lang.String> strList27 = getObservationsV2_12.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_12.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList30 = getObservationsV2_29.getMedia();
        java.time.Instant instant31 = getObservationsV2_29.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_29.setProjectIds((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest39 = reportListServiceRequest8.setTagKeys(strList35);
        reportListServiceRequest8.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        java.util.ArrayList<java.lang.String> strList42 = reportListServiceRequest8.getTimeSeriesUniqueIds();
        reportListServiceRequest8.ReportTitle = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_46.setDataClassifications((java.util.List<java.lang.String>) strList50);
        java.time.Instant instant53 = getObservationsV2_46.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        java.util.List<java.lang.String> strList70 = getObservationsV2_55.getLabReportIds();
        importItem54.Errors = getObservationsV2_55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList73 = getObservationsV2_72.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        getObservationsV2_74.SpecimenIds = strList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray84 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags87 = putLocationTags80.setTagUniqueIds(strList85);
        getObservationsV2_74.QualityControlTypes = strList85;
        getObservationsV2_72.ResultGrades = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem90 = importItem54.setFields((java.util.List<java.lang.String>) strList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_46.setSearch((java.util.List<java.lang.String>) strList85);
        importItemSamplingLocation45.Fields = strList85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest93 = reportListServiceRequest8.setTimeSeriesUniqueIds(strList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_94 = getObservationsV2_7.setQualityControlTypes((java.util.List<java.lang.String>) strList85);
        java.util.List<java.lang.String> strList95 = getObservationsV2_7.Media;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNotNull(reportListServiceRequest39);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNull(instant53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(putLocationTags87);
        org.junit.Assert.assertNotNull(importItem90);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(reportListServiceRequest93);
        org.junit.Assert.assertNotNull(getObservationsV2_94);
        org.junit.Assert.assertNull(strList95);
    }

    @Test
    public void test41915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41915");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str2 = getChartDataV2_1.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_1.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = getChartDataV2_4.setMinNumericResultValue((java.lang.Double) 1.0d);
        java.util.List<java.lang.String> strList7 = getChartDataV2_6.getSpecimenIds();
        java.time.Instant instant8 = getChartDataV2_6.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType11 = putUserV2_10.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        dischargeSummary14.MeasurementTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse13.setNextToken(instant18);
        java.time.Instant instant22 = locationDescriptionListServiceResponse13.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = getActivities12.setToStartTime(instant22);
        java.lang.String str24 = getActivities23.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList26 = getObservationsV2_25.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        getObservationsV2_25.ResultGrades = strList38;
        getActivities23.Media = strList38;
        putUserV2_10.AccessGroups = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens45 = getSpecimens9.setSamplingLocationIds((java.util.List<java.lang.String>) strList38);
        getChartDataV2_6.LabResultLabAnalysisMethodIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        getObservationsV2_54.DepthUnitCustomId = "hi!";
        java.lang.String str57 = getObservationsV2_54.DepthUnitId;
        java.util.List<java.lang.String> strList58 = getObservationsV2_54.LabResultLaboratoryIds;
        getObservationsV2_54.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int61 = getObservationsV2_54.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray73 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = putLocationTags69.setTagUniqueIds(strList74);
        getObservationsV2_63.QualityControlTypes = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest62.setTimeSeriesUniqueIds(strList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_54.setSamplingLocationIds((java.util.List<java.lang.String>) strList74);
        putUser47.Roles = strList74;
        getChartDataV2_6.AnalysisMethodSimpleIds = strList74;
        deleteObservationsV2_0.AnalyticalGroupIds = strList74;
        java.lang.String str83 = deleteObservationsV2_0.getDepthUnitId();
        deleteObservationsV2_0.DepthValue = 100.0d;
        java.util.List<java.lang.String> strList86 = deleteObservationsV2_0.getResultStatuses();
        java.lang.String str87 = deleteObservationsV2_0.getImportHistoryEventId();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNotNull(getChartDataV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(userType11);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(getActivities23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getSpecimens45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(putLocationTags76);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(strList86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test41916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41916");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary samplingLocationSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary samplingLocationSummary2 = samplingLocationSummary0.setFieldVisitCount((java.lang.Integer) (-1));
        samplingLocationSummary0.FieldVisitCount = 100;
        java.lang.Integer int5 = samplingLocationSummary0.getObservationCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary samplingLocationSummary7 = samplingLocationSummary0.setFieldVisitCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation10 = fieldVisitSummaryRepresentation8.setId("MinDuration");
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation12 = fieldVisitSummaryRepresentation8.setStartTime(offsetDateTime11);
        java.time.OffsetDateTime offsetDateTime13 = fieldVisitSummaryRepresentation12.StartTime;
        samplingLocationSummary7.LatestFieldVisit = fieldVisitSummaryRepresentation12;
        org.junit.Assert.assertNotNull(samplingLocationSummary2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(samplingLocationSummary7);
        org.junit.Assert.assertNotNull(fieldVisitSummaryRepresentation10);
        org.junit.Assert.assertNotNull(fieldVisitSummaryRepresentation12);
        org.junit.Assert.assertNull(offsetDateTime13);
    }

    @Test
    public void test41917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41917");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory getUnitGroupWithUnitHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory();
        java.lang.Object obj1 = getUnitGroupWithUnitHistory0.getResponseType();
        getUnitGroupWithUnitHistory0.Id = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        java.lang.String str4 = getUnitGroupWithUnitHistory0.getId();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****" + "'", str4, "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
    }

    @Test
    public void test41918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41918");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo errorInfo0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo errorInfo2 = errorInfo0.setMessage("MaxInstant");
        errorInfo2.LocalizationKey = "zZZZZ";
        errorInfo2.LocalizationKey = "";
        java.util.List<java.lang.String> strList7 = errorInfo2.getLocalizationParameters();
        org.junit.Assert.assertNotNull(errorInfo2);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test41919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41919");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = null;
        analyticalGroupItem0.AnalysisMethod = analysisMethod3;
        java.lang.String str5 = analyticalGroupItem0.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = analyticalGroupItem0.ObservedProperty;
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNull(analysisMethod2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(analysisMethod6);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(observedProperty8);
    }

    @Test
    public void test41920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41920");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2();
        java.lang.Boolean boolean1 = postObservationsDryRunV2_0.LinkFieldVisitsForNewObservations;
        java.lang.Boolean boolean2 = postObservationsDryRunV2_0.getLinkFieldVisitsForNewObservations();
        postObservationsDryRunV2_0.FileType = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_6 = postObservationsDryRunV2_0.setLinkFieldVisitsForNewObservations((java.lang.Boolean) true);
        java.lang.Boolean boolean7 = postObservationsDryRunV2_6.LinkFieldVisitsForNewObservations;
        java.lang.String str8 = postObservationsDryRunV2_6.TimeZoneOffset;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test41921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41921");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        putActivity5.PlannedActivity = plannedActivity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str14 = samplingContextTag13.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = samplingContextTag13.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag18 = samplingContextTag16.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str20 = samplingContextTag19.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        samplingContextTag21.AuditAttributes = auditAttributes23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str26 = samplingContextTag25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = samplingContextTag25.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag18, samplingContextTag19, samplingContextTag21, samplingContextTag28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30, samplingContextTagArray29);
        postActivity8.SamplingContextTags = samplingContextTagList30;
        putActivity5.SamplingContextTags = samplingContextTagList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity4.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity35 = postActivity4.getPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = postActivity4.AuditAttributes;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(samplingContextTag16);
        org.junit.Assert.assertNotNull(samplingContextTag18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(samplingContextTag28);
        org.junit.Assert.assertNotNull(samplingContextTagArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNull(plannedActivity35);
        org.junit.Assert.assertNull(auditAttributes36);
    }

    @Test
    public void test41922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41922");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary2.BaseFlow = baseFlowType7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType9 = dischargeSummary2.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList11 = ratingModelDescriptionListServiceResponse10.RatingModelDescriptions;
        java.time.Instant instant12 = ratingModelDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType14 = calibrationCheck13.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = calibrationCheck13.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary17.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        dischargeSummary17.MeasurementTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse16.setNextToken(instant21);
        java.time.Instant instant25 = locationDescriptionListServiceResponse16.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck26 = calibrationCheck13.setTime(instant25);
        java.time.Instant instant27 = calibrationCheck26.Time;
        ratingModelDescriptionListServiceResponse10.NextToken = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary2.setMeasurementEndTime(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = dischargeSummary29.MeanGageHeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary29.setGageHeightComments("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str34 = crossSectionSurveyActivity33.Channel;
        java.lang.String str35 = crossSectionSurveyActivity33.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity38 = adcpDischargeActivity36.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = adcpDischargeActivity38.getDischargeCoefficientVariation();
        adcpDischargeActivity38.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = dischargeSummary42.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = dischargeSummary42.Discharge;
        java.lang.Integer int45 = dischargeSummary42.getGradeCode();
        java.lang.String str46 = dischargeSummary42.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary42.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        adcpDischargeActivity38.Area = datumConvertedQuantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity50 = crossSectionSurveyActivity33.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary32.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData52 = openWaterData0.setDistanceToMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        openWaterData52.DryLineCorrection = 0.0d;
        java.lang.Double double55 = openWaterData52.WetLineCorrection;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + baseFlowType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(calibrationCheckType14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(calibrationCheck26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNull(quantityWithDisplay30);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(adcpDischargeActivity38);
        org.junit.Assert.assertNull(doubleWithDisplay39);
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertNull(quantityWithDisplay44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity50);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(openWaterData52);
        org.junit.Assert.assertNull(double55);
    }

    @Test
    public void test41923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41923");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList1 = chartData0.DataPoints;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData3 = chartData0.setDepthUnitGroupWithUnits(unitGroupWithUnits2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData5 = chartData3.setSamplingLocation(samplingLocation4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList7 = unitGroupWithUnits6.Units;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = unitGroupWithUnits6.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits10 = unitGroupWithUnits6.setCustomId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule11.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory14.Id = "MaxInstant";
        java.lang.String str17 = laboratory14.PhoneNumber;
        laboratory14.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime21 = putSchedule20.StartDate;
        java.time.OffsetDateTime offsetDateTime22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule23 = putSchedule20.setEndDate(offsetDateTime22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = putSchedule23.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime25 = putSchedule23.getEndDate();
        java.time.OffsetDateTime offsetDateTime26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule27 = putSchedule23.setStartDate(offsetDateTime26);
        java.lang.Integer int28 = putSchedule23.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule23.RecurrenceDayMonthly = recurrenceDayMonthlyType29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = unit31.AuditAttributes;
        unit31.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity38 = samplingPlanPlannedActivity36.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = auditAttributes39.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity38.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = samplingPlanPlannedActivity38.AuditAttributes;
        putAccessGroup35.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit45 = unit31.setAuditAttributes(auditAttributes43);
        putSchedule23.AuditAttributes = auditAttributes43;
        laboratory14.AuditAttributes = auditAttributes43;
        java.time.OffsetDateTime offsetDateTime48 = auditAttributes43.ModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule49 = postSchedule13.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = postSchedule49.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits51 = unitGroupWithUnits10.setAuditAttributes(auditAttributes50);
        chartData5.UnitGroupWithUnits = unitGroupWithUnits51;
        org.junit.Assert.assertNull(chartDataPointList1);
        org.junit.Assert.assertNotNull(chartData3);
        org.junit.Assert.assertNotNull(chartData5);
        org.junit.Assert.assertNull(unitList7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(unitGroupWithUnits10);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(putSchedule23);
        org.junit.Assert.assertNull(auditAttributes24);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(putSchedule27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes32);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity38);
        org.junit.Assert.assertNotNull(auditAttributes41);
        org.junit.Assert.assertNotNull(auditAttributes43);
        org.junit.Assert.assertNotNull(unit45);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(postSchedule49);
        org.junit.Assert.assertNotNull(auditAttributes50);
        org.junit.Assert.assertNotNull(unitGroupWithUnits51);
    }

    @Test
    public void test41924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41924");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime1 = activity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = activity0.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activity0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = putActivity5.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity5.setEndTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device11 = device9.setType("/AQUARIUS/Acquisition/v2");
        putActivity5.Device = device11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device14 = device11.setDescription("9999-12-31T23:59:59.999Z");
        activity0.Device = device14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium16 = activity0.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit17 = activity0.FieldVisit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList18 = activity0.SamplingContextTags;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity20 = activity0.setSamplingContextTags(samplingContextTagList19);
        java.lang.String str21 = activity20.getCustomId();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(activity3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(plannedActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(device11);
        org.junit.Assert.assertNotNull(device14);
        org.junit.Assert.assertNull(medium16);
        org.junit.Assert.assertNull(fieldVisit17);
        org.junit.Assert.assertNull(samplingContextTagList18);
        org.junit.Assert.assertNotNull(activity20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test41925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41925");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList74 = postSamplingLocation0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation76 = postSamplingLocation0.setLatitude("/AQUARIUS/Acquisition/v2");
        java.lang.String str77 = postSamplingLocation76.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation79 = postSamplingLocation76.setAddress(address78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address80 = postSamplingLocation76.Address;
        java.lang.String str81 = postSamplingLocation76.HorizontalCollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList82 = postSamplingLocation76.getStandards();
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNull(importHistoryEventSimpleList74);
        org.junit.Assert.assertNotNull(postSamplingLocation76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(postSamplingLocation79);
        org.junit.Assert.assertNull(address80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(standardSimpleList82);
    }

    @Test
    public void test41926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41926");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens4 = getExportSpecimens0.setCursor("/AQUARIUS");
        java.time.Instant instant5 = getExportSpecimens0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens7 = getExportSpecimens0.setCursor("0001-01-01T00:00:00.000Z");
        java.util.List<java.lang.String> strList8 = getExportSpecimens7.getLaboratoryIds();
        java.util.List<java.lang.String> strList9 = getExportSpecimens7.getSearch();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getExportSpecimens4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(getExportSpecimens7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test41927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41927");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod2 = importItemAnalysisMethod0.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod4 = importItemAnalysisMethod2.setInput("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = importItemAnalysisMethod4.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod7 = importItemAnalysisMethod4.setRowId("");
        org.junit.Assert.assertNotNull(importItemAnalysisMethod2);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod4);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod7);
    }

    @Test
    public void test41928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41928");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.Name = "";
        postDetectioncondition0.CustomId = "MinDuration";
        java.lang.String str10 = postDetectioncondition0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_13 = postObservationV2_11.setLabInstruction(labInstruction12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan17.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime20 = samplingPlan17.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit23 = putUnitGroupWithUnit21.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType24 = putUnitGroupWithUnit21.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity28 = samplingPlanPlannedActivity26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = auditAttributes29.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity28.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = samplingPlanPlannedActivity28.AuditAttributes;
        putAccessGroup25.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit35 = putUnitGroupWithUnit21.setAuditAttributes(auditAttributes33);
        samplingPlan17.AuditAttributes = auditAttributes33;
        java.time.OffsetDateTime offsetDateTime37 = null;
        auditAttributes33.ModificationTime = offsetDateTime37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails39 = labResultDetails14.setAuditAttributes(auditAttributes33);
        postObservationV2_11.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition41 = postDetectioncondition0.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition43 = postDetectioncondition0.setName("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MinDuration" + "'", str10, "MinDuration");
        org.junit.Assert.assertNotNull(postObservationV2_13);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit23);
        org.junit.Assert.assertNull(unitGroupSystemCodeType24);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity28);
        org.junit.Assert.assertNotNull(auditAttributes31);
        org.junit.Assert.assertNotNull(auditAttributes33);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit35);
        org.junit.Assert.assertNotNull(labResultDetails39);
        org.junit.Assert.assertNotNull(postDetectioncondition41);
        org.junit.Assert.assertNotNull(postDetectioncondition43);
    }

    @Test
    public void test41929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41929");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        analysisMethodSimple0.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = analysisMethodSimple0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = analysisMethodSimple0.getAuditAttributes();
        java.lang.String str5 = analysisMethodSimple0.getId();
        java.lang.String str6 = analysisMethodSimple0.Name;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str6, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test41930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41930");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList3 = getObservationExportIIV2_0.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList5 = getSpecimens4.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType7 = putUserV2_6.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = getActivities8.setToStartTime(instant18);
        java.lang.String str20 = getActivities19.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList22 = getObservationsV2_21.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        getObservationsV2_21.ResultGrades = strList34;
        getActivities19.Media = strList34;
        putUserV2_6.AccessGroups = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens41 = getSpecimens4.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList34);
        getObservationExportIIV2_0.ObservedPropertyIds = strList34;
        java.time.Instant instant43 = getObservationExportIIV2_0.StartObservedTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray48 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = putLocationTags44.setTagUniqueIds(strList49);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList52 = putLocationTags44.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = putLocationTags44.setLocationUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray59 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = putLocationTags55.setTagUniqueIds(strList60);
        java.util.ArrayList<java.lang.String> strList63 = putLocationTags62.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags62.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str67 = putLocationTags66.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest68.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str72 = applyTagRequest71.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str74 = applyTagRequest73.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest68, applyTagRequest71, applyTagRequest73, applyTagRequest75 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList77 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList77, applyTagRequestArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags66.setTags(applyTagRequestList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags62.setTags(applyTagRequestList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = putLocationTags44.setTags(applyTagRequestList77);
        java.util.ArrayList<java.lang.String> strList82 = putLocationTags81.getTagUniqueIds();
        java.util.ArrayList<java.lang.String> strList83 = putLocationTags81.TagUniqueIds;
        getObservationExportIIV2_0.SamplingLocationIds = strList83;
        java.lang.String str85 = getObservationExportIIV2_0.FilterId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(userType7);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(getActivities19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(getSpecimens41);
        org.junit.Assert.assertNull(instant43);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putLocationTags51);
        org.junit.Assert.assertNull(applyTagRequestList52);
        org.junit.Assert.assertNotNull(putLocationTags54);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putLocationTags62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(applyTagRequestArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(putLocationTags81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test41931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41931");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        java.lang.String str2 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen4 = observationNestedInSpecimen0.setId("hi!");
        observationNestedInSpecimen0.Id = "ZZZZZ";
        java.lang.String str7 = observationNestedInSpecimen0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType8 = observationNestedInSpecimen0.DataClassification;
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(dataClassificationType8);
    }

    @Test
    public void test41932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41932");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser getUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser getUser2 = getUser0.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUser getUser4 = getUser2.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str5 = getUser2.getUniqueId();
        getUser2.UniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNotNull(getUser2);
        org.junit.Assert.assertNotNull(getUser4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
    }

    @Test
    public void test41933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41933");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList9 = ratingCurve0.getOffsets();
        ratingCurve0.Id = "https";
        java.lang.String str12 = ratingCurve0.Remarks;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve14 = ratingCurve0.setEquation("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit15 = ratingCurve14.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType16 = ratingCurve14.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType17 = ratingCurve14.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve19 = ratingCurve14.setRemarks("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str21 = ratingCurve20.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType23 = expandedRatingCurve22.Type;
        expandedRatingCurve22.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve27 = expandedRatingCurve22.setOutputParameter(parameterWithUnit26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve28 = ratingCurve20.setInputParameter(parameterWithUnit26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList29 = ratingCurve20.getOffsets();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType31 = expandedRatingCurve30.Type;
        expandedRatingCurve30.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve35 = expandedRatingCurve30.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList36 = expandedRatingCurve35.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList37 = expandedRatingCurve35.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType39 = expandedRatingCurve38.Type;
        expandedRatingCurve38.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve43 = expandedRatingCurve38.setOutputParameter(parameterWithUnit42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit44 = expandedRatingCurve43.getOutputParameter();
        expandedRatingCurve35.OutputParameter = parameterWithUnit44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit47 = parameterWithUnit44.setParameterName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve48 = ratingCurve20.setOutputParameter(parameterWithUnit47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType50 = expandedRatingCurve49.Type;
        expandedRatingCurve49.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve54 = expandedRatingCurve49.setOutputParameter(parameterWithUnit53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit55 = expandedRatingCurve54.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType57 = expandedRatingCurve56.Type;
        expandedRatingCurve56.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve61 = expandedRatingCurve56.setOutputParameter(parameterWithUnit60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve62 = expandedRatingCurve54.setOutputParameter(parameterWithUnit60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] offsetPointArray63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>) offsetPointList64, offsetPointArray63);
        expandedRatingCurve54.Offsets = offsetPointList64;
        ratingCurve48.Offsets = offsetPointList64;
        ratingCurve14.Offsets = offsetPointList64;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(offsetPointList9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(ratingCurve14);
        org.junit.Assert.assertNotNull(parameterWithUnit15);
        org.junit.Assert.assertNull(ratingCurveType16);
        org.junit.Assert.assertNull(ratingCurveType17);
        org.junit.Assert.assertNotNull(ratingCurve19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(ratingCurveType23);
        org.junit.Assert.assertNotNull(expandedRatingCurve27);
        org.junit.Assert.assertNotNull(ratingCurve28);
        org.junit.Assert.assertNull(offsetPointList29);
        org.junit.Assert.assertNull(ratingCurveType31);
        org.junit.Assert.assertNotNull(expandedRatingCurve35);
        org.junit.Assert.assertNull(ratingShiftList36);
        org.junit.Assert.assertNull(ratingShiftList37);
        org.junit.Assert.assertNull(ratingCurveType39);
        org.junit.Assert.assertNotNull(expandedRatingCurve43);
        org.junit.Assert.assertNotNull(parameterWithUnit44);
        org.junit.Assert.assertNotNull(parameterWithUnit47);
        org.junit.Assert.assertNotNull(ratingCurve48);
        org.junit.Assert.assertNull(ratingCurveType50);
        org.junit.Assert.assertNotNull(expandedRatingCurve54);
        org.junit.Assert.assertNotNull(parameterWithUnit55);
        org.junit.Assert.assertNull(ratingCurveType57);
        org.junit.Assert.assertNotNull(expandedRatingCurve61);
        org.junit.Assert.assertNotNull(expandedRatingCurve62);
        org.junit.Assert.assertNotNull(offsetPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test41934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41934");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList1 = null;
        putUser0.AccessGroups = strList1;
        java.lang.String str3 = putUser0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType4 = putUser0.getUserType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.ACTIVITY;
        getExtendedAttributes5.AppliesToType = appliesToType6;
        getExtendedAttributes5.CustomId = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double11 = putBulkEditResultGradesV2_10.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        java.util.List<java.lang.String> strList27 = getObservationsV2_12.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList28 = getObservationsV2_12.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType29 = getObservationsV2_12.FieldResultType;
        java.time.Instant instant30 = getObservationsV2_12.getEndObservedTime();
        java.lang.String str31 = getObservationsV2_12.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        java.util.ArrayList<java.lang.String> strList40 = putLocationTags39.TagUniqueIds;
        getObservationsV2_12.ProjectIds = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = putBulkEditResultGradesV2_10.setSearch((java.util.List<java.lang.String>) strList40);
        java.util.List<java.lang.String> strList43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_44 = putBulkEditResultGradesV2_42.setLabResultLaboratoryIds(strList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType46 = calibrationCheck45.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay47 = calibrationCheck45.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary49.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse52.setNextToken(instant53);
        dischargeSummary49.MeasurementTime = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse48.setNextToken(instant53);
        java.time.Instant instant57 = locationDescriptionListServiceResponse48.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck58 = calibrationCheck45.setTime(instant57);
        putBulkEditResultGradesV2_44.StartResultTime = instant57;
        java.lang.Double double60 = putBulkEditResultGradesV2_44.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList62 = getObservationsV2_61.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray73 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = putLocationTags69.setTagUniqueIds(strList74);
        getObservationsV2_63.QualityControlTypes = strList74;
        getObservationsV2_61.ResultGrades = strList74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_79 = putBulkEditResultGradesV2_44.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList74);
        getExtendedAttributes5.Ids = strList74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray86 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags89 = putLocationTags82.setTagUniqueIds(strList87);
        java.util.ArrayList<java.lang.String> strList90 = putLocationTags89.TagUniqueIds;
        getLabReportImportHistoryEvents81.LabReportIds = strList90;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes92 = getExtendedAttributes5.setSearch((java.util.List<java.lang.String>) strList90);
        putUser0.Roles = strList90;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(userType4);
        org.junit.Assert.assertTrue("'" + appliesToType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.ACTIVITY + "'", appliesToType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.ACTIVITY));
        org.junit.Assert.assertNull(double11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(fieldResultType29);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_42);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_44);
        org.junit.Assert.assertNull(calibrationCheckType46);
        org.junit.Assert.assertNull(doubleWithDisplay47);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(calibrationCheck58);
        org.junit.Assert.assertNull(double60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(putLocationTags76);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_79);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(putLocationTags89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(getExtendedAttributes92);
    }

    @Test
    public void test41935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41935");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.getOptionalIssuerDiscoveryUri();
        putOpenIdConnectRelyingPartyConfiguration0.ClientIdentifier = "";
        putOpenIdConnectRelyingPartyConfiguration0.IdentifierClaim = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.util.List<java.lang.String> strList7 = putOpenIdConnectRelyingPartyConfiguration0.Scopes;
        putOpenIdConnectRelyingPartyConfiguration0.OptionalIssuerDiscoveryUri = "hi!";
        java.lang.Object obj10 = putOpenIdConnectRelyingPartyConfiguration0.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$OpenIdConnectRelyingPartyConfiguration");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$OpenIdConnectRelyingPartyConfiguration");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$OpenIdConnectRelyingPartyConfiguration");
    }

    @Test
    public void test41936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41936");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest0.ApplyDatumConversion = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest5 = getFieldVisitReadingsByLocationServiceRequest0.setLocationUniqueId("2021.4.62.0");
        getFieldVisitReadingsByLocationServiceRequest5.Publish = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList9 = getExportObservations8.getLabReportIds();
        java.lang.String str10 = getExportObservations8.DepthUnitCustomId;
        java.util.List<java.lang.String> strList11 = getExportObservations8.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str13 = getChartDataV2_12.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_15 = getChartDataV2_12.setFilterId("");
        java.util.List<java.lang.String> strList16 = getChartDataV2_12.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList19 = getObservationsV2_18.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        getObservationsV2_18.ResultGrades = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems36 = getExtendedAttributeDropdownlistitems17.setSearch((java.util.List<java.lang.String>) strList31);
        getChartDataV2_12.ObservedPropertyIds = strList31;
        getChartDataV2_12.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList41 = getExportObservations40.getLabReportIds();
        java.lang.String str42 = getExportObservations40.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj44 = getActivityTemplates43.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        getActivityTemplates43.Type = strList56;
        getExportObservations40.AnalyticalGroupIds = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_62 = getChartDataV2_12.setAnalysisMethodIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations63 = getExportObservations8.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest64 = getFieldVisitReadingsByLocationServiceRequest5.setParameters(strList56);
        java.util.ArrayList<java.lang.String> strList65 = getFieldVisitReadingsByLocationServiceRequest5.Parameters;
        java.lang.String str66 = getFieldVisitReadingsByLocationServiceRequest5.getLocationIdentifier();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest5);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getChartDataV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems36);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(getChartDataV2_62);
        org.junit.Assert.assertNotNull(getExportObservations63);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test41937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41937");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        putObservedProperty0.Name = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType3 = putObservedProperty0.getResultType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation4.setPlannedFieldResult(plannedFieldResult5);
        observation6.CustomId = "";
        observation6.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str13 = metricConfiguration12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty14.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = metricConfiguration12.setObservedProperty(observedProperty14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType18 = observedProperty14.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = null;
        quantity21.Unit = unit22;
        postObservedProperty19.LowerLimit = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = postObservedProperty19.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit26 = quantity25.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = observedProperty14.setUpperLimit(quantity25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation28 = samplingLocation11.setElevation(quantity25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList29 = samplingLocation28.getAttachments();
        java.lang.String str30 = samplingLocation28.getHorizontalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation6.setSamplingLocation(samplingLocation28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = samplingLocation28.Elevation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty33 = putObservedProperty0.setLowerLimit(quantity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = putObservedProperty33.getDefaultUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup36 = postObservedProperty35.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList37 = postObservedProperty35.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType38 = postObservedProperty35.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty40 = postObservedProperty35.setUnitGroup(unitGroup39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty42 = postObservedProperty35.setResultType(resultType41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty43.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity46 = observedProperty43.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty48 = observedProperty43.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = putObservedProperty49.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty52 = putObservedProperty49.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty54 = putObservedProperty52.setDescription("2021.4.62.0");
        java.lang.String str55 = putObservedProperty52.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj57 = postObservedProperty56.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate60 = postFieldVisitActivityWithTemplate58.setAuditAttributes(auditAttributes59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation63 = observation61.setPlannedFieldResult(plannedFieldResult62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction64 = null;
        observation63.LabInstruction = labInstruction64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation67 = observation63.setStatistics(observationStatistics66);
        java.time.OffsetDateTime offsetDateTime68 = observation67.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit70 = null;
        quantity69.Unit = unit70;
        observation67.Depth = quantity69;
        postFieldVisitActivityWithTemplate60.Depth = quantity69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit74 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity75 = quantity69.setUnit(unit74);
        postObservedProperty56.LowerLimit = quantity69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType77 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL;
        postObservedProperty56.AnalysisType = analysisType77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty79 = putObservedProperty52.setAnalysisType(analysisType77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType80 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty81 = putObservedProperty79.setResultType(resultType80);
        observedProperty48.ResultType = resultType80;
        postObservedProperty35.ResultType = resultType80;
        java.lang.String str84 = postObservedProperty35.CasNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup85.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType88 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup89 = unitGroup85.setSystemCode(unitGroupSystemCodeType88);
        java.lang.Boolean boolean90 = unitGroup85.SupportsConversion;
        unitGroup85.SupportsConversion = false;
        postObservedProperty35.UnitGroup = unitGroup85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty94 = putObservedProperty33.setUnitGroup(unitGroup85);
        org.junit.Assert.assertNull(resultType3);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(metricConfiguration17);
        org.junit.Assert.assertNull(resultType18);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(quantity25);
        org.junit.Assert.assertNull(unit26);
        org.junit.Assert.assertNotNull(observedProperty27);
        org.junit.Assert.assertNotNull(samplingLocation28);
        org.junit.Assert.assertNull(domainObjectAttachmentList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(quantity32);
        org.junit.Assert.assertNotNull(putObservedProperty33);
        org.junit.Assert.assertNull(unit34);
        org.junit.Assert.assertNull(unitGroup36);
        org.junit.Assert.assertNull(importHistoryEventSimpleList37);
        org.junit.Assert.assertNull(analysisType38);
        org.junit.Assert.assertNotNull(postObservedProperty40);
        org.junit.Assert.assertTrue("'" + resultType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty42);
        org.junit.Assert.assertNull(quantity46);
        org.junit.Assert.assertNotNull(observedProperty48);
        org.junit.Assert.assertNull(quantity50);
        org.junit.Assert.assertNotNull(putObservedProperty52);
        org.junit.Assert.assertNotNull(putObservedProperty54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate60);
        org.junit.Assert.assertNotNull(observation63);
        org.junit.Assert.assertNotNull(observation67);
        org.junit.Assert.assertNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(quantity75);
        org.junit.Assert.assertTrue("'" + analysisType77 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL + "'", analysisType77.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL));
        org.junit.Assert.assertNotNull(putObservedProperty79);
        org.junit.Assert.assertTrue("'" + resultType80 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType80.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(putObservedProperty81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(unitGroup89);
        org.junit.Assert.assertNull(boolean90);
        org.junit.Assert.assertNotNull(putObservedProperty94);
    }

    @Test
    public void test41938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41938");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart2 = inputPart0.setHeaders((java.lang.Object) interpolationType1);
        java.lang.Boolean boolean3 = inputPart2.ContentTypeFromMessage;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart6 = inputPart4.setHeaders((java.lang.Object) interpolationType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType7 = inputPart4.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart9 = inputPart4.setMediaType(mediaType8);
        java.lang.String str10 = mediaType8.getSubtype();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest12.ReportTitle = "MinDuration";
        reportListServiceRequest12.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList18 = getExportSpecimens17.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant20 = qualifier19.DateApplied;
        java.lang.String str21 = qualifier19.User;
        java.lang.String str22 = qualifier19.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj24 = timeAlignedDataServiceRequest23.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse25.setNextToken(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = timeAlignedDataServiceRequest23.setQueryFrom(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier29 = qualifier19.setDateApplied(instant26);
        getExportSpecimens17.Before = instant26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark31.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList35 = fieldVisitDataServiceResponse34.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse37 = fieldVisitDataServiceResponse34.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary38.Reviewer = "";
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary38.MeasurementTime = instant41;
        fieldVisitDataServiceResponse34.ResponseTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark44 = locationRemark31.setCreateTime(instant41);
        getExportSpecimens17.EndModificationTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest46 = reportListServiceRequest12.setCreatedFrom(instant41);
        getSamplingLocations11.StartModificationTime = instant41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType48 = mediaType8.setParameters((java.lang.Object) instant41);
        inputPart2.MediaType = mediaType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double51 = putBulkEditResultGradesV2_50.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray62 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags58.setTagUniqueIds(strList63);
        getObservationsV2_52.QualityControlTypes = strList63;
        java.util.List<java.lang.String> strList67 = getObservationsV2_52.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList68 = getObservationsV2_52.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType69 = getObservationsV2_52.FieldResultType;
        java.time.Instant instant70 = getObservationsV2_52.getEndObservedTime();
        java.lang.String str71 = getObservationsV2_52.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray76 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags72.setTagUniqueIds(strList77);
        java.util.ArrayList<java.lang.String> strList80 = putLocationTags79.TagUniqueIds;
        getObservationsV2_52.ProjectIds = strList80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_82 = putBulkEditResultGradesV2_50.setSearch((java.util.List<java.lang.String>) strList80);
        java.util.List<java.lang.String> strList83 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_84 = putBulkEditResultGradesV2_82.setLabResultLaboratoryIds(strList83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        getObservationsV2_85.SpecimenIds = strList88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_91 = putBulkEditResultGradesV2_84.setObservedPropertyIds((java.util.List<java.lang.String>) strList88);
        java.time.Instant instant92 = putBulkEditResultGradesV2_91.StartObservedTime;
        java.lang.Integer int93 = putBulkEditResultGradesV2_91.Limit;
        java.util.List<java.lang.String> strList94 = putBulkEditResultGradesV2_91.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_96 = putBulkEditResultGradesV2_91.setDepthUnitId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart97 = inputPart2.setHeaders((java.lang.Object) putBulkEditResultGradesV2_96);
        org.junit.Assert.assertTrue("'" + interpolationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertTrue("'" + interpolationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart6);
        org.junit.Assert.assertNull(mediaType7);
        org.junit.Assert.assertNotNull(inputPart9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest28);
        org.junit.Assert.assertNotNull(qualifier29);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList35);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse37);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationRemark44);
        org.junit.Assert.assertNotNull(reportListServiceRequest46);
        org.junit.Assert.assertNotNull(mediaType48);
        org.junit.Assert.assertNull(double51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNull(fieldResultType69);
        org.junit.Assert.assertNull(instant70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_82);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_84);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_91);
        org.junit.Assert.assertNull(instant92);
        org.junit.Assert.assertNull(int93);
        org.junit.Assert.assertNull(strList94);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_96);
        org.junit.Assert.assertNotNull(inputPart97);
    }

    @Test
    public void test41939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41939");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration4 = activityWithDetails0.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails6 = activityWithDetails0.setObservations(observationMinimalList5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device7 = activityWithDetails0.getDevice();
        java.lang.Boolean boolean8 = activityWithDetails0.getRefreshed();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = null;
        putActivity9.Depth = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList13, metricResultArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity15 = putActivity9.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity17 = putActivity9.setType(activityWithDetailsType16);
        java.lang.Boolean boolean18 = putActivity9.Refreshed;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = putActivity9.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity21 = putActivity9.setRefreshed((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity23 = putActivity9.setCustomId("http");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList24 = putActivity23.getMetricResults();
        activityWithDetails0.MetricResults = metricResultList24;
        java.time.OffsetDateTime offsetDateTime26 = null;
        activityWithDetails0.StartTime = offsetDateTime26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_30 = postObservationV2_28.setLabInstruction(labInstruction29);
        java.lang.String str31 = postObservationV2_30.MediumSubdivision;
        java.lang.String str32 = postObservationV2_30.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_34 = postObservationV2_30.setLabResultDetails(labResultDetails33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier35 = postObservationV2_30.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList37 = fieldVisit36.Attachments;
        java.time.OffsetDateTime offsetDateTime38 = null;
        fieldVisit36.EndTime = offsetDateTime38;
        java.lang.String str40 = fieldVisit36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str42 = samplingLocation41.Description;
        java.lang.String str43 = samplingLocation41.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str46 = metricConfiguration45.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty47.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration50 = metricConfiguration45.setObservedProperty(observedProperty47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType51 = observedProperty47.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup53 = postObservedProperty52.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = null;
        quantity54.Unit = unit55;
        postObservedProperty52.LowerLimit = quantity54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity58 = postObservedProperty52.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit59 = quantity58.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty60 = observedProperty47.setUpperLimit(quantity58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation61 = samplingLocation44.setElevation(quantity58);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList62 = samplingLocation61.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65, extendedAttributeArray64);
        postActivity63.ExtendedAttributes = extendedAttributeList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation68 = samplingLocation61.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation69 = samplingLocation41.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65);
        fieldVisit36.ExtendedAttributes = extendedAttributeList65;
        postObservationV2_30.ExtendedAttributes = extendedAttributeList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails72 = activityWithDetails0.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList65);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(indexConfiguration4);
        org.junit.Assert.assertNotNull(activityWithDetails6);
        org.junit.Assert.assertNull(device7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(metricResultArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(putActivity15);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertNotNull(putActivity21);
        org.junit.Assert.assertNotNull(putActivity23);
        org.junit.Assert.assertNotNull(metricResultList24);
        org.junit.Assert.assertNotNull(postObservationV2_30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(postObservationV2_34);
        org.junit.Assert.assertNull(nullMeasureQualifier35);
        org.junit.Assert.assertNull(domainObjectAttachmentList37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(metricConfiguration50);
        org.junit.Assert.assertNull(resultType51);
        org.junit.Assert.assertNull(unitGroup53);
        org.junit.Assert.assertNotNull(quantity58);
        org.junit.Assert.assertNull(unit59);
        org.junit.Assert.assertNotNull(observedProperty60);
        org.junit.Assert.assertNotNull(samplingLocation61);
        org.junit.Assert.assertNull(domainObjectAttachmentList62);
        org.junit.Assert.assertNotNull(extendedAttributeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(samplingLocation68);
        org.junit.Assert.assertNotNull(samplingLocation69);
        org.junit.Assert.assertNotNull(activityWithDetails72);
    }

    @Test
    public void test41940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41940");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun postImportFieldSheetDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun();
        java.lang.String str1 = postImportFieldSheetDryRun0.TimeZoneOffset;
        postImportFieldSheetDryRun0.TimeZoneOffset = "hi!";
        java.lang.String str4 = postImportFieldSheetDryRun0.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun postImportFieldSheetDryRun6 = postImportFieldSheetDryRun0.setTimeZoneOffset("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportFieldSheetDryRun postImportFieldSheetDryRun8 = postImportFieldSheetDryRun6.setTimeZoneOffset("MinInstant");
        java.lang.String str9 = postImportFieldSheetDryRun8.getTimeZoneOffset();
        java.lang.String str10 = postImportFieldSheetDryRun8.TimeZoneOffset;
        java.lang.String str11 = postImportFieldSheetDryRun8.TimeZoneOffset;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(postImportFieldSheetDryRun6);
        org.junit.Assert.assertNotNull(postImportFieldSheetDryRun8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MinInstant" + "'", str10, "MinInstant");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MinInstant" + "'", str11, "MinInstant");
    }

    @Test
    public void test41941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41941");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription3 = locationDescription1.setIdentifier("");
        java.util.ArrayList<java.lang.String> strList4 = locationDescription3.getSecondaryFolders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType6 = getExtendedAttributes5.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str8 = deleteFieldVisits7.getSort();
        java.util.List<java.lang.String> strList9 = deleteFieldVisits7.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        java.util.List<java.lang.String> strList17 = getObservationsV2_10.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        getObservationsV2_10.StartResultTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.ActivityIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setCollectionMethodIds((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits50 = deleteFieldVisits7.setSamplingPlanIds((java.util.List<java.lang.String>) strList44);
        getExtendedAttributes5.Ids = strList44;
        locationDescription3.SecondaryFolders = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen53 = importItemSpecimen0.setWarningMessages((java.util.List<java.lang.String>) strList44);
        java.util.List<java.lang.String> strList54 = importItemSpecimen53.getWarningMessages();
        java.lang.Object obj55 = importItemSpecimen53.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen56 = importItemSpecimen53.ExistingItem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen57 = importItemSpecimen53.Item;
        importItemSpecimen53.Input = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod62 = postLabAnalysisMethod60.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList64, observedPropertyArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod66 = postLabAnalysisMethod62.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = postLabAnalysisMethod62.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod69 = postLabAnalysisMethod62.setDescription("MinInstant");
        importItemSpecimen53.Errors = "MinInstant";
        org.junit.Assert.assertNotNull(locationDescription3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(appliesToType6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(deleteFieldVisits50);
        org.junit.Assert.assertNotNull(importItemSpecimen53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(specimen56);
        org.junit.Assert.assertNull(specimen57);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod62);
        org.junit.Assert.assertNotNull(observedPropertyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod66);
        org.junit.Assert.assertNull(auditAttributes67);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod69);
    }

    @Test
    public void test41942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41942");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str4 = getExportObservations3.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = getExportObservations3.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = getExportObservations3.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport9.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant12 = recurringReport9.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit13.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant17 = locationDatumPeriod16.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod19 = locationDatumPeriod16.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription27 = timeSeriesDescription20.setRawStartTime(instant24);
        locationDatumPeriod16.ValidFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription29 = fieldVisit13.setLastMatchedTime(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport30 = recurringReport9.setNextGenerationDate(instant24);
        getExportObservations3.StartModificationTime = instant24;
        java.lang.String str32 = getExportObservations3.ActivityCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj34 = postQualifier33.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean38 = roleFlattened37.CanRemoveFieldVisits;
        roleFlattened37.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str42 = putLocationType41.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        java.util.List<java.lang.String> strList53 = getObservationsV2_49.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray64 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = putLocationTags60.setTagUniqueIds(strList65);
        getObservationsV2_54.QualityControlTypes = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_49.setMedia((java.util.List<java.lang.String>) strList65);
        putLocationType41.ExtendedAttributeDefinitionIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase71 = roleFlattened37.setRoleApprovalTransitions(strList65);
        putBulkEditResultGradesV2_36.ResultGrades = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities73 = getActivities35.setSamplingLocationIds((java.util.List<java.lang.String>) strList65);
        postQualifier33.GroupIdentifiers = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations75 = getExportObservations3.setActivityTypes((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_76 = getObservationExportIIV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList65);
        java.lang.Double double77 = getObservationExportIIV2_76.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType78 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_79 = getObservationExportIIV2_76.setFormat(getObservationExportIIFormatType78);
        java.util.List<java.lang.String> strList80 = null;
        getObservationExportIIV2_79.AnalysisMethodIds = strList80;
        getObservationExportIIV2_79.Sort = "http://MaxDurationhttp/json/reply/Double";
        java.util.List<java.lang.String> strList84 = null;
        getObservationExportIIV2_79.CollectionMethodIds = strList84;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getExportObservations6);
        org.junit.Assert.assertNotNull(getExportObservations8);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNotNull(locationDatumPeriod19);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(timeSeriesDescription27);
        org.junit.Assert.assertNotNull(fieldVisitDescription29);
        org.junit.Assert.assertNotNull(recurringReport30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putLocationTags67);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(roleFlattenedBase71);
        org.junit.Assert.assertNotNull(getActivities73);
        org.junit.Assert.assertNotNull(getExportObservations75);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_76);
        org.junit.Assert.assertNull(double77);
        org.junit.Assert.assertTrue("'" + getObservationExportIIFormatType78 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV + "'", getObservationExportIIFormatType78.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV));
        org.junit.Assert.assertNotNull(getObservationExportIIV2_79);
    }

    @Test
    public void test41943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41943");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest2 = fieldVisitDataServiceRequest0.setIncludeVerticals((java.lang.Boolean) false);
        java.lang.String str3 = fieldVisitDataServiceRequest0.DiscreteMeasurementActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest5 = fieldVisitDataServiceRequest0.setConvertToStandardReferenceDatum("0001-01-01T00:00:00.000Z");
        fieldVisitDataServiceRequest5.IncludeCrossSectionSurveyProfile = true;
        java.lang.Boolean boolean8 = fieldVisitDataServiceRequest5.ApplyRounding;
        java.lang.String str9 = fieldVisitDataServiceRequest5.getFieldVisitIdentifier();
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41944");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue searchResultCategoricalValue0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue();
        java.lang.String str1 = searchResultCategoricalValue0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList2 = searchResultCategoricalValue0.DomainObjects;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList3 = searchResultCategoricalValue0.DomainObjects;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList4 = searchResultCategoricalValue0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue searchResultCategoricalValue6 = searchResultCategoricalValue0.setTotalCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList7 = searchResultCategoricalValue0.getDomainObjects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(categoricalValueList2);
        org.junit.Assert.assertNull(categoricalValueList3);
        org.junit.Assert.assertNull(categoricalValueList4);
        org.junit.Assert.assertNotNull(searchResultCategoricalValue6);
        org.junit.Assert.assertNull(categoricalValueList7);
    }

    @Test
    public void test41945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41945");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        java.lang.String str9 = postObservationV2_2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str11 = analysisMethodSimple10.getId();
        java.lang.String str12 = analysisMethodSimple10.getId();
        analysisMethodSimple10.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = analysisMethodSimple10.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_16 = postObservationV2_2.setAnalysisMethod(analysisMethodSimple10);
        java.lang.String str17 = analysisMethodSimple10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = specimenTemplate18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate20.Preservative = preservativeType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails23.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = specimenTemplate20.setAuditAttributes(auditAttributes26);
        java.lang.String str29 = specimenTemplate20.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = postSamplingLocationGroup30.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = locationGroupType32.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType35 = locationGroupType32.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup30.LocationGroupType = locationGroupType35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup38 = postSamplingLocationGroup30.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = samplingPlanPlannedActivity40.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = auditAttributes43.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity42.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = samplingPlanPlannedActivity42.AuditAttributes;
        putAccessGroup39.AuditAttributes = auditAttributes47;
        postSamplingLocationGroup30.AuditAttributes = auditAttributes47;
        specimenTemplate20.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple51 = analysisMethodSimple10.setAuditAttributes(auditAttributes47);
        java.lang.String str52 = analysisMethodSimple51.Id;
        java.lang.String str53 = analysisMethodSimple51.Name;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNotNull(postObservationV2_16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(specimenTemplate20);
        org.junit.Assert.assertTrue("'" + preservativeType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(specimenTemplate28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNotNull(locationGroupType35);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup38);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity42);
        org.junit.Assert.assertNotNull(auditAttributes45);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(analysisMethodSimple51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str53, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test41946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41946");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str1 = timeSeriesDescription0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription3 = timeSeriesDescription0.setPublish((java.lang.Boolean) false);
        java.lang.String str4 = timeSeriesDescription3.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        getObservationsV2_11.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        getObservationsV2_11.EndObservedTime = instant15;
        timeSeriesDescription3.CorrectedEndTime = instant15;
        java.lang.String str19 = timeSeriesDescription3.getLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription3.setComment("http://MaxDurationhttp");
        timeSeriesDescription21.UtcOffsetIsoDuration = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(timeSeriesDescription3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
    }

    @Test
    public void test41947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41947");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit9 = ratingCurve0.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve11 = ratingCurve0.setInputParameter(parameterWithUnit10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve13 = ratingCurve11.setRemarks("MinInstant");
        java.lang.String str14 = ratingCurve13.getRemarks();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNotNull(parameterWithUnit9);
        org.junit.Assert.assertNotNull(ratingCurve11);
        org.junit.Assert.assertNotNull(ratingCurve13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MinInstant" + "'", str14, "MinInstant");
    }

    @Test
    public void test41948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41948");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = analyticalGroupItem1.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = analyticalGroupItem3.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = analyticalGroupItem3.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = null;
        analyticalGroupItem6.AnalysisMethod = analysisMethod9;
        java.lang.String str11 = analyticalGroupItem6.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem12.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod14 = analyticalGroupItem12.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = null;
        analyticalGroupItem17.AnalysisMethod = analysisMethod20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem1, analyticalGroupItem3, analyticalGroupItem6, analyticalGroupItem12, analyticalGroupItem15, analyticalGroupItem17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList23, analyticalGroupItemArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup25 = analyticalGroup0.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList23);
        java.lang.Integer int26 = analyticalGroup25.NumberOfAnalysisMethodsInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = analyticalGroup25.getAuditAttributes();
        java.lang.Integer int28 = analyticalGroup25.getNumberOfObservedPropertiesInGroupItems();
        analyticalGroup25.Description = "-PT87591240H";
        analyticalGroup25.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup34 = analyticalGroup25.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 0);
        org.junit.Assert.assertNull(analysisMethod2);
        org.junit.Assert.assertNull(analysisMethod4);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(analysisMethod8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod14);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(analyticalGroup25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(auditAttributes27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(analyticalGroup34);
    }

    @Test
    public void test41949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41949");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity3 = gageHeightAtZeroFlowActivity1.setApplicableSince(instant2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = gageHeightAtZeroFlowActivity3.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit6 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity5);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit8 = fieldVisit6.setDischargeActivities(dischargeActivityList7);
        fieldVisit8.LocationIdentifier = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity14 = gageHeightAtZeroFlowActivity12.setApplicableSince(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity16 = gageHeightAtZeroFlowActivity14.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit17 = fieldVisit11.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit18 = fieldVisit8.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity16);
        java.lang.Boolean boolean19 = gageHeightAtZeroFlowActivity16.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity21 = gageHeightAtZeroFlowActivity16.setUnit("/AQUARIUS");
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity3);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNotNull(fieldVisit8);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity14);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity16);
        org.junit.Assert.assertNotNull(fieldVisit17);
        org.junit.Assert.assertNotNull(fieldVisit18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity21);
    }

    @Test
    public void test41950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41950");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "MinDuration";
        java.lang.String str4 = approval0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval6 = approval0.setApprovalLevel((java.lang.Integer) 10);
        approval6.User = "";
        java.lang.String str9 = approval6.getUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(approval6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test41951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41951");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList1 = searchResultUser0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser3 = searchResultUser0.setTotalCount((java.lang.Integer) 1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList4 = searchResultUser0.DomainObjects;
        searchResultUser0.TotalCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList8 = searchResultUser7.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser10 = searchResultUser7.setTotalCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList12 = searchResultUser11.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser14 = searchResultUser11.setTotalCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User[] userArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>) userList16, userArray15);
        searchResultUser14.DomainObjects = userList16;
        searchResultUser7.DomainObjects = userList16;
        java.lang.String str20 = searchResultUser7.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList21 = searchResultUser7.DomainObjects;
        searchResultUser0.DomainObjects = userList21;
        searchResultUser0.Cursor = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNull(userList1);
        org.junit.Assert.assertNotNull(searchResultUser3);
        org.junit.Assert.assertNull(userList4);
        org.junit.Assert.assertNull(userList8);
        org.junit.Assert.assertNotNull(searchResultUser10);
        org.junit.Assert.assertNull(userList12);
        org.junit.Assert.assertNotNull(searchResultUser14);
        org.junit.Assert.assertNotNull(userArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(userList21);
    }

    @Test
    public void test41952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41952");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setSubjectIdentifier("");
        java.lang.String str3 = openIdConnectUser2.getLastName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user5 = openIdConnectUser2.setActive((java.lang.Boolean) true);
        user5.Active = false;
        java.lang.String str8 = user5.FirstName;
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(user5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test41953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41953");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor6 = sensor0.setUniqueId("-PT87591240H");
        sensor0.Comments = "2021.4.62.0";
        java.lang.String str9 = sensor0.MethodCode;
        sensor0.SerialNumber = "";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(sensor6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41954");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setIsTransient((java.lang.Boolean) true);
        java.lang.String str3 = report2.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        dischargeSummary5.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse4.setNextToken(instant9);
        java.time.Instant instant13 = locationDescriptionListServiceResponse4.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report14 = report2.setCreatedTime(instant13);
        java.lang.String str15 = report2.Url;
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(report14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test41955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41955");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        java.lang.String str9 = observation0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = observation0.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation11.setPlannedFieldResult(plannedFieldResult12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        observation13.LabInstruction = labInstruction14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation13.setStatistics(observationStatistics16);
        java.time.OffsetDateTime offsetDateTime18 = observation17.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = null;
        quantity19.Unit = unit20;
        observation17.Depth = quantity19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation17.setNumericResult(numericResult23);
        java.time.OffsetDateTime offsetDateTime25 = observation24.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_28 = postObservationV2_26.setLabInstruction(labInstruction27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon29 = null;
        postObservationV2_28.RelatedTaxon = taxon29;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList31 = postObservationV2_28.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType32 = postObservationV2_28.getQualityControlType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics33 = postObservationV2_28.getStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device34 = postObservationV2_28.Device;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str36 = collectionMethod35.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_37 = postObservationV2_28.setCollectionMethod(collectionMethod35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType38 = postObservationV2_37.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str40 = metricConfiguration39.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty41.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration44 = metricConfiguration39.setObservedProperty(observedProperty41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType45 = observedProperty41.ResultType;
        observedProperty41.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup49 = postObservedProperty48.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51, importHistoryEventSimpleArray50);
        postObservedProperty48.ImportHistoryEventSimples = importHistoryEventSimpleList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty54 = observedProperty41.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity55 = observedProperty41.LowerLimit;
        postObservationV2_37.ObservedProperty = observedProperty41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation57 = observation24.setObservedProperty(observedProperty41);
        observation0.ObservedProperty = observedProperty41;
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(taxonomicResult10);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(postObservationV2_28);
        org.junit.Assert.assertNull(ruleValidationDetailsList31);
        org.junit.Assert.assertNull(qualityControlType32);
        org.junit.Assert.assertNull(observationStatistics33);
        org.junit.Assert.assertNull(device34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(postObservationV2_37);
        org.junit.Assert.assertNull(qualityControlType38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(metricConfiguration44);
        org.junit.Assert.assertNull(resultType45);
        org.junit.Assert.assertNull(unitGroup49);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(observedProperty54);
        org.junit.Assert.assertNull(quantity55);
        org.junit.Assert.assertNotNull(observation57);
    }

    @Test
    public void test41956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41956");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str1 = unitMetadata0.getBaseOffset();
        java.lang.String str2 = unitMetadata0.UniqueId;
        java.lang.String str3 = unitMetadata0.getBaseMultiplier();
        java.lang.String str4 = unitMetadata0.DisplayName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test41957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41957");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationGroup getSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationGroup();
        getSamplingLocationGroup0.Id = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationGroup getSamplingLocationGroup4 = getSamplingLocationGroup0.setId("");
        java.lang.Object obj5 = getSamplingLocationGroup0.getResponseType();
        java.lang.String str6 = getSamplingLocationGroup0.Id;
        org.junit.Assert.assertNotNull(getSamplingLocationGroup4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test41958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41958");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = velocityDepthObservation0.Velocity;
        java.lang.Double double3 = velocityDepthObservation0.getDepthMultiplier();
        velocityDepthObservation0.Weighting = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType7 = calibrationCheck6.getCalibrationCheckType();
        java.lang.String str8 = calibrationCheck6.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary12.DifferenceDuringVisit = doubleWithDisplay13;
        reading9.Value = doubleWithDisplay13;
        calibrationCheck6.Difference = doubleWithDisplay13;
        doubleWithDisplay13.Display = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation19 = velocityDepthObservation0.setObservationIntervalInSeconds(doubleWithDisplay13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = velocityDepthObservation19.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation22 = velocityDepthObservation19.setIsVelocityEstimated((java.lang.Boolean) false);
        java.lang.String str23 = net.servicestack.client.JsonServiceClient.GetSendMethod((java.lang.Object) velocityDepthObservation19);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(calibrationCheckType7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(velocityDepthObservation19);
        org.junit.Assert.assertNull(quantityWithDisplay20);
        org.junit.Assert.assertNotNull(velocityDepthObservation22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "POST" + "'", str23, "POST");
    }

    @Test
    public void test41959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41959");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int4 = postUnitGroup0.IntensityDimension;
        postUnitGroup0.SubstanceDimension = 10;
        java.lang.Integer int7 = postUnitGroup0.MassDimension;
        postUnitGroup0.CurrentDimension = 10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase11 = postUnitGroup0.setLengthDimension((java.lang.Integer) 100);
        postUnitGroup0.BaseUnitIdentifier = "/AQUARIUS";
        java.lang.String str14 = postUnitGroup0.getBaseUnitSymbol();
        java.lang.String str15 = postUnitGroup0.getBaseUnitSymbol();
        java.lang.Integer int16 = postUnitGroup0.getTemperatureDimension();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(unitGroupBase11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test41960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41960");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting2 = deleteSetting0.setGroup("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = deleteSetting0.Group;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting5 = deleteSetting0.setKey("zZZZZ");
        java.lang.String str6 = deleteSetting0.Key;
        org.junit.Assert.assertNotNull(deleteSetting2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str3, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(deleteSetting5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zZZZZ" + "'", str6, "zZZZZ");
    }

    @Test
    public void test41961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41961");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putSpreadsheetTemplate0.AuditAttributes;
        putSpreadsheetTemplate0.CustomId = "2021.4.62.0";
        java.lang.String str4 = putSpreadsheetTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = specimenTemplate6.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate8.Preservative = preservativeType9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate8.setAuditAttributes(auditAttributes14);
        extendedAttributeDefinition5.AuditAttributes = auditAttributes14;
        putSpreadsheetTemplate0.AuditAttributes = auditAttributes14;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(specimenTemplate8);
        org.junit.Assert.assertTrue("'" + preservativeType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(specimenTemplate16);
    }

    @Test
    public void test41962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41962");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList3, samplingLocationGroupArray2);
        postAccessGroup1.SamplingLocationGroups = samplingLocationGroupList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup6 = postAccessGroup0.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation9 = postSamplingLocation7.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation10.setPlannedFieldResult(plannedFieldResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction13 = null;
        observation12.LabInstruction = labInstruction13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation12.setStatistics(observationStatistics15);
        java.time.OffsetDateTime offsetDateTime17 = observation16.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList18 = observation16.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation16.setObservedProperty(observedProperty19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade21 = observation20.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = labResultDetails22.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAuditAttributes(auditAttributes25);
        observation20.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation28 = postSamplingLocation9.setAuditAttributes(auditAttributes25);
        postAccessGroup0.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity33 = samplingPlanPlannedActivity31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = auditAttributes34.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity33.AuditAttributes = auditAttributes34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = samplingPlanPlannedActivity33.AuditAttributes;
        putAccessGroup30.AuditAttributes = auditAttributes38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup41 = putAccessGroup30.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = putAccessGroup30.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime43 = auditAttributes42.ModificationTime;
        postAccessGroup0.AuditAttributes = auditAttributes42;
        org.junit.Assert.assertNotNull(samplingLocationGroupArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(postAccessGroup6);
        org.junit.Assert.assertNotNull(postSamplingLocation9);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNull(importHistoryEventSimpleList18);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNull(resultGrade21);
        org.junit.Assert.assertNotNull(labResultDetails24);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(postSamplingLocation28);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity33);
        org.junit.Assert.assertNotNull(auditAttributes36);
        org.junit.Assert.assertNotNull(auditAttributes38);
        org.junit.Assert.assertNotNull(putAccessGroup41);
        org.junit.Assert.assertNotNull(auditAttributes42);
        org.junit.Assert.assertNull(offsetDateTime43);
    }

    @Test
    public void test41963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41963");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationHistoryV2 getObservationHistoryV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationHistoryV2();
        getObservationHistoryV2_0.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationHistoryV2 getObservationHistoryV2_4 = getObservationHistoryV2_0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationHistoryV2 getObservationHistoryV2_6 = getObservationHistoryV2_4.setId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNotNull(getObservationHistoryV2_4);
        org.junit.Assert.assertNotNull(getObservationHistoryV2_6);
    }

    @Test
    public void test41964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41964");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str1 = appliedTag0.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag3 = appliedTag0.setKey("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag5 = appliedTag0.setUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag7 = appliedTag0.setName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        appliedTag0.Key = "/AQUARIUS/Acquisition/v2";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(appliedTag3);
        org.junit.Assert.assertNotNull(appliedTag5);
        org.junit.Assert.assertNotNull(appliedTag7);
    }

    @Test
    public void test41965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41965");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        java.time.OffsetDateTime offsetDateTime8 = putObservationV2_2.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = plannedFieldResult9.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty11 = plannedFieldResult9.ObservedProperty;
        java.lang.String str12 = plannedFieldResult9.Id;
        java.lang.String str13 = plannedFieldResult9.getId();
        putObservationV2_2.PlannedFieldResult = plannedFieldResult9;
        java.lang.String str15 = putObservationV2_2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = putObservationV2_2.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen17 = putObservationV2_2.Specimen;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_19 = putObservationV2_2.setId("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(observedProperty11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(quantity16);
        org.junit.Assert.assertNull(specimen17);
        org.junit.Assert.assertNotNull(putObservationV2_19);
    }

    @Test
    public void test41966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41966");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Integer int3 = importSummaryObservation2.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str5 = importHistoryEventSimple4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple4.ImportType = importType6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation8 = importSummaryObservation2.setImportHistoryEventSimple(importHistoryEventSimple4);
        java.lang.Integer int9 = importSummaryObservation8.SkippedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary10.UpdateCount = (-1);
        java.lang.Integer int13 = observationImportSummary10.ExpectedCount;
        java.lang.String str14 = observationImportSummary10.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList16, importErrorArray15);
        observationImportSummary10.ImportJobErrors = importErrorList16;
        observationImportSummary10.NewCount = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str22 = importHistoryEventSimple21.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary23 = observationImportSummary10.setImportHistoryEventSimple(importHistoryEventSimple21);
        java.lang.String str24 = importHistoryEventSimple21.getFileName();
        importSummaryObservation8.ImportHistoryEventSimple = importHistoryEventSimple21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation27 = importSummaryObservation8.setNewCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation29 = importSummaryObservation8.setExpectedCount((java.lang.Integer) 2);
        importSummaryObservation29.SummaryReportText = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + importType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNotNull(importSummaryObservation8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(importErrorArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(observationImportSummary23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(importSummaryObservation27);
        org.junit.Assert.assertNotNull(importSummaryObservation29);
    }

    @Test
    public void test41967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41967");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        timeAlignedPoint8.DisplayValue8 = "https";
        java.lang.String str11 = timeAlignedPoint8.Method7;
        timeAlignedPoint8.Method8 = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint8.setQualifiers1("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str16 = timeAlignedPoint8.Qualifiers7;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test41968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41968");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        java.lang.String str1 = ratingModelDescription0.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription3 = ratingModelDescription0.setComment("-PT87591240H");
        java.lang.Boolean boolean4 = ratingModelDescription3.isPublish();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(ratingModelDescription3);
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test41969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41969");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = chartData0.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList3, chartDataPointArray2);
        chartData0.DataPoints = chartDataPointList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits6 = null;
        chartData0.UnitGroupWithUnits = unitGroupWithUnits6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        java.lang.String str11 = observedProperty8.getCasNumber();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList12 = observedProperty8.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData13 = chartData0.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits14 = null;
        chartData0.UnitGroupWithUnits = unitGroupWithUnits14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList17 = chartData16.DataPoints;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData19 = chartData16.setDepthUnitGroupWithUnits(unitGroupWithUnits18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData21 = chartData19.setDepthUnitGroupWithUnits(unitGroupWithUnits20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData23 = chartData21.setDepthUnitGroupWithUnits(unitGroupWithUnits22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation25 = chartData24.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = chartData26.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList29, chartDataPointArray28);
        chartData26.DataPoints = chartDataPointList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData32 = chartData24.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData33 = chartData21.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList29);
        chartData0.DataPoints = chartDataPointList29;
        org.junit.Assert.assertNull(observedProperty1);
        org.junit.Assert.assertNotNull(chartDataPointArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MinDuration" + "'", str11, "MinDuration");
        org.junit.Assert.assertNull(importHistoryEventSimpleList12);
        org.junit.Assert.assertNotNull(chartData13);
        org.junit.Assert.assertNull(chartDataPointList17);
        org.junit.Assert.assertNotNull(chartData19);
        org.junit.Assert.assertNotNull(chartData21);
        org.junit.Assert.assertNotNull(chartData23);
        org.junit.Assert.assertNull(samplingLocation25);
        org.junit.Assert.assertNull(observedProperty27);
        org.junit.Assert.assertNotNull(chartDataPointArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chartData32);
        org.junit.Assert.assertNotNull(chartData33);
    }

    @Test
    public void test41970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41970");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint2.Value;
        chartDataPoint2.MdlValueUnitCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint7 = chartDataPoint2.setNumericResultUnitCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint9 = chartDataPoint2.setObservedTime(offsetDateTime8);
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint11 = chartDataPoint9.setObservedTime(offsetDateTime10);
        java.lang.String str12 = chartDataPoint11.getMdlValueUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint14 = chartDataPoint11.setObservationId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = resultDetectionCondition15.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition18 = resultDetectionCondition15.setId("/AQUARIUS");
        java.lang.String str19 = resultDetectionCondition15.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition21 = resultDetectionCondition15.setDescription("POST");
        chartDataPoint11.ResultDetectionCondition = resultDetectionCondition15;
        chartDataPoint11.NumericResultUnitCustomId = "MinDuration";
        java.time.OffsetDateTime offsetDateTime25 = null;
        chartDataPoint11.ObservedTime = offsetDateTime25;
        java.lang.String str27 = chartDataPoint11.DepthUnitCustomId;
        chartDataPoint11.ObservationId = "multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****";
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(chartDataPoint7);
        org.junit.Assert.assertNotNull(chartDataPoint9);
        org.junit.Assert.assertNotNull(chartDataPoint11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str12, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(chartDataPoint14);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(resultDetectionCondition18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(resultDetectionCondition21);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test41971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41971");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        activityTemplate0.AuditAttributes = auditAttributes1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str4 = putActivityTemplate3.getId();
        java.lang.String str5 = putActivityTemplate3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate9 = putActivityTemplate3.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate9.Medium = mediumType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate12 = activityTemplate0.setMedium(mediumType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate13.Medium = mediumType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate16 = activityTemplate0.setMedium(mediumType14);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putActivityTemplate9);
        org.junit.Assert.assertTrue("'" + mediumType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate12);
        org.junit.Assert.assertTrue("'" + mediumType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate16);
    }

    @Test
    public void test41972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41972");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod2 = timeSeriesThresholdPeriod0.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod4 = timeSeriesThresholdPeriod2.setReferenceValue((java.lang.Double) 0.0d);
        timeSeriesThresholdPeriod4.ReferenceValue = 100.0d;
        java.time.Instant instant7 = timeSeriesThresholdPeriod4.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod9 = timeSeriesThresholdPeriod4.setReferenceValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = correctionOperation10.setType(correctionType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation10.OperationType = metadataChangeOperationType13;
        java.time.Instant instant15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation16 = correctionOperation10.setDateAppliedUtc(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType18 = methodOperation17.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation20 = methodOperation17.setOperationType(metadataChangeOperationType19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation21 = correctionOperation16.setOperationType(metadataChangeOperationType19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation24 = correctionOperation22.setType(correctionType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation22.OperationType = metadataChangeOperationType25;
        java.time.Instant instant27 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation28 = correctionOperation22.setDateAppliedUtc(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType30 = methodOperation29.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation32 = methodOperation29.setOperationType(metadataChangeOperationType31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation33 = correctionOperation28.setOperationType(metadataChangeOperationType31);
        correctionOperation16.OperationType = metadataChangeOperationType31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType36 = trendLineAnalysisServiceRequest35.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark39 = locationRemark37.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        locationRemark39.FromTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark45 = locationRemark39.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod48 = timeSeriesThresholdPeriod46.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription51 = locationDescription49.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType53 = null;
        controlConditionActivity52.ControlCleaned = controlCleanedType53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        controlConditionActivity52.DateCleaned = instant56;
        locationDescription51.LastModified = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod60 = timeSeriesThresholdPeriod48.setAppliedTime(instant56);
        locationRemark45.ToTime = instant56;
        trendLineAnalysisServiceRequest35.QueryFrom = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation63 = correctionOperation16.setDateAppliedUtc(instant56);
        timeSeriesThresholdPeriod4.AppliedTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str66 = ratingModelEffectiveShiftsServiceRequest65.RatingModelIdentifier;
        java.time.Instant instant67 = ratingModelEffectiveShiftsServiceRequest65.QueryTo;
        ratingModelEffectiveShiftsServiceRequest65.TimeSeriesUniqueId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList71 = getSpecimens70.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay73 = dischargeSummary72.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay74 = dischargeSummary72.Discharge;
        java.lang.Integer int75 = dischargeSummary72.getGradeCode();
        java.lang.String str76 = dischargeSummary72.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary81 = dischargeSummary79.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse84 = locationDescriptionListServiceResponse82.setNextToken(instant83);
        dischargeSummary79.MeasurementTime = instant83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse86 = locationDescriptionListServiceResponse78.setNextToken(instant83);
        java.time.Instant instant87 = locationDescriptionListServiceResponse78.getNextToken();
        attachment77.DateLastAccessed = instant87;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary89 = dischargeSummary72.setMeasurementStartTime(instant87);
        getSpecimens70.Before = instant87;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest91 = ratingModelEffectiveShiftsServiceRequest65.setQueryTo(instant87);
        java.time.Instant instant92 = ratingModelEffectiveShiftsServiceRequest91.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod93 = timeSeriesThresholdPeriod4.setStartTime(instant92);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod2);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod4);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod9);
        org.junit.Assert.assertTrue("'" + correctionType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation12);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation16);
        org.junit.Assert.assertNull(metadataChangeOperationType18);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation20);
        org.junit.Assert.assertNotNull(correctionOperation21);
        org.junit.Assert.assertTrue("'" + correctionType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation24);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation28);
        org.junit.Assert.assertNull(metadataChangeOperationType30);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation32);
        org.junit.Assert.assertNotNull(correctionOperation33);
        org.junit.Assert.assertNull(trendLineAnalysisType36);
        org.junit.Assert.assertNotNull(locationRemark39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(locationRemark45);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod48);
        org.junit.Assert.assertNotNull(locationDescription51);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod60);
        org.junit.Assert.assertNotNull(correctionOperation63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(instant67);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(quantityWithDisplay73);
        org.junit.Assert.assertNull(quantityWithDisplay74);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(dischargeSummary81);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse84);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(dischargeSummary89);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod93);
    }

    @Test
    public void test41973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41973");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit0.setEndTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str39 = metricConfiguration38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty40.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration43 = metricConfiguration38.setObservedProperty(observedProperty40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType44 = observedProperty40.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup46 = postObservedProperty45.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = null;
        quantity47.Unit = unit48;
        postObservedProperty45.LowerLimit = quantity47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = postObservedProperty45.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = quantity51.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = observedProperty40.setUpperLimit(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = samplingLocation37.setElevation(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit55 = putFieldVisit36.setSamplingLocation(samplingLocation37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple56 = putFieldVisit36.getFieldTrip();
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit58 = putFieldVisit36.setEndTime(offsetDateTime57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple61 = fieldTripSimple59.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit62 = putFieldVisit36.setFieldTrip(fieldTripSimple59);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList63 = null;
        putFieldVisit36.Attachments = domainObjectAttachmentList63;
        java.lang.Object obj65 = putFieldVisit36.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit36.setId("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(metricConfiguration43);
        org.junit.Assert.assertNull(resultType44);
        org.junit.Assert.assertNull(unitGroup46);
        org.junit.Assert.assertNotNull(quantity51);
        org.junit.Assert.assertNull(unit52);
        org.junit.Assert.assertNotNull(observedProperty53);
        org.junit.Assert.assertNotNull(samplingLocation54);
        org.junit.Assert.assertNotNull(putFieldVisit55);
        org.junit.Assert.assertNull(fieldTripSimple56);
        org.junit.Assert.assertNotNull(putFieldVisit58);
        org.junit.Assert.assertNotNull(fieldTripSimple61);
        org.junit.Assert.assertNotNull(putFieldVisit62);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertNotNull(putFieldVisit67);
    }

    @Test
    public void test41974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41974");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Object obj3 = putProject0.getResponseType();
        putProject0.ScopeStatement = "hi!";
        java.lang.String str6 = putProject0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType7 = putProject0.getType();
        java.lang.String str8 = putProject0.getName();
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(projectType7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test41975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41975");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer fieldNamer6 = new com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient8 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "0001-01-01T00:00:00.000Z", objMap5, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, false);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient10 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("/AQUARIUS/Acquisition/v2", "hi!:///AQUARIUS/Provisioning/v1", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, false);
        net.servicestack.client.ExceptionFilter exceptionFilter11 = null;
        sdkServiceClient10.ExceptionFilter = exceptionFilter11;
        boolean boolean13 = sdkServiceClient10.getAlwaysSendBasicAuthHeaders();
        sdkServiceClient10.clearCookies();
        org.junit.Assert.assertNotNull(sdkServiceClient8);
        org.junit.Assert.assertNotNull(sdkServiceClient10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test41976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41976");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList74 = postSamplingLocation0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation76 = postSamplingLocation0.setLatitude("/AQUARIUS/Acquisition/v2");
        java.lang.String str77 = postSamplingLocation76.VerticalCollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList78 = postSamplingLocation76.Standards;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation80 = postSamplingLocation76.setType(locationType79);
        java.lang.String str81 = locationType79.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType83 = locationType79.setCustomId("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType85 = locationType83.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNull(importHistoryEventSimpleList74);
        org.junit.Assert.assertNotNull(postSamplingLocation76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(standardSimpleList78);
        org.junit.Assert.assertNotNull(postSamplingLocation80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(locationType83);
        org.junit.Assert.assertNotNull(locationType85);
    }

    @Test
    public void test41977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41977");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int1 = samplingLocationImportSummary0.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList2 = samplingLocationImportSummary0.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = samplingLocationImportSummary0.getImportJobErrors();
        samplingLocationImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary7 = samplingLocationImportSummary0.setSummaryReportText("http://MaxDurationhttp/json/reply/Float");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList8 = samplingLocationImportSummary7.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple9 = samplingLocationImportSummary7.getImportHistoryEventSimple();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(importItemSamplingLocationList2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary7);
        org.junit.Assert.assertNull(importItemSamplingLocationList8);
        org.junit.Assert.assertNull(importHistoryEventSimple9);
    }

    @Test
    public void test41978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41978");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = labInstruction0.setAnalysisMethod(analysisMethod1);
        java.lang.String str3 = labInstruction0.getAnalysisComment();
        java.lang.String str4 = labInstruction0.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = labInstruction0.setPreparationMethod("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        labInstruction6.HoldingTime = "";
        org.junit.Assert.assertNotNull(labInstruction2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(labInstruction6);
    }

    @Test
    public void test41979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41979");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = sensorBase2.setManufacturer("hi!");
        java.lang.String str5 = sensorBase4.getComments();
        java.lang.String str6 = sensorBase4.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase8 = sensorBase4.setParameterId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.lang.String str9 = sensorBase4.UnitId;
        sensorBase4.ParameterId = "/AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(sensorBase8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test41980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41980");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList1 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType2 = fieldVisit0.PlanningStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple3 = fieldVisit0.FieldTrip;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList4 = fieldVisit0.PlannedFieldResults;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList5 = fieldVisit0.getPlannedActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime7 = fieldTripBasic6.getEndTime();
        java.lang.String str8 = fieldTripBasic6.Participants;
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic10 = fieldTripBasic6.setEndTime(offsetDateTime9);
        java.lang.String str11 = fieldTripBasic10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType13 = spreadsheetTemplate12.getType();
        spreadsheetTemplate12.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType16 = spreadsheetTemplate12.Type;
        spreadsheetTemplate12.CustomId = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        java.lang.String str19 = spreadsheetTemplate12.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        postLabReport20.Id = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime24 = putFieldTrip23.StartTime;
        java.time.OffsetDateTime offsetDateTime25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip26 = putFieldTrip23.setStartTime(offsetDateTime25);
        java.time.OffsetDateTime offsetDateTime27 = null;
        putFieldTrip23.StartTime = offsetDateTime27;
        java.time.OffsetDateTime offsetDateTime29 = null;
        putFieldTrip23.StartTime = offsetDateTime29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str33 = domainObjectAttachment32.getId();
        java.lang.String str34 = domainObjectAttachment32.getId();
        domainObjectAttachment32.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = domainObjectAttachment32.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = domainObjectAttachment38.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        java.lang.String str43 = domainObjectAttachment41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList45, domainObjectAttachmentArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit47 = fieldVisit31.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList45);
        putFieldTrip23.Attachments = domainObjectAttachmentList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport49 = postLabReport20.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList45);
        spreadsheetTemplate12.Attachments = domainObjectAttachmentList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic51 = fieldTripBasic10.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit52 = fieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList45);
        java.lang.String str53 = fieldVisit0.Id;
        org.junit.Assert.assertNull(domainObjectAttachmentList1);
        org.junit.Assert.assertNull(planningStatusType2);
        org.junit.Assert.assertNull(fieldTripSimple3);
        org.junit.Assert.assertNull(plannedFieldResultList4);
        org.junit.Assert.assertNull(plannedActivityList5);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(fieldTripBasic10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(spreadsheetTemplateType13);
        org.junit.Assert.assertNull(spreadsheetTemplateType16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****" + "'", str19, "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        org.junit.Assert.assertNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(putFieldTrip26);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(domainObjectAttachment38);
        org.junit.Assert.assertNotNull(domainObjectAttachment40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(fieldVisit47);
        org.junit.Assert.assertNotNull(postLabReport49);
        org.junit.Assert.assertNotNull(fieldTripBasic51);
        org.junit.Assert.assertNotNull(fieldVisit52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test41981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41981");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.Boolean boolean2 = role0.CanAddData;
        java.lang.Boolean boolean3 = role0.CanEditAppendConfigurations;
        java.lang.Boolean boolean4 = role0.isCanEditLocationDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role6 = role0.setCanEditLocationDetails((java.lang.Boolean) false);
        java.lang.Boolean boolean7 = role6.isCanRemoveAppendConfigurations();
        java.lang.Boolean boolean8 = role6.isCanAddData();
        role6.CanAddOrRemoveLocations = false;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(role6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test41982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41982");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str4 = postUnitGroup0.getBaseUnitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup6 = postUnitGroup0.setGroupIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.Integer int7 = postUnitGroup6.SubstanceDimension;
        postUnitGroup6.IntensityDimension = 7;
        postUnitGroup6.BaseUnitSingularName = "zZZZZ";
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(postUnitGroup6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test41983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41983");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        java.lang.Boolean boolean1 = postRole0.isCanRemoveFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long4 = roleApprovalTransition3.getToApprovalLevel();
        java.lang.Long long5 = roleApprovalTransition3.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long7 = roleApprovalTransition6.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition10 = roleApprovalTransition8.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition13 = roleApprovalTransition11.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition15 = roleApprovalTransition11.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long17 = roleApprovalTransition16.getToApprovalLevel();
        java.lang.Long long18 = roleApprovalTransition16.ToApprovalLevel;
        java.lang.Long long19 = roleApprovalTransition16.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long21 = roleApprovalTransition20.getToApprovalLevel();
        java.lang.Long long22 = roleApprovalTransition20.ToApprovalLevel;
        java.lang.Long long23 = roleApprovalTransition20.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition3, roleApprovalTransition6, roleApprovalTransition10, roleApprovalTransition11, roleApprovalTransition16, roleApprovalTransition20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList25, roleApprovalTransitionArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase27 = postRole2.setRoleApprovalTransitions(roleApprovalTransitionList25);
        java.lang.Boolean boolean28 = postRole2.isCanAddAppendConfigurations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase30 = postRole2.setCanEditData((java.lang.Boolean) true);
        java.lang.Boolean boolean31 = postRole2.CanAddAppendConfigurations;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList32 = postRole2.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase33 = postRole0.setRoleApprovalTransitions(roleApprovalTransitionList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase35 = roleBase33.setCanEditData((java.lang.Boolean) false);
        roleBase35.CanAddAppendConfigurations = true;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(long4);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNull(long7);
        org.junit.Assert.assertNotNull(roleApprovalTransition10);
        org.junit.Assert.assertNotNull(roleApprovalTransition13);
        org.junit.Assert.assertNotNull(roleApprovalTransition15);
        org.junit.Assert.assertNull(long17);
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long21);
        org.junit.Assert.assertNull(long22);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(roleBase27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(roleBase30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList32);
        org.junit.Assert.assertNotNull(roleBase33);
        org.junit.Assert.assertNotNull(roleBase35);
    }

    @Test
    public void test41984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41984");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        java.time.Instant instant2 = getObservationsV2_0.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        dischargeSummary5.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse4.setNextToken(instant9);
        java.time.Instant instant13 = locationDescriptionListServiceResponse4.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = getActivities3.setToStartTime(instant13);
        java.lang.String str15 = getActivities14.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList17 = getObservationsV2_16.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        getObservationsV2_16.ResultGrades = strList29;
        getActivities14.Media = strList29;
        getObservationsV2_0.AnalysisMethodSimpleIds = strList29;
        java.util.List<java.lang.String> strList36 = getObservationsV2_0.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType38 = timeSeriesPoint37.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str40 = setting39.getKey();
        java.lang.String str41 = setting39.getDescription();
        java.lang.String str42 = setting39.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary43.setMeanGageHeightMethod("hi!");
        java.lang.String str46 = dischargeSummary45.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary45.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj50 = timeAlignedDataServiceRequest49.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant52 = sensor51.getLastModifiedUtc();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor54 = sensor51.setLastModifiedUtc(instant53);
        java.time.Instant instant55 = sensor51.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest49.setQueryTo(instant55);
        dischargeSummary48.MeasurementStartTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting58 = setting39.setLastModifiedTime(instant55);
        java.time.Instant instant59 = setting39.getLastModifiedTime();
        timeSeriesPoint37.Time = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType62 = timeSeriesPoint61.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType63 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint64 = timeSeriesPoint61.setType(pointType63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint65 = timeSeriesPoint37.setType(pointType63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint67 = timeSeriesPoint37.setGradeCode((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType68 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Unknown;
        timeSeriesPoint67.Type = pointType68;
        java.time.Instant instant70 = timeSeriesPoint67.getTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_0.setStartObservedTime(instant70);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(getActivities14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(pointType38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(sensor54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(setting58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNull(pointType62);
        org.junit.Assert.assertTrue("'" + pointType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType63.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNotNull(timeSeriesPoint64);
        org.junit.Assert.assertNotNull(timeSeriesPoint65);
        org.junit.Assert.assertNotNull(timeSeriesPoint67);
        org.junit.Assert.assertTrue("'" + pointType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Unknown + "'", pointType68.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Unknown));
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
    }

    @Test
    public void test41985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41985");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.Boolean boolean3 = tag2.AppliesToLocationNotes;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test41986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41986");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        project0.Type = projectType2;
        java.time.OffsetDateTime offsetDateTime4 = project0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project6 = project0.setScopeStatement("/AQUARIUS/Acquisition/v2");
        java.lang.String str7 = project0.ScopeStatement;
        java.time.OffsetDateTime offsetDateTime8 = null;
        project0.StartTime = offsetDateTime8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        categoricalValue10.AuditAttributes = auditAttributes11;
        categoricalValue10.CustomId = "9999-12-31T23:59:59.999Z";
        java.lang.String str15 = categoricalValue10.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip18 = postFieldTrip16.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.OffsetDateTime offsetDateTime19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip20 = postFieldTrip16.setStartTime(offsetDateTime19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip22 = postFieldTrip20.setId("'.'SSSSSSS");
        java.time.OffsetDateTime offsetDateTime23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip24 = postFieldTrip20.setEndTime(offsetDateTime23);
        java.lang.String str25 = postFieldTrip24.Participants;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = postFieldTrip24.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup29 = putAnalyticalGroup27.setAnalyticalGroupItems(analyticalGroupItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup31 = putAnalyticalGroup29.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup33 = putAnalyticalGroup31.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str34 = putAnalyticalGroup31.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup36 = putAnalyticalGroup31.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup38 = putAnalyticalGroup36.setId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_41 = putObservationV2_39.setObservedProperty(observedProperty40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity42 = putObservationV2_41.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_44 = putObservationV2_41.setNullMeasureQualifier(nullMeasureQualifier43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction47 = labInstruction45.setAnalysisMethod(analysisMethod46);
        putObservationV2_41.LabInstruction = labInstruction45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = specimenTemplate50.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType53 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate52.Preservative = preservativeType53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails59 = labResultDetails57.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate60 = specimenTemplate52.setAuditAttributes(auditAttributes58);
        extendedAttributeDefinition49.AuditAttributes = auditAttributes58;
        java.lang.Boolean boolean62 = extendedAttributeDefinition49.Mandatory;
        java.lang.Boolean boolean63 = extendedAttributeDefinition49.Mandatory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = extendedAttributeDefinition49.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_65 = putObservationV2_41.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup66 = putAnalyticalGroup36.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip67 = postFieldTrip24.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue68 = categoricalValue10.setAuditAttributes(auditAttributes64);
        project0.AuditAttributes = auditAttributes64;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + projectType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(project6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(postFieldTrip18);
        org.junit.Assert.assertNotNull(postFieldTrip20);
        org.junit.Assert.assertNotNull(postFieldTrip22);
        org.junit.Assert.assertNotNull(postFieldTrip24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNotNull(putAnalyticalGroup29);
        org.junit.Assert.assertNotNull(putAnalyticalGroup31);
        org.junit.Assert.assertNotNull(putAnalyticalGroup33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str34, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(putAnalyticalGroup36);
        org.junit.Assert.assertNotNull(putAnalyticalGroup38);
        org.junit.Assert.assertNotNull(putObservationV2_41);
        org.junit.Assert.assertNull(activity42);
        org.junit.Assert.assertNotNull(putObservationV2_44);
        org.junit.Assert.assertNotNull(labInstruction47);
        org.junit.Assert.assertNotNull(specimenTemplate52);
        org.junit.Assert.assertTrue("'" + preservativeType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType53.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNotNull(labResultDetails59);
        org.junit.Assert.assertNotNull(specimenTemplate60);
        org.junit.Assert.assertNull(boolean62);
        org.junit.Assert.assertNull(boolean63);
        org.junit.Assert.assertNotNull(auditAttributes64);
        org.junit.Assert.assertNotNull(putObservationV2_65);
        org.junit.Assert.assertNotNull(putAnalyticalGroup66);
        org.junit.Assert.assertNotNull(postFieldTrip67);
        org.junit.Assert.assertNotNull(categoricalValue68);
    }

    @Test
    public void test41987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41987");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        java.lang.String str18 = timeSeries0.Description;
        timeSeries0.UtcOffset = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        timeSeries0.SubLocationIdentifier = "/AQUARIUS";
        timeSeries0.ComputationPeriodIdentifier = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test41988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41988");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay24 = doubleWithDisplay22.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str25 = doubleWithDisplay24.getDisplay();
        java.lang.String str26 = doubleWithDisplay24.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity27 = adcpDischargeActivity21.setDischargeCoefficientVariation(doubleWithDisplay24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity29 = adcpDischargeActivity27.setTopEstimateMethod("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = adcpDischargeActivity29.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity32 = adcpDischargeActivity29.setNumberOfTransects((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement33 = adcpDischargeActivity29.DischargeChannelMeasurement;
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNotNull(doubleWithDisplay24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(adcpDischargeActivity27);
        org.junit.Assert.assertNotNull(adcpDischargeActivity29);
        org.junit.Assert.assertNull(doubleWithDisplay30);
        org.junit.Assert.assertNotNull(adcpDischargeActivity32);
        org.junit.Assert.assertNull(dischargeChannelMeasurement33);
    }

    @Test
    public void test41989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41989");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute2 = getExtendedAttribute0.setId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute4 = getExtendedAttribute2.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute6 = getExtendedAttribute2.setId("ZZZZZ");
        java.lang.Object obj7 = getExtendedAttribute2.getResponseType();
        org.junit.Assert.assertNotNull(getExtendedAttribute2);
        org.junit.Assert.assertNotNull(getExtendedAttribute4);
        org.junit.Assert.assertNotNull(getExtendedAttribute6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
    }

    @Test
    public void test41990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setDepthValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        java.util.List<java.lang.String> strList51 = getObservationsV2_36.getLabReportIds();
        importItem35.Errors = getObservationsV2_36;
        java.lang.Object obj53 = importItem35.getExistingItem();
        java.util.List<java.lang.String> strList54 = importItem35.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        java.util.List<java.lang.String> strList71 = getObservationsV2_56.getLabReportIds();
        importItem55.Errors = getObservationsV2_56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList74 = getObservationsV2_73.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        getObservationsV2_75.SpecimenIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray85 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags88 = putLocationTags81.setTagUniqueIds(strList86);
        getObservationsV2_75.QualityControlTypes = strList86;
        getObservationsV2_73.ResultGrades = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem91 = importItem55.setFields((java.util.List<java.lang.String>) strList86);
        importItem35.Fields = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_93 = putBulkEditResultGradesV2_34.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList86);
        putBulkEditResultGradesV2_93.FieldVisitId = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_97 = putBulkEditResultGradesV2_93.setTargetResultGrade("http://MaxDurationhttp/json/reply/Double");
        java.util.List<java.lang.String> strList98 = putBulkEditResultGradesV2_93.getAnalysisMethodIds();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(putLocationTags88);
        org.junit.Assert.assertNotNull(importItem91);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_93);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_97);
        org.junit.Assert.assertNull(strList98);
    }

    @Test
    public void test41991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41991");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter2 = filter0.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter4 = filter2.setId("POST");
        filter4.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = filter4.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter9 = filter4.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter11 = filter4.setCustomId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime13 = postFilter12.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = postFilter12.getAuditAttributes();
        postFilter12.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime17 = postFilter12.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter18.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList22, samplingLocationArray21);
        postFilter18.SamplingLocations = samplingLocationList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter25 = postFilter12.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList22);
        postFilter25.CustomId = "POST";
        java.time.OffsetDateTime offsetDateTime28 = postFilter25.getStartTime();
        java.time.OffsetDateTime offsetDateTime29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter30 = postFilter25.setStartTime(offsetDateTime29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter33 = postFilter31.setCustomId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList34 = postFilter33.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime35 = postFilter33.StartTime;
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter37 = postFilter33.setEndTime(offsetDateTime36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter40 = filter38.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter42 = filter40.setId("POST");
        filter42.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList45 = filter42.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter47 = filter42.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod50 = postLabAnalysisMethod48.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList52, observedPropertyArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod54 = postLabAnalysisMethod50.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod56 = postLabAnalysisMethod50.setAuditAttributes(auditAttributes55);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList57 = postLabAnalysisMethod56.getObservedProperties();
        filter47.ObservedProperties = observedPropertyList57;
        postFilter37.ObservedProperties = observedPropertyList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter60 = postFilter25.setObservedProperties(observedPropertyList57);
        filter4.ObservedProperties = observedPropertyList57;
        java.time.OffsetDateTime offsetDateTime62 = filter4.StartTime;
        org.junit.Assert.assertNotNull(filter2);
        org.junit.Assert.assertNotNull(filter4);
        org.junit.Assert.assertNull(observedPropertyList7);
        org.junit.Assert.assertNotNull(filter9);
        org.junit.Assert.assertNotNull(filter11);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(samplingLocationArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(postFilter25);
        org.junit.Assert.assertNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(postFilter30);
        org.junit.Assert.assertNotNull(postFilter33);
        org.junit.Assert.assertNull(observedPropertyList34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(postFilter37);
        org.junit.Assert.assertNotNull(filter40);
        org.junit.Assert.assertNotNull(filter42);
        org.junit.Assert.assertNull(observedPropertyList45);
        org.junit.Assert.assertNotNull(filter47);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod50);
        org.junit.Assert.assertNotNull(observedPropertyArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod54);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod56);
        org.junit.Assert.assertNotNull(observedPropertyList57);
        org.junit.Assert.assertNotNull(postFilter60);
        org.junit.Assert.assertNull(offsetDateTime62);
    }

    @Test
    public void test41992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41992");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory2 = getUnitGroupHistory0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory4 = getUnitGroupHistory2.setId("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        org.junit.Assert.assertNotNull(getUnitGroupHistory2);
        org.junit.Assert.assertNotNull(getUnitGroupHistory4);
    }

    @Test
    public void test41993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41993");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase2 = locationDatumPeriod0.setComment("'.'SSSSSSS");
        java.lang.String str3 = locationDatumPeriod0.getAppliedByUser();
        java.time.Instant instant4 = locationDatumPeriod0.getValidFrom();
        java.lang.Double double5 = locationDatumPeriod0.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum6 = locationDatumPeriod0.getReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str8 = referencePointPeriod7.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection9 = referencePointPeriod7.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod11 = referencePointPeriod7.setAppliedByUser("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase14 = locationDatumPeriod12.setComment("'.'SSSSSSS");
        java.lang.String str15 = locationDatumPeriod12.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase17 = locationDatumPeriod12.setComment("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom;
        locationDatumPeriodBase17.MeasurementDirection = measurementDirection18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase20 = referencePointPeriod11.setMeasurementDirection(measurementDirection18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection21 = referencePointPeriodBase20.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase22 = locationDatumPeriod0.setMeasurementDirection(measurementDirection21);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(standardReferenceDatum6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(measurementDirection9);
        org.junit.Assert.assertNotNull(referencePointPeriod11);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase17);
        org.junit.Assert.assertTrue("'" + measurementDirection18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom + "'", measurementDirection18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom));
        org.junit.Assert.assertNotNull(referencePointPeriodBase20);
        org.junit.Assert.assertTrue("'" + measurementDirection21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom + "'", measurementDirection21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom));
        org.junit.Assert.assertNotNull(locationDatumPeriodBase22);
    }

    @Test
    public void test41994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41994");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR;
        importProcessorTransactionStatusResponse0.ImportProcessorTransactionStatus = importProcessorTransactionStatusType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse4 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType5 = importProcessorTransactionStatusResponse0.getImportProcessorTransactionStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.PENDING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse7 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType6);
        java.lang.String str8 = importProcessorTransactionStatusResponse0.getId();
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS + "'", importProcessorTransactionStatusType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse4);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS + "'", importProcessorTransactionStatusType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS));
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.PENDING + "'", importProcessorTransactionStatusType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.PENDING));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test41995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41995");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.FieldNamer fieldNamer6 = new com.aquaticinformatics.aquarius.sdk.samples.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient8 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("MaxDuration", "http", objMap5, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, false);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient10 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("/AQUARIUS/Acquisition/v2", "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit13 = unit11.setBaseOffset((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit15 = unit11.setSymbol("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = sdkServiceClient10.createUrl((java.lang.Object) unit15, "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sdkServiceClient8);
        org.junit.Assert.assertNotNull(sdkServiceClient10);
        org.junit.Assert.assertNotNull(unit13);
        org.junit.Assert.assertNotNull(unit15);
    }

    @Test
    public void test41996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41996");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.LabResultLaboratoryIds;
        getObservationsV2_6.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int13 = getObservationsV2_6.Limit;
        java.time.Instant instant14 = getObservationsV2_6.EndModificationTime;
        getObservationsV2_6.DepthValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str18 = getChartDataV2_17.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = getChartDataV2_17.setFilterId("");
        java.util.List<java.lang.String> strList21 = getChartDataV2_17.ResultGrades;
        getChartDataV2_17.MinNumericResultValue = 100.0d;
        java.lang.Double double24 = getChartDataV2_17.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        getChartDataV2_17.EndObservedTime = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_6.setStartModificationTime(instant29);
        java.util.List<java.lang.String> strList34 = getObservationsV2_6.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(getChartDataV2_20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(double24);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(strList34);
    }

    @Test
    public void test41997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41997");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple();
        java.lang.Integer int1 = analyticalGroupSimple0.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple3 = analyticalGroupSimple0.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 10);
        analyticalGroupSimple0.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimpleType analyticalGroupSimpleType6 = null;
        analyticalGroupSimple0.Type = analyticalGroupSimpleType6;
        analyticalGroupSimple0.Name = "MinDuration";
        java.lang.String str10 = analyticalGroupSimple0.getName();
        analyticalGroupSimple0.NumberOfObservedPropertiesInGroupItems = 2;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(analyticalGroupSimple3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MinDuration" + "'", str10, "MinDuration");
    }

    @Test
    public void test41998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41998");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = locationGroupType2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType5 = locationGroupType2.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup0.LocationGroupType = locationGroupType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType8 = locationGroupType5.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList13, observedPropertyArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = postLabAnalysisMethod11.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes16);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = postLabAnalysisMethod17.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier21 = putNullMeasureQualifier19.setDescription("");
        putNullMeasureQualifier19.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str25 = standardDefinition24.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime27 = putSchedule26.StartDate;
        java.time.OffsetDateTime offsetDateTime28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule26.setEndDate(offsetDateTime28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = putSchedule29.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime31 = null;
        putSchedule29.LastGenerationDate = offsetDateTime31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType33 = putSchedule29.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = plannedFieldResult34.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails38 = labResultDetails36.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails40 = labResultDetails38.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult41 = plannedFieldResult34.setAuditAttributes(auditAttributes39);
        putSchedule29.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition43 = standardDefinition24.setAuditAttributes(auditAttributes39);
        java.time.OffsetDateTime offsetDateTime44 = auditAttributes39.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier45 = putNullMeasureQualifier19.setAuditAttributes(auditAttributes39);
        postLabAnalysisMethod17.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType47 = locationGroupType5.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType49 = locationGroupType5.setCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType51 = locationGroupType49.setCustomId("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(locationGroupType5);
        org.junit.Assert.assertNotNull(locationGroupType8);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNotNull(observedPropertyArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod15);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(observedPropertyList18);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNull(auditAttributes30);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType33);
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNotNull(labResultDetails38);
        org.junit.Assert.assertNotNull(labResultDetails40);
        org.junit.Assert.assertNotNull(plannedFieldResult41);
        org.junit.Assert.assertNotNull(standardDefinition43);
        org.junit.Assert.assertNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier45);
        org.junit.Assert.assertNotNull(locationGroupType47);
        org.junit.Assert.assertNotNull(locationGroupType49);
        org.junit.Assert.assertNotNull(locationGroupType51);
    }

    @Test
    public void test41999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test41999");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin();
        java.lang.Integer int1 = putFieldDataPlugin0.getPluginPriority();
        putFieldDataPlugin0.IsEnabled = true;
        java.lang.Boolean boolean4 = putFieldDataPlugin0.IsEnabled;
        putFieldDataPlugin0.PluginPriority = 100;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFieldDataPlugin putFieldDataPlugin8 = putFieldDataPlugin0.setPluginPriority((java.lang.Integer) 0);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(putFieldDataPlugin8);
    }

    @Test
    public void test42000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest83.test42000");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup2 = samplingLocationGroup0.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = samplingLocationGroup2.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = samplingLocationGroup2.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup7 = samplingLocationGroup2.setName("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = samplingLocationGroup2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit9.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str12 = postFieldVisit9.Participants;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = plannedFieldResult13.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult20 = plannedFieldResult13.setAuditAttributes(auditAttributes18);
        postFieldVisit9.AuditAttributes = auditAttributes18;
        samplingLocationGroup2.AuditAttributes = auditAttributes18;
        org.junit.Assert.assertNotNull(samplingLocationGroup2);
        org.junit.Assert.assertNotNull(samplingLocationGroup4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(samplingLocationGroup7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str12, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(plannedFieldResult20);
    }
}

