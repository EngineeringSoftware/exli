import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest113 {

    public static boolean debug = false;

    @Test
    public void test56501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56501");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFoldersResponse locationFoldersResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFoldersResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder> locationFolderList1 = locationFoldersResponse0.getResults();
        org.junit.Assert.assertNull(locationFolderList1);
    }

    @Test
    public void test56502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56502");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase2 = roleFlattened0.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean3 = roleFlattened0.isCanAddOrRemoveLocations();
        java.lang.String str4 = roleFlattened0.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase6 = roleFlattened0.setCanReadData((java.lang.Boolean) true);
        java.lang.String str7 = roleFlattenedBase6.getName();
        roleFlattenedBase6.CanRemoveFieldVisits = true;
        org.junit.Assert.assertNotNull(roleFlattenedBase2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(roleFlattenedBase6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56503");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        postSamplingLocationGroup0.Id = "POST";
        postSamplingLocationGroup0.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str6 = postSamplingLocationGroup0.Id;
        postSamplingLocationGroup0.Description = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
    }

    @Test
    public void test56504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56504");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        java.lang.String str1 = putTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries3 = putTimeSeries0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str4 = putTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries6 = putTimeSeries0.setDescription("/AQUARIUS/Acquisition/v2");
        java.lang.String str7 = putTimeSeries0.getTimeSeriesUniqueId();
        putTimeSeries0.SubLocationIdentifier = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putTimeSeries3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putTimeSeries6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56505");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        java.lang.String str3 = postTaxon0.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setScientificName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon7 = postTaxon5.setItisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon8.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str11 = putTaxon8.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate13.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate15.Preservative = preservativeType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate15.setAuditAttributes(auditAttributes21);
        extendedAttributeDefinition12.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon25 = putTaxon8.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon26.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str29 = putTaxon26.getComment();
        putTaxon26.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType33 = postObservedProperty32.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation35.setCategoricalResult(categoricalResult38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41, importHistoryEventSimpleArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation35.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        observedProperty34.ImportHistoryEventSimples = importHistoryEventSimpleList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = postObservedProperty32.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon46 = putTaxon26.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon47 = putTaxon25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon48 = postTaxon5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation49.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation53 = observation49.setCategoricalResult(categoricalResult52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList55 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList55, importHistoryEventSimpleArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation57 = observation49.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon58 = postTaxon48.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList55);
        java.lang.String str59 = postTaxon58.getCommonName();
        java.lang.String str60 = postTaxon58.getScientificName();
        postTaxon58.Comment = "http://MaxDurationhttp/json/reply/Float";
        java.lang.String str63 = postTaxon58.ParentId;
        java.lang.String str64 = postTaxon58.Source;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(postTaxon7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertTrue("'" + preservativeType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertNotNull(putTaxon25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(analysisType33);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(postObservedProperty45);
        org.junit.Assert.assertNotNull(putTaxon46);
        org.junit.Assert.assertNotNull(putTaxon47);
        org.junit.Assert.assertNotNull(postTaxon48);
        org.junit.Assert.assertNotNull(observation53);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(observation57);
        org.junit.Assert.assertNotNull(postTaxon58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "http" + "'", str60, "http");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test56506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56506");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        java.util.List<java.lang.String> strList2 = putBulkEditResultGradesV2_0.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_8 = putBulkEditResultGradesV2_0.setStartModificationTime(instant6);
        java.lang.String str9 = putBulkEditResultGradesV2_8.getSort();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test56507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56507");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule6 = schedule4.setRecurrenceType(recurrenceType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule8 = schedule6.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 4);
        java.time.OffsetDateTime offsetDateTime9 = null;
        schedule6.LastGenerationDate = offsetDateTime9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule13 = schedule11.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType14 = schedule11.getRecurrenceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule16 = schedule11.setRecurrenceDayWeekly(recurrenceDayWeeklyType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule17 = schedule6.setRecurrenceDayWeekly(recurrenceDayWeeklyType15);
        java.time.OffsetDateTime offsetDateTime18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule19 = schedule17.setLastGenerationDate(offsetDateTime18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime21 = postSchedule20.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime23 = putSchedule22.StartDate;
        java.time.OffsetDateTime offsetDateTime24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = putSchedule22.setEndDate(offsetDateTime24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = putSchedule25.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime27 = putSchedule25.getEndDate();
        java.time.OffsetDateTime offsetDateTime28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule25.setStartDate(offsetDateTime28);
        java.lang.Integer int30 = putSchedule25.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule25.RecurrenceDayMonthly = recurrenceDayMonthlyType31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule33 = postSchedule20.setRecurrenceDayMonthly(recurrenceDayMonthlyType31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList34 = postSchedule33.SchedulePlannedActivities;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime36 = putSchedule35.StartDate;
        java.time.OffsetDateTime offsetDateTime37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule38 = putSchedule35.setEndDate(offsetDateTime37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putSchedule38.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime40 = putSchedule38.getEndDate();
        java.time.OffsetDateTime offsetDateTime41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule42 = putSchedule38.setStartDate(offsetDateTime41);
        java.lang.Integer int43 = putSchedule38.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule38.RecurrenceDayMonthly = recurrenceDayMonthlyType44;
        postSchedule33.RecurrenceDayMonthly = recurrenceDayMonthlyType44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule47 = schedule19.setRecurrenceDayMonthly(recurrenceDayMonthlyType44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule50 = schedule48.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType51 = schedule48.getRecurrenceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule53 = schedule48.setRecurrenceDayWeekly(recurrenceDayWeeklyType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType54 = schedule53.RecurrenceDayWeekly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime56 = putSchedule55.StartDate;
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule58 = putSchedule55.setEndDate(offsetDateTime57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup59 = putSchedule58.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule62 = schedule60.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList64, schedulePlannedActivityArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule66 = schedule62.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList64);
        putSchedule58.SchedulePlannedActivities = schedulePlannedActivityList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule69 = putSchedule58.setSamplingLocationGroup(samplingLocationGroup68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule72 = schedule70.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType73 = schedule70.getRecurrenceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType74 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule75 = schedule70.setRecurrenceDayWeekly(recurrenceDayWeeklyType74);
        putSchedule58.RecurrenceDayWeekly = recurrenceDayWeeklyType74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule77 = schedule53.setRecurrenceDayWeekly(recurrenceDayWeeklyType74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule78 = schedule47.setRecurrenceDayWeekly(recurrenceDayWeeklyType74);
        java.time.OffsetDateTime offsetDateTime79 = schedule47.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule81 = schedule47.setId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertTrue("'" + recurrenceType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule6);
        org.junit.Assert.assertNotNull(schedule8);
        org.junit.Assert.assertNotNull(schedule13);
        org.junit.Assert.assertNull(recurrenceType14);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY + "'", recurrenceDayWeeklyType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY));
        org.junit.Assert.assertNotNull(schedule16);
        org.junit.Assert.assertNotNull(schedule17);
        org.junit.Assert.assertNotNull(schedule19);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(putSchedule25);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule33);
        org.junit.Assert.assertNull(schedulePlannedActivityList34);
        org.junit.Assert.assertNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(putSchedule38);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(putSchedule42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(schedule47);
        org.junit.Assert.assertNotNull(schedule50);
        org.junit.Assert.assertNull(recurrenceType51);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY + "'", recurrenceDayWeeklyType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY));
        org.junit.Assert.assertNotNull(schedule53);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY + "'", recurrenceDayWeeklyType54.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY));
        org.junit.Assert.assertNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(putSchedule58);
        org.junit.Assert.assertNull(samplingLocationGroup59);
        org.junit.Assert.assertNotNull(schedule62);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(schedule66);
        org.junit.Assert.assertNotNull(putSchedule69);
        org.junit.Assert.assertNotNull(schedule72);
        org.junit.Assert.assertNull(recurrenceType73);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType74 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY + "'", recurrenceDayWeeklyType74.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY));
        org.junit.Assert.assertNotNull(schedule75);
        org.junit.Assert.assertNotNull(schedule77);
        org.junit.Assert.assertNotNull(schedule78);
        org.junit.Assert.assertNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(schedule81);
    }

    @Test
    public void test56508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56508");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str2 = postBasicTimeSeries1.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase5 = putParameter3.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str6 = putParameter3.getRoundingSpec();
        java.lang.String str7 = putParameter3.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList9 = postCalculatedDerivedTimeSeries8.TimeSeriesUniqueIds;
        java.lang.String str10 = postCalculatedDerivedTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries12 = postCalculatedDerivedTimeSeries8.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str13 = postCalculatedDerivedTimeSeries12.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart16 = inputPart14.setHeaders((java.lang.Object) interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries12.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase18 = putParameter3.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase20 = parameterBase18.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase18.InterpolationType = interpolationType21;
        postBasicTimeSeries1.InterpolationType = interpolationType21;
        parameter0.InterpolationType = interpolationType21;
        parameter0.Identifier = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        parameter0.DisplayName = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str29 = parameter0.UnitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter31 = parameter0.setDisplayName("http://MaxDurationhttp/json/reply/Float");
        parameter31.MinValue = 100.0d;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(parameterBase5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str13, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart16);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(parameterBase18);
        org.junit.Assert.assertNotNull(parameterBase20);
        org.junit.Assert.assertTrue("'" + interpolationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(parameter31);
    }

    @Test
    public void test56509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56509");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup deleteAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup();
        java.lang.String str1 = deleteAnalyticalGroup0.Id;
        deleteAnalyticalGroup0.Id = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        java.lang.String str4 = deleteAnalyticalGroup0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****" + "'", str4, "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
    }

    @Test
    public void test56510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56510");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = velocityDepthObservation0.Velocity;
        java.lang.Double double3 = velocityDepthObservation0.getDepthMultiplier();
        velocityDepthObservation0.Weighting = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType7 = calibrationCheck6.getCalibrationCheckType();
        java.lang.String str8 = calibrationCheck6.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary12.DifferenceDuringVisit = doubleWithDisplay13;
        reading9.Value = doubleWithDisplay13;
        calibrationCheck6.Difference = doubleWithDisplay13;
        doubleWithDisplay13.Display = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation19 = velocityDepthObservation0.setObservationIntervalInSeconds(doubleWithDisplay13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = velocityDepthObservation19.getDepth();
        java.lang.Double double21 = velocityDepthObservation19.getDepthMultiplier();
        velocityDepthObservation19.DepthMultiplier = (-1.0d);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(calibrationCheckType7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(velocityDepthObservation19);
        org.junit.Assert.assertNull(quantityWithDisplay20);
        org.junit.Assert.assertNull(double21);
    }

    @Test
    public void test56511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56511");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant1 = ratingCurveListServiceRequest0.QueryTo;
        java.lang.String str2 = ratingCurveListServiceRequest0.getRatingModelIdentifier();
        java.time.Instant instant3 = ratingCurveListServiceRequest0.QueryFrom;
        java.time.Instant instant4 = ratingCurveListServiceRequest0.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest6 = ratingCurveListServiceRequest0.setRatingModelIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str8 = getChartDataV2_7.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_10 = getChartDataV2_7.setFilterId("");
        java.util.List<java.lang.String> strList11 = getChartDataV2_7.ResultGrades;
        java.util.List<java.lang.String> strList12 = getChartDataV2_7.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest13.ReportTitle = "MinDuration";
        java.lang.String str16 = reportListServiceRequest13.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        java.util.List<java.lang.String> strList32 = getObservationsV2_17.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_17.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList35 = getObservationsV2_34.getMedia();
        java.time.Instant instant36 = getObservationsV2_34.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_34.setProjectIds((java.util.List<java.lang.String>) strList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest44 = reportListServiceRequest13.setTagKeys(strList40);
        reportListServiceRequest13.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str48 = deleteFieldVisits47.Sort;
        deleteFieldVisits47.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList51 = deleteFieldVisits47.getScheduleIds();
        java.util.List<java.lang.String> strList52 = deleteFieldVisits47.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_54.setDataClassifications((java.util.List<java.lang.String>) strList58);
        postTag53.PickListValues = strList58;
        java.util.ArrayList<java.lang.String> strList62 = postTag53.PickListValues;
        deleteFieldVisits47.PlanningStatuses = strList62;
        reportListServiceRequest13.TagKeys = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = getChartDataV2_7.setSearch((java.util.List<java.lang.String>) strList62);
        java.util.List<java.lang.String> strList66 = getChartDataV2_7.ProjectIds;
        java.util.List<java.lang.String> strList67 = getChartDataV2_7.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod70 = timeSeriesThresholdPeriod68.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription73 = locationDescription71.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType75 = null;
        controlConditionActivity74.ControlCleaned = controlCleanedType75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant78 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse79 = locationDescriptionListServiceResponse77.setNextToken(instant78);
        controlConditionActivity74.DateCleaned = instant78;
        locationDescription73.LastModified = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod82 = timeSeriesThresholdPeriod70.setAppliedTime(instant78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_83 = getChartDataV2_7.setStartObservedTime(instant78);
        java.util.List<java.lang.String> strList84 = getChartDataV2_83.getResultStatuses();
        java.util.List<java.lang.String> strList85 = getChartDataV2_83.ResultStatuses;
        java.time.Instant instant86 = getChartDataV2_83.StartObservedTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest87 = ratingCurveListServiceRequest0.setQueryTo(instant86);
        java.lang.Double double88 = ratingCurveListServiceRequest0.getUtcOffset();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(getChartDataV2_10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(instant36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(reportListServiceRequest44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(getChartDataV2_65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod70);
        org.junit.Assert.assertNotNull(locationDescription73);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse79);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod82);
        org.junit.Assert.assertNotNull(getChartDataV2_83);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNull(strList85);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest87);
        org.junit.Assert.assertNull(double88);
    }

    @Test
    public void test56512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56512");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag();
        java.lang.String str1 = searchResultSamplingContextTag0.getCursor();
        java.lang.String str2 = searchResultSamplingContextTag0.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList3 = searchResultSamplingContextTag0.DomainObjects;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(samplingContextTagList3);
    }

    @Test
    public void test56513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56513");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getLabReportIds();
        importItem1.Errors = getObservationsV2_2;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList19 = importItem1.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation22 = importItemSamplingLocation20.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        java.util.List<java.lang.String> strList39 = getObservationsV2_24.getLabReportIds();
        importItem23.Errors = getObservationsV2_24;
        java.lang.Object obj41 = importItem23.getExistingItem();
        importItem23.Input = "hi!";
        java.lang.Object obj44 = importItem23.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem46 = importItem23.setStatus(importItemStatusType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation47 = importItemSamplingLocation22.setStatus(importItemStatusType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList49 = importItemObject48.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList51, importChangeItemArray50);
        importItemObject48.ItemComparison = importChangeItemList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject62 = importItemObject48.setExistingItem((java.lang.Object) putLocationTags54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser65 = openIdConnectUser63.setIdentifier("");
        java.lang.Boolean boolean66 = openIdConnectUser65.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject67 = importItemObject48.setErrors((java.lang.Object) openIdConnectUser65);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList68 = importItemObject67.ItemComparison;
        importItemSamplingLocation47.ItemComparison = importChangeItemList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem70 = importItem1.setItemComparison(importChangeItemList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty71 = importItemObservedProperty0.setItemComparison(importChangeItemList68);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList72 = importItemObservedProperty0.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList74 = importItemObject73.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList76, importChangeItemArray75);
        importItemObject73.ItemComparison = importChangeItemList76;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList79 = importItemObject73.ItemComparison;
        importItemObservedProperty0.ItemComparison = importChangeItemList79;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(importChangeItemList19);
        org.junit.Assert.assertNotNull(importItemSamplingLocation22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + importItemStatusType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem46);
        org.junit.Assert.assertNotNull(importItemSamplingLocation47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(importChangeItemArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(importItemObject62);
        org.junit.Assert.assertNotNull(openIdConnectUser65);
        org.junit.Assert.assertNull(boolean66);
        org.junit.Assert.assertNotNull(importItemObject67);
        org.junit.Assert.assertNotNull(importChangeItemList68);
        org.junit.Assert.assertNotNull(importItem70);
        org.junit.Assert.assertNotNull(importItemObservedProperty71);
        org.junit.Assert.assertNotNull(importChangeItemList72);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(importChangeItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(importChangeItemList79);
    }

    @Test
    public void test56514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56514");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.Object obj2 = postCalculatedDerivedTimeSeries0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType3 = postCalculatedDerivedTimeSeries0.InterpolationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries5 = postCalculatedDerivedTimeSeries0.setParameter("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        postCalculatedDerivedTimeSeries0.Unit = "http://MaxDurationhttp/json/reply/Double";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertNull(interpolationType3);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries5);
    }

    @Test
    public void test56515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56515");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityReplicate postActivityReplicate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityReplicate();
        java.lang.String str1 = postActivityReplicate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityReplicate postActivityReplicate3 = postActivityReplicate0.setId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str4 = postActivityReplicate3.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postActivityReplicate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str4, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test56516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56516");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary9 = taxonImportSummary0.setSuccessCount((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList10 = taxonImportSummary0.ErrorImportItems;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNotNull(taxonImportSummary9);
        org.junit.Assert.assertNull(importItemTaxonList10);
    }

    @Test
    public void test56517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56517");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod4 = postObservationV2_2.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation5.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setCategoricalResult(categoricalResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation5.DataClassification = dataClassificationType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_12 = postObservationV2_2.setDataClassification(dataClassificationType10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList13 = postObservationV2_12.getValidationWarnings();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList14 = postObservationV2_12.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon15 = postObservationV2_12.RelatedTaxon;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(collectionMethod4);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertTrue("'" + dataClassificationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_12);
        org.junit.Assert.assertNull(ruleValidationDetailsList13);
        org.junit.Assert.assertNull(extendedAttributeList14);
        org.junit.Assert.assertNull(taxon15);
    }

    @Test
    public void test56518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56518");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        java.lang.String str2 = timeSeries0.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries4 = timeSeries0.setComment("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries6 = timeSeries4.setDescription("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(timeSeries4);
        org.junit.Assert.assertNotNull(timeSeries6);
    }

    @Test
    public void test56519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56519");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        locationReferenceStandard0.ReferenceStandard = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard4 = locationReferenceStandard0.setMethod("");
        java.lang.String str5 = locationReferenceStandard0.getReferenceStandard();
        java.lang.String str6 = locationReferenceStandard0.Method;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList7 = locationReferenceStandard0.getReferenceStandardOffsets();
        java.lang.String str8 = locationReferenceStandard0.getReferenceStandard();
        org.junit.Assert.assertNotNull(locationReferenceStandard4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(referenceStandardOffsetList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test56520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56520");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = plannedFieldResult3.AuditAttributes;
        plannedFieldResult3.Id = "'.'SSSSSSS";
        java.lang.String str7 = plannedFieldResult3.DeviceType;
        java.lang.String str8 = plannedFieldResult3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str10 = metricConfiguration9.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty11.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = metricConfiguration9.setObservedProperty(observedProperty11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType15 = observedProperty11.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup17 = postObservedProperty16.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit19 = null;
        quantity18.Unit = unit19;
        postObservedProperty16.LowerLimit = quantity18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity22 = postObservedProperty16.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit23 = quantity22.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = observedProperty11.setUpperLimit(quantity22);
        plannedFieldResult3.ObservedProperty = observedProperty24;
        plannedFieldResult3.Id = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_28 = postObservationV2_0.setPlannedFieldResult(plannedFieldResult3);
        java.lang.String str29 = postObservationV2_28.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen32 = specimen30.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList33 = specimen32.ExtendedAttributes;
        java.lang.Integer int34 = specimen32.NumberOfRequestedObservations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = specimen32.getAnalyticalGroup();
        postObservationV2_28.Specimen = specimen32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen38 = specimen32.setName("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "'.'SSSSSSS" + "'", str8, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(metricConfiguration14);
        org.junit.Assert.assertNull(resultType15);
        org.junit.Assert.assertNull(unitGroup17);
        org.junit.Assert.assertNotNull(quantity22);
        org.junit.Assert.assertNull(unit23);
        org.junit.Assert.assertNotNull(observedProperty24);
        org.junit.Assert.assertNotNull(postObservationV2_28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(specimen32);
        org.junit.Assert.assertNull(extendedAttributeList33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(analyticalGroup35);
        org.junit.Assert.assertNotNull(specimen38);
    }

    @Test
    public void test56521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56521");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits2 = deleteFieldVisits0.setSort("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList3 = deleteFieldVisits0.SamplingLocationIds;
        java.time.Instant instant4 = deleteFieldVisits0.getStartStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        getObservationsV2_11.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        getObservationsV2_11.EndObservedTime = instant15;
        java.time.Instant instant18 = getObservationsV2_11.StartResultTime;
        java.util.List<java.lang.String> strList19 = getObservationsV2_11.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList21 = importItemObject20.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList23, importChangeItemArray22);
        importItemObject20.ItemComparison = importChangeItemList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject34 = importItemObject20.setExistingItem((java.lang.Object) putLocationTags26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        importItemObject34.WarningMessages = strList38;
        getObservationsV2_11.LabResultLabAnalysisMethodIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits43 = deleteFieldVisits0.setFieldTripIds((java.util.List<java.lang.String>) strList38);
        java.util.List<java.lang.String> strList44 = deleteFieldVisits0.FieldTripIds;
        org.junit.Assert.assertNotNull(deleteFieldVisits2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(importChangeItemArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(importItemObject34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits43);
        org.junit.Assert.assertNotNull(strList44);
    }

    @Test
    public void test56522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56522");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str3 = tag2.Key;
        java.util.ArrayList<java.lang.String> strList4 = tag2.getPickListValues();
        java.lang.Boolean boolean5 = tag2.AppliesToLocationNotes;
        java.lang.Boolean boolean6 = tag2.isAppliesToReports();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str8 = getChartDataV2_7.getActivityCustomId();
        java.util.List<java.lang.String> strList9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_10 = getChartDataV2_7.setSearch(strList9);
        java.time.Instant instant11 = getChartDataV2_7.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList13 = getExportSpecimens12.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant15 = qualifier14.DateApplied;
        java.lang.String str16 = qualifier14.User;
        java.lang.String str17 = qualifier14.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = timeAlignedDataServiceRequest18.setQueryFrom(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier24 = qualifier14.setDateApplied(instant21);
        getExportSpecimens12.Before = instant21;
        java.time.Instant instant26 = getExportSpecimens12.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList28 = getSpecimens27.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType30 = putUserV2_29.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        dischargeSummary33.MeasurementTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse32.setNextToken(instant37);
        java.time.Instant instant41 = locationDescriptionListServiceResponse32.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities42 = getActivities31.setToStartTime(instant41);
        java.lang.String str43 = getActivities42.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList45 = getObservationsV2_44.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.QualityControlTypes = strList57;
        getObservationsV2_44.ResultGrades = strList57;
        getActivities42.Media = strList57;
        putUserV2_29.AccessGroups = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens64 = getSpecimens27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens65 = getExportSpecimens12.setSamplingLocationIds((java.util.List<java.lang.String>) strList57);
        getChartDataV2_7.AnalysisMethodIds = strList57;
        tag2.PickListValues = strList57;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(getChartDataV2_10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest23);
        org.junit.Assert.assertNotNull(qualifier24);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(userType30);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(getActivities42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(getSpecimens64);
        org.junit.Assert.assertNotNull(getExportSpecimens65);
    }

    @Test
    public void test56523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56523");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.Object obj6 = putSamplingLocationGroup0.getResponseType();
        java.lang.String str7 = putSamplingLocationGroup0.getDescription();
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56524");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata2 = approvalMetadata0.setDisplayName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        approvalMetadata2.DisplayName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata6 = approvalMetadata2.setColor("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata8 = approvalMetadata6.setDisplayName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(approvalMetadata2);
        org.junit.Assert.assertNotNull(approvalMetadata6);
        org.junit.Assert.assertNotNull(approvalMetadata8);
    }

    @Test
    public void test56525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56525");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int1 = gradeOperation0.StackPosition;
        java.lang.String str2 = gradeOperation0.getComments();
        java.lang.String str3 = gradeOperation0.getComments();
        java.lang.Integer int4 = gradeOperation0.StackPosition;
        java.lang.String str5 = gradeOperation0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType6 = gradeOperation0.getOperationType();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(metadataChangeOperationType6);
    }

    @Test
    public void test56526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56526");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation8 = importItemSamplingLocation6.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getLabReportIds();
        importItem9.Errors = getObservationsV2_10;
        java.lang.Object obj27 = importItem9.getExistingItem();
        importItem9.Input = "hi!";
        java.lang.Object obj30 = importItem9.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem32 = importItem9.setStatus(importItemStatusType31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation33 = importItemSamplingLocation8.setStatus(importItemStatusType31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation35 = importItemSamplingLocation8.setStatus(importItemStatusType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType36 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation37 = importItemSamplingLocation8.setStatus(importItemStatusType36);
        importItemObject0.Status = importItemStatusType36;
        java.lang.Object obj39 = importItemObject0.getItem();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList40 = importItemObject0.getItemComparison();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(importItemSamplingLocation8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + importItemStatusType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem32);
        org.junit.Assert.assertNotNull(importItemSamplingLocation33);
        org.junit.Assert.assertTrue("'" + importItemStatusType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation35);
        org.junit.Assert.assertTrue("'" + importItemStatusType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW + "'", importItemStatusType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW));
        org.junit.Assert.assertNotNull(importItemSamplingLocation37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(importChangeItemList40);
    }

    @Test
    public void test56527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56527");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime1 = importHistoryEventSimple0.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple0.setId("http");
        java.lang.String str4 = importHistoryEventSimple3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple6 = importHistoryEventSimple3.setImportedBy(userProfile5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple8 = importHistoryEventSimple3.setId("zZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList10 = putUser9.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile11 = putUser9.UserProfile;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities12.Limit = 10;
        java.util.List<java.lang.String> strList15 = getActivities12.ActivityTemplateId;
        java.util.List<java.lang.String> strList16 = getActivities12.getMedia();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.time.Instant instant25 = getObservationsV2_18.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        java.util.List<java.lang.String> strList42 = getObservationsV2_27.getLabReportIds();
        importItem26.Errors = getObservationsV2_27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList45 = getObservationsV2_44.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.QualityControlTypes = strList57;
        getObservationsV2_44.ResultGrades = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem62 = importItem26.setFields((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_18.setSearch((java.util.List<java.lang.String>) strList57);
        importItemSamplingLocation17.Fields = strList57;
        getActivities12.Media = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser66 = putUser9.setAccessGroups((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList68 = user67.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user70 = user67.setEmail("hi!");
        user70.CustomId = "POST";
        user70.Id = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList76 = user75.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user78 = user75.setEmail("hi!");
        user78.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile81 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user82 = user78.setUserProfile(userProfile81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType83 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user84 = user82.setUserType(userType83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile85 = null;
        user82.UserProfile = userProfile85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile();
        java.lang.String str88 = userProfile87.LastName;
        user82.UserProfile = userProfile87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user90 = user70.setUserProfile(userProfile87);
        putUser66.UserProfile = userProfile87;
        importHistoryEventSimple8.ImportedBy = userProfile87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile94 = userProfile87.setProfileImageUrl("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http" + "'", str4, "http");
        org.junit.Assert.assertNotNull(importHistoryEventSimple6);
        org.junit.Assert.assertNotNull(importHistoryEventSimple8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(userProfile11);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(importItem62);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNotNull(putUser66);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNotNull(user70);
        org.junit.Assert.assertNull(strList76);
        org.junit.Assert.assertNotNull(user78);
        org.junit.Assert.assertNotNull(user82);
        org.junit.Assert.assertTrue("'" + userType83 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType83.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(user84);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(user90);
        org.junit.Assert.assertNotNull(userProfile94);
    }

    @Test
    public void test56528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56528");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        java.lang.String str1 = getSamplingLocations0.getSort();
        getSamplingLocations0.CustomId = "http://MaxDurationhttp/json/reply/ArrayList";
        getSamplingLocations0.Cursor = "multipart/form-data; boundary=****4b3b82c5-fb27-4c5a-8cf6-cb2705168ae1****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56529");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList3 = extendedAttributeDefinition2.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = extendedAttributeDefinition2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition2.DataType = dataType5;
        putExtendedAttribute0.DataType = dataType5;
        java.lang.Object obj8 = putExtendedAttribute0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute10 = putExtendedAttribute0.setMandatory((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeListItemList3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertTrue("'" + dataType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNotNull(putExtendedAttribute10);
    }

    @Test
    public void test56530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56530");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty0.QualitativeUncertainty = qualitativeUncertaintyType1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType3 = uncertainty0.QualitativeUncertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType.Quantitative;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty5 = uncertainty0.setUncertaintyType(uncertaintyType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty7 = uncertainty0.setQualitativeUncertainty(qualitativeUncertaintyType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = trendLineAnalysis8.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity12 = adcpDischargeActivity10.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = adcpDischargeActivity12.getDischargeCoefficientVariation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        vertical14.EffectiveDepth = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical18 = vertical14.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = dischargeSummary19.setPublish((java.lang.Boolean) false);
        java.lang.String str22 = dischargeSummary21.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary23.Reviewer = "";
        dischargeSummary23.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary23.MeasurementGrade = measurementGradeType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary21.setMeasurementGrade(measurementGradeType28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity31.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity31.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity31.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList38 = pointVelocityDischargeActivity37.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity37.DistanceToMeter = datumConvertedQuantityWithDisplay39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary21.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical42 = vertical18.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity43 = adcpDischargeActivity12.setTopEstimateExponent((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay39);
        trendLineAnalysis8.Intercept = datumConvertedQuantityWithDisplay39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty45 = uncertainty0.setQuantitativeUncertainty((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay39);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + uncertaintyType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType.Quantitative + "'", uncertaintyType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType.Quantitative));
        org.junit.Assert.assertNotNull(uncertainty5);
        org.junit.Assert.assertNotNull(uncertainty7);
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(adcpDischargeActivity12);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertNotNull(vertical18);
        org.junit.Assert.assertNotNull(dischargeSummary21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + measurementGradeType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNull(verticalList38);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(vertical42);
        org.junit.Assert.assertNotNull(adcpDischargeActivity43);
        org.junit.Assert.assertNotNull(uncertainty45);
    }

    @Test
    public void test56531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56531");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = dischargeSummary3.getMeanGageHeight();
        java.lang.String str5 = dischargeSummary3.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary3.setDischarge(quantityWithDisplay6);
        java.time.Instant instant8 = dischargeSummary3.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = null;
        dischargeSummary3.Discharge = quantityWithDisplay9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary3.setBaseFlow(baseFlowType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary0.setBaseFlow(baseFlowType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList15 = getChartDataV2_14.getProjectIds();
        java.util.List<java.lang.String> strList16 = getChartDataV2_14.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList19, nameTagDefinitionArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse21 = locationTagListServiceResponse17.setTags(nameTagDefinitionList19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = dischargeSummary22.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse25.setNextToken(instant26);
        dischargeSummary22.MeasurementTime = instant26;
        locationTagListServiceResponse17.ResponseTime = instant26;
        getChartDataV2_14.StartResultTime = instant26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary13.setMeasurementTime(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary33.Reviewer = "";
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary33.MeasurementTime = instant36;
        postRecurringReport32.NextGenerationDate = instant36;
        java.time.Instant instant39 = postRecurringReport32.getNextGenerationDate();
        java.lang.String str40 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary13.setMeasurementEndTime(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = dischargeSummary13.setMeanGageHeightMethod("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str44 = dischargeSummary43.getReviewer();
        java.lang.Integer int45 = dischargeSummary43.getGradeCode();
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertTrue("'" + baseFlowType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow + "'", baseFlowType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow));
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse21);
        org.junit.Assert.assertNotNull(dischargeSummary24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str40, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(dischargeSummary43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(int45);
    }

    @Test
    public void test56532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56532");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        java.lang.String str30 = getGroupedObservationsV2_26.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_32 = getGroupedObservationsV2_26.setCustomId("MinDuration");
        java.lang.Object obj33 = getGroupedObservationsV2_32.getResponseType();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLocationObservationsGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLocationObservationsGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLocationObservationsGroup");
    }

    @Test
    public void test56533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56533");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray6 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = putLocationTags2.setTagUniqueIds(strList7);
        java.util.ArrayList<java.lang.String> strList10 = putLocationTags9.TagUniqueIds;
        getFieldVisits0.ScheduleIds = strList10;
        java.lang.Integer int12 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList13 = getFieldVisits0.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        getObservationsV2_14.SpecimenIds = strList17;
        getFieldVisits0.Search = strList17;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits35 = getFieldVisits0.setSamplingPlanIds((java.util.List<java.lang.String>) strList33);
        java.lang.Object obj36 = getFieldVisits0.getResponseType();
        java.util.List<java.lang.String> strList37 = getFieldVisits0.getScheduleIds();
        java.util.List<java.lang.String> strList38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits39 = getFieldVisits0.setPlanningStatuses(strList38);
        java.util.List<java.lang.String> strList40 = getFieldVisits0.getSamplingPlanIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(putLocationTags9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getFieldVisits35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(getFieldVisits39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test56534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56534");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen1 = fieldSheetImportSummary0.getSpecimenSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = fieldSheetImportSummary0.getFieldResultSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation5 = importSummaryObservation3.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary6.UpdateCount = (-1);
        java.lang.Integer int9 = observationImportSummary6.ExpectedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary10.UpdateCount = (-1);
        java.lang.Integer int13 = observationImportSummary10.ExpectedCount;
        java.lang.String str14 = observationImportSummary10.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList16, importItemObservationArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary18 = observationImportSummary10.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary19 = observationImportSummary6.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList16);
        importSummaryObservation3.ImportItems = importItemObservationList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple21 = importSummaryObservation3.ImportHistoryEventSimple;
        java.lang.Integer int22 = importSummaryObservation3.getSkippedCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList23 = importSummaryObservation3.NonErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation25 = importSummaryObservation3.setErrorCount((java.lang.Integer) 1);
        importSummaryObservation25.ErrorCount = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary28 = fieldSheetImportSummary0.setFieldResultSummary(importSummaryObservation25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen31 = importSummarySpecimen29.setUpdateCount((java.lang.Integer) 4);
        importSummarySpecimen29.SummaryReportText = "0001-01-01T00:00:00.0000000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary34 = fieldSheetImportSummary28.setSpecimenSummary(importSummarySpecimen29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen35 = fieldSheetImportSummary28.SpecimenSummary;
        org.junit.Assert.assertNull(importSummarySpecimen1);
        org.junit.Assert.assertNull(importSummaryObservation2);
        org.junit.Assert.assertNotNull(importSummaryObservation5);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(importItemObservationArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(observationImportSummary18);
        org.junit.Assert.assertNotNull(observationImportSummary19);
        org.junit.Assert.assertNull(importHistoryEventSimple21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(importItemObservationList23);
        org.junit.Assert.assertNotNull(importSummaryObservation25);
        org.junit.Assert.assertNotNull(fieldSheetImportSummary28);
        org.junit.Assert.assertNotNull(importSummarySpecimen31);
        org.junit.Assert.assertNotNull(fieldSheetImportSummary34);
        org.junit.Assert.assertNotNull(importSummarySpecimen35);
    }

    @Test
    public void test56535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56535");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putSchedule3.EndDate = offsetDateTime5;
        java.time.OffsetDateTime offsetDateTime7 = putSchedule3.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime9 = postSchedule8.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime11 = putSchedule10.StartDate;
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule13 = putSchedule10.setEndDate(offsetDateTime12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = putSchedule13.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime15 = putSchedule13.getEndDate();
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = putSchedule13.setStartDate(offsetDateTime16);
        java.lang.Integer int18 = putSchedule13.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule13.RecurrenceDayMonthly = recurrenceDayMonthlyType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule21 = postSchedule8.setRecurrenceDayMonthly(recurrenceDayMonthlyType19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = postSchedule8.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType23 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule24 = postSchedule8.setRecurrenceType(recurrenceType23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList27, plannedActivityArray26);
        putFieldVisit25.PlannedActivities = plannedActivityList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str31 = domainObjectAttachment30.getId();
        java.lang.String str32 = domainObjectAttachment30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = domainObjectAttachment30.setAttachment(attachment33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str36 = domainObjectAttachment35.getId();
        java.lang.String str37 = domainObjectAttachment35.getId();
        domainObjectAttachment35.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment35.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = domainObjectAttachment42.setAttachment(attachment45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str48 = domainObjectAttachment47.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str50 = domainObjectAttachment49.getId();
        java.lang.String str51 = domainObjectAttachment49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = domainObjectAttachment49.setAttachment(attachment52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment30, domainObjectAttachment35, domainObjectAttachment42, domainObjectAttachment47, domainObjectAttachment49, domainObjectAttachment54 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList57, domainObjectAttachmentArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit59 = putFieldVisit25.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList57);
        java.time.OffsetDateTime offsetDateTime60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit61 = putFieldVisit25.setEndTime(offsetDateTime60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule64 = schedule62.setCustomId("");
        java.time.OffsetDateTime offsetDateTime65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule66 = schedule62.setStartDate(offsetDateTime65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType67 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule68 = schedule66.setRecurrenceType(recurrenceType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit69 = putFieldVisit61.setSchedule(schedule66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule72 = schedule70.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList74 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList74, schedulePlannedActivityArray73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule76 = schedule72.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup77 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule78 = schedule76.setSamplingLocationGroup(samplingLocationGroup77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType79 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule80 = schedule78.setRecurrenceDayWeekly(recurrenceDayWeeklyType79);
        java.time.OffsetDateTime offsetDateTime81 = schedule80.EndDate;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList82 = schedule80.SchedulePlannedActivities;
        schedule66.SchedulePlannedActivities = schedulePlannedActivityList82;
        postSchedule8.SchedulePlannedActivities = schedulePlannedActivityList82;
        putSchedule3.SchedulePlannedActivities = schedulePlannedActivityList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule87 = putSchedule3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        java.time.OffsetDateTime offsetDateTime88 = putSchedule3.StartDate;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(putSchedule13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(putSchedule17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertTrue("'" + recurrenceType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType23.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(postSchedule24);
        org.junit.Assert.assertNotNull(plannedActivityArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(domainObjectAttachment34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(domainObjectAttachment53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putFieldVisit59);
        org.junit.Assert.assertNotNull(putFieldVisit61);
        org.junit.Assert.assertNotNull(schedule64);
        org.junit.Assert.assertNotNull(schedule66);
        org.junit.Assert.assertTrue("'" + recurrenceType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType67.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule68);
        org.junit.Assert.assertNotNull(putFieldVisit69);
        org.junit.Assert.assertNotNull(schedule72);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(schedule76);
        org.junit.Assert.assertNotNull(schedule78);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType79 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY + "'", recurrenceDayWeeklyType79.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY));
        org.junit.Assert.assertNotNull(schedule80);
        org.junit.Assert.assertNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(schedulePlannedActivityList82);
        org.junit.Assert.assertNotNull(putSchedule87);
        org.junit.Assert.assertNull(offsetDateTime88);
    }

    @Test
    public void test56536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56536");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList9 = getObservationsV2_2.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType10 = null;
        getObservationsV2_2.FieldResultType = fieldResultType10;
        getObservationsV2_2.MaxNumericResultValue = 100.0d;
        java.lang.String str14 = getObservationsV2_2.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_2.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_2.setAnalysisMethodIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations24 = getExportSamplingLocations0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations26 = getExportSamplingLocations24.setLimit((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant28 = activeMeterCalibration27.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double30 = activeMeterCalibrationEquation29.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double32 = activeMeterCalibrationEquation31.getSlope();
        java.lang.String str33 = activeMeterCalibrationEquation31.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double35 = activeMeterCalibrationEquation34.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation29, activeMeterCalibrationEquation31, activeMeterCalibrationEquation34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList37, activeMeterCalibrationEquationArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration39 = activeMeterCalibration27.setEquations(activeMeterCalibrationEquationList37);
        java.time.Instant instant40 = activeMeterCalibration39.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription43 = locationDescription41.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType45 = null;
        controlConditionActivity44.ControlCleaned = controlCleanedType45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        controlConditionActivity44.DateCleaned = instant48;
        locationDescription43.LastModified = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration52 = activeMeterCalibration39.setFirstUsedDate(instant48);
        java.time.Instant instant53 = activeMeterCalibration52.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations54 = getExportSamplingLocations24.setStartModificationTime(instant53);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSamplingLocations24);
        org.junit.Assert.assertNotNull(getExportSamplingLocations26);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(double30);
        org.junit.Assert.assertNull(double32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(double35);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNotNull(locationDescription43);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(activeMeterCalibration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(getExportSamplingLocations54);
    }

    @Test
    public void test56537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56537");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus timeSeriesAppendStatus0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus();
        java.lang.Integer int1 = timeSeriesAppendStatus0.NumberOfPointsDeleted;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode appendStatusCode2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode.Failed;
        timeSeriesAppendStatus0.AppendStatus = appendStatusCode2;
        java.lang.Integer int4 = timeSeriesAppendStatus0.getNumberOfPointsDeleted();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus timeSeriesAppendStatus6 = timeSeriesAppendStatus0.setTimeSeriesUniqueId("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus timeSeriesAppendStatus8 = timeSeriesAppendStatus0.setTimeSeriesUniqueId("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + appendStatusCode2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode.Failed + "'", appendStatusCode2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode.Failed));
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(timeSeriesAppendStatus6);
        org.junit.Assert.assertNotNull(timeSeriesAppendStatus8);
    }

    @Test
    public void test56538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56538");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity2 = null;
        putActivity1.PlannedActivity = plannedActivity2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str5 = postLaboratory4.Address;
        java.lang.String str6 = postLaboratory4.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity9 = samplingPlanPlannedActivity7.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = auditAttributes10.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity9.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = samplingPlanPlannedActivity9.AuditAttributes;
        postLaboratory4.AuditAttributes = auditAttributes14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory17 = postLaboratory4.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon19 = taxonomicResult18.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = taxonomicResult18.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan22.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan22.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup27 = samplingPlan22.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan29 = samplingPlan22.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag30 = putTag21.setAuditAttributes(auditAttributes28);
        taxonomicResult18.AuditAttributes = auditAttributes28;
        postLaboratory17.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity33 = putActivity1.setAuditAttributes(auditAttributes28);
        postTaxon0.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon36 = postTaxon0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str38 = taxonomyLevel37.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel40 = taxonomyLevel37.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel42 = taxonomyLevel37.setCustomId("9999-12-31T23:59:59.999Z");
        taxonomyLevel37.CustomId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel46 = taxonomyLevel37.setCustomId("");
        postTaxon36.TaxonomyLevel = taxonomyLevel46;
        java.lang.String str48 = postTaxon36.Comment;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity9);
        org.junit.Assert.assertNotNull(auditAttributes12);
        org.junit.Assert.assertNotNull(auditAttributes14);
        org.junit.Assert.assertNotNull(postLaboratory17);
        org.junit.Assert.assertNull(taxon19);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup27);
        org.junit.Assert.assertNotNull(samplingPlan29);
        org.junit.Assert.assertNotNull(putTag30);
        org.junit.Assert.assertNotNull(putActivity33);
        org.junit.Assert.assertNotNull(postTaxon36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(taxonomyLevel40);
        org.junit.Assert.assertNotNull(taxonomyLevel42);
        org.junit.Assert.assertNotNull(taxonomyLevel46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test56539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56539");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = specimenTemplate4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate6.Preservative = preservativeType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = specimenTemplate6.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition15 = postDetectioncondition3.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard16 = putStandard0.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard18 = putStandard16.setName("-PT87591240H");
        java.lang.String str19 = putStandard18.getName();
        putStandard18.Id = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval22 = putStandard18.getApplicabilityRange();
        java.lang.Boolean boolean23 = putStandard18.Active;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant25 = interval24.Start;
        java.time.Instant instant26 = interval24.End;
        java.time.Instant instant27 = interval24.End;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard28 = putStandard18.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard30 = putStandard18.setId("multipart/form-data; boundary=****4b3b82c5-fb27-4c5a-8cf6-cb2705168ae1****");
        org.junit.Assert.assertNotNull(specimenTemplate6);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(specimenTemplate14);
        org.junit.Assert.assertNotNull(postDetectioncondition15);
        org.junit.Assert.assertNotNull(putStandard16);
        org.junit.Assert.assertNotNull(putStandard18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-PT87591240H" + "'", str19, "-PT87591240H");
        org.junit.Assert.assertNull(interval22);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + true + "'", boolean23, true);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(instant27);
        org.junit.Assert.assertNotNull(putStandard28);
        org.junit.Assert.assertNotNull(putStandard30);
    }

    @Test
    public void test56540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56540");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int1 = searchResultSpreadsheetTemplate0.TotalCount;
        searchResultSpreadsheetTemplate0.Cursor = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int5 = searchResultSpreadsheetTemplate4.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate7 = searchResultSpreadsheetTemplate4.setCursor("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate10 = spreadsheetTemplate8.setType(spreadsheetTemplateType9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType12 = spreadsheetTemplate11.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType13 = spreadsheetTemplate11.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType14 = null;
        spreadsheetTemplate11.Type = spreadsheetTemplateType14;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList16 = spreadsheetTemplate11.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType18 = spreadsheetTemplate17.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType19 = spreadsheetTemplate17.getType();
        spreadsheetTemplate17.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate23 = spreadsheetTemplate17.setType(spreadsheetTemplateType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate26 = spreadsheetTemplate24.setType(spreadsheetTemplateType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType28 = spreadsheetTemplate27.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType29 = spreadsheetTemplate27.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType32 = spreadsheetTemplate31.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType33 = spreadsheetTemplate31.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType34 = null;
        spreadsheetTemplate31.Type = spreadsheetTemplateType34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType37 = spreadsheetTemplate36.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType38 = spreadsheetTemplate36.getType();
        spreadsheetTemplate36.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate42 = spreadsheetTemplate36.setType(spreadsheetTemplateType41);
        java.lang.String str43 = spreadsheetTemplate42.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate46 = spreadsheetTemplate44.setType(spreadsheetTemplateType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate49 = spreadsheetTemplate47.setType(spreadsheetTemplateType48);
        spreadsheetTemplate47.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType53 = spreadsheetTemplate52.getType();
        spreadsheetTemplate52.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] spreadsheetTemplateArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate[] { spreadsheetTemplate10, spreadsheetTemplate11, spreadsheetTemplate17, spreadsheetTemplate24, spreadsheetTemplate27, spreadsheetTemplate30, spreadsheetTemplate31, spreadsheetTemplate42, spreadsheetTemplate46, spreadsheetTemplate47, spreadsheetTemplate52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList57, spreadsheetTemplateArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate59 = searchResultSpreadsheetTemplate4.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate60 = searchResultSpreadsheetTemplate0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate>) spreadsheetTemplateList57);
        java.lang.Integer int61 = searchResultSpreadsheetTemplate60.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate> spreadsheetTemplateList62 = searchResultSpreadsheetTemplate60.getDomainObjects();
        searchResultSpreadsheetTemplate60.TotalCount = 10;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate7);
        org.junit.Assert.assertNotNull(spreadsheetTemplate10);
        org.junit.Assert.assertNull(spreadsheetTemplateType12);
        org.junit.Assert.assertNull(spreadsheetTemplateType13);
        org.junit.Assert.assertNull(domainObjectAttachmentList16);
        org.junit.Assert.assertNull(spreadsheetTemplateType18);
        org.junit.Assert.assertNull(spreadsheetTemplateType19);
        org.junit.Assert.assertNotNull(spreadsheetTemplate23);
        org.junit.Assert.assertNotNull(spreadsheetTemplate26);
        org.junit.Assert.assertNull(spreadsheetTemplateType28);
        org.junit.Assert.assertNull(spreadsheetTemplateType29);
        org.junit.Assert.assertNull(spreadsheetTemplateType32);
        org.junit.Assert.assertNull(spreadsheetTemplateType33);
        org.junit.Assert.assertNull(spreadsheetTemplateType37);
        org.junit.Assert.assertNull(spreadsheetTemplateType38);
        org.junit.Assert.assertNotNull(spreadsheetTemplate42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "https" + "'", str43, "https");
        org.junit.Assert.assertNotNull(spreadsheetTemplate46);
        org.junit.Assert.assertNotNull(spreadsheetTemplate49);
        org.junit.Assert.assertNull(spreadsheetTemplateType53);
        org.junit.Assert.assertNotNull(spreadsheetTemplateArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate59);
        org.junit.Assert.assertNotNull(searchResultSpreadsheetTemplate60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(spreadsheetTemplateList62);
    }

    @Test
    public void test56541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56541");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        java.lang.String str4 = postReflectedTimeSeries0.Parameter;
        postReflectedTimeSeries0.LocationUniqueId = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        java.lang.String str7 = postReflectedTimeSeries0.Label;
        java.lang.String str8 = postReflectedTimeSeries0.UtcOffset;
        java.lang.String str9 = postReflectedTimeSeries0.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str4, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test56542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56542");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        java.lang.String str7 = postDatumConvertedTimeSeries0.Parameter;
        postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum = true;
        java.lang.String str10 = postDatumConvertedTimeSeries0.LocationUniqueId;
        postDatumConvertedTimeSeries0.Unit = "-PT87591240H";
        java.lang.Boolean boolean13 = postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries15 = postDatumConvertedTimeSeries0.setMethod("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries15);
    }

    @Test
    public void test56543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56543");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        java.lang.String str4 = pointVelocityDischargeActivity3.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement5 = pointVelocityDischargeActivity3.DischargeChannelMeasurement;
        java.lang.String str6 = pointVelocityDischargeActivity3.MeterEquation;
        java.lang.String str7 = pointVelocityDischargeActivity3.VelocityObservationMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str9 = pointVelocityDischargeActivity8.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity11 = pointVelocityDischargeActivity8.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity13 = pointVelocityDischargeActivity11.setMeterEquation("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity15 = pointVelocityDischargeActivity11.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = pointVelocityDischargeActivity11.getArea();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str18 = pointVelocityDischargeActivity17.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity20 = pointVelocityDischargeActivity17.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity22 = pointVelocityDischargeActivity17.setMethodCoefficientUsed((java.lang.Boolean) true);
        java.lang.String str23 = pointVelocityDischargeActivity22.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str25 = pointVelocityDischargeActivity24.getModel();
        pointVelocityDischargeActivity24.Manufacturer = "'.'SSSSSSS";
        pointVelocityDischargeActivity24.HorizontalCoefficientUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = pointVelocityDischargeActivity24.setModel("9999-12-31T23:59:59.999Z");
        java.lang.Integer int32 = pointVelocityDischargeActivity24.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str34 = pointVelocityDischargeActivity33.getModel();
        java.lang.String str35 = pointVelocityDischargeActivity33.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = null;
        pointVelocityDischargeActivity33.Width = quantityWithDisplay36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType38 = null;
        pointVelocityDischargeActivity33.StartPoint = startPointType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList41, verticalArray40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity43 = pointVelocityDischargeActivity33.setVerticals(verticalList41);
        pointVelocityDischargeActivity24.Verticals = verticalList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity22.setVerticals(verticalList41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity46 = pointVelocityDischargeActivity11.setVerticals(verticalList41);
        pointVelocityDischargeActivity3.Verticals = verticalList41;
        java.lang.Boolean boolean48 = pointVelocityDischargeActivity3.isMeterInspectedBefore();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(dischargeChannelMeasurement5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity11);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity13);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity15);
        org.junit.Assert.assertNull(quantityWithDisplay16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity20);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(verticalArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity43);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity46);
        org.junit.Assert.assertNull(boolean48);
    }

    @Test
    public void test56544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56544");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        java.lang.String str6 = postBasicTimeSeries2.getUtcOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries8 = postBasicTimeSeries2.setUtcOffset("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str9 = postBasicTimeSeries2.Method;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList10 = postBasicTimeSeries2.ExtendedAttributeValues;
        java.lang.String str11 = postBasicTimeSeries2.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries13 = postBasicTimeSeries2.setLabel("POST");
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postBasicTimeSeries8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(extendedAttributeValueList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str11, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNotNull(postBasicTimeSeries13);
    }

    @Test
    public void test56545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56545");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str1 = domainObjectAttachment0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment3 = domainObjectAttachment0.setId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.String str4 = domainObjectAttachment3.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(domainObjectAttachment3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****" + "'", str4, "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
    }

    @Test
    public void test56546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56546");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity();
        searchResultActivity0.Cursor = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity4 = searchResultActivity0.setCursor("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        searchResultActivity4.Cursor = "9999-12-31T23:59:59.9999999Z";
        searchResultActivity4.Cursor = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNotNull(searchResultActivity4);
    }

    @Test
    public void test56547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56547");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setSummaryReportText("9999-12-31T23:59:59.9999999Z");
        java.lang.Integer int9 = taxonImportSummary8.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary11 = taxonImportSummary8.setNewCount((java.lang.Integer) 5);
        taxonImportSummary8.SummaryReportText = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList14 = taxonImportSummary8.NonErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary16 = taxonImportSummary8.setSummaryReportText("");
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(taxonImportSummary11);
        org.junit.Assert.assertNull(importItemTaxonList14);
        org.junit.Assert.assertNotNull(taxonImportSummary16);
    }

    @Test
    public void test56548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56548");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit4 = putUnitGroupWithUnit0.setId("2021.4.62.0");
        java.lang.String str5 = putUnitGroupWithUnit4.Id;
        java.lang.Boolean boolean6 = putUnitGroupWithUnit4.getSupportsConversion();
        putUnitGroupWithUnit4.SupportsConversion = true;
        java.lang.Object obj9 = putUnitGroupWithUnit4.getResponseType();
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2021.4.62.0" + "'", str5, "2021.4.62.0");
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
    }

    @Test
    public void test56549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56549");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentWidth(quantityWithDisplay2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = vertical4.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = vertical4.setSegmentDischarge(quantityWithDisplay6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown;
        vertical4.MeasurementCondition = measurementCondition8;
        vertical0.MeasurementCondition = measurementCondition8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical13 = vertical0.setCosineOfUniqueFlow((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation16 = velocityObservation14.setDeploymentMethod(deploymentMethodType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList18, velocityDepthObservationArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation20 = velocityObservation16.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList18);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList21 = velocityObservation20.getObservations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement24 = dischargeChannelMeasurement22.setDeploymentMethod(deploymentMethodType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation25 = velocityObservation20.setDeploymentMethod(deploymentMethodType23);
        vertical0.VelocityObservation = velocityObservation25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation30 = velocityObservation28.setDeploymentMethod(deploymentMethodType29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType32 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation33 = velocityObservation31.setDeploymentMethod(deploymentMethodType32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList35, velocityDepthObservationArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation37 = velocityObservation33.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation38 = velocityObservation28.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical39 = vertical27.setVelocityObservation(velocityObservation38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay41 = vertical40.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical43 = vertical40.setSegmentDischarge(quantityWithDisplay42);
        java.lang.Boolean boolean44 = vertical40.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical46 = vertical40.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = vertical46.SegmentDischarge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType49 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical50 = vertical48.setFlowDirection(flowDirectionType49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        vertical48.VelocityObservation = velocityObservation51;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList53 = velocityObservation51.getObservations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical54 = vertical46.setVelocityObservation(velocityObservation51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType56 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation57 = velocityObservation55.setDeploymentMethod(deploymentMethodType56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList59, velocityDepthObservationArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation61 = velocityObservation57.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList59);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList62 = velocityObservation61.getObservations();
        velocityObservation51.Observations = velocityDepthObservationList62;
        velocityObservation38.Observations = velocityDepthObservationList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation65 = velocityObservation25.setObservations(velocityDepthObservationList62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType67 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation68 = velocityObservation66.setDeploymentMethod(deploymentMethodType67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType70 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation71 = velocityObservation69.setDeploymentMethod(deploymentMethodType70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList73, velocityDepthObservationArray72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation75 = velocityObservation71.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation76 = velocityObservation66.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList73);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList77 = velocityObservation76.Observations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation78 = velocityObservation65.setObservations(velocityDepthObservationList77);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNotNull(vertical7);
        org.junit.Assert.assertTrue("'" + measurementCondition8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown + "'", measurementCondition8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown));
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertNotNull(vertical13);
        org.junit.Assert.assertTrue("'" + deploymentMethodType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation16);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(velocityObservation20);
        org.junit.Assert.assertNotNull(velocityDepthObservationList21);
        org.junit.Assert.assertTrue("'" + deploymentMethodType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading + "'", deploymentMethodType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement24);
        org.junit.Assert.assertNotNull(velocityObservation25);
        org.junit.Assert.assertTrue("'" + deploymentMethodType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation30);
        org.junit.Assert.assertTrue("'" + deploymentMethodType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType32.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation33);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(velocityObservation37);
        org.junit.Assert.assertNotNull(velocityObservation38);
        org.junit.Assert.assertNotNull(vertical39);
        org.junit.Assert.assertNull(quantityWithDisplay41);
        org.junit.Assert.assertNotNull(vertical43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNotNull(vertical46);
        org.junit.Assert.assertNull(quantityWithDisplay47);
        org.junit.Assert.assertTrue("'" + flowDirectionType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType49.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical50);
        org.junit.Assert.assertNull(velocityDepthObservationList53);
        org.junit.Assert.assertNotNull(vertical54);
        org.junit.Assert.assertTrue("'" + deploymentMethodType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType56.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation57);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(velocityObservation61);
        org.junit.Assert.assertNotNull(velocityDepthObservationList62);
        org.junit.Assert.assertNotNull(velocityObservation65);
        org.junit.Assert.assertTrue("'" + deploymentMethodType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType67.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation68);
        org.junit.Assert.assertTrue("'" + deploymentMethodType70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation71);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(velocityObservation75);
        org.junit.Assert.assertNotNull(velocityObservation76);
        org.junit.Assert.assertNotNull(velocityDepthObservationList77);
        org.junit.Assert.assertNotNull(velocityObservation78);
    }

    @Test
    public void test56550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56550");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest();
        effectiveRatingCurveServiceRequest0.RatingModelIdentifier = "";
        java.lang.String str3 = effectiveRatingCurveServiceRequest0.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest5 = effectiveRatingCurveServiceRequest0.setRatingModelIdentifier("9999-12-31T23:59:59.9999999Z");
        java.lang.Double double6 = effectiveRatingCurveServiceRequest0.getEndValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest5);
        org.junit.Assert.assertNull(double6);
    }

    @Test
    public void test56551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56551");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        java.lang.String str3 = parameterMetadata0.getUnitGroupIdentifier();
        java.lang.String str4 = parameterMetadata0.InterpolationType;
        java.lang.String str5 = parameterMetadata0.InterpolationType;
        parameterMetadata0.InterpolationType = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        java.lang.String str8 = parameterMetadata0.UnitIdentifier;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test56552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56552");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport2 = searchResultLabReport0.setCursor("POST");
        java.lang.Integer int3 = searchResultLabReport2.getTotalCount();
        org.junit.Assert.assertNotNull(searchResultLabReport2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test56553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56553");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries4 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType5 = postDatumConvertedTimeSeries0.InterpolationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries8 = postStatisticalDerivedTimeSeries6.setComment("'.'SSSSSSS");
        java.lang.String str9 = postStatisticalDerivedTimeSeries6.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries11 = postStatisticalDerivedTimeSeries6.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries13 = postStatisticalDerivedTimeSeries6.setInterpolationType(interpolationType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList15, extendedAttributeValueArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries17 = postStatisticalDerivedTimeSeries6.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries18 = postDatumConvertedTimeSeries0.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries20 = postDatumConvertedTimeSeries18.setComputationIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries22 = postDatumConvertedTimeSeries18.setInterpolationType(interpolationType21);
        postDatumConvertedTimeSeries18.Parameter = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries26 = postDatumConvertedTimeSeries18.setUnit("http://MaxDurationhttp/json/reply/ArrayList");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList27 = postDatumConvertedTimeSeries18.ExtendedAttributeValues;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries4);
        org.junit.Assert.assertNull(interpolationType5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries11);
        org.junit.Assert.assertTrue("'" + interpolationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries13);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries18);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries20);
        org.junit.Assert.assertTrue("'" + interpolationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries22);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries26);
        org.junit.Assert.assertNotNull(extendedAttributeValueList27);
    }

    @Test
    public void test56554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56554");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = importHistoryEventSimple1.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile3 = importHistoryEventSimple1.getImportedBy();
        analysisMethodImportSummary0.ImportHistoryEventSimple = importHistoryEventSimple1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary6 = analysisMethodImportSummary0.setErrorCount((java.lang.Integer) 4);
        java.lang.Integer int7 = analysisMethodImportSummary6.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList8 = analysisMethodImportSummary6.getImportJobErrors();
        java.lang.Integer int9 = analysisMethodImportSummary6.getNewCount();
        analysisMethodImportSummary6.InvalidRowsCsvUrl = "'.'SSSSSSS";
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNull(userProfile3);
        org.junit.Assert.assertNotNull(analysisMethodImportSummary6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(importErrorList8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test56555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56555");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location0.setUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.Double double6 = location0.Elevation;
        location0.IsExternalLocation = false;
        java.lang.String str9 = location0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location11 = location0.setElevationUnits("zZZZZ");
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str9, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(location11);
    }

    @Test
    public void test56556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56556");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = locationGroupType2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType5 = locationGroupType2.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup0.LocationGroupType = locationGroupType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType8 = locationGroupType5.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList13, observedPropertyArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = postLabAnalysisMethod11.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes16);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = postLabAnalysisMethod17.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier21 = putNullMeasureQualifier19.setDescription("");
        putNullMeasureQualifier19.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str25 = standardDefinition24.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime27 = putSchedule26.StartDate;
        java.time.OffsetDateTime offsetDateTime28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule26.setEndDate(offsetDateTime28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = putSchedule29.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime31 = null;
        putSchedule29.LastGenerationDate = offsetDateTime31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType33 = putSchedule29.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = plannedFieldResult34.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails38 = labResultDetails36.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails40 = labResultDetails38.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult41 = plannedFieldResult34.setAuditAttributes(auditAttributes39);
        putSchedule29.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition43 = standardDefinition24.setAuditAttributes(auditAttributes39);
        java.time.OffsetDateTime offsetDateTime44 = auditAttributes39.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier45 = putNullMeasureQualifier19.setAuditAttributes(auditAttributes39);
        postLabAnalysisMethod17.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType47 = locationGroupType5.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = locationGroupType5.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = locationGroupType5.AuditAttributes;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(locationGroupType5);
        org.junit.Assert.assertNotNull(locationGroupType8);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNotNull(observedPropertyArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod15);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(observedPropertyList18);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNull(auditAttributes30);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType33);
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNotNull(labResultDetails38);
        org.junit.Assert.assertNotNull(labResultDetails40);
        org.junit.Assert.assertNotNull(plannedFieldResult41);
        org.junit.Assert.assertNotNull(standardDefinition43);
        org.junit.Assert.assertNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier45);
        org.junit.Assert.assertNotNull(locationGroupType47);
        org.junit.Assert.assertNotNull(auditAttributes48);
        org.junit.Assert.assertNotNull(auditAttributes49);
    }

    @Test
    public void test56557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56557");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType1 = observation0.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium2 = null;
        observation0.Medium = medium2;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList4 = observation0.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal7 = observationMinimal5.setObservedProperty(observedProperty6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus8 = observationMinimal7.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal10 = observationMinimal7.setSpecimen(specimenNestedInActivity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = resultDetectionCondition12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition15 = resultDetectionCondition12.setId("/AQUARIUS");
        java.lang.String str16 = resultDetectionCondition12.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition18 = resultDetectionCondition12.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult19 = numericResult11.setDetectionCondition(resultDetectionCondition18);
        numericResult11.RoundingSpecification = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal22 = observationMinimal7.setNumericResult(numericResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation0.setNumericResult(numericResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        java.lang.String str25 = resultGrade24.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = observation0.setResultGrade(resultGrade24);
        org.junit.Assert.assertNull(dataClassificationType1);
        org.junit.Assert.assertNull(extendedAttributeList4);
        org.junit.Assert.assertNotNull(observationMinimal7);
        org.junit.Assert.assertNull(resultStatus8);
        org.junit.Assert.assertNotNull(observationMinimal10);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(resultDetectionCondition15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(resultDetectionCondition18);
        org.junit.Assert.assertNotNull(numericResult19);
        org.junit.Assert.assertNotNull(observationMinimal22);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(observation26);
    }

    @Test
    public void test56558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56558");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setSearch(strList2);
        java.util.List<java.lang.String> strList4 = getChartDataV2_3.ProjectIds;
        java.util.List<java.lang.String> strList5 = null;
        getChartDataV2_3.ActivityTypes = strList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_3.setSort("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_10 = getChartDataV2_8.setNumericResultValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_12 = getChartDataV2_10.setCursor("https");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNotNull(getChartDataV2_10);
        org.junit.Assert.assertNotNull(getChartDataV2_12);
    }

    @Test
    public void test56559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56559");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole();
        java.lang.String str1 = deleteLocationUserRole0.getLocationUniqueId();
        deleteLocationUserRole0.UserUniqueId = "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56560");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        postTaxon0.ItisTsn = "MaxDuration";
        postTaxon0.Comment = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon8 = postTaxon0.setTaxonomyLevel(taxonomyLevel7);
        postTaxon8.Comment = "-PT87591240H";
        java.lang.Object obj11 = postTaxon8.getResponseType();
        postTaxon8.ParentId = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str14 = postTaxon8.getItisTsn();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory16.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory20 = laboratory16.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport21 = labReport15.setLaboratory(laboratory20);
        java.lang.String str22 = labReport21.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport24 = labReport21.setCustomId("http");
        java.time.OffsetDateTime offsetDateTime25 = null;
        labReport24.DateReceived = offsetDateTime25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport28 = labReport24.setCustomId("MinInstant");
        java.time.OffsetDateTime offsetDateTime29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport30 = labReport28.setDateReceived(offsetDateTime29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod33 = postLabAnalysisMethod31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35, observedPropertyArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod37 = postLabAnalysisMethod33.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod39 = postLabAnalysisMethod33.setAuditAttributes(auditAttributes38);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList40 = postLabAnalysisMethod39.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod42 = postLabAnalysisMethod39.setContext("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList44 = postAnalysisMethod43.ImportHistoryEventSimples;
        postAnalysisMethod43.Id = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str48 = importHistoryEventSimple47.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType49 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple47.ImportType = importType49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile51 = importHistoryEventSimple47.getImportedBy();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str54 = importHistoryEventSimple53.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType55 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple53.ImportType = importType55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile57 = importHistoryEventSimple53.getImportedBy();
        java.lang.String str58 = importHistoryEventSimple53.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple61 = importHistoryEventSimple59.setImportTime(offsetDateTime60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime63 = importHistoryEventSimple62.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple65 = importHistoryEventSimple62.setId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str67 = importHistoryEventSimple66.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType68 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple66.ImportType = importType68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile70 = importHistoryEventSimple66.getImportedBy();
        java.lang.String str71 = importHistoryEventSimple66.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str73 = importHistoryEventSimple72.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType74 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple72.ImportType = importType74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime77 = importHistoryEventSimple76.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple79 = importHistoryEventSimple76.setId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] { importHistoryEventSimple47, importHistoryEventSimple52, importHistoryEventSimple53, importHistoryEventSimple61, importHistoryEventSimple65, importHistoryEventSimple66, importHistoryEventSimple72, importHistoryEventSimple76 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList81 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList81, importHistoryEventSimpleArray80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod83 = postAnalysisMethod43.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList81);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList84 = postAnalysisMethod43.getImportHistoryEventSimples();
        postLabAnalysisMethod39.ImportHistoryEventSimples = importHistoryEventSimpleList84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport86 = labReport28.setImportHistoryEventSimples(importHistoryEventSimpleList84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon87 = postTaxon8.setImportHistoryEventSimples(importHistoryEventSimpleList84);
        postTaxon8.ItisComment = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        org.junit.Assert.assertNotNull(postTaxon8);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Taxon");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MaxDuration" + "'", str14, "MaxDuration");
        org.junit.Assert.assertNotNull(laboratory20);
        org.junit.Assert.assertNotNull(labReport21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(labReport24);
        org.junit.Assert.assertNotNull(labReport28);
        org.junit.Assert.assertNotNull(labReport30);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod33);
        org.junit.Assert.assertNotNull(observedPropertyArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod37);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod39);
        org.junit.Assert.assertNotNull(observedPropertyList40);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod42);
        org.junit.Assert.assertNull(importHistoryEventSimpleList44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + importType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType49.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNull(userProfile51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + importType55 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType55.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNull(userProfile57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(importHistoryEventSimple61);
        org.junit.Assert.assertNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(importHistoryEventSimple65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + importType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType68.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNull(userProfile70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + importType74 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType74.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(importHistoryEventSimple79);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(postAnalysisMethod83);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList84);
        org.junit.Assert.assertNotNull(labReport86);
        org.junit.Assert.assertNotNull(postTaxon87);
    }

    @Test
    public void test56561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56561");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition2 = tagDefinition0.setValueType(tagValueType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition4 = tagDefinition2.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType5 = tagDefinition4.ValueType;
        org.junit.Assert.assertNotNull(tagDefinition2);
        org.junit.Assert.assertNotNull(tagDefinition4);
        org.junit.Assert.assertNull(tagValueType5);
    }

    @Test
    public void test56562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56562");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        postExtendedAttribute0.ValueType = tagValueType1;
        java.lang.Boolean boolean3 = postExtendedAttribute0.Required;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList4 = postExtendedAttribute0.Applicability;
        postExtendedAttribute0.Required = false;
        java.lang.Boolean boolean7 = postExtendedAttribute0.isVisibleInDatasetList();
        postExtendedAttribute0.Required = false;
        org.junit.Assert.assertTrue("'" + tagValueType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList4);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test56563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56563");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity();
        searchResultActivity0.Cursor = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity4 = searchResultActivity0.setCursor("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity6 = searchResultActivity4.setTotalCount((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(searchResultActivity4);
        org.junit.Assert.assertNotNull(searchResultActivity6);
    }

    @Test
    public void test56564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56564");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str1 = putLabReport0.getId();
        java.lang.String str2 = putLabReport0.getQcSummary();
        java.lang.String str3 = putLabReport0.QcSummary;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test56565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56565");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str2 = postBasicTimeSeries1.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase5 = putParameter3.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str6 = putParameter3.getRoundingSpec();
        java.lang.String str7 = putParameter3.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList9 = postCalculatedDerivedTimeSeries8.TimeSeriesUniqueIds;
        java.lang.String str10 = postCalculatedDerivedTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries12 = postCalculatedDerivedTimeSeries8.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str13 = postCalculatedDerivedTimeSeries12.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart16 = inputPart14.setHeaders((java.lang.Object) interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries12.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase18 = putParameter3.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase20 = parameterBase18.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase18.InterpolationType = interpolationType21;
        postBasicTimeSeries1.InterpolationType = interpolationType21;
        parameter0.InterpolationType = interpolationType21;
        parameter0.Identifier = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        parameter0.DisplayName = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str29 = parameter0.UnitIdentifier;
        java.lang.String str30 = parameter0.UniqueId;
        java.lang.String str31 = parameter0.Identifier;
        parameter0.Identifier = "";
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(parameterBase5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str13, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart16);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(parameterBase18);
        org.junit.Assert.assertNotNull(parameterBase20);
        org.junit.Assert.assertTrue("'" + interpolationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str31, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
    }

    @Test
    public void test56566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56566");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        java.lang.String str7 = postDatumConvertedTimeSeries0.Parameter;
        postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum = true;
        java.lang.String str10 = postDatumConvertedTimeSeries0.LocationUniqueId;
        postDatumConvertedTimeSeries0.Unit = "-PT87591240H";
        java.lang.String str13 = postDatumConvertedTimeSeries0.getComment();
        java.lang.Boolean boolean14 = postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum;
        java.lang.Boolean boolean15 = postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + true + "'", boolean15, true);
    }

    @Test
    public void test56567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56567");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        java.lang.Object obj2 = putExtendedAttribute0.getResponseType();
        java.lang.String str3 = putExtendedAttribute0.DefaultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType4 = putExtendedAttribute0.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType5 = putExtendedAttribute0.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate9 = specimenTemplate7.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate9.Preservative = preservativeType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = specimenTemplate9.setAuditAttributes(auditAttributes15);
        extendedAttributeDefinition6.AuditAttributes = auditAttributes15;
        java.lang.Boolean boolean19 = extendedAttributeDefinition6.Mandatory;
        java.lang.Boolean boolean20 = extendedAttributeDefinition6.Mandatory;
        extendedAttributeDefinition6.DefaultValue = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str23 = extendedAttributeDefinition6.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList24 = extendedAttributeDefinition6.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        java.lang.String str26 = postSpreadsheetTemplate25.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory27.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str30 = laboratory27.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = laboratory27.getAuditAttributes();
        java.lang.String str32 = laboratory27.getPointOfContact();
        java.lang.String str33 = laboratory27.EmailAddress;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList36, samplingLocationGroupArray35);
        postAccessGroup34.SamplingLocationGroups = samplingLocationGroupList36;
        java.lang.String str39 = postAccessGroup34.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str41 = postLaboratory40.Address;
        java.lang.String str42 = postLaboratory40.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity45 = samplingPlanPlannedActivity43.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = auditAttributes46.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity45.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = samplingPlanPlannedActivity45.AuditAttributes;
        postLaboratory40.AuditAttributes = auditAttributes50;
        postAccessGroup34.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory53 = laboratory27.setAuditAttributes(auditAttributes50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate54 = postSpreadsheetTemplate25.setAuditAttributes(auditAttributes50);
        extendedAttributeDefinition6.AuditAttributes = auditAttributes50;
        putExtendedAttribute0.AuditAttributes = auditAttributes50;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(appliesToType4);
        org.junit.Assert.assertNull(appliesToType5);
        org.junit.Assert.assertNotNull(specimenTemplate9);
        org.junit.Assert.assertTrue("'" + preservativeType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(specimenTemplate17);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(extendedAttributeListItemList24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity45);
        org.junit.Assert.assertNotNull(auditAttributes48);
        org.junit.Assert.assertNotNull(auditAttributes50);
        org.junit.Assert.assertNotNull(laboratory53);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate54);
    }

    @Test
    public void test56568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56568");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_2 = postObservationsDryRunV2_0.setLinkFieldVisitsForNewObservations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_4 = postObservationsDryRunV2_0.setFileType("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        postObservationsDryRunV2_4.TimeZoneOffset = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_8 = postObservationsDryRunV2_4.setTimeZoneOffset("http://MaxDurationhttp/json/reply/Double");
        java.lang.String str9 = postObservationsDryRunV2_4.FileType;
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_2);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_4);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str9, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
    }

    @Test
    public void test56569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56569");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str1 = volumetricDischargeReading0.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeSummary2.getMeanGageHeight();
        java.lang.String str4 = dischargeSummary2.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = doubleWithDisplay7.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary2.DurationInHours = doubleWithDisplay9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading11 = volumetricDischargeReading0.setDischarge(doubleWithDisplay9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = reading12.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading12.setParameterId("hi!");
        java.lang.String str16 = reading12.MonitoringMethod;
        reading12.SubLocationIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.util.ArrayList<java.lang.String> strList19 = reading12.ReadingQualifiers;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary20.BaseFlow = baseFlowType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType27 = dischargeSummary20.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = dischargeSummary20.getDurationInHours();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = dischargeSummary20.Discharge;
        dischargeSummary20.MeanGageHeightWasDatumConverted = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment32 = dischargeSummary20.Adjustment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary20.DischargeUncertainty = dischargeUncertainty33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType36 = dischargeChannelMeasurement35.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement38 = dischargeChannelMeasurement35.setChannel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.time.Instant instant39 = null;
        dischargeChannelMeasurement38.EndTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType channelStabilityType41 = dischargeChannelMeasurement38.getChannelStability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = null;
        adcpDischargeActivity42.TransducerDepth = quantityWithDisplay43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary45.Reviewer = "";
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary45.MeasurementTime = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType50 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary45.BaseFlow = baseFlowType50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary45.DischargeUncertainty = dischargeUncertainty52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = dischargeSummary54.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = dischargeSummary54.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay57 = dischargeSummary54.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay60 = doubleWithDisplay58.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = dischargeSummary54.setDurationInHours(doubleWithDisplay58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty62 = dischargeUncertainty52.setQuantitativeUncertainty(doubleWithDisplay58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity63 = adcpDischargeActivity42.setTopEstimateExponent(doubleWithDisplay58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity65 = adcpDischargeActivity42.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay66 = adcpDischargeActivity42.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str68 = datumConvertedQuantityWithDisplay67.TargetDatum;
        adcpDischargeActivity42.Area = datumConvertedQuantityWithDisplay67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement70 = dischargeChannelMeasurement38.setDistanceToGage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay67);
        dischargeUncertainty33.QuantitativeUncertainty = datumConvertedQuantityWithDisplay67;
        reading12.AdjustmentAmount = datumConvertedQuantityWithDisplay67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay74 = datumConvertedQuantityWithDisplay67.setNumeric((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading75 = volumetricDischargeReading11.setVolumeChange(doubleWithDisplay74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay76 = volumetricDischargeReading11.getDischarge();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading78 = volumetricDischargeReading11.setName("zZZZZ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(volumetricDischargeReading11);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + baseFlowType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(doubleWithDisplay28);
        org.junit.Assert.assertNull(quantityWithDisplay29);
        org.junit.Assert.assertNull(adjustment32);
        org.junit.Assert.assertNull(channelMaterialType36);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement38);
        org.junit.Assert.assertNull(channelStabilityType41);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + baseFlowType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType50.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertNull(quantityWithDisplay56);
        org.junit.Assert.assertNull(doubleWithDisplay57);
        org.junit.Assert.assertNotNull(doubleWithDisplay60);
        org.junit.Assert.assertNotNull(dischargeSummary61);
        org.junit.Assert.assertNotNull(dischargeUncertainty62);
        org.junit.Assert.assertNotNull(adcpDischargeActivity63);
        org.junit.Assert.assertNotNull(adcpDischargeActivity65);
        org.junit.Assert.assertNull(doubleWithDisplay66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement70);
        org.junit.Assert.assertNotNull(doubleWithDisplay74);
        org.junit.Assert.assertNotNull(volumetricDischargeReading75);
        org.junit.Assert.assertNotNull(doubleWithDisplay76);
        org.junit.Assert.assertNotNull(volumetricDischargeReading78);
    }

    @Test
    public void test56570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56570");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj1 = postObservedProperty0.getResponseType();
        java.lang.String str2 = postObservedProperty0.Name;
        java.lang.Object obj3 = postObservedProperty0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str5 = shippingContainer4.TrackingId;
        shippingContainer4.TrackingId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = specimenTemplate8.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate10.Preservative = preservativeType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = specimenTemplate10.setAuditAttributes(auditAttributes16);
        java.lang.String str19 = specimenTemplate10.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = postSamplingLocationGroup20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = locationGroupType22.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType25 = locationGroupType22.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup20.LocationGroupType = locationGroupType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup28 = postSamplingLocationGroup20.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = samplingPlanPlannedActivity30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = auditAttributes33.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity32.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = samplingPlanPlannedActivity32.AuditAttributes;
        putAccessGroup29.AuditAttributes = auditAttributes37;
        postSamplingLocationGroup20.AuditAttributes = auditAttributes37;
        specimenTemplate10.AuditAttributes = auditAttributes37;
        shippingContainer4.AuditAttributes = auditAttributes37;
        postObservedProperty0.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty44 = postObservedProperty0.setUnitGroup(unitGroup43);
        java.lang.String str45 = postObservedProperty44.Description;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(specimenTemplate10);
        org.junit.Assert.assertTrue("'" + preservativeType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(specimenTemplate18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(locationGroupType25);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup28);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity32);
        org.junit.Assert.assertNotNull(auditAttributes35);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(postObservedProperty44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test56571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56571");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.time.Instant instant2 = getObservationExportIIV2_0.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str4 = postExtendedAttribute3.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType5 = postExtendedAttribute3.ValueType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList7 = getExportSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        getExportSpecimens6.Before = instant15;
        java.util.List<java.lang.String> strList20 = getExportSpecimens6.getLaboratoryIds();
        java.util.List<java.lang.String> strList21 = getExportSpecimens6.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType23 = samplingPlanPlannedActivityRecurrence22.RecurrenceFrequency;
        java.util.List<java.lang.String> strList24 = samplingPlanPlannedActivityRecurrence22.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier27 = putQualifier25.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray39 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTagUniqueIds(strList40);
        getObservationsV2_29.QualityControlTypes = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest28.setTimeSeriesUniqueIds(strList40);
        putQualifier25.GroupIdentifiers = strList40;
        java.util.ArrayList<java.lang.String> strList46 = putQualifier25.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence22.MonthsOfYear = strList46;
        getExportSpecimens6.ActivityTypes = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute49 = postExtendedAttribute3.setPickListValues(strList46);
        getObservationExportIIV2_0.SpecimenIds = strList46;
        getObservationExportIIV2_0.CustomId = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str54 = referencePoint53.Name;
        java.time.Instant instant55 = referencePoint53.getPrimarySinceDate();
        java.lang.Double double56 = referencePoint53.Longitude;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList57 = referencePoint53.ReferencePointPeriods;
        java.time.Instant instant58 = referencePoint53.getDecommissionedDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary62.Reviewer = "";
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary62.MeasurementTime = instant65;
        postRecurringReport61.NextGenerationDate = instant65;
        java.time.Instant instant68 = postRecurringReport61.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset69 = statisticalDateTimeOffset60.setDateTimeOffset(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest70 = ratingModelEffectiveShiftsByStageValuesServiceRequest59.setMeasurementTime(instant68);
        referencePoint53.DecommissionedDate = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType73 = null;
        controlConditionActivity72.ControlCleaned = controlCleanedType73;
        java.lang.String str75 = controlConditionActivity72.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary76.Reviewer = "";
        java.time.Instant instant79 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary76.MeasurementTime = instant79;
        controlConditionActivity72.DateCleaned = instant79;
        java.lang.String str82 = controlConditionActivity72.getFlowOverControl();
        java.time.Instant instant83 = controlConditionActivity72.getDateCleaned();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint84 = referencePoint53.setPrimarySinceDate(instant83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_85 = getObservationExportIIV2_0.setStartResultTime(instant83);
        java.lang.Double double86 = getObservationExportIIV2_0.MaxNumericResultValue;
        java.time.Instant instant87 = getObservationExportIIV2_0.getStartResultTime();
        java.lang.String str88 = getObservationExportIIV2_0.getDepthUnitId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(tagValueType5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(recurrenceFrequencyType23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(putQualifier27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(editableExtendedAttribute49);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNull(double56);
        org.junit.Assert.assertNull(referencePointPeriodList57);
        org.junit.Assert.assertNull(instant58);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset69);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest70);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(referencePoint84);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_85);
        org.junit.Assert.assertNull(double86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test56572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56572");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading2.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading2.setSerialNumber("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType8 = null;
        uncertainty7.UncertaintyType = uncertaintyType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = uncertainty7.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty11.QualitativeUncertainty = qualitativeUncertaintyType12;
        uncertainty7.QualitativeUncertainty = qualitativeUncertaintyType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty16 = uncertainty7.setQualitativeUncertainty(qualitativeUncertaintyType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType18 = null;
        uncertainty17.UncertaintyType = uncertaintyType18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = uncertainty17.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty21.QualitativeUncertainty = qualitativeUncertaintyType22;
        uncertainty17.QualitativeUncertainty = qualitativeUncertaintyType22;
        uncertainty16.QualitativeUncertainty = qualitativeUncertaintyType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType26 = null;
        uncertainty16.QualitativeUncertainty = qualitativeUncertaintyType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading28 = fieldVisitReading6.setUncertainty(uncertainty16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType29 = uncertainty16.UncertaintyType;
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty16);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(fieldVisitReading28);
        org.junit.Assert.assertNull(uncertaintyType29);
    }

    @Test
    public void test56573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56573");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        timeAlignedPoint8.DisplayValue7 = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str14 = timeAlignedPoint8.Qualifiers8;
        timeAlignedPoint8.ApprovalName9 = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test56574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56574");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift2 = ratingShift0.setPeriodOfApplicability(periodOfApplicability1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double4 = ratingShiftPoint3.getInputValue();
        java.lang.Double double5 = ratingShiftPoint3.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double7 = ratingShiftPoint6.getInputValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint10 = ratingShiftPoint8.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint8.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint15 = ratingShiftPoint13.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint13.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] ratingShiftPointArray19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] { ratingShiftPoint3, ratingShiftPoint6, ratingShiftPoint8, ratingShiftPoint13, ratingShiftPoint18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>) ratingShiftPointList20, ratingShiftPointArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift22 = ratingShift0.setShiftPoints(ratingShiftPointList20);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList23 = ratingShift0.getShiftPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability24 = ratingShift0.PeriodOfApplicability;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList25 = null;
        ratingShift0.ShiftPoints = ratingShiftPointList25;
        org.junit.Assert.assertNotNull(ratingShift2);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNotNull(ratingShiftPoint10);
        org.junit.Assert.assertNotNull(ratingShiftPoint15);
        org.junit.Assert.assertNotNull(ratingShiftPointArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(ratingShift22);
        org.junit.Assert.assertNotNull(ratingShiftPointList23);
        org.junit.Assert.assertNull(periodOfApplicability24);
    }

    @Test
    public void test56575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56575");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = samplingPlanPlannedActivity1.setAuditAttributes(auditAttributes2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = auditAttributes4.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity3.AuditAttributes = auditAttributes4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = samplingPlanPlannedActivity3.AuditAttributes;
        putAccessGroup0.AuditAttributes = auditAttributes8;
        java.lang.String str10 = putAccessGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup12 = putAccessGroup0.setName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup14 = putAccessGroup12.setId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup16 = putAccessGroup12.setId("multipart/form-data; boundary=****b32afde2-1a30-49af-8737-f89cabfac033****");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity3);
        org.junit.Assert.assertNotNull(auditAttributes6);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(putAccessGroup12);
        org.junit.Assert.assertNotNull(putAccessGroup14);
        org.junit.Assert.assertNotNull(putAccessGroup16);
    }

    @Test
    public void test56576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56576");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.TagNames;
        java.lang.String str3 = locationDescriptionListServiceRequest0.LocationFolder;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str5 = deleteFieldVisits4.Sort;
        deleteFieldVisits4.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList8 = deleteFieldVisits4.getScheduleIds();
        java.util.List<java.lang.String> strList9 = deleteFieldVisits4.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        postTag10.PickListValues = strList15;
        java.util.ArrayList<java.lang.String> strList19 = postTag10.PickListValues;
        deleteFieldVisits4.PlanningStatuses = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest21 = locationDescriptionListServiceRequest0.setTagKeys(strList19);
        java.util.ArrayList<java.lang.String> strList22 = locationDescriptionListServiceRequest21.getTagKeys();
        java.util.ArrayList<java.lang.String> strList23 = locationDescriptionListServiceRequest21.getTagNames();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits26 = deleteFieldVisits24.setSort("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList27 = deleteFieldVisits24.SamplingLocationIds;
        java.time.Instant instant28 = deleteFieldVisits24.getStartStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase31 = locationDatumPeriod29.setComment("'.'SSSSSSS");
        java.lang.Double double32 = locationDatumPeriodBase31.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant34 = qualifier33.DateApplied;
        java.lang.String str35 = qualifier33.User;
        java.lang.String str36 = qualifier33.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj38 = timeAlignedDataServiceRequest37.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = locationDescriptionListServiceResponse39.setNextToken(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = timeAlignedDataServiceRequest37.setQueryFrom(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier43 = qualifier33.setDateApplied(instant40);
        java.time.Instant instant44 = qualifier43.getDateApplied();
        locationDatumPeriodBase31.ValidFrom = instant44;
        deleteFieldVisits24.EndStartTime = instant44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList48 = putOpenIdConnectRelyingPartyConfiguration47.getScopes();
        java.lang.String str49 = putOpenIdConnectRelyingPartyConfiguration47.RedirectUri;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase51 = putOpenIdConnectRelyingPartyConfiguration47.setDisplayName("https");
        openIdConnectRelyingPartyConfigurationBase51.ClientSecret = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest54.ReportTitle = "MinDuration";
        java.lang.String str57 = reportListServiceRequest54.getLocationUniqueId();
        java.time.Instant instant58 = null;
        reportListServiceRequest54.CreatedFrom = instant58;
        java.lang.String[] strArray72 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        reportListServiceRequest54.TagValues = strList73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase76 = openIdConnectRelyingPartyConfigurationBase51.setScopes((java.util.List<java.lang.String>) strList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits77 = deleteFieldVisits24.setScheduleIds((java.util.List<java.lang.String>) strList73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest78 = locationDescriptionListServiceRequest21.setTagValues(strList73);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList79 = null;
        locationDescriptionListServiceRequest21.ExtendedFilters = extendedAttributeFilterList79;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(deleteFieldVisits26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase31);
        org.junit.Assert.assertNull(double32);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse41);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest42);
        org.junit.Assert.assertNotNull(qualifier43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase51);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase76);
        org.junit.Assert.assertNotNull(deleteFieldVisits77);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest78);
    }

    @Test
    public void test56577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56577");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold> timeSeriesThresholdList1 = timeSeriesDescription0.Thresholds;
        java.lang.String str2 = timeSeriesDescription0.UtcOffsetIsoDuration;
        timeSeriesDescription0.ComputationIdentifier = "http";
        java.time.Instant instant5 = timeSeriesDescription0.LastModified;
        java.lang.String str6 = timeSeriesDescription0.getTimeSeriesType();
        org.junit.Assert.assertNull(timeSeriesThresholdList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test56578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56578");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = importItemObservation16.Item;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation20 = importItemSamplingLocation18.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.QualityControlTypes = strList33;
        java.util.List<java.lang.String> strList37 = getObservationsV2_22.getLabReportIds();
        importItem21.Errors = getObservationsV2_22;
        java.lang.Object obj39 = importItem21.getExistingItem();
        importItem21.Input = "hi!";
        java.lang.Object obj42 = importItem21.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem44 = importItem21.setStatus(importItemStatusType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation45 = importItemSamplingLocation20.setStatus(importItemStatusType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation47 = importItemSamplingLocation20.setStatus(importItemStatusType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation48 = importItemObservation16.setStatus(importItemStatusType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation49 = importItemObservation48.Item;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition52 = extendedAttributeDefinition50.setMandatory((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition54 = extendedAttributeDefinition52.setDefaultValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation55 = importItemObservation48.setErrors((java.lang.Object) extendedAttributeDefinition54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition57 = extendedAttributeDefinition54.setCustomId("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType59 = null;
        postExtendedAttribute58.DataType = dataType59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute62 = postExtendedAttribute58.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str64 = extendedAttributeListItem63.getId();
        java.lang.String str65 = extendedAttributeListItem63.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str69 = extendedAttributeListItem68.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str71 = extendedAttributeListItem70.CustomId;
        extendedAttributeListItem70.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem63, extendedAttributeListItem66, extendedAttributeListItem67, extendedAttributeListItem68, extendedAttributeListItem70 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList75, extendedAttributeListItemArray74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute77 = postExtendedAttribute62.setDropDownListItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList75);
        java.lang.Object obj78 = postExtendedAttribute62.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType79 = postExtendedAttribute62.DataType;
        java.lang.String str80 = postExtendedAttribute62.getDescription();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList81 = postExtendedAttribute62.DropDownListItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition82 = extendedAttributeDefinition57.setDropDownListItems(extendedAttributeListItemList81);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(observation17);
        org.junit.Assert.assertNotNull(importItemSamplingLocation20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + importItemStatusType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem44);
        org.junit.Assert.assertNotNull(importItemSamplingLocation45);
        org.junit.Assert.assertTrue("'" + importItemStatusType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation47);
        org.junit.Assert.assertNotNull(importItemObservation48);
        org.junit.Assert.assertNull(observation49);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition52);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition54);
        org.junit.Assert.assertNotNull(importItemObservation55);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition57);
        org.junit.Assert.assertNotNull(postExtendedAttribute62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(postExtendedAttribute77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNull(dataType79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(extendedAttributeListItemList81);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition82);
    }

    @Test
    public void test56579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56579");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        sensor0.UnitId = "http://MaxDurationhttp/json/reply/ArrayList";
        sensor0.LocationUniqueId = "";
        sensor0.ParameterId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str8 = sensor0.ParameterId;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test56580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56580");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary9 = taxonImportSummary0.setSuccessCount((java.lang.Integer) (-1));
        taxonImportSummary0.InvalidRowsCsvUrl = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary13 = taxonImportSummary0.setInvalidRowsCsvUrl("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary15 = taxonImportSummary0.setSkippedCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary17 = taxonImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int19 = samplingLocationImportSummary18.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList20 = samplingLocationImportSummary18.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList21 = samplingLocationImportSummary18.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary23 = samplingLocationImportSummary18.setExpectedCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary24.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList27 = taxonImportSummary24.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation30 = importSummaryObservation28.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation32 = importSummaryObservation30.setSuccessCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary33.UpdateCount = (-1);
        java.lang.Integer int36 = observationImportSummary33.ExpectedCount;
        java.lang.String str37 = observationImportSummary33.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList39, importErrorArray38);
        observationImportSummary33.ImportJobErrors = importErrorList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation42 = importSummaryObservation30.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList39);
        taxonImportSummary24.ImportJobErrors = importErrorList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary44 = samplingLocationImportSummary18.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary45 = taxonImportSummary0.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary47 = taxonImportSummary45.setUpdateCount((java.lang.Integer) 5);
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNotNull(taxonImportSummary9);
        org.junit.Assert.assertNotNull(taxonImportSummary13);
        org.junit.Assert.assertNotNull(taxonImportSummary15);
        org.junit.Assert.assertNotNull(taxonImportSummary17);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(importItemSamplingLocationList20);
        org.junit.Assert.assertNull(importErrorList21);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary23);
        org.junit.Assert.assertNull(importItemTaxonList27);
        org.junit.Assert.assertNotNull(importSummaryObservation30);
        org.junit.Assert.assertNotNull(importSummaryObservation32);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(importErrorArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(importSummaryObservation42);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary44);
        org.junit.Assert.assertNotNull(taxonImportSummary45);
        org.junit.Assert.assertNotNull(taxonImportSummary47);
    }

    @Test
    public void test56581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56581");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest();
        timeSeriesDescriptionServiceRequest0.ComputationIdentifier = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest4 = timeSeriesDescriptionServiceRequest0.setComputationPeriodIdentifier("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str5 = timeSeriesDescriptionServiceRequest0.getComputationIdentifier();
        java.lang.Boolean boolean6 = timeSeriesDescriptionServiceRequest0.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest8 = timeSeriesDescriptionServiceRequest0.setLocationIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest9.Publish = true;
        timeSeriesUniqueIdListServiceRequest9.LocationIdentifier = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter16 = extendedAttributeFilter14.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str17 = extendedAttributeFilter14.getFilterValue();
        extendedAttributeFilter14.FilterName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter22 = extendedAttributeFilter20.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter24 = extendedAttributeFilter22.setFilterValue("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str26 = extendedAttributeFilter25.FilterValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter29 = extendedAttributeFilter27.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter32 = extendedAttributeFilter30.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter35 = extendedAttributeFilter33.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str36 = extendedAttributeFilter33.getFilterValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter39 = extendedAttributeFilter37.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str40 = extendedAttributeFilter37.getFilterName();
        extendedAttributeFilter37.FilterName = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter45 = extendedAttributeFilter43.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str46 = extendedAttributeFilter43.getFilterName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str49 = extendedAttributeFilter48.FilterName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter52 = extendedAttributeFilter50.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str53 = extendedAttributeFilter50.getFilterName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str56 = extendedAttributeFilter55.FilterName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter[] extendedAttributeFilterArray57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter[] { extendedAttributeFilter14, extendedAttributeFilter22, extendedAttributeFilter25, extendedAttributeFilter27, extendedAttributeFilter30, extendedAttributeFilter33, extendedAttributeFilter37, extendedAttributeFilter43, extendedAttributeFilter47, extendedAttributeFilter48, extendedAttributeFilter50, extendedAttributeFilter54, extendedAttributeFilter55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter>) extendedAttributeFilterList58, extendedAttributeFilterArray57);
        timeSeriesUniqueIdListServiceRequest9.ExtendedFilters = extendedAttributeFilterList58;
        timeSeriesDescriptionServiceRequest0.ExtendedFilters = extendedAttributeFilterList58;
        timeSeriesDescriptionServiceRequest0.ComputationPeriodIdentifier = "http";
        java.lang.Boolean boolean64 = timeSeriesDescriptionServiceRequest0.Publish;
        timeSeriesDescriptionServiceRequest0.Parameter = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        timeSeriesDescriptionServiceRequest0.Parameter = "zZZZZ";
        timeSeriesDescriptionServiceRequest0.LocationIdentifier = "multipart/form-data; boundary=****c052e2e0-9b0e-4df2-9a74-52850b5df85a****";
        org.junit.Assert.assertNotNull(timeSeriesDescriptionServiceRequest4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MinInstant" + "'", str5, "MinInstant");
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionServiceRequest8);
        org.junit.Assert.assertNotNull(extendedAttributeFilter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str17, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(extendedAttributeFilter22);
        org.junit.Assert.assertNotNull(extendedAttributeFilter24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(extendedAttributeFilter29);
        org.junit.Assert.assertNotNull(extendedAttributeFilter32);
        org.junit.Assert.assertNotNull(extendedAttributeFilter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str36, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(extendedAttributeFilter39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(extendedAttributeFilter45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(extendedAttributeFilter52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(extendedAttributeFilterArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(boolean64);
    }

    @Test
    public void test56582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56582");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType3 = null;
        observation0.QualityControlType = qualityControlType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = observation0.PlannedFieldResult;
        java.time.OffsetDateTime offsetDateTime6 = observation0.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        java.lang.String str8 = resultGrade7.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType9 = resultGrade7.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation0.setResultGrade(resultGrade7);
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNull(plannedFieldResult5);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(resultGradeSystemCodeType9);
        org.junit.Assert.assertNotNull(observation10);
    }

    @Test
    public void test56583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56583");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocation deleteSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocation();
        java.lang.String str1 = deleteSamplingLocation0.Id;
        java.lang.String str2 = deleteSamplingLocation0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocation deleteSamplingLocation4 = deleteSamplingLocation0.setId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(deleteSamplingLocation4);
    }

    @Test
    public void test56584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56584");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple1 = specimenNestedInActivity0.AnalyticalGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = specimenNestedInActivity0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity5 = specimenNestedInActivity0.setFiltered((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = specimenNestedInActivity5.Filtered;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.ICE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity8 = specimenNestedInActivity5.setPreservative(preservativeType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal11 = observationMinimal9.setSpecimen(specimenNestedInActivity10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = observationMinimal9.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon14 = taxonomicResult13.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon15 = null;
        taxonomicResult13.Taxon = taxon15;
        observationMinimal9.TaxonomicResult = taxonomicResult13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult18 = observationMinimal9.getTaxonomicResult();
        java.time.OffsetDateTime offsetDateTime19 = null;
        observationMinimal9.ResultTime = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple22 = specimenNestedInActivity21.AnalyticalGroup;
        java.lang.String str23 = specimenNestedInActivity21.getFiltrationComment();
        specimenNestedInActivity21.FiltrationComment = "MinDuration";
        specimenNestedInActivity21.FiltrationComment = "POST";
        observationMinimal9.Specimen = specimenNestedInActivity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity30 = specimenNestedInActivity21.setId("0001-01-01T00:00:00.000Z");
        specimenNestedInActivity21.FiltrationComment = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        putSpecimen33.Name = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate36.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = specimenTemplate36.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = specimenTemplate40.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen42 = putSpecimen33.setTemplateCreatedFrom(specimenTemplate40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen44 = putSpecimen33.setFiltrationComment("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = putSpecimen33.getTemplateCreatedFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate48 = specimenTemplate46.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType49 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate48.Preservative = preservativeType49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType51 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN;
        specimenTemplate48.Preservative = preservativeType51;
        specimenTemplate45.Preservative = preservativeType51;
        specimenNestedInActivity21.Preservative = preservativeType51;
        specimenNestedInActivity8.Preservative = preservativeType51;
        org.junit.Assert.assertNull(analyticalGroupSimple1);
        org.junit.Assert.assertNotNull(specimenNestedInActivity3);
        org.junit.Assert.assertNotNull(specimenNestedInActivity5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.ICE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.ICE));
        org.junit.Assert.assertNotNull(specimenNestedInActivity8);
        org.junit.Assert.assertNotNull(observationMinimal11);
        org.junit.Assert.assertNull(observedProperty12);
        org.junit.Assert.assertNull(taxon14);
        org.junit.Assert.assertNotNull(taxonomicResult18);
        org.junit.Assert.assertNull(analyticalGroupSimple22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(specimenNestedInActivity30);
        org.junit.Assert.assertNotNull(specimenTemplate40);
        org.junit.Assert.assertNull(auditAttributes41);
        org.junit.Assert.assertNotNull(putSpecimen42);
        org.junit.Assert.assertNotNull(putSpecimen44);
        org.junit.Assert.assertNotNull(specimenTemplate45);
        org.junit.Assert.assertNotNull(specimenTemplate48);
        org.junit.Assert.assertTrue("'" + preservativeType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType49.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertTrue("'" + preservativeType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN + "'", preservativeType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN));
    }

    @Test
    public void test56585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56585");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag7 = postTag3.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str9 = postTag8.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag11 = postTag8.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag13 = postTag11.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = postDetectioncondition14.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition17 = postDetectioncondition14.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition14.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition21 = postDetectioncondition14.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition14.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj24 = postDetectioncondition14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity27 = samplingPlanPlannedActivity25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = auditAttributes28.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity27.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition32 = postDetectioncondition14.setAuditAttributes(auditAttributes28);
        java.lang.String str33 = postDetectioncondition14.getName();
        java.lang.String str34 = postDetectioncondition14.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate37 = postSpreadsheetTemplate35.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime39 = putSchedule38.StartDate;
        java.time.OffsetDateTime offsetDateTime40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule41 = putSchedule38.setEndDate(offsetDateTime40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = putSchedule41.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime43 = putSchedule41.getEndDate();
        java.time.OffsetDateTime offsetDateTime44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule45 = putSchedule41.setStartDate(offsetDateTime44);
        java.lang.Integer int46 = putSchedule41.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType47 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule41.RecurrenceDayMonthly = recurrenceDayMonthlyType47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = unit49.AuditAttributes;
        unit49.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity56 = samplingPlanPlannedActivity54.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = auditAttributes57.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity56.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = samplingPlanPlannedActivity56.AuditAttributes;
        putAccessGroup53.AuditAttributes = auditAttributes61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit63 = unit49.setAuditAttributes(auditAttributes61);
        putSchedule41.AuditAttributes = auditAttributes61;
        postSpreadsheetTemplate37.AuditAttributes = auditAttributes61;
        postDetectioncondition14.AuditAttributes = auditAttributes61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag67 = postTag11.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str70 = postExtendedAttribute69.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType71 = postExtendedAttribute69.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity74 = samplingPlanPlannedActivity72.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = auditAttributes75.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity74.AuditAttributes = auditAttributes75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = samplingPlanPlannedActivity74.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute80 = postExtendedAttribute69.setAuditAttributes(auditAttributes79);
        java.time.OffsetDateTime offsetDateTime81 = auditAttributes79.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter82 = postFilter68.setAuditAttributes(auditAttributes79);
        java.time.OffsetDateTime offsetDateTime83 = auditAttributes79.CreationTime;
        postTag11.AuditAttributes = auditAttributes79;
        postTag7.AuditAttributes = auditAttributes79;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNotNull(postTag7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postTag11);
        org.junit.Assert.assertNotNull(postTag13);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNotNull(postDetectioncondition17);
        org.junit.Assert.assertNotNull(postDetectioncondition21);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity27);
        org.junit.Assert.assertNotNull(auditAttributes30);
        org.junit.Assert.assertNotNull(postDetectioncondition32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str34, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate37);
        org.junit.Assert.assertNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(putSchedule41);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(putSchedule45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType47.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes50);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity56);
        org.junit.Assert.assertNotNull(auditAttributes59);
        org.junit.Assert.assertNotNull(auditAttributes61);
        org.junit.Assert.assertNotNull(unit63);
        org.junit.Assert.assertNotNull(postTag67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(dataType71);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity74);
        org.junit.Assert.assertNotNull(auditAttributes77);
        org.junit.Assert.assertNotNull(auditAttributes79);
        org.junit.Assert.assertNotNull(postExtendedAttribute80);
        org.junit.Assert.assertNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(postFilter82);
        org.junit.Assert.assertNull(offsetDateTime83);
    }

    @Test
    public void test56586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56586");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty2 = postObservedProperty0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType3 = postObservedProperty0.getAnalysisType();
        java.lang.String str4 = postObservedProperty0.CasNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty6 = postObservedProperty0.setId("multipart/form-data; boundary=****4e5cd403-2823-4e43-9a3f-5d99e3f50f4e****");
        org.junit.Assert.assertNotNull(postObservedProperty2);
        org.junit.Assert.assertNull(analysisType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postObservedProperty6);
    }

    @Test
    public void test56587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56587");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole();
        java.lang.String str1 = deleteLocationUserRole0.getLocationUniqueId();
        java.lang.String str2 = deleteLocationUserRole0.getUserUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole4 = deleteLocationUserRole0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole6 = deleteLocationUserRole0.setLocationUniqueId("MaxDuration");
        deleteLocationUserRole0.UserUniqueId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str9 = deleteLocationUserRole0.UserUniqueId;
        java.lang.String str10 = deleteLocationUserRole0.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationUserRole deleteLocationUserRole12 = deleteLocationUserRole0.setLocationUniqueId("multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****");
        java.lang.String str13 = deleteLocationUserRole0.UserUniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(deleteLocationUserRole4);
        org.junit.Assert.assertNotNull(deleteLocationUserRole6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str9, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str10, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNotNull(deleteLocationUserRole12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str13, "http://MaxDurationhttp/json/reply/ArrayList");
    }

    @Test
    public void test56588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56588");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint2.Value;
        chartDataPoint2.MdlValueUnitCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint7 = chartDataPoint2.setNumericResultUnitCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint9 = chartDataPoint2.setObservedTime(offsetDateTime8);
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint11 = chartDataPoint9.setObservedTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint13 = chartDataPoint9.setMdlValue((java.lang.Double) (-1.0d));
        chartDataPoint9.MdlValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint17 = chartDataPoint9.setMdlValue((java.lang.Double) 0.0d);
        java.lang.String str18 = chartDataPoint17.NumericResultUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint20 = chartDataPoint17.setObservationId("-PT87591240H");
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(chartDataPoint7);
        org.junit.Assert.assertNotNull(chartDataPoint9);
        org.junit.Assert.assertNotNull(chartDataPoint11);
        org.junit.Assert.assertNotNull(chartDataPoint13);
        org.junit.Assert.assertNotNull(chartDataPoint17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str18, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(chartDataPoint20);
    }

    @Test
    public void test56589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56589");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList1 = null;
        putUser0.AccessGroups = strList1;
        java.lang.String str3 = putUser0.CustomId;
        java.util.List<java.lang.String> strList4 = null;
        putUser0.AccessGroups = strList4;
        java.util.List<java.lang.String> strList6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser7 = putUser0.setAccessGroups(strList6);
        java.lang.String str8 = putUser7.Email;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putUser7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test56590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56590");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUserV2 getUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUserV2();
        java.lang.Object obj1 = getUserV2_0.getResponseType();
        java.lang.String str2 = getUserV2_0.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test56591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56591");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList74 = postSamplingLocation0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation76 = postSamplingLocation0.setLatitude("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation78 = postSamplingLocation0.setHorizontalDatum("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList79 = postSamplingLocation0.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = postSamplingLocation0.getAuditAttributes();
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNull(importHistoryEventSimpleList74);
        org.junit.Assert.assertNotNull(postSamplingLocation76);
        org.junit.Assert.assertNotNull(postSamplingLocation78);
        org.junit.Assert.assertNull(extendedAttributeList79);
        org.junit.Assert.assertNull(auditAttributes80);
    }

    @Test
    public void test56592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56592");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        timeAlignedPoint8.Qualifiers8 = "/AQUARIUS/Provisioning/v1";
        timeAlignedPoint8.GradeName5 = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint8.setQualifiers8("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint8.setDisplayValue5("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str17 = timeAlignedPoint8.ApprovalName7;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test56593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56593");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationDatumPeriod putLocationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationDatumPeriod();
        java.lang.String str1 = putLocationDatumPeriod0.LocationUniqueId;
        java.lang.Object obj2 = putLocationDatumPeriod0.getResponseType();
        java.lang.String str3 = putLocationDatumPeriod0.getLocationUniqueId();
        putLocationDatumPeriod0.StandardIdentifier = "/AQUARIUS/Acquisition/v2";
        java.lang.Double double6 = putLocationDatumPeriod0.getUncertainty();
        putLocationDatumPeriod0.LocationUniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Double double9 = putLocationDatumPeriod0.getUncertainty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(double9);
    }

    @Test
    public void test56594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56594");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeChannelMeasurement0.Discharge;
        java.time.Instant instant3 = dischargeChannelMeasurement0.EndTime;
        dischargeChannelMeasurement0.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str6 = dischargeChannelMeasurement0.Channel;
        dischargeChannelMeasurement0.Channel = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = dischargeChannelMeasurement0.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark13 = locationRemark11.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark16 = locationRemark14.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        locationRemark16.FromTime = instant18;
        locationRemark13.CreateTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement22 = dischargeChannelMeasurement10.setEndTime(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.IceSurfaceMount;
        dischargeChannelMeasurement22.MeterSuspension = meterSuspensionType23;
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement10);
        org.junit.Assert.assertNotNull(locationRemark13);
        org.junit.Assert.assertNotNull(locationRemark16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement22);
        org.junit.Assert.assertTrue("'" + meterSuspensionType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.IceSurfaceMount + "'", meterSuspensionType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.IceSurfaceMount));
    }

    @Test
    public void test56595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56595");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList4 = null;
        timeSeriesDataServiceResponse0.Approvals = approvalList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse0.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse7.TimeRange = statisticalTimeRange8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = timeSeriesPoint10.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset13 = null;
        timeSeriesPoint12.Timestamp = statisticalDateTimeOffset13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint16 = timeSeriesPoint12.setTimestamp(statisticalDateTimeOffset15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint17 = timeSeriesPoint10.setTimestamp(statisticalDateTimeOffset15);
        statisticalTimeRange8.EndTime = statisticalDateTimeOffset15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList20 = timeSeriesDataServiceResponse19.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange21 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse22 = timeSeriesDataServiceResponse19.setTimeRange(statisticalTimeRange21);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList23 = null;
        timeSeriesDataServiceResponse19.Approvals = approvalList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse26 = timeSeriesDataServiceResponse19.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse26.TimeRange = statisticalTimeRange27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset30 = timeSeriesPoint29.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset32 = null;
        timeSeriesPoint31.Timestamp = statisticalDateTimeOffset32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint35 = timeSeriesPoint31.setTimestamp(statisticalDateTimeOffset34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint36 = timeSeriesPoint29.setTimestamp(statisticalDateTimeOffset34);
        statisticalTimeRange27.EndTime = statisticalDateTimeOffset34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = statisticalTimeRange27.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange39 = statisticalTimeRange8.setEndTime(statisticalDateTimeOffset38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset40 = statisticalTimeRange8.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset41 = statisticalTimeRange8.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList43 = timeSeriesDataServiceResponse42.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange44 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse45 = timeSeriesDataServiceResponse42.setTimeRange(statisticalTimeRange44);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList46 = null;
        timeSeriesDataServiceResponse42.Approvals = approvalList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse49 = timeSeriesDataServiceResponse42.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse49.TimeRange = statisticalTimeRange50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset53 = timeSeriesPoint52.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset55 = null;
        timeSeriesPoint54.Timestamp = statisticalDateTimeOffset55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint58 = timeSeriesPoint54.setTimestamp(statisticalDateTimeOffset57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint59 = timeSeriesPoint52.setTimestamp(statisticalDateTimeOffset57);
        statisticalTimeRange50.EndTime = statisticalDateTimeOffset57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset61 = statisticalTimeRange50.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList63 = timeSeriesDataServiceResponse62.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange64 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse65 = timeSeriesDataServiceResponse62.setTimeRange(statisticalTimeRange64);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList66 = null;
        timeSeriesDataServiceResponse62.Approvals = approvalList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse69 = timeSeriesDataServiceResponse62.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse69.TimeRange = statisticalTimeRange70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset73 = timeSeriesPoint72.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset75 = null;
        timeSeriesPoint74.Timestamp = statisticalDateTimeOffset75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint78 = timeSeriesPoint74.setTimestamp(statisticalDateTimeOffset77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint79 = timeSeriesPoint72.setTimestamp(statisticalDateTimeOffset77);
        statisticalTimeRange70.EndTime = statisticalDateTimeOffset77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange81 = statisticalTimeRange50.setStartTime(statisticalDateTimeOffset77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset82 = statisticalTimeRange50.StartTime;
        statisticalTimeRange8.EndTime = statisticalDateTimeOffset82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset84 = statisticalTimeRange8.getStartTime();
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(timeSeriesPoint16);
        org.junit.Assert.assertNotNull(timeSeriesPoint17);
        org.junit.Assert.assertNull(interpolationTypeList20);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse22);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse26);
        org.junit.Assert.assertNull(statisticalDateTimeOffset30);
        org.junit.Assert.assertNotNull(timeSeriesPoint35);
        org.junit.Assert.assertNotNull(timeSeriesPoint36);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset38);
        org.junit.Assert.assertNotNull(statisticalTimeRange39);
        org.junit.Assert.assertNull(statisticalDateTimeOffset40);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset41);
        org.junit.Assert.assertNull(interpolationTypeList43);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse45);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse49);
        org.junit.Assert.assertNull(statisticalDateTimeOffset53);
        org.junit.Assert.assertNotNull(timeSeriesPoint58);
        org.junit.Assert.assertNotNull(timeSeriesPoint59);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset61);
        org.junit.Assert.assertNull(interpolationTypeList63);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse65);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse69);
        org.junit.Assert.assertNull(statisticalDateTimeOffset73);
        org.junit.Assert.assertNotNull(timeSeriesPoint78);
        org.junit.Assert.assertNotNull(timeSeriesPoint79);
        org.junit.Assert.assertNotNull(statisticalTimeRange81);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset82);
        org.junit.Assert.assertNull(statisticalDateTimeOffset84);
    }

    @Test
    public void test56596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56596");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_2.DataClassification = dataClassificationType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails7.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails7.setAuditAttributes(auditAttributes12);
        postObservationV2_2.LabResultDetails = labResultDetails13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal17 = observationMinimal15.setSpecimen(specimenNestedInActivity16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty18 = observationMinimal17.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue20 = categoricalResult19.getFixedValue();
        observationMinimal17.CategoricalResult = categoricalResult19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult22.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue25 = categoricalResult22.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult22.NullMeasureQualifier = nullMeasureQualifier26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult28 = categoricalResult19.setNullMeasureQualifier(nullMeasureQualifier26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier29 = categoricalResult19.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup32 = putAnalyticalGroup30.setAnalyticalGroupItems(analyticalGroupItemList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails35 = labResultDetails33.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan36.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime39 = samplingPlan36.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit42 = putUnitGroupWithUnit40.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType43 = putUnitGroupWithUnit40.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity47 = samplingPlanPlannedActivity45.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = auditAttributes48.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity47.AuditAttributes = auditAttributes48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = samplingPlanPlannedActivity47.AuditAttributes;
        putAccessGroup44.AuditAttributes = auditAttributes52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit54 = putUnitGroupWithUnit40.setAuditAttributes(auditAttributes52);
        samplingPlan36.AuditAttributes = auditAttributes52;
        java.time.OffsetDateTime offsetDateTime56 = null;
        auditAttributes52.ModificationTime = offsetDateTime56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails58 = labResultDetails33.setAuditAttributes(auditAttributes52);
        putAnalyticalGroup32.AuditAttributes = auditAttributes52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier60 = nullMeasureQualifier29.setAuditAttributes(auditAttributes52);
        nullMeasureQualifier29.Description = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier64 = nullMeasureQualifier29.setDescription("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        postObservationV2_2.NullMeasureQualifier = nullMeasureQualifier64;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + dataClassificationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(observationMinimal17);
        org.junit.Assert.assertNull(observedProperty18);
        org.junit.Assert.assertNull(categoricalValue20);
        org.junit.Assert.assertNull(categoricalValue25);
        org.junit.Assert.assertNotNull(categoricalResult28);
        org.junit.Assert.assertNotNull(nullMeasureQualifier29);
        org.junit.Assert.assertNotNull(putAnalyticalGroup32);
        org.junit.Assert.assertNotNull(labResultDetails35);
        org.junit.Assert.assertNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit42);
        org.junit.Assert.assertNull(unitGroupSystemCodeType43);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity47);
        org.junit.Assert.assertNotNull(auditAttributes50);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit54);
        org.junit.Assert.assertNotNull(labResultDetails58);
        org.junit.Assert.assertNotNull(nullMeasureQualifier60);
        org.junit.Assert.assertNotNull(nullMeasureQualifier64);
    }

    @Test
    public void test56597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56597");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation1.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation1.setCategoricalResult(categoricalResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7, importHistoryEventSimpleArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation1.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod10 = postLabAnalysisMethod0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = putUnit11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = putDetectioncondition13.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition16 = putDetectioncondition13.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = auditAttributes20.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = samplingPlanPlannedActivity19.AuditAttributes;
        putDetectioncondition13.AuditAttributes = auditAttributes24;
        putUnit11.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod27 = postLabAnalysisMethod10.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod10.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails32 = labResultDetails30.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails34 = labResultDetails32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod35 = postLabAnalysisMethod10.setAuditAttributes(auditAttributes33);
        java.lang.String str36 = postLabAnalysisMethod35.getName();
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(putDetectioncondition16);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod27);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(labResultDetails32);
        org.junit.Assert.assertNotNull(labResultDetails34);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test56598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56598");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType3 = putUserV2_2.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        dischargeSummary6.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse5.setNextToken(instant10);
        java.time.Instant instant14 = locationDescriptionListServiceResponse5.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities4.setToStartTime(instant14);
        java.lang.String str16 = getActivities15.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList18 = getObservationsV2_17.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        getObservationsV2_17.ResultGrades = strList30;
        getActivities15.Media = strList30;
        putUserV2_2.AccessGroups = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens37 = getSpecimens0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList38 = null;
        getSpecimens0.AnalyticalGroupIds = strList38;
        java.util.List<java.lang.String> strList40 = getSpecimens0.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList41 = getSpecimens0.getSpecimenStatuses();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(userType3);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(getSpecimens37);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(strList41);
    }

    @Test
    public void test56599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56599");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse5 = timeSeriesDataServiceResponse3.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse3.setLabel("MinDuration");
        java.lang.String str8 = timeSeriesDataServiceResponse3.getParameter();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList9 = timeSeriesDataServiceResponse3.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList11 = timeSeriesDataServiceResponse10.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange12 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse13 = timeSeriesDataServiceResponse10.setTimeRange(statisticalTimeRange12);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList14 = null;
        timeSeriesDataServiceResponse10.Approvals = approvalList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse17 = timeSeriesDataServiceResponse10.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse17.TimeRange = statisticalTimeRange18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = timeSeriesPoint20.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset23 = null;
        timeSeriesPoint22.Timestamp = statisticalDateTimeOffset23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint26 = timeSeriesPoint22.setTimestamp(statisticalDateTimeOffset25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint27 = timeSeriesPoint20.setTimestamp(statisticalDateTimeOffset25);
        statisticalTimeRange18.EndTime = statisticalDateTimeOffset25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset29 = statisticalTimeRange18.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList31 = timeSeriesDataServiceResponse30.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange32 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse33 = timeSeriesDataServiceResponse30.setTimeRange(statisticalTimeRange32);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList34 = null;
        timeSeriesDataServiceResponse30.Approvals = approvalList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse37 = timeSeriesDataServiceResponse30.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse37.TimeRange = statisticalTimeRange38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset41 = timeSeriesPoint40.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset43 = null;
        timeSeriesPoint42.Timestamp = statisticalDateTimeOffset43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint46 = timeSeriesPoint42.setTimestamp(statisticalDateTimeOffset45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint47 = timeSeriesPoint40.setTimestamp(statisticalDateTimeOffset45);
        statisticalTimeRange38.EndTime = statisticalDateTimeOffset45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange49 = statisticalTimeRange18.setStartTime(statisticalDateTimeOffset45);
        timeSeriesDataServiceResponse3.TimeRange = statisticalTimeRange49;
        timeSeriesDataServiceResponse3.Label = "multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****";
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(interpolationTypeList9);
        org.junit.Assert.assertNull(interpolationTypeList11);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse13);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse17);
        org.junit.Assert.assertNull(statisticalDateTimeOffset21);
        org.junit.Assert.assertNotNull(timeSeriesPoint26);
        org.junit.Assert.assertNotNull(timeSeriesPoint27);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset29);
        org.junit.Assert.assertNull(interpolationTypeList31);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse33);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse37);
        org.junit.Assert.assertNull(statisticalDateTimeOffset41);
        org.junit.Assert.assertNotNull(timeSeriesPoint46);
        org.junit.Assert.assertNotNull(timeSeriesPoint47);
        org.junit.Assert.assertNotNull(statisticalTimeRange49);
    }

    @Test
    public void test56600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56600");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate2 = postSpreadsheetTemplate0.setId("/AQUARIUS/Acquisition/v2");
        java.lang.String str3 = postSpreadsheetTemplate2.Description;
        java.lang.String str4 = postSpreadsheetTemplate2.getCustomId();
        java.lang.String str5 = postSpreadsheetTemplate2.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule8 = schedule6.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList10, schedulePlannedActivityArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule12 = schedule8.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        schedule8.RecurrenceType = recurrenceType13;
        schedule8.CustomId = "https";
        java.time.OffsetDateTime offsetDateTime17 = schedule8.LastGenerationDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule19 = schedule8.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule21 = schedule19.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule23 = schedule19.setCustomId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.time.OffsetDateTime offsetDateTime24 = schedule23.LastGenerationDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime26 = putSchedule25.StartDate;
        java.time.OffsetDateTime offsetDateTime27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule28 = putSchedule25.setEndDate(offsetDateTime27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup29 = putSchedule28.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime30 = null;
        putSchedule28.EndDate = offsetDateTime30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = putSchedule28.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime35 = putSchedule34.StartDate;
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule37 = putSchedule34.setEndDate(offsetDateTime36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup38 = putSchedule37.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime39 = null;
        putSchedule37.EndDate = offsetDateTime39;
        java.time.OffsetDateTime offsetDateTime41 = putSchedule37.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType42 = putSchedule37.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime44 = putSchedule43.StartDate;
        java.time.OffsetDateTime offsetDateTime45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule46 = putSchedule43.setEndDate(offsetDateTime45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = putSchedule46.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime48 = null;
        putSchedule46.LastGenerationDate = offsetDateTime48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int51 = putSchedule50.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule53 = putSchedule50.setRecurrenceType(recurrenceType52);
        putSchedule46.RecurrenceType = recurrenceType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule55 = putSchedule37.setRecurrenceType(recurrenceType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule56 = putSchedule28.setRecurrenceType(recurrenceType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime58 = putSchedule57.StartDate;
        java.time.OffsetDateTime offsetDateTime59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule60 = putSchedule57.setEndDate(offsetDateTime59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = putSchedule60.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime62 = putSchedule60.getEndDate();
        java.time.OffsetDateTime offsetDateTime63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule64 = putSchedule60.setStartDate(offsetDateTime63);
        java.lang.Integer int65 = putSchedule60.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType66 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule60.RecurrenceDayMonthly = recurrenceDayMonthlyType66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = unit68.AuditAttributes;
        unit68.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity75 = samplingPlanPlannedActivity73.setAuditAttributes(auditAttributes74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = auditAttributes76.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity75.AuditAttributes = auditAttributes76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = samplingPlanPlannedActivity75.AuditAttributes;
        putAccessGroup72.AuditAttributes = auditAttributes80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit82 = unit68.setAuditAttributes(auditAttributes80);
        putSchedule60.AuditAttributes = auditAttributes80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule84 = putSchedule56.setAuditAttributes(auditAttributes80);
        java.lang.String str85 = auditAttributes80.getCreationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule86 = schedule23.setAuditAttributes(auditAttributes80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate87 = postSpreadsheetTemplate2.setAuditAttributes(auditAttributes80);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(schedule8);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(schedule12);
        org.junit.Assert.assertTrue("'" + recurrenceType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(schedule19);
        org.junit.Assert.assertNotNull(schedule21);
        org.junit.Assert.assertNotNull(schedule23);
        org.junit.Assert.assertNull(offsetDateTime24);
        org.junit.Assert.assertNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(putSchedule28);
        org.junit.Assert.assertNull(samplingLocationGroup29);
        org.junit.Assert.assertNotNull(putSchedule33);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(putSchedule37);
        org.junit.Assert.assertNull(samplingLocationGroup38);
        org.junit.Assert.assertNull(offsetDateTime41);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType42);
        org.junit.Assert.assertNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(putSchedule46);
        org.junit.Assert.assertNull(auditAttributes47);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertTrue("'" + recurrenceType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule53);
        org.junit.Assert.assertNotNull(putSchedule55);
        org.junit.Assert.assertNotNull(putSchedule56);
        org.junit.Assert.assertNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(putSchedule60);
        org.junit.Assert.assertNull(auditAttributes61);
        org.junit.Assert.assertNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(putSchedule64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes69);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity75);
        org.junit.Assert.assertNotNull(auditAttributes78);
        org.junit.Assert.assertNotNull(auditAttributes80);
        org.junit.Assert.assertNotNull(unit82);
        org.junit.Assert.assertNotNull(putSchedule84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "'.'SSSSSSS" + "'", str85, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(schedule86);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate87);
    }

    @Test
    public void test56601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56601");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.lang.String str3 = fieldVisitReading0.MonitoringMethod;
        java.lang.Boolean boolean4 = fieldVisitReading0.UseLocationDatumAsReference;
        fieldVisitReading0.ParameterId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties();
        java.util.List<java.lang.String> strList8 = getObservedProperties7.getResultTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int10 = getFieldVisits9.Limit;
        java.util.List<java.lang.String> strList11 = getFieldVisits9.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType14 = putUserV2_13.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary17.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        dischargeSummary17.MeasurementTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse16.setNextToken(instant21);
        java.time.Instant instant25 = locationDescriptionListServiceResponse16.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities26 = getActivities15.setToStartTime(instant25);
        java.lang.String str27 = getActivities26.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList29 = getObservationsV2_28.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray40 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = putLocationTags36.setTagUniqueIds(strList41);
        getObservationsV2_30.QualityControlTypes = strList41;
        getObservationsV2_28.ResultGrades = strList41;
        getActivities26.Media = strList41;
        putUserV2_13.AccessGroups = strList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens48 = getSpecimens12.setSamplingLocationIds((java.util.List<java.lang.String>) strList41);
        getFieldVisits9.PlanningStatuses = strList41;
        java.util.List<java.lang.String> strList50 = getFieldVisits9.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList52 = getFieldVisits51.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        java.util.ArrayList<java.lang.String> strList61 = putLocationTags60.TagUniqueIds;
        getFieldVisits51.ScheduleIds = strList61;
        java.lang.Integer int63 = getFieldVisits51.Limit;
        java.util.List<java.lang.String> strList64 = getFieldVisits51.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        getFieldVisits51.Search = strList68;
        java.lang.String[] strArray83 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits86 = getFieldVisits51.setSamplingPlanIds((java.util.List<java.lang.String>) strList84);
        getFieldVisits9.SamplingLocationIds = strList84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties88 = getObservedProperties7.setAnalysisTypes((java.util.List<java.lang.String>) strList84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading89 = fieldVisitReading0.setQualifiers(strList84);
        fieldVisitReading0.Parameter = "POST";
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(userType14);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(getActivities26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(putLocationTags43);
        org.junit.Assert.assertNotNull(getSpecimens48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(getFieldVisits86);
        org.junit.Assert.assertNotNull(getObservedProperties88);
        org.junit.Assert.assertNotNull(fieldVisitReading89);
    }

    @Test
    public void test56602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56602");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = reading6.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = reading6.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading11 = reading9.setModel("MaxInstant");
        java.lang.Integer int12 = reading11.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField16 = extendedAttributeField14.setDisplayName("");
        java.lang.Boolean boolean17 = extendedAttributeField16.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        getObservationsV2_26.DepthUnitCustomId = "hi!";
        java.lang.String str29 = getObservationsV2_26.CustomId;
        java.util.List<java.lang.String> strList30 = getObservationsV2_26.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_26.setMedia((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str48 = getObservationsV2_47.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        getObservationsV2_47.ProjectIds = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_26.setObservedPropertyIds((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest18.setTimeSeriesOutputUnitIds(strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField58 = extendedAttributeField16.setValueOptions((java.util.List<java.lang.String>) strList52);
        putBulkEditResultGradesV2_13.AnalysisMethodSimpleIds = strList52;
        reading11.ReadingQualifiers = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty61 = importItemObservedProperty5.setFields((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty5 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList63, importItemObservedPropertyArray62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary65 = observedPropertyImportSummary0.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList63);
        java.lang.Integer int66 = observedPropertyImportSummary65.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList67 = observedPropertyImportSummary65.ImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary69 = observedPropertyImportSummary65.setNewCount((java.lang.Integer) 1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList70 = observedPropertyImportSummary69.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary72 = observedPropertyImportSummary69.setExpectedCount((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNotNull(reading9);
        org.junit.Assert.assertNotNull(reading11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(extendedAttributeField16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
        org.junit.Assert.assertNotNull(extendedAttributeField58);
        org.junit.Assert.assertNotNull(importItemObservedProperty61);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList67);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary69);
        org.junit.Assert.assertNull(importItemObservedPropertyList70);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary72);
    }

    @Test
    public void test56603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56603");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        java.lang.String str2 = postSpecimen0.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails5.setAuditAttributes(auditAttributes6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        java.lang.String str11 = laboratory8.PhoneNumber;
        java.lang.String str12 = laboratory8.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails5.setLaboratory(laboratory8);
        java.lang.String str14 = laboratory8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen15 = postSpecimen0.setLaboratory(laboratory8);
        postSpecimen15.FiltrationComment = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        java.lang.String str19 = putSpecimen18.Description;
        java.lang.String str20 = putSpecimen18.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate21.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = specimenTemplate21.setId("hi!");
        java.lang.Boolean boolean26 = specimenTemplate25.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen27 = putSpecimen18.setTemplateCreatedFrom(specimenTemplate25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen28 = postSpecimen15.setTemplateCreatedFrom(specimenTemplate25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType29 = postSpecimen28.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType31 = analyticalGroup30.getType();
        analyticalGroup30.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = null;
        analyticalGroupItem40.AnalysisMethod = analysisMethod43;
        java.lang.String str45 = analyticalGroupItem40.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem51.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem51.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = null;
        analyticalGroupItem51.AnalysisMethod = analysisMethod54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem35, analyticalGroupItem37, analyticalGroupItem40, analyticalGroupItem46, analyticalGroupItem49, analyticalGroupItem51 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList57, analyticalGroupItemArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup59 = analyticalGroup34.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList57);
        analyticalGroup30.AnalyticalGroupItems = analyticalGroupItemList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup30.AuditAttributes = auditAttributes61;
        java.lang.String str63 = analyticalGroup30.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType64 = analyticalGroup30.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup66 = analyticalGroup30.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen67 = postSpecimen28.setAnalyticalGroup(analyticalGroup30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer68 = postSpecimen28.getShippingContainer();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MaxInstant" + "'", str14, "MaxInstant");
        org.junit.Assert.assertNotNull(postSpecimen15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(specimenTemplate25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(putSpecimen27);
        org.junit.Assert.assertNotNull(postSpecimen28);
        org.junit.Assert.assertNull(specimenViewStatusType29);
        org.junit.Assert.assertNull(analyticalGroupType31);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(analyticalGroup59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(analyticalGroupType64);
        org.junit.Assert.assertNotNull(analyticalGroup66);
        org.junit.Assert.assertNotNull(postSpecimen67);
        org.junit.Assert.assertNull(shippingContainer68);
    }

    @Test
    public void test56604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56604");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod();
        java.lang.String str1 = putCollectionMethod0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = putCollectionMethod0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod4 = putCollectionMethod0.setId("'.'SSSSSSS");
        putCollectionMethod0.CustomId = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.String str7 = putCollectionMethod0.getIdentifierOrganization();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = putCollectionMethod0.AuditAttributes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(putCollectionMethod4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(auditAttributes8);
    }

    @Test
    public void test56605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56605");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = postSpreadsheetTemplate0.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard4 = postStandard2.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard6 = postStandard4.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList8, observationStandardArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard10 = postStandard6.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard12 = postStandard6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList14, observationStandardArray13);
        postStandard6.ObservationStandards = observationStandardList14;
        java.lang.String str17 = postStandard6.Description;
        postStandard6.Description = "MaxDuration";
        java.lang.String str20 = postStandard6.getName();
        java.lang.String str21 = postStandard6.IssuingOrganization;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        postUnitGroup22.AuditAttributes = auditAttributes23;
        postUnitGroup22.Id = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType27 = postUnitGroup22.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup29 = postUnitGroup22.setSupportsConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit32 = putUnit30.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup33.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup37 = unitGroup33.setSystemCode(unitGroupSystemCodeType36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit38 = putUnit32.setUnitGroup(unitGroup37);
        putUnit32.Id = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity43 = samplingPlanPlannedActivity41.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier46 = putNullMeasureQualifier44.setDescription("");
        putNullMeasureQualifier44.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str50 = standardDefinition49.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime52 = putSchedule51.StartDate;
        java.time.OffsetDateTime offsetDateTime53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule54 = putSchedule51.setEndDate(offsetDateTime53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = putSchedule54.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime56 = null;
        putSchedule54.LastGenerationDate = offsetDateTime56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType58 = putSchedule54.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = plannedFieldResult59.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails63 = labResultDetails61.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails65 = labResultDetails63.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult66 = plannedFieldResult59.setAuditAttributes(auditAttributes64);
        putSchedule54.AuditAttributes = auditAttributes64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition68 = standardDefinition49.setAuditAttributes(auditAttributes64);
        java.time.OffsetDateTime offsetDateTime69 = auditAttributes64.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier70 = putNullMeasureQualifier44.setAuditAttributes(auditAttributes64);
        samplingPlanPlannedActivity41.AuditAttributes = auditAttributes64;
        putUnit32.AuditAttributes = auditAttributes64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup73 = postUnitGroup22.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard74 = postStandard6.setAuditAttributes(auditAttributes64);
        postSpreadsheetTemplate0.AuditAttributes = auditAttributes64;
        org.junit.Assert.assertNull(spreadsheetTemplateType1);
        org.junit.Assert.assertNotNull(postStandard4);
        org.junit.Assert.assertNotNull(postStandard6);
        org.junit.Assert.assertNotNull(observationStandardArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(postStandard10);
        org.junit.Assert.assertNotNull(postStandard12);
        org.junit.Assert.assertNotNull(observationStandardArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(unitGroupSystemCodeType27);
        org.junit.Assert.assertNotNull(postUnitGroup29);
        org.junit.Assert.assertNotNull(putUnit32);
        org.junit.Assert.assertNotNull(unitGroup37);
        org.junit.Assert.assertNotNull(putUnit38);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity43);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(putSchedule54);
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType58);
        org.junit.Assert.assertNull(auditAttributes60);
        org.junit.Assert.assertNotNull(labResultDetails63);
        org.junit.Assert.assertNotNull(labResultDetails65);
        org.junit.Assert.assertNotNull(plannedFieldResult66);
        org.junit.Assert.assertNotNull(standardDefinition68);
        org.junit.Assert.assertNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier70);
        org.junit.Assert.assertNotNull(postUnitGroup73);
        org.junit.Assert.assertNotNull(postStandard74);
    }

    @Test
    public void test56606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56606");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postAnalysisMethod1.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod5 = postLabAnalysisMethod3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7, observedPropertyArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod5.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7);
        postAnalysisMethod1.ObservedProperties = observedPropertyList7;
        java.lang.String str11 = postAnalysisMethod1.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList13 = postAnalysisMethod12.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod16 = postLabAnalysisMethod14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18, observedPropertyArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod16.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        postAnalysisMethod12.ObservedProperties = observedPropertyList18;
        postAnalysisMethod1.ObservedProperties = observedPropertyList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod23 = putLabAnalysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        java.lang.String str24 = putLabAnalysisMethod23.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str26 = collectionMethod25.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = plannedFieldResult27.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails31 = labResultDetails29.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = labResultDetails31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult34 = plannedFieldResult27.setAuditAttributes(auditAttributes32);
        collectionMethod25.AuditAttributes = auditAttributes32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod36 = putLabAnalysisMethod23.setAuditAttributes(auditAttributes32);
        putLabAnalysisMethod23.Context = "http://MaxDurationhttp";
        java.lang.String str39 = putLabAnalysisMethod23.Name;
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod5);
        org.junit.Assert.assertNotNull(observedPropertyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(importHistoryEventSimpleList13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod16);
        org.junit.Assert.assertNotNull(observedPropertyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNotNull(labResultDetails31);
        org.junit.Assert.assertNotNull(labResultDetails33);
        org.junit.Assert.assertNotNull(plannedFieldResult34);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod36);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test56607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56607");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser2 = activeDirectoryUser0.setActiveDirectorySid("MinDuration");
        java.lang.Boolean boolean3 = activeDirectoryUser2.isCanConfigureSystem();
        java.lang.String str4 = activeDirectoryUser2.getActiveDirectorySid();
        java.lang.String str5 = activeDirectoryUser2.UserPrincipalName;
        java.lang.String str6 = activeDirectoryUser2.getUserPrincipalName();
        org.junit.Assert.assertNotNull(activeDirectoryUser2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MinDuration" + "'", str4, "MinDuration");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test56608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56608");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList2 = fieldVisitDataServiceResponse1.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType4 = null;
        controlConditionActivity3.ControlCleaned = controlCleanedType4;
        java.lang.String str6 = controlConditionActivity3.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse7 = fieldVisitDataServiceResponse1.setControlConditionActivity(controlConditionActivity3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity9 = controlConditionActivity3.setControlCleaned(controlCleanedType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse10 = fieldVisitDataServiceResponse0.setControlConditionActivity(controlConditionActivity9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList12 = fieldVisitDataServiceResponse11.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse14 = fieldVisitDataServiceResponse11.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity15 = fieldVisitDataServiceResponse14.LevelSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory17 = attachment16.AttachmentCategory;
        java.lang.Double double18 = attachment16.GpsLongitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory20 = attachment19.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment22 = attachment19.setFileName("");
        attachment19.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment26 = attachment19.setUploadedByUser("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str28 = attachment27.getUrl();
        java.lang.String str29 = attachment27.FileName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str31 = attachment30.getUrl();
        java.lang.String str32 = attachment30.FileName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory34 = attachment33.AttachmentCategory;
        java.lang.Double double35 = attachment33.GpsLongitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory37 = attachment36.AttachmentCategory;
        java.lang.Double double38 = attachment36.GpsLongitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory41 = attachment40.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment43 = attachment40.setFileName("");
        attachment40.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment47 = attachment40.setUploadedByUser("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str49 = attachment48.getUrl();
        java.lang.String str50 = attachment48.FileName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment[] attachmentArray51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment[] { attachment16, attachment19, attachment27, attachment30, attachment33, attachment36, attachment39, attachment47, attachment48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment>) attachmentList52, attachmentArray51);
        fieldVisitDataServiceResponse14.Attachments = attachmentList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse55 = fieldVisitDataServiceResponse10.setAttachments(attachmentList52);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList56 = fieldVisitDataServiceResponse55.CrossSectionSurveyActivity;
        org.junit.Assert.assertNull(dischargeActivityList2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse7);
        org.junit.Assert.assertNotNull(controlConditionActivity9);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse10);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList12);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse14);
        org.junit.Assert.assertNull(levelSurveyActivity15);
        org.junit.Assert.assertNull(attachmentCategory17);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(attachmentCategory20);
        org.junit.Assert.assertNotNull(attachment22);
        org.junit.Assert.assertNotNull(attachment26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(attachmentCategory34);
        org.junit.Assert.assertNull(double35);
        org.junit.Assert.assertNull(attachmentCategory37);
        org.junit.Assert.assertNull(double38);
        org.junit.Assert.assertNull(attachmentCategory41);
        org.junit.Assert.assertNotNull(attachment43);
        org.junit.Assert.assertNotNull(attachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(attachmentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse55);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList56);
    }

    @Test
    public void test56609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56609");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.lang.Object obj1 = putAnalyticalGroup0.getResponseType();
        java.lang.Integer int2 = putAnalyticalGroup0.getNumberOfObservedPropertiesInGroupItems();
        putAnalyticalGroup0.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup6 = putAnalyticalGroup0.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 1);
        java.lang.String str7 = putAnalyticalGroup0.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(putAnalyticalGroup6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str7, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test56610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56610");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate2 = spreadsheetTemplate0.setType(spreadsheetTemplateType1);
        spreadsheetTemplate0.CustomId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        spreadsheetTemplate0.Description = "multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****";
        org.junit.Assert.assertNotNull(spreadsheetTemplate2);
    }

    @Test
    public void test56611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56611");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod5 = observation2.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier6 = null;
        observation2.NullMeasureQualifier = nullMeasureQualifier6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT;
        observation2.DataClassification = dataClassificationType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult10 = observation2.getNumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus11.SystemCode = resultStatusSystemCodeType12;
        resultStatus11.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation2.setResultStatus(resultStatus11);
        java.time.OffsetDateTime offsetDateTime17 = observation2.ResultTime;
        java.lang.String str18 = observation2.CustomId;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNull(collectionMethod5);
        org.junit.Assert.assertTrue("'" + dataClassificationType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT + "'", dataClassificationType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT));
        org.junit.Assert.assertNull(numericResult10);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test56612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56612");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset();
        postBaseStandardReferenceDatumOffset0.LocationUniqueId = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset4 = postBaseStandardReferenceDatumOffset0.setMethod("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        postBaseStandardReferenceDatumOffset4.Method = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.lang.String str7 = postBaseStandardReferenceDatumOffset4.Method;
        java.lang.Object obj8 = postBaseStandardReferenceDatumOffset4.getResponseType();
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str7, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
    }

    @Test
    public void test56613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56613");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        postActivityTemplate0.CustomId = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = null;
        putActivity4.Depth = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = putActivity4.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity9 = null;
        putActivity8.PlannedActivity = plannedActivity9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity12 = null;
        putActivity11.PlannedActivity = plannedActivity12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity14.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity18 = postActivity14.setPlannedActivity(plannedActivity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str20 = samplingContextTag19.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag22 = samplingContextTag19.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag24 = samplingContextTag22.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str26 = samplingContextTag25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str28 = samplingContextTag27.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        samplingContextTag27.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str32 = samplingContextTag31.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag34 = samplingContextTag31.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag24, samplingContextTag25, samplingContextTag27, samplingContextTag34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList36, samplingContextTagArray35);
        postActivity14.SamplingContextTags = samplingContextTagList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity39 = putActivity11.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList36);
        putActivity8.SamplingContextTags = samplingContextTagList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity41 = putActivity4.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList36);
        java.lang.String str42 = putActivity4.SourceActivityId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device43 = putActivity4.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate45.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList50 = specimenTemplate49.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate53 = specimenTemplate51.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList56 = specimenTemplate55.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate45, specimenTemplate48, specimenTemplate49, specimenTemplate53, specimenTemplate54, specimenTemplate55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList58, specimenTemplateArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate60 = postFieldVisitActivityWithTemplate44.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate62 = postFieldVisitActivityWithTemplate60.setCollectionMethod(collectionMethod61);
        putActivity4.CollectionMethod = collectionMethod61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = collectionMethod61.getAuditAttributes();
        postActivityTemplate0.CollectionMethod = collectionMethod61;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(postActivity18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(samplingContextTag22);
        org.junit.Assert.assertNotNull(samplingContextTag24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(samplingContextTag34);
        org.junit.Assert.assertNotNull(samplingContextTagArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putActivity39);
        org.junit.Assert.assertNotNull(putActivity41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(device43);
        org.junit.Assert.assertNull(labInstructionTemplateList50);
        org.junit.Assert.assertNotNull(specimenTemplate53);
        org.junit.Assert.assertNull(labInstructionTemplateList56);
        org.junit.Assert.assertNotNull(specimenTemplateArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate60);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate62);
        org.junit.Assert.assertNull(auditAttributes64);
    }

    @Test
    public void test56614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56614");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = timeAlignedDataServiceRequest0.setTimeSeriesUniqueIds(strList12);
        java.util.ArrayList<java.lang.String> strList17 = timeAlignedDataServiceRequest0.TimeSeriesOutputUnitIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest0.setIncludeGapMarkers((java.lang.Boolean) false);
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
    }

    @Test
    public void test56615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56615");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        importError0.ErrorMessage = "";
        importError0.ErrorFieldValue = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str5 = importError0.ErrorCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError7 = importError0.setErrorCode("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError9 = importError7.setErrorCode("/AQUARIUS/Publish/v2");
        importError9.ErrorMessage = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        importError9.ErrorCode = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(importError7);
        org.junit.Assert.assertNotNull(importError9);
    }

    @Test
    public void test56616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56616");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.String str6 = putSamplingLocationGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = locationGroupType7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType10 = locationGroupType7.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = locationGroupType7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup12 = putSamplingLocationGroup0.setLocationGroupType(locationGroupType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup14 = putSamplingLocationGroup0.setName("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = locationGroupType16.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType19 = locationGroupType16.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup15.LocationGroupType = locationGroupType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = locationGroupType21.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType24 = locationGroupType21.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup15.LocationGroupType = locationGroupType24;
        java.lang.String str26 = putSamplingLocationGroup15.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup28 = putSamplingLocationGroup15.setDescription("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation29.setPlannedFieldResult(plannedFieldResult30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction32 = null;
        observation31.LabInstruction = labInstruction32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation31.setStatistics(observationStatistics34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon36 = null;
        observation31.RelatedTaxon = taxon36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation31.setResultStatus(resultStatus38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime41 = postFilter40.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = postFilter40.getAuditAttributes();
        postFilter40.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime45 = postFilter40.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter46.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList50, samplingLocationArray49);
        postFilter46.SamplingLocations = samplingLocationList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter53 = postFilter40.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList50);
        postFilter53.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = locationGroupType56.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType59 = locationGroupType56.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = locationGroupType56.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str62 = putActivityTemplate61.getId();
        java.lang.String str63 = putActivityTemplate61.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = auditAttributes64.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate67 = putActivityTemplate61.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType68 = locationGroupType56.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter69 = postFilter53.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation70 = observation39.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup71 = putSamplingLocationGroup15.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType72 = putSamplingLocationGroup71.LocationGroupType;
        putSamplingLocationGroup0.LocationGroupType = locationGroupType72;
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(locationGroupType10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup12);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup14);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(locationGroupType19);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNotNull(locationGroupType24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup28);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNull(offsetDateTime41);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(samplingLocationArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(postFilter53);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNotNull(locationGroupType59);
        org.junit.Assert.assertNull(auditAttributes60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(auditAttributes66);
        org.junit.Assert.assertNotNull(putActivityTemplate67);
        org.junit.Assert.assertNotNull(locationGroupType68);
        org.junit.Assert.assertNotNull(postFilter69);
        org.junit.Assert.assertNotNull(observation70);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup71);
        org.junit.Assert.assertNotNull(locationGroupType72);
    }

    @Test
    public void test56617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56617");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifierGroup postQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifierGroup();
        java.lang.Object obj1 = postQualifierGroup0.getResponseType();
        java.lang.String str2 = postQualifierGroup0.getIdentifier();
        java.lang.String str3 = postQualifierGroup0.Identifier;
        java.lang.Object obj4 = postQualifierGroup0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
    }

    @Test
    public void test56618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56618");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4, observedPropertyArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod2.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod8 = postLabAnalysisMethod2.setAuditAttributes(auditAttributes7);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList9 = postLabAnalysisMethod8.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod8.setContext("/AQUARIUS/Acquisition/v2");
        java.lang.String str12 = postLabAnalysisMethod11.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = postLabAnalysisMethod11.setId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = putAnalysisMethod15.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal19 = observationMinimal17.setSpecimen(specimenNestedInActivity18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = observationMinimal19.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue22 = categoricalResult21.getFixedValue();
        observationMinimal19.CategoricalResult = categoricalResult21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult24.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue27 = categoricalResult24.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult24.NullMeasureQualifier = nullMeasureQualifier28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult30 = categoricalResult21.setNullMeasureQualifier(nullMeasureQualifier28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier31 = categoricalResult21.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup34 = putAnalyticalGroup32.setAnalyticalGroupItems(analyticalGroupItemList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails37 = labResultDetails35.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan38.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime41 = samplingPlan38.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit44 = putUnitGroupWithUnit42.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType45 = putUnitGroupWithUnit42.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity49 = samplingPlanPlannedActivity47.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = auditAttributes50.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity49.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = samplingPlanPlannedActivity49.AuditAttributes;
        putAccessGroup46.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit56 = putUnitGroupWithUnit42.setAuditAttributes(auditAttributes54);
        samplingPlan38.AuditAttributes = auditAttributes54;
        java.time.OffsetDateTime offsetDateTime58 = null;
        auditAttributes54.ModificationTime = offsetDateTime58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails60 = labResultDetails35.setAuditAttributes(auditAttributes54);
        putAnalyticalGroup34.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier62 = nullMeasureQualifier31.setAuditAttributes(auditAttributes54);
        putAnalysisMethod15.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = putAnalysisMethod15.getAuditAttributes();
        java.lang.String str65 = putAnalysisMethod15.getDescription();
        putAnalysisMethod15.Id = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList70 = postAnalysisMethod69.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod73 = postLabAnalysisMethod71.setAuditAttributes(auditAttributes72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList75, observedPropertyArray74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod77 = postLabAnalysisMethod73.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList75);
        postAnalysisMethod69.ObservedProperties = observedPropertyList75;
        java.lang.String str79 = postAnalysisMethod69.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList81 = postAnalysisMethod80.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod84 = postLabAnalysisMethod82.setAuditAttributes(auditAttributes83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList86 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList86, observedPropertyArray85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod88 = postLabAnalysisMethod84.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList86);
        postAnalysisMethod80.ObservedProperties = observedPropertyList86;
        postAnalysisMethod69.ObservedProperties = observedPropertyList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod91 = putLabAnalysisMethod68.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList86);
        putAnalysisMethod15.ObservedProperties = observedPropertyList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod93 = postLabAnalysisMethod11.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList86);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList94 = postLabAnalysisMethod11.getObservedProperties();
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observedPropertyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod8);
        org.junit.Assert.assertNotNull(observedPropertyList9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod14);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(observationMinimal19);
        org.junit.Assert.assertNull(observedProperty20);
        org.junit.Assert.assertNull(categoricalValue22);
        org.junit.Assert.assertNull(categoricalValue27);
        org.junit.Assert.assertNotNull(categoricalResult30);
        org.junit.Assert.assertNotNull(nullMeasureQualifier31);
        org.junit.Assert.assertNotNull(putAnalyticalGroup34);
        org.junit.Assert.assertNotNull(labResultDetails37);
        org.junit.Assert.assertNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit44);
        org.junit.Assert.assertNull(unitGroupSystemCodeType45);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity49);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(auditAttributes54);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit56);
        org.junit.Assert.assertNotNull(labResultDetails60);
        org.junit.Assert.assertNotNull(nullMeasureQualifier62);
        org.junit.Assert.assertNotNull(auditAttributes64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(importHistoryEventSimpleList70);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod73);
        org.junit.Assert.assertNotNull(observedPropertyArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(importHistoryEventSimpleList81);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod84);
        org.junit.Assert.assertNotNull(observedPropertyArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod88);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod91);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod93);
        org.junit.Assert.assertNotNull(observedPropertyList94);
    }

    @Test
    public void test56619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56619");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation2.setResultStatus(resultStatus3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus5.SystemCode = resultStatusSystemCodeType6;
        resultStatus5.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str11 = categoricalValue10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate13.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate15.Preservative = preservativeType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate15.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition24 = postDetectioncondition12.setAuditAttributes(auditAttributes21);
        categoricalValue10.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus26 = resultStatus5.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation2.setResultStatus(resultStatus26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = plannedFieldResult28.AuditAttributes;
        plannedFieldResult28.Id = "'.'SSSSSSS";
        java.lang.String str32 = plannedFieldResult28.DeviceType;
        java.lang.String str33 = plannedFieldResult28.getDeviceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult35 = plannedFieldResult28.setDeviceType("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        metricResult36.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult40 = metricResult36.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult41 = plannedFieldResult28.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation42 = observation2.setPlannedFieldResult(plannedFieldResult28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation45 = observation43.setPlannedFieldResult(plannedFieldResult44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction46 = null;
        observation45.LabInstruction = labInstruction46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod48 = observation45.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier49 = null;
        observation45.NullMeasureQualifier = nullMeasureQualifier49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen51 = observation45.getSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation53 = observation45.setDevice(device52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType54 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = observation53.setQualityControlType(qualityControlType54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation56 = observation42.setQualityControlType(qualityControlType54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult59 = categoricalResult57.setValue("");
        observation42.CategoricalResult = categoricalResult57;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertTrue("'" + preservativeType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertNotNull(postDetectioncondition24);
        org.junit.Assert.assertNotNull(resultStatus26);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(plannedFieldResult35);
        org.junit.Assert.assertNotNull(metricResult40);
        org.junit.Assert.assertNotNull(plannedFieldResult41);
        org.junit.Assert.assertNotNull(observation42);
        org.junit.Assert.assertNotNull(observation45);
        org.junit.Assert.assertNull(collectionMethod48);
        org.junit.Assert.assertNull(specimen51);
        org.junit.Assert.assertNotNull(observation53);
        org.junit.Assert.assertTrue("'" + qualityControlType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType54.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(observation55);
        org.junit.Assert.assertNotNull(observation56);
        org.junit.Assert.assertNotNull(categoricalResult59);
    }

    @Test
    public void test56620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56620");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase2 = putOpenIdConnectUser0.setCanConfigureSystem((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = putOpenIdConnectUser0.CanConfigureSystem;
        org.junit.Assert.assertNotNull(userBase2);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
    }

    @Test
    public void test56621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56621");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        activityTemplate0.AuditAttributes = auditAttributes1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str4 = putActivityTemplate3.getId();
        java.lang.String str5 = putActivityTemplate3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate9 = putActivityTemplate3.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate9.Medium = mediumType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate12 = activityTemplate0.setMedium(mediumType10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList13 = activityTemplate12.SpecimenTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SURFACE_WATER;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate15 = activityTemplate12.setMedium(mediumType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = activityTemplate15.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = activityTemplate15.Depth;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putActivityTemplate9);
        org.junit.Assert.assertTrue("'" + mediumType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate12);
        org.junit.Assert.assertNull(specimenTemplateList13);
        org.junit.Assert.assertTrue("'" + mediumType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SURFACE_WATER + "'", mediumType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SURFACE_WATER));
        org.junit.Assert.assertNotNull(activityTemplate15);
        org.junit.Assert.assertNull(quantity16);
        org.junit.Assert.assertNull(quantity17);
    }

    @Test
    public void test56622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56622");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation33 = postSamplingLocation0.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation35 = postSamplingLocation33.setVerticalCollectionMethod("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str36 = postSamplingLocation35.getVerticalDatum();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone37 = postSamplingLocation35.TimeZone;
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postSamplingLocation33);
        org.junit.Assert.assertNotNull(postSamplingLocation35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "MinInstant" + "'", str36, "MinInstant");
        org.junit.Assert.assertNull(timeZone37);
    }

    @Test
    public void test56623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56623");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteCollectionMethod deleteCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteCollectionMethod();
        deleteCollectionMethod0.Id = "";
        java.lang.String str3 = deleteCollectionMethod0.getId();
        deleteCollectionMethod0.Id = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteCollectionMethod deleteCollectionMethod7 = deleteCollectionMethod0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteCollectionMethod deleteCollectionMethod9 = deleteCollectionMethod7.setId("****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.String str10 = deleteCollectionMethod7.getId();
        deleteCollectionMethod7.Id = "multipart/form-data; boundary=****a4634bc0-3392-401e-8662-ce9e9cd5abca****";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(deleteCollectionMethod7);
        org.junit.Assert.assertNotNull(deleteCollectionMethod9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "****26835278-3e68-484a-a157-468aab2e69a2****" + "'", str10, "****26835278-3e68-484a-a157-468aab2e69a2****");
    }

    @Test
    public void test56624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56624");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = pointVelocityDischargeActivity0.getVelocityAverage();
        java.lang.String str2 = pointVelocityDischargeActivity0.getManufacturer();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test56625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56625");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = getChartDataV2_0.setDepthValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType4 = noteOperation3.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList7, nameTagDefinitionArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse9 = locationTagListServiceResponse5.setTags(nameTagDefinitionList7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        locationTagListServiceResponse5.ResponseTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription18.UtcOffset = 100.0d;
        timeSeriesDescription18.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        dischargeSummary24.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse23.setNextToken(instant28);
        java.time.Instant instant32 = locationDescriptionListServiceResponse23.getNextToken();
        java.time.Instant instant33 = locationDescriptionListServiceResponse23.getNextToken();
        timeSeriesDescription18.RawEndTime = instant33;
        locationTagListServiceResponse5.ResponseTime = instant33;
        java.time.Instant instant36 = locationTagListServiceResponse5.ResponseTime;
        noteOperation3.DateAppliedUtc = instant36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_38 = getChartDataV2_0.setStartModificationTime(instant36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory40 = attachment39.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment42 = attachment39.setFileName("");
        attachment39.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment46 = attachment39.setUploadedByUser("MinDuration");
        attachment46.UniqueId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest49.GetParts = "http";
        java.lang.Boolean boolean52 = timeSeriesDataCorrectedServiceRequest49.isIncludeGapMarkers();
        java.time.Instant instant53 = timeSeriesDataCorrectedServiceRequest49.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str55 = ratingModelEffectiveShiftsServiceRequest54.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str57 = referencePointPeriod56.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase59 = referencePointPeriod56.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod56.Uncertainty = 10.0d;
        java.time.Instant instant62 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase63 = referencePointPeriod56.setValidFrom(instant62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest64 = ratingModelEffectiveShiftsServiceRequest54.setQueryFrom(instant62);
        timeSeriesDataCorrectedServiceRequest49.QueryTo = instant62;
        attachment46.DateUploaded = instant62;
        java.time.Instant instant67 = attachment46.DateUploaded;
        getChartDataV2_0.EndResultTime = instant67;
        org.junit.Assert.assertNotNull(getChartDataV2_2);
        org.junit.Assert.assertNull(metadataChangeOperationType4);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse9);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(getChartDataV2_38);
        org.junit.Assert.assertNull(attachmentCategory40);
        org.junit.Assert.assertNotNull(attachment42);
        org.junit.Assert.assertNotNull(attachment46);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNull(instant53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(referencePointPeriodBase59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(referencePointPeriodBase63);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest64);
        org.junit.Assert.assertNotNull(instant67);
    }

    @Test
    public void test56626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56626");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList3 = getChartDataV2_2.getProjectIds();
        java.util.List<java.lang.String> strList4 = getChartDataV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.Sort;
        deleteFieldVisits5.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_9.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.getMedia();
        java.time.Instant instant28 = getObservationsV2_26.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_26.setProjectIds((java.util.List<java.lang.String>) strList32);
        deleteFieldVisits5.Search = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_37 = getChartDataV2_2.setSpecimenIds((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList39 = getFieldVisits38.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        java.util.ArrayList<java.lang.String> strList48 = putLocationTags47.TagUniqueIds;
        getFieldVisits38.ScheduleIds = strList48;
        java.lang.Integer int50 = getFieldVisits38.Limit;
        java.util.List<java.lang.String> strList51 = getFieldVisits38.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        getFieldVisits38.Search = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_37.setCollectionMethodIds((java.util.List<java.lang.String>) strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_60 = getObservationExportIIV2_0.setIds((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList61 = getObservationExportIIV2_60.Search;
        java.lang.String str62 = getObservationExportIIV2_60.getSpecimenName();
        java.lang.String str63 = getObservationExportIIV2_60.FieldVisitId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNotNull(getChartDataV2_37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test56627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56627");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList1 = searchResultShippingContainer0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer3 = searchResultShippingContainer0.setCursor("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str4 = searchResultShippingContainer0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer6 = searchResultShippingContainer0.setCursor("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList8 = searchResultShippingContainer7.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str11 = shippingContainer10.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity12.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity16 = postActivity12.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity18 = postActivity16.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer19 = shippingContainer10.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str21 = shippingContainer20.TrackingId;
        shippingContainer20.TrackingId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str25 = shippingContainer24.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity26.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity26.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = postActivity30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer33 = shippingContainer24.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer[] shippingContainerArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer[] { shippingContainer9, shippingContainer10, shippingContainer20, shippingContainer24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>) shippingContainerList35, shippingContainerArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer37 = searchResultShippingContainer7.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>) shippingContainerList35);
        searchResultShippingContainer7.Cursor = "MinDuration";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList40 = searchResultShippingContainer7.getDomainObjects();
        searchResultShippingContainer0.DomainObjects = shippingContainerList40;
        java.lang.Integer int42 = searchResultShippingContainer0.TotalCount;
        org.junit.Assert.assertNull(shippingContainerList1);
        org.junit.Assert.assertNotNull(searchResultShippingContainer3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(searchResultShippingContainer6);
        org.junit.Assert.assertNull(shippingContainerList8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postActivity16);
        org.junit.Assert.assertNotNull(postActivity18);
        org.junit.Assert.assertNotNull(shippingContainer19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNotNull(postActivity32);
        org.junit.Assert.assertNotNull(shippingContainer33);
        org.junit.Assert.assertNotNull(shippingContainerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(searchResultShippingContainer37);
        org.junit.Assert.assertNotNull(shippingContainerList40);
        org.junit.Assert.assertNull(int42);
    }

    @Test
    public void test56628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56628");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations3 = getExportSamplingLocations0.setEndModificationTime(instant2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest16 = downchainProcessorListByRatingModelServiceRequest4.setQueryTo(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest18 = downchainProcessorListByRatingModelServiceRequest4.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant20 = qualifier19.DateApplied;
        java.lang.String str21 = qualifier19.User;
        java.lang.String str22 = qualifier19.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary24.Reviewer = "";
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary24.MeasurementTime = instant27;
        postRecurringReport23.NextGenerationDate = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier30 = qualifier19.setDateApplied(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest31 = downchainProcessorListByRatingModelServiceRequest4.setQueryTo(instant27);
        java.time.Instant instant32 = downchainProcessorListByRatingModelServiceRequest4.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod35 = timeSeriesThresholdPeriod33.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription38 = locationDescription36.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType40 = null;
        controlConditionActivity39.ControlCleaned = controlCleanedType40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        controlConditionActivity39.DateCleaned = instant43;
        locationDescription38.LastModified = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod47 = timeSeriesThresholdPeriod35.setAppliedTime(instant43);
        downchainProcessorListByRatingModelServiceRequest4.QueryFrom = instant43;
        getExportSamplingLocations3.EndModificationTime = instant43;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(getExportSamplingLocations3);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest16);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest18);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(qualifier30);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod35);
        org.junit.Assert.assertNotNull(locationDescription38);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod47);
    }

    @Test
    public void test56629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56629");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        postSchedule0.Id = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup3 = null;
        postSchedule0.SamplingLocationGroup = samplingLocationGroup3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = schedule5.setStartDate(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule9.setRecurrenceType(recurrenceType10);
        java.time.OffsetDateTime offsetDateTime12 = schedule11.getEndDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        schedule11.RecurrenceDayMonthly = recurrenceDayMonthlyType13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule15 = postSchedule0.setRecurrenceDayMonthly(recurrenceDayMonthlyType13);
        postSchedule15.SamplingLocationGroupSelectionTypeRandomCount = 100;
        java.time.OffsetDateTime offsetDateTime18 = null;
        postSchedule15.LastGenerationDate = offsetDateTime18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule21 = postSchedule15.setCustomId("multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****");
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNotNull(schedule9);
        org.junit.Assert.assertTrue("'" + recurrenceType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule15);
        org.junit.Assert.assertNotNull(postSchedule21);
    }

    @Test
    public void test56630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56630");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = postObservedProperty3.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = null;
        quantity5.Unit = unit6;
        postObservedProperty3.LowerLimit = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postObservedProperty3.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit10 = quantity9.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation2.setElevation(quantity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation12.setPlannedFieldResult(plannedFieldResult13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction15 = null;
        observation14.LabInstruction = labInstruction15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation14.setStatistics(observationStatistics17);
        java.time.OffsetDateTime offsetDateTime19 = observation18.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList20 = observation18.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation18.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade23 = observation22.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup25 = postObservedProperty24.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27, importHistoryEventSimpleArray26);
        postObservedProperty24.ImportHistoryEventSimples = importHistoryEventSimpleList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation22.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation31 = putSamplingLocation2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27);
        java.lang.String str32 = putSamplingLocation31.getHorizontalCollectionMethod();
        java.lang.String str33 = putSamplingLocation31.getHorizontalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType34 = putSamplingLocation31.Type;
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(unitGroup4);
        org.junit.Assert.assertNotNull(quantity9);
        org.junit.Assert.assertNull(unit10);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNull(importHistoryEventSimpleList20);
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNull(resultGrade23);
        org.junit.Assert.assertNull(unitGroup25);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNotNull(putSamplingLocation31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(locationType34);
    }

    @Test
    public void test56631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56631");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier2 = putNullMeasureQualifier0.setId("hi!");
        putNullMeasureQualifier2.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        putNullMeasureQualifier2.Name = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier8 = putNullMeasureQualifier2.setCustomId("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier10 = putNullMeasureQualifier8.setDescription("9999-12-31T23:59:59.999Z");
        putNullMeasureQualifier10.Description = "/AQUARIUS/Acquisition/v2";
        putNullMeasureQualifier10.Name = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier16 = putNullMeasureQualifier10.setDescription("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.Object obj17 = putNullMeasureQualifier10.getResponseType();
        org.junit.Assert.assertNotNull(putNullMeasureQualifier2);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier8);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier10);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$NullMeasureQualifier");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$NullMeasureQualifier");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$NullMeasureQualifier");
    }

    @Test
    public void test56632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56632");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest2 = roundServiceRequest0.setUnitId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest4 = roundServiceRequest0.setMethodCode("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest6 = roundServiceRequest4.setUnitId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest8 = roundServiceRequest4.setParameterDisplayId("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        java.lang.String str9 = roundServiceRequest4.getParameterDisplayId();
        org.junit.Assert.assertNotNull(roundServiceRequest2);
        org.junit.Assert.assertNotNull(roundServiceRequest4);
        org.junit.Assert.assertNotNull(roundServiceRequest6);
        org.junit.Assert.assertNotNull(roundServiceRequest8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****" + "'", str9, "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
    }

    @Test
    public void test56633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56633");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = trendLineAnalysis0.getLowerQuartileOfResiduals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = trendLineAnalysis0.MedianOfResiduals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity12 = adcpDischargeActivity10.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = adcpDischargeActivity12.getDischargeCoefficientVariation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = null;
        adcpDischargeActivity12.TopEstimateExponent = doubleWithDisplay14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType17 = calibrationCheck16.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = calibrationCheck16.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        dischargeSummary20.MeasurementTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse19.setNextToken(instant24);
        java.time.Instant instant28 = locationDescriptionListServiceResponse19.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck29 = calibrationCheck16.setTime(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary33.DifferenceDuringVisit = doubleWithDisplay34;
        reading30.Value = doubleWithDisplay34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck37 = calibrationCheck29.setValue(doubleWithDisplay34);
        adcpDischargeActivity12.MagneticVariation = doubleWithDisplay34;
        java.lang.String str39 = doubleWithDisplay34.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis40 = trendLineAnalysis0.setActualPercentageChange(doubleWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = trendLineAnalysis0.getActualPercentageChange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading44 = fieldVisitReading42.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading46 = fieldVisitReading44.setParameter("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore;
        fieldVisitReading44.ReadingType = fieldVisitReadingType47;
        java.util.ArrayList<java.lang.String> strList49 = fieldVisitReading44.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading51 = fieldVisitReading44.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList52 = fieldVisitReading51.getDatumConvertedValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        crossSectionPoint53.Distance = quantityWithDisplay54;
        crossSectionPoint53.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = crossSectionPoint53.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = crossSectionPoint53.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint62 = crossSectionPoint60.setElevation(quantityWithDisplay61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = null;
        crossSectionPoint62.Depth = quantityWithDisplay63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint62.Depth = datumConvertedQuantityWithDisplay65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity69 = pointVelocityDischargeActivity67.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity67.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity73 = pointVelocityDischargeActivity67.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList74 = pointVelocityDischargeActivity73.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity73.DistanceToMeter = datumConvertedQuantityWithDisplay75;
        crossSectionPoint62.Elevation = datumConvertedQuantityWithDisplay75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading78 = fieldVisitReading51.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay75);
        datumConvertedQuantityWithDisplay75.TargetDatum = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis81 = trendLineAnalysis0.setActualAbsoluteChange((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay82 = trendLineAnalysis81.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay83 = trendLineAnalysis81.LowerQuartileOfResiduals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType84 = trendLineAnalysis81.getType();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(adcpDischargeActivity12);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertNull(calibrationCheckType17);
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(calibrationCheck29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(calibrationCheck37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(trendLineAnalysis40);
        org.junit.Assert.assertNotNull(doubleWithDisplay41);
        org.junit.Assert.assertNotNull(fieldVisitReading44);
        org.junit.Assert.assertNotNull(fieldVisitReading46);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore + "'", fieldVisitReadingType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore));
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(fieldVisitReading51);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList52);
        org.junit.Assert.assertNull(quantityWithDisplay58);
        org.junit.Assert.assertNotNull(crossSectionPoint60);
        org.junit.Assert.assertNotNull(crossSectionPoint62);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity69);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity73);
        org.junit.Assert.assertNull(verticalList74);
        org.junit.Assert.assertNotNull(fieldVisitReading78);
        org.junit.Assert.assertNotNull(trendLineAnalysis81);
        org.junit.Assert.assertNull(doubleWithDisplay82);
        org.junit.Assert.assertNull(doubleWithDisplay83);
        org.junit.Assert.assertNull(trendLineAnalysisType84);
    }

    @Test
    public void test56634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56634");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation2 = getSamplingLocation0.setId("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation4 = getSamplingLocation0.setId("hi!");
        java.lang.Object obj5 = getSamplingLocation4.getResponseType();
        java.lang.String str6 = getSamplingLocation4.getId();
        org.junit.Assert.assertNotNull(getSamplingLocation2);
        org.junit.Assert.assertNotNull(getSamplingLocation4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test56635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56635");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        java.lang.String str22 = adcpDischargeActivity0.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity0.setModel("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity26 = adcpDischargeActivity0.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement28 = engineeredStructureDischargeActivity27.DischargeChannelMeasurement;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str30 = pointVelocityDischargeActivity29.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = pointVelocityDischargeActivity29.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = pointVelocityDischargeActivity29.setMethodCoefficientUsed((java.lang.Boolean) true);
        java.lang.String str35 = pointVelocityDischargeActivity34.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str37 = pointVelocityDischargeActivity36.getModel();
        pointVelocityDischargeActivity36.Manufacturer = "'.'SSSSSSS";
        pointVelocityDischargeActivity36.HorizontalCoefficientUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity43 = pointVelocityDischargeActivity36.setModel("9999-12-31T23:59:59.999Z");
        java.lang.Integer int44 = pointVelocityDischargeActivity36.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str46 = pointVelocityDischargeActivity45.getModel();
        java.lang.String str47 = pointVelocityDischargeActivity45.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        pointVelocityDischargeActivity45.Width = quantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType50 = null;
        pointVelocityDischargeActivity45.StartPoint = startPointType50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList53, verticalArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity55 = pointVelocityDischargeActivity45.setVerticals(verticalList53);
        pointVelocityDischargeActivity36.Verticals = verticalList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity57 = pointVelocityDischargeActivity34.setVerticals(verticalList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay59 = null;
        crossSectionPoint58.Distance = quantityWithDisplay59;
        crossSectionPoint58.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = crossSectionPoint58.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint65 = crossSectionPoint58.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay66 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint67 = crossSectionPoint65.setElevation(quantityWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay68 = null;
        crossSectionPoint67.Depth = quantityWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint67.Depth = datumConvertedQuantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint67.Elevation = datumConvertedQuantityWithDisplay72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity74 = pointVelocityDischargeActivity57.setVelocityAverage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity75 = engineeredStructureDischargeActivity27.setMeanHead((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity76 = adcpDischargeActivity0.setPercentOfDischargeMeasured((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay72);
        java.lang.String str77 = datumConvertedQuantityWithDisplay72.getTargetDatum();
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNotNull(adcpDischargeActivity26);
        org.junit.Assert.assertNull(dischargeChannelMeasurement28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity32);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(verticalArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity55);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity57);
        org.junit.Assert.assertNull(quantityWithDisplay63);
        org.junit.Assert.assertNotNull(crossSectionPoint65);
        org.junit.Assert.assertNotNull(crossSectionPoint67);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity74);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity75);
        org.junit.Assert.assertNotNull(adcpDischargeActivity76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test56636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56636");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = correctionOperation0.setType(correctionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation0.OperationType = metadataChangeOperationType3;
        java.time.Instant instant5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation6 = correctionOperation0.setDateAppliedUtc(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType8 = methodOperation7.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation10 = methodOperation7.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation11 = correctionOperation6.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = correctionOperation12.setType(correctionType13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation12.OperationType = metadataChangeOperationType15;
        java.time.Instant instant17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation18 = correctionOperation12.setDateAppliedUtc(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType20 = methodOperation19.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation22 = methodOperation19.setOperationType(metadataChangeOperationType21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation23 = correctionOperation18.setOperationType(metadataChangeOperationType21);
        correctionOperation6.OperationType = metadataChangeOperationType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType26 = trendLineAnalysisServiceRequest25.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = locationRemark27.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        locationRemark29.FromTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = locationRemark29.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod38 = timeSeriesThresholdPeriod36.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription41 = locationDescription39.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType43 = null;
        controlConditionActivity42.ControlCleaned = controlCleanedType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        controlConditionActivity42.DateCleaned = instant46;
        locationDescription41.LastModified = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod50 = timeSeriesThresholdPeriod38.setAppliedTime(instant46);
        locationRemark35.ToTime = instant46;
        trendLineAnalysisServiceRequest25.QueryFrom = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation53 = correctionOperation6.setDateAppliedUtc(instant46);
        java.lang.Integer int54 = correctionOperation6.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary58.Reviewer = "";
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary58.MeasurementTime = instant61;
        postRecurringReport57.NextGenerationDate = instant61;
        java.time.Instant instant64 = postRecurringReport57.getNextGenerationDate();
        java.lang.String str65 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant64);
        metadataChangeTransactionListServiceRequest56.QueryFrom = instant64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest67 = downchainProcessorListByRatingModelServiceRequest55.setQueryTo(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest69 = downchainProcessorListByRatingModelServiceRequest55.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant71 = qualifier70.DateApplied;
        java.lang.String str72 = qualifier70.User;
        java.lang.String str73 = qualifier70.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary75.Reviewer = "";
        java.time.Instant instant78 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary75.MeasurementTime = instant78;
        postRecurringReport74.NextGenerationDate = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier81 = qualifier70.setDateApplied(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest82 = downchainProcessorListByRatingModelServiceRequest55.setQueryTo(instant78);
        java.lang.String str83 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation84 = correctionOperation6.setDateAppliedUtc(instant78);
        java.lang.String str85 = correctionOperation84.getUser();
        java.lang.Integer int86 = correctionOperation84.StackPosition;
        correctionOperation84.Comments = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.util.HashMap<java.lang.String, java.lang.Object> strMap89 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation90 = correctionOperation84.setParameters(strMap89);
        correctionOperation90.StackPosition = 0;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType93 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation94 = correctionOperation90.setType(correctionType93);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder95 = correctionOperation90.ProcessingOrder;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType96 = correctionOperation90.getType();
        org.junit.Assert.assertTrue("'" + correctionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation2);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation6);
        org.junit.Assert.assertNull(metadataChangeOperationType8);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation10);
        org.junit.Assert.assertNotNull(correctionOperation11);
        org.junit.Assert.assertTrue("'" + correctionType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation14);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation18);
        org.junit.Assert.assertNull(metadataChangeOperationType20);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation22);
        org.junit.Assert.assertNotNull(correctionOperation23);
        org.junit.Assert.assertNull(trendLineAnalysisType26);
        org.junit.Assert.assertNotNull(locationRemark29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(locationRemark35);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod38);
        org.junit.Assert.assertNotNull(locationDescription41);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod50);
        org.junit.Assert.assertNotNull(correctionOperation53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str65, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest67);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest69);
        org.junit.Assert.assertNull(instant71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(qualifier81);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str83, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(correctionOperation84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(int86);
        org.junit.Assert.assertNotNull(correctionOperation90);
        org.junit.Assert.assertTrue("'" + correctionType93 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample + "'", correctionType93.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample));
        org.junit.Assert.assertNotNull(correctionOperation94);
        org.junit.Assert.assertNull(correctionProcessingOrder95);
        org.junit.Assert.assertTrue("'" + correctionType96 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample + "'", correctionType96.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample));
    }

    @Test
    public void test56637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56637");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setTemplateCreatedFrom(specimenTemplate4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        activity6.LoggerFileName = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity9.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = postActivity9.setPlannedActivity(plannedActivity12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType14 = postActivity9.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate16.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList21 = specimenTemplate20.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate22.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList27 = specimenTemplate26.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate16, specimenTemplate19, specimenTemplate20, specimenTemplate24, specimenTemplate25, specimenTemplate26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29, specimenTemplateArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = postFieldVisitActivityWithTemplate15.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate33 = postFieldVisitActivityWithTemplate31.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity9.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity9.Medium = medium35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity37 = activity6.setMedium(medium35);
        putSpecimen5.Activity = activity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putSpecimen5.AuditAttributes;
        java.lang.String str40 = putSpecimen5.getId();
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNotNull(postActivity13);
        org.junit.Assert.assertNull(activityType14);
        org.junit.Assert.assertNull(labInstructionTemplateList21);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNull(labInstructionTemplateList27);
        org.junit.Assert.assertNotNull(specimenTemplateArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate31);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate33);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNotNull(activity37);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test56638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56638");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = analyticalGroup4.getType();
        analyticalGroup4.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = null;
        analyticalGroupItem14.AnalysisMethod = analysisMethod17;
        java.lang.String str19 = analyticalGroupItem14.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = null;
        analyticalGroupItem25.AnalysisMethod = analysisMethod28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem9, analyticalGroupItem11, analyticalGroupItem14, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31, analyticalGroupItemArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = analyticalGroup8.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31);
        analyticalGroup4.AnalyticalGroupItems = analyticalGroupItemList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup4.AuditAttributes = auditAttributes35;
        java.lang.String str37 = analyticalGroup4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType38 = analyticalGroup4.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType40 = analyticalGroup39.getType();
        java.lang.String str41 = analyticalGroup39.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = analyticalGroup39.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup45 = analyticalGroup43.setType(analyticalGroupType44);
        analyticalGroup4.Type = analyticalGroupType44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup47 = postAnalyticalGroup0.setType(analyticalGroupType44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup49 = postAnalyticalGroup47.setName("0001-01-01T00:00:00.000Z");
        java.lang.String str50 = postAnalyticalGroup47.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType51 = postAnalyticalGroup47.Type;
        java.lang.String str52 = postAnalyticalGroup47.getName();
        java.lang.String str53 = postAnalyticalGroup47.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup55 = postAnalyticalGroup47.setDescription("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup57 = postAnalyticalGroup55.setId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNull(analyticalGroupType5);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(analyticalGroup33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(analyticalGroupType38);
        org.junit.Assert.assertNull(analyticalGroupType40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(analyticalGroup43);
        org.junit.Assert.assertTrue("'" + analyticalGroupType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup45);
        org.junit.Assert.assertNotNull(postAnalyticalGroup47);
        org.junit.Assert.assertNotNull(postAnalyticalGroup49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str50, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + analyticalGroupType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str52, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "/AQUARIUS" + "'", str53, "/AQUARIUS");
        org.junit.Assert.assertNotNull(postAnalyticalGroup55);
        org.junit.Assert.assertNotNull(postAnalyticalGroup57);
    }

    @Test
    public void test56639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56639");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_2 = postObservationsDryRunV2_0.setLinkFieldVisitsForNewObservations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_4 = postObservationsDryRunV2_0.setFileType("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        postObservationsDryRunV2_4.TimeZoneOffset = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_8 = postObservationsDryRunV2_4.setTimeZoneOffset("http://MaxDurationhttp/json/reply/Double");
        postObservationsDryRunV2_8.FileType = "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****";
        java.lang.String str11 = postObservationsDryRunV2_8.FileType;
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_2);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_4);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****" + "'", str11, "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****");
    }

    @Test
    public void test56640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56640");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report8 = report6.setDescription("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report10 = report8.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str11 = report8.Comments;
        report8.ReportUniqueId = "/AQUARIUS/Acquisition/v2";
        java.time.Instant instant14 = null;
        report8.CreatedTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report17 = report8.setUserName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report19 = report17.setDescription("/AQUARIUS");
        java.lang.Boolean boolean20 = report17.getIsTransient();
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNotNull(report8);
        org.junit.Assert.assertNotNull(report10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(report17);
        org.junit.Assert.assertNotNull(report19);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test56641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56641");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        java.lang.String str1 = timeAlignedPoint0.getMethod9();
        timeAlignedPoint0.ApprovalName5 = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str4 = timeAlignedPoint0.Qualifiers6;
        java.lang.String str5 = timeAlignedPoint0.getDisplayValue7();
        java.lang.Double double6 = timeAlignedPoint0.NumericValue4;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(double6);
    }

    @Test
    public void test56642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56642");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        expandedRatingCurve0.Id = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType4 = expandedRatingCurve3.Type;
        expandedRatingCurve3.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve8 = expandedRatingCurve3.setOutputParameter(parameterWithUnit7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit9 = expandedRatingCurve8.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType11 = expandedRatingCurve10.Type;
        expandedRatingCurve10.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve15 = expandedRatingCurve10.setOutputParameter(parameterWithUnit14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve16 = expandedRatingCurve8.setOutputParameter(parameterWithUnit14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit18 = parameterWithUnit14.setParameterName("0001-01-01T00:00:00.000Z");
        expandedRatingCurve0.InputParameter = parameterWithUnit18;
        parameterWithUnit18.ParameterName = "MaxInstant";
        java.lang.String str22 = parameterWithUnit18.ParameterName;
        org.junit.Assert.assertNull(ratingCurveType4);
        org.junit.Assert.assertNotNull(expandedRatingCurve8);
        org.junit.Assert.assertNotNull(parameterWithUnit9);
        org.junit.Assert.assertNull(ratingCurveType11);
        org.junit.Assert.assertNotNull(expandedRatingCurve15);
        org.junit.Assert.assertNotNull(expandedRatingCurve16);
        org.junit.Assert.assertNotNull(parameterWithUnit18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MaxInstant" + "'", str22, "MaxInstant");
    }

    @Test
    public void test56643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56643");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = statisticalDateTimeOffset2.setDateTimeOffset(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest12 = ratingModelEffectiveShiftsByStageValuesServiceRequest1.setMeasurementTime(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse13 = timeSeriesUniqueIdListServiceResponse0.setNextToken(instant10);
        java.lang.Boolean boolean14 = timeSeriesUniqueIdListServiceResponse13.TokenExpired;
        java.lang.Boolean boolean15 = timeSeriesUniqueIdListServiceResponse13.isTokenExpired();
        java.time.Instant instant16 = timeSeriesUniqueIdListServiceResponse13.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary21.Reviewer = "";
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary21.MeasurementTime = instant24;
        postRecurringReport20.NextGenerationDate = instant24;
        java.time.Instant instant27 = postRecurringReport20.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset28 = statisticalDateTimeOffset19.setDateTimeOffset(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest29 = ratingModelEffectiveShiftsByStageValuesServiceRequest18.setMeasurementTime(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse30 = timeSeriesUniqueIdListServiceResponse17.setNextToken(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod34 = timeSeriesThresholdPeriod32.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod32.AppliedTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary39.Reviewer = "";
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary39.MeasurementTime = instant42;
        postRecurringReport38.NextGenerationDate = instant42;
        java.time.Instant instant45 = postRecurringReport38.getNextGenerationDate();
        java.lang.String str46 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant45);
        metadataChangeTransactionListServiceRequest37.QueryFrom = instant45;
        timeSeriesThresholdPeriod32.AppliedTime = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse49 = fieldVisitDescriptionListServiceResponse31.setNextToken(instant45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant51 = ratingCurveListServiceRequest50.QueryTo;
        java.lang.String str52 = ratingCurveListServiceRequest50.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = dischargeSummary54.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant58 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse57.setNextToken(instant58);
        dischargeSummary54.MeasurementTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse53.setNextToken(instant58);
        java.time.Instant instant62 = locationDescriptionListServiceResponse53.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType65 = null;
        controlConditionActivity64.ControlCleaned = controlCleanedType65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        controlConditionActivity64.DateCleaned = instant68;
        timeAlignedDataServiceRequest63.QueryFrom = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = locationDescriptionListServiceResponse53.setNextToken(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest73 = ratingCurveListServiceRequest50.setQueryTo(instant68);
        java.time.Instant instant74 = ratingCurveListServiceRequest73.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse75 = fieldVisitDescriptionListServiceResponse49.setNextToken(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse76 = timeSeriesUniqueIdListServiceResponse30.setNextToken(instant74);
        java.time.Instant instant77 = timeSeriesUniqueIdListServiceResponse30.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds81 = timeSeriesUniqueIds79.setIsDeleted((java.lang.Boolean) true);
        timeSeriesUniqueIds79.HasAttributeChange = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds86 = timeSeriesUniqueIds84.setIsDeleted((java.lang.Boolean) true);
        timeSeriesUniqueIds84.UniqueId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] timeSeriesUniqueIdsArray89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] { timeSeriesUniqueIds78, timeSeriesUniqueIds79, timeSeriesUniqueIds84 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList90 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>) timeSeriesUniqueIdsList90, timeSeriesUniqueIdsArray89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse92 = timeSeriesUniqueIdListServiceResponse30.setTimeSeriesUniqueIds(timeSeriesUniqueIdsList90);
        timeSeriesUniqueIdListServiceResponse13.TimeSeriesUniqueIds = timeSeriesUniqueIdsList90;
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest12);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset28);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest29);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse30);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str46, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse49);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(dischargeSummary56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse72);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds81);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds86);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdsArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse92);
    }

    @Test
    public void test56644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56644");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGradeHistory getResultGradeHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGradeHistory();
        java.lang.String str1 = getResultGradeHistory0.getId();
        java.lang.String str2 = getResultGradeHistory0.getId();
        java.lang.String str3 = getResultGradeHistory0.Id;
        getResultGradeHistory0.Id = "http://MaxDurationhttp/json/reply/String";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test56645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56645");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus3.Id = "0001-01-01T00:00:00.000Z";
        putObservationV2_0.ResultStatus = resultStatus3;
        java.time.OffsetDateTime offsetDateTime7 = null;
        putObservationV2_0.ResultTime = offsetDateTime7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        analysisMethodSimple9.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str12 = analysisMethodSimple9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple14 = analysisMethodSimple9.setName("MinInstant");
        java.lang.String str15 = analysisMethodSimple14.getContext();
        analysisMethodSimple14.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple19 = analysisMethodSimple14.setContext("-PT87591240H");
        putObservationV2_0.AnalysisMethod = analysisMethodSimple14;
        java.lang.String str21 = analysisMethodSimple14.getMethodId();
        java.lang.String str22 = analysisMethodSimple14.getDescription();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(analysisMethodSimple14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(analysisMethodSimple19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str22, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test56646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56646");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str1 = postUser0.Id;
        postUser0.Email = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int5 = getFieldVisits4.Limit;
        java.util.List<java.lang.String> strList6 = getFieldVisits4.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList8 = getSpecimens7.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType10 = putUserV2_9.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = dischargeSummary13.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        dischargeSummary13.MeasurementTime = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse12.setNextToken(instant17);
        java.time.Instant instant21 = locationDescriptionListServiceResponse12.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = getActivities11.setToStartTime(instant21);
        java.lang.String str23 = getActivities22.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList25 = getObservationsV2_24.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        getObservationsV2_26.SpecimenIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        getObservationsV2_26.QualityControlTypes = strList37;
        getObservationsV2_24.ResultGrades = strList37;
        getActivities22.Media = strList37;
        putUserV2_9.AccessGroups = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens44 = getSpecimens7.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits45 = getFieldVisits4.setSearch((java.util.List<java.lang.String>) strList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser46 = postUser0.setAccessGroups((java.util.List<java.lang.String>) strList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str48 = postUser47.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser50 = postUser47.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType52 = putUserV2_51.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary55.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse58.setNextToken(instant59);
        dischargeSummary55.MeasurementTime = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse54.setNextToken(instant59);
        java.time.Instant instant63 = locationDescriptionListServiceResponse54.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities64 = getActivities53.setToStartTime(instant63);
        java.lang.String str65 = getActivities64.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList67 = getObservationsV2_66.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        getObservationsV2_68.SpecimenIds = strList71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray78 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = putLocationTags74.setTagUniqueIds(strList79);
        getObservationsV2_68.QualityControlTypes = strList79;
        getObservationsV2_66.ResultGrades = strList79;
        getActivities64.Media = strList79;
        putUserV2_51.AccessGroups = strList79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile86 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_87 = putUserV2_51.setUserProfile(userProfile86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType88 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_89 = putUserV2_51.setUserType(userType88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser90 = postUser50.setUserType(userType88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser91 = postUser46.setUserType(userType88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile92 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser93 = postUser46.setUserProfile(userProfile92);
        java.lang.String str94 = postUser93.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(userType10);
        org.junit.Assert.assertNotNull(dischargeSummary15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(getActivities22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(getSpecimens44);
        org.junit.Assert.assertNotNull(getFieldVisits45);
        org.junit.Assert.assertNotNull(postUser46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(postUser50);
        org.junit.Assert.assertNull(userType52);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(getActivities64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(putLocationTags81);
        org.junit.Assert.assertNotNull(putUserV2_87);
        org.junit.Assert.assertTrue("'" + userType88 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType88.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_89);
        org.junit.Assert.assertNotNull(postUser90);
        org.junit.Assert.assertNotNull(postUser91);
        org.junit.Assert.assertNotNull(postUser93);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test56647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56647");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str3 = specimen2.Name;
        specimen2.Name = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList7 = specimenTemplate6.LabInstructionTemplates;
        specimen2.TemplateCreatedFrom = specimenTemplate6;
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(labInstructionTemplateList7);
    }

    @Test
    public void test56648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56648");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter2 = filter0.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter4 = filter2.setId("POST");
        java.time.OffsetDateTime offsetDateTime5 = null;
        filter4.StartTime = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod7.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList11, observedPropertyArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod9.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = postLabAnalysisMethod9.setAuditAttributes(auditAttributes14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList16 = postLabAnalysisMethod9.ObservedProperties;
        filter4.ObservedProperties = observedPropertyList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = filter4.AuditAttributes;
        org.junit.Assert.assertNotNull(filter2);
        org.junit.Assert.assertNotNull(filter4);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNotNull(observedPropertyArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod15);
        org.junit.Assert.assertNotNull(observedPropertyList16);
        org.junit.Assert.assertNull(auditAttributes18);
    }

    @Test
    public void test56649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56649");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str1 = activeMeterDetails0.SoftwareVersion;
        java.lang.String str2 = activeMeterDetails0.Manufacturer;
        activeMeterDetails0.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList6, activeMeterCalibrationArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails8 = activeMeterDetails0.setMeterCalibrations(activeMeterCalibrationList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType meterType9 = activeMeterDetails8.getMeterType();
        java.lang.String str10 = activeMeterDetails8.getFirmwareVersion();
        activeMeterDetails8.Manufacturer = "/AQUARIUS/Publish/v2";
        activeMeterDetails8.Manufacturer = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter16 = activeMeterDetails8.setModel("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails18 = activeMeterDetails8.setSoftwareVersion("zZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter20 = activeMeterDetails18.setManufacturer("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails8);
        org.junit.Assert.assertNull(meterType9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(currentMeter16);
        org.junit.Assert.assertNotNull(activeMeterDetails18);
        org.junit.Assert.assertNotNull(currentMeter20);
    }

    @Test
    public void test56650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56650");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str1 = postLocationAttachment0.LocationUniqueId;
        java.lang.String str2 = postLocationAttachment0.Comments;
        java.lang.String str3 = postLocationAttachment0.getComments();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList4 = postLocationAttachment0.Tags;
        postLocationAttachment0.LocationUniqueId = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(applyTagRequestList4);
    }

    @Test
    public void test56651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56651");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest2.setTimeSeriesUniqueIds(strList14);
        getChartDataV2_0.ActivityIds = strList14;
        java.lang.String str20 = getChartDataV2_0.getFilterId();
        java.util.List<java.lang.String> strList21 = getChartDataV2_0.getIds();
        java.lang.Integer int22 = getChartDataV2_0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = getChartDataV2_0.setCursor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        getChartDataV2_24.DepthValue = (-1.0d);
        java.util.List<java.lang.String> strList27 = getChartDataV2_24.ObservedPropertyIds;
        java.time.Instant instant28 = getChartDataV2_24.StartObservedTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(getChartDataV2_24);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
    }

    @Test
    public void test56652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56652");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity5.setAuditAttributes(auditAttributes6);
        postCollectionMethod0.AuditAttributes = auditAttributes6;
        postCollectionMethod0.Name = "http";
        java.lang.Object obj11 = postCollectionMethod0.getResponseType();
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
    }

    @Test
    public void test56653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56653");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.FieldVisitId;
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "hi!", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ", "2021.4.62.0", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "/AQUARIUS", "hi!", "'.'SSSSSSS" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getExportSpecimens0.LaboratoryIds = strList15;
        java.util.List<java.lang.String> strList18 = getExportSpecimens0.getSpecimenStatuses();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant20 = ratingCurveListServiceRequest19.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str22 = timeSeriesDescription21.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription24 = timeSeriesDescription21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase27 = locationDatumPeriod25.setComment("'.'SSSSSSS");
        java.lang.Double double28 = locationDatumPeriodBase27.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant30 = qualifier29.DateApplied;
        java.lang.String str31 = qualifier29.User;
        java.lang.String str32 = qualifier29.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj34 = timeAlignedDataServiceRequest33.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = timeAlignedDataServiceRequest33.setQueryFrom(instant36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier39 = qualifier29.setDateApplied(instant36);
        java.time.Instant instant40 = qualifier39.getDateApplied();
        locationDatumPeriodBase27.ValidFrom = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription42 = timeSeriesDescription24.setLastModified(instant40);
        ratingCurveListServiceRequest19.QueryTo = instant40;
        getExportSpecimens0.StartModificationTime = instant40;
        java.lang.String str45 = getExportSpecimens0.Sort;
        java.lang.Integer int46 = getExportSpecimens0.getLimit();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(timeSeriesDescription24);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest38);
        org.junit.Assert.assertNotNull(qualifier39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(timeSeriesDescription42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(int46);
    }

    @Test
    public void test56654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56654");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = importItemTaxon0.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = importItemTaxon2.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon5 = importItemTaxon2.setInput("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean8 = roleFlattened7.CanRemoveFieldVisits;
        roleFlattened7.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str12 = putLocationType11.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = getObservationsV2_13.setDataClassifications((java.util.List<java.lang.String>) strList17);
        getObservationsV2_19.DepthUnitCustomId = "hi!";
        java.lang.String str22 = getObservationsV2_19.CustomId;
        java.util.List<java.lang.String> strList23 = getObservationsV2_19.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_19.setMedia((java.util.List<java.lang.String>) strList35);
        putLocationType11.ExtendedAttributeDefinitionIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase41 = roleFlattened7.setRoleApprovalTransitions(strList35);
        putBulkEditResultGradesV2_6.ResultGrades = strList35;
        importItemTaxon5.WarningMessages = strList35;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList44 = importItemTaxon5.getItemComparison();
        org.junit.Assert.assertNotNull(importItemTaxon2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(importItemTaxon5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNotNull(roleFlattenedBase41);
        org.junit.Assert.assertNull(importChangeItemList44);
    }

    @Test
    public void test56655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56655");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        postSamplingLocationGroup0.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup5 = postSamplingLocationGroup0.setName("/AQUARIUS");
        postSamplingLocationGroup5.Description = "";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup5);
    }

    @Test
    public void test56656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56656");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        getChartDataV2_0.MinNumericResultValue = 100.0d;
        java.lang.Double double7 = getChartDataV2_0.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        controlConditionActivity8.DateCleaned = instant12;
        getChartDataV2_0.EndObservedTime = instant12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_17 = getChartDataV2_0.setLimit((java.lang.Integer) 1);
        java.util.List<java.lang.String> strList18 = getChartDataV2_0.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(getChartDataV2_17);
        org.junit.Assert.assertNull(strList18);
    }

    @Test
    public void test56657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56657");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole getRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole();
        java.lang.String str1 = getRole0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole getRole3 = getRole0.setUniqueId("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole getRole5 = getRole3.setUniqueId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.lang.String str6 = getRole3.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getRole3);
        org.junit.Assert.assertNotNull(getRole5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str6, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
    }

    @Test
    public void test56658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56658");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType2 = expandedRatingCurve1.Type;
        expandedRatingCurve1.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift7 = ratingShift5.setPeriodOfApplicability(periodOfApplicability6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability8 = ratingShift5.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift11 = ratingShift9.setPeriodOfApplicability(periodOfApplicability10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability12 = ratingShift9.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability14 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift15 = ratingShift13.setPeriodOfApplicability(periodOfApplicability14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift18 = ratingShift16.setPeriodOfApplicability(periodOfApplicability17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability19 = ratingShift16.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability21 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift22 = ratingShift20.setPeriodOfApplicability(periodOfApplicability21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double24 = ratingShiftPoint23.getInputValue();
        java.lang.Double double25 = ratingShiftPoint23.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double27 = ratingShiftPoint26.getInputValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint30 = ratingShiftPoint28.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint28.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint35 = ratingShiftPoint33.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint33.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] ratingShiftPointArray39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] { ratingShiftPoint23, ratingShiftPoint26, ratingShiftPoint28, ratingShiftPoint33, ratingShiftPoint38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>) ratingShiftPointList40, ratingShiftPointArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift42 = ratingShift20.setShiftPoints(ratingShiftPointList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability44 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift45 = ratingShift43.setPeriodOfApplicability(periodOfApplicability44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability47 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift48 = ratingShift46.setPeriodOfApplicability(periodOfApplicability47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability49 = ratingShift46.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability51 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift52 = ratingShift50.setPeriodOfApplicability(periodOfApplicability51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] ratingShiftArray53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] { ratingShift5, ratingShift9, ratingShift13, ratingShift16, ratingShift20, ratingShift43, ratingShift46, ratingShift52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>) ratingShiftList54, ratingShiftArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve56 = expandedRatingCurve1.setShifts(ratingShiftList54);
        ratingCurve0.Shifts = ratingShiftList54;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList58 = ratingCurve0.getShifts();
        ratingCurve0.Equation = "http://MaxDurationhttp/json/reply/ArrayList";
        org.junit.Assert.assertNull(ratingCurveType2);
        org.junit.Assert.assertNotNull(ratingShift7);
        org.junit.Assert.assertNull(periodOfApplicability8);
        org.junit.Assert.assertNotNull(ratingShift11);
        org.junit.Assert.assertNull(periodOfApplicability12);
        org.junit.Assert.assertNotNull(ratingShift15);
        org.junit.Assert.assertNotNull(ratingShift18);
        org.junit.Assert.assertNull(periodOfApplicability19);
        org.junit.Assert.assertNotNull(ratingShift22);
        org.junit.Assert.assertNull(double24);
        org.junit.Assert.assertNull(double25);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNotNull(ratingShiftPoint30);
        org.junit.Assert.assertNotNull(ratingShiftPoint35);
        org.junit.Assert.assertNotNull(ratingShiftPointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(ratingShift42);
        org.junit.Assert.assertNotNull(ratingShift45);
        org.junit.Assert.assertNotNull(ratingShift48);
        org.junit.Assert.assertNull(periodOfApplicability49);
        org.junit.Assert.assertNotNull(ratingShift52);
        org.junit.Assert.assertNotNull(ratingShiftArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(expandedRatingCurve56);
        org.junit.Assert.assertNotNull(ratingShiftList58);
    }

    @Test
    public void test56659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56659");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.util.List<java.lang.String> strList1 = getExportSamplingLocations0.getLocationGroupTypeIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = locationDescriptionListServiceResponse2.setNextToken(instant3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList5 = locationDescriptionListServiceResponse4.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant7 = ratingCurveListServiceRequest6.QueryTo;
        java.lang.String str8 = ratingCurveListServiceRequest6.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType21 = null;
        controlConditionActivity20.ControlCleaned = controlCleanedType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        controlConditionActivity20.DateCleaned = instant24;
        timeAlignedDataServiceRequest19.QueryFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse9.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest29 = ratingCurveListServiceRequest6.setQueryTo(instant24);
        java.time.Instant instant30 = ratingCurveListServiceRequest29.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse4.setNextToken(instant30);
        getExportSamplingLocations0.StartModificationTime = instant30;
        java.time.Instant instant33 = getExportSamplingLocations0.getStartModificationTime();
        java.lang.String str34 = getExportSamplingLocations0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByTimeSeriesServiceRequest downchainProcessorListByTimeSeriesServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByTimeSeriesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str37 = timeSeriesApprovalsTransactionListServiceRequest36.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType39 = null;
        controlConditionActivity38.ControlCleaned = controlCleanedType39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        controlConditionActivity38.DateCleaned = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest45 = timeSeriesApprovalsTransactionListServiceRequest36.setQueryTo(instant42);
        java.time.Instant instant46 = timeSeriesApprovalsTransactionListServiceRequest36.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj49 = timeAlignedDataServiceRequest48.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = timeAlignedDataServiceRequest48.setQueryFrom(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription54 = timeSeriesDescription47.setRawStartTime(instant51);
        timeSeriesApprovalsTransactionListServiceRequest36.QueryTo = instant51;
        downchainProcessorListByTimeSeriesServiceRequest35.QueryFrom = instant51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations57 = getExportSamplingLocations0.setEndModificationTime(instant51);
        getExportSamplingLocations57.CustomId = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations61 = getExportSamplingLocations57.setCustomId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse4);
        org.junit.Assert.assertNull(locationDescriptionList5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest53);
        org.junit.Assert.assertNotNull(timeSeriesDescription54);
        org.junit.Assert.assertNotNull(getExportSamplingLocations57);
        org.junit.Assert.assertNotNull(getExportSamplingLocations61);
    }

    @Test
    public void test56660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56660");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        ratingModelDescription0.TemplateName = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str3 = ratingModelDescription0.Identifier;
        ratingModelDescription0.InputParameter = "MinInstant";
        ratingModelDescription0.OutputUnit = "http://MaxDurationhttp";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription9 = ratingModelDescription0.setInputParameter("multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****");
        java.lang.String str10 = ratingModelDescription0.getLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription12 = ratingModelDescription0.setComment("9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(ratingModelDescription9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(ratingModelDescription12);
    }

    @Test
    public void test56661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56661");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary7.DifferenceDuringVisit = doubleWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay8.setNumeric((java.lang.Double) 100.0d);
        reading0.Value = doubleWithDisplay11;
        java.lang.String str13 = reading0.getSubLocationIdentifier();
        java.lang.String str14 = reading0.getComments();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test56662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56662");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str1 = postCalculatedDerivedTimeSeries0.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList2 = postCalculatedDerivedTimeSeries0.getExtendedAttributeValues();
        java.lang.String str3 = postCalculatedDerivedTimeSeries0.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries5 = postCalculatedDerivedTimeSeries0.setComment("multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeValueList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries5);
    }

    @Test
    public void test56663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56663");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = adcpDischargeActivity2.BottomEstimateExponent;
        java.lang.String str4 = adcpDischargeActivity2.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity6 = adcpDischargeActivity2.setIsValid((java.lang.Boolean) false);
        java.lang.String str7 = adcpDischargeActivity6.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str9 = pointVelocityDischargeActivity8.getModel();
        java.lang.String str10 = pointVelocityDischargeActivity8.getFirmwareVersion();
        java.lang.String str11 = pointVelocityDischargeActivity8.NodeDetails;
        java.lang.Boolean boolean12 = pointVelocityDischargeActivity8.isSuspensionCoefficientUsed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading15 = fieldVisitReading13.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading15.Manufacturer = "https";
        java.lang.String str18 = fieldVisitReading15.getControlCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck21 = calibrationCheck19.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay24 = doubleWithDisplay22.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str25 = doubleWithDisplay24.getDisplay();
        calibrationCheck21.Difference = doubleWithDisplay24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = pointVelocityDischargeActivity27.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity27.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity27.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList34 = pointVelocityDischargeActivity33.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity33.DistanceToMeter = datumConvertedQuantityWithDisplay35;
        calibrationCheck21.Standard = datumConvertedQuantityWithDisplay35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading38 = fieldVisitReading15.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay35);
        pointVelocityDischargeActivity8.MeanObservationDurationInSeconds = datumConvertedQuantityWithDisplay35;
        adcpDischargeActivity6.MagneticVariation = datumConvertedQuantityWithDisplay35;
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(adcpDischargeActivity6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(fieldVisitReading15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(calibrationCheck21);
        org.junit.Assert.assertNotNull(doubleWithDisplay24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity29);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNull(verticalList34);
        org.junit.Assert.assertNotNull(fieldVisitReading38);
    }

    @Test
    public void test56664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56664");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod3 = locationMonitoringMethod0.setParameterUniqueId("");
        java.lang.String str4 = locationMonitoringMethod0.getComment();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationMonitoringMethod3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test56665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56665");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.lang.String str2 = getChartDataV2_0.DepthUnitId;
        java.util.List<java.lang.String> strList3 = getChartDataV2_0.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_4.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        java.lang.String str11 = controlConditionActivity8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        controlConditionActivity8.DateCleaned = instant15;
        gageHeightReading7.ReadingTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str22 = doubleWithDisplay21.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading23 = gageHeightReading7.setGageHeight(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setMeanGageHeightMethod("hi!");
        java.lang.String str28 = dischargeSummary27.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary27.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType32 = calibrationCheck31.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = calibrationCheck31.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse34.setNextToken(instant39);
        java.time.Instant instant43 = locationDescriptionListServiceResponse34.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck31.setTime(instant43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary27.setMeasurementTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_24.setStartResultTime(instant43);
        gageHeightReading7.ReadingTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = getChartDataV2_4.setStartObservedTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_0.setEndResultTime(instant43);
        java.util.List<java.lang.String> strList50 = getChartDataV2_0.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList51 = getChartDataV2_0.getSamplingLocationIds();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(gageHeightReading23);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNull(calibrationCheckType32);
        org.junit.Assert.assertNull(doubleWithDisplay33);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_48);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList51);
    }

    @Test
    public void test56666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56666");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = schedule5.getLastGenerationDate();
        putFieldVisit0.Schedule = schedule5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = putFieldVisit0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple11 = null;
        putFieldVisit0.FieldTrip = fieldTripSimple11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = putFieldVisit0.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan15.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan15.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup20 = samplingPlan15.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan22 = samplingPlan15.setAuditAttributes(auditAttributes21);
        putFieldVisit0.SamplingPlan = samplingPlan15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule26 = schedule24.setCustomId("");
        putFieldVisit0.Schedule = schedule26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit29 = putFieldVisit0.setId("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str32 = postLaboratory31.Address;
        java.lang.String str33 = postLaboratory31.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity36 = samplingPlanPlannedActivity34.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = auditAttributes37.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity36.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = samplingPlanPlannedActivity36.AuditAttributes;
        postLaboratory31.AuditAttributes = auditAttributes41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory44 = postLaboratory31.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon46 = taxonomicResult45.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = taxonomicResult45.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan49.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan49.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup54 = samplingPlan49.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan56 = samplingPlan49.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag57 = putTag48.setAuditAttributes(auditAttributes55);
        taxonomicResult45.AuditAttributes = auditAttributes55;
        postLaboratory44.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_60 = putObservationV2_30.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod61 = putObservationV2_60.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str63 = samplingLocation62.Description;
        java.lang.String str64 = samplingLocation62.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str67 = metricConfiguration66.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty68.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration71 = metricConfiguration66.setObservedProperty(observedProperty68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType72 = observedProperty68.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup74 = postObservedProperty73.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit76 = null;
        quantity75.Unit = unit76;
        postObservedProperty73.LowerLimit = quantity75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity79 = postObservedProperty73.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit80 = quantity79.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty81 = observedProperty68.setUpperLimit(quantity79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation82 = samplingLocation65.setElevation(quantity79);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList83 = samplingLocation82.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList86 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList86, extendedAttributeArray85);
        postActivity84.ExtendedAttributes = extendedAttributeList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation89 = samplingLocation82.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation90 = samplingLocation62.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_91 = putObservationV2_60.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus92 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType93 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus92.SystemCode = resultStatusSystemCodeType93;
        java.lang.String str95 = resultStatus92.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_96 = putObservationV2_91.setResultStatus(resultStatus92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult97 = putObservationV2_96.getCategoricalResult();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList98 = putObservationV2_96.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit99 = putFieldVisit29.setExtendedAttributes(extendedAttributeList98);
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(samplingLocation10);
        org.junit.Assert.assertNotNull(putFieldVisit14);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup20);
        org.junit.Assert.assertNotNull(samplingPlan22);
        org.junit.Assert.assertNotNull(schedule26);
        org.junit.Assert.assertNotNull(putFieldVisit29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity36);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(auditAttributes41);
        org.junit.Assert.assertNotNull(postLaboratory44);
        org.junit.Assert.assertNull(taxon46);
        org.junit.Assert.assertNull(auditAttributes47);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup54);
        org.junit.Assert.assertNotNull(samplingPlan56);
        org.junit.Assert.assertNotNull(putTag57);
        org.junit.Assert.assertNotNull(putObservationV2_60);
        org.junit.Assert.assertNull(collectionMethod61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(metricConfiguration71);
        org.junit.Assert.assertNull(resultType72);
        org.junit.Assert.assertNull(unitGroup74);
        org.junit.Assert.assertNotNull(quantity79);
        org.junit.Assert.assertNull(unit80);
        org.junit.Assert.assertNotNull(observedProperty81);
        org.junit.Assert.assertNotNull(samplingLocation82);
        org.junit.Assert.assertNull(domainObjectAttachmentList83);
        org.junit.Assert.assertNotNull(extendedAttributeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(samplingLocation89);
        org.junit.Assert.assertNotNull(samplingLocation90);
        org.junit.Assert.assertNotNull(putObservationV2_91);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType93 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType93.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(putObservationV2_96);
        org.junit.Assert.assertNull(categoricalResult97);
        org.junit.Assert.assertNotNull(extendedAttributeList98);
        org.junit.Assert.assertNotNull(putFieldVisit99);
    }

    @Test
    public void test56667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56667");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading0.ReadingType = readingType2;
        java.time.Instant instant4 = reading0.Time;
        java.util.ArrayList<java.lang.String> strList5 = reading0.ReadingQualifiers;
        java.lang.String str6 = reading0.getNodeDetails();
        reading0.ReadingQualifier = "2021.4.62.0";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertTrue("'" + readingType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test56668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56668");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold2 = timeSeriesThreshold0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        timeSeriesThreshold2.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder5 = timeSeriesThreshold2.getProcessingOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold7 = timeSeriesThreshold2.setReferenceCode("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold9 = timeSeriesThreshold2.setName("POST");
        java.lang.Integer int10 = timeSeriesThreshold9.getSeverity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold12 = timeSeriesThreshold9.setDisplayColor("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold14 = timeSeriesThreshold12.setReferenceCode("****b32afde2-1a30-49af-8737-f89cabfac033****");
        org.junit.Assert.assertNotNull(timeSeriesThreshold2);
        org.junit.Assert.assertNull(correctionProcessingOrder5);
        org.junit.Assert.assertNotNull(timeSeriesThreshold7);
        org.junit.Assert.assertNotNull(timeSeriesThreshold9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(timeSeriesThreshold12);
        org.junit.Assert.assertNotNull(timeSeriesThreshold14);
    }

    @Test
    public void test56669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56669");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList28 = putOpenIdConnectRelyingPartyConfiguration27.getScopes();
        java.lang.String str29 = putOpenIdConnectRelyingPartyConfiguration27.getOptionalIssuerDiscoveryUri();
        java.lang.String str30 = putOpenIdConnectRelyingPartyConfiguration27.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_32.setDataClassifications((java.util.List<java.lang.String>) strList36);
        postTag31.PickListValues = strList36;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList40 = postTag31.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase42 = postTag31.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType43 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase44 = tagRequestBase42.setValueType(tagValueType43);
        java.lang.String str45 = tagRequestBase44.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.ActivityIds = strList57;
        tagRequestBase44.PickListValues = strList57;
        putOpenIdConnectRelyingPartyConfiguration27.HostedDomains = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_63 = getGroupedObservationsV2_26.setSearch((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType64 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.Cursor = "/AQUARIUS/Acquisition/v2";
        java.util.List<java.lang.String> strList67 = getGroupedObservationsV2_26.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_69 = getGroupedObservationsV2_26.setFieldVisitId("multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****");
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNull(tagApplicabilityList40);
        org.junit.Assert.assertNotNull(tagRequestBase42);
        org.junit.Assert.assertTrue("'" + tagValueType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_63);
        org.junit.Assert.assertNull(fieldResultType64);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_69);
    }

    @Test
    public void test56670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56670");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries8 = postDatumConvertedTimeSeries0.setDescription("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries10 = postDatumConvertedTimeSeries0.setSourceReferencePointUniqueId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries12 = postDatumConvertedTimeSeries10.setTimeSeriesUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries8);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries10);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries12);
    }

    @Test
    public void test56671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56671");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest();
        applyTagRequest0.UniqueId = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest4 = applyTagRequest0.setValue("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        applyTagRequest0.Value = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str7 = applyTagRequest0.UniqueId;
        org.junit.Assert.assertNotNull(applyTagRequest4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "POST" + "'", str7, "POST");
    }

    @Test
    public void test56672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56672");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier2 = putNullMeasureQualifier0.setDescription("");
        putNullMeasureQualifier0.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str6 = standardDefinition5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime8 = putSchedule7.StartDate;
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule10 = putSchedule7.setEndDate(offsetDateTime9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = putSchedule10.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime12 = null;
        putSchedule10.LastGenerationDate = offsetDateTime12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType14 = putSchedule10.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = plannedFieldResult15.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails21 = labResultDetails19.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = plannedFieldResult15.setAuditAttributes(auditAttributes20);
        putSchedule10.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition24 = standardDefinition5.setAuditAttributes(auditAttributes20);
        java.time.OffsetDateTime offsetDateTime25 = auditAttributes20.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier26 = putNullMeasureQualifier0.setAuditAttributes(auditAttributes20);
        java.lang.String str27 = putNullMeasureQualifier0.getDescription();
        putNullMeasureQualifier0.Id = "/AQUARIUS";
        putNullMeasureQualifier0.Id = "POST";
        java.lang.String str32 = putNullMeasureQualifier0.Description;
        org.junit.Assert.assertNotNull(putNullMeasureQualifier2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(putSchedule10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType14);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(labResultDetails21);
        org.junit.Assert.assertNotNull(plannedFieldResult22);
        org.junit.Assert.assertNotNull(standardDefinition24);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test56673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56673");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant3 = qualifier2.DateApplied;
        java.lang.String str4 = qualifier2.User;
        java.lang.String str5 = qualifier2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj7 = timeAlignedDataServiceRequest6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = timeAlignedDataServiceRequest6.setQueryFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier12 = qualifier2.setDateApplied(instant9);
        getExportSpecimens0.Before = instant9;
        java.util.List<java.lang.String> strList14 = getExportSpecimens0.getLaboratoryIds();
        java.util.List<java.lang.String> strList15 = getExportSpecimens0.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType17 = samplingPlanPlannedActivityRecurrence16.RecurrenceFrequency;
        java.util.List<java.lang.String> strList18 = samplingPlanPlannedActivityRecurrence16.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier21 = putQualifier19.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = timeAlignedDataServiceRequest22.setTimeSeriesUniqueIds(strList34);
        putQualifier19.GroupIdentifiers = strList34;
        java.util.ArrayList<java.lang.String> strList40 = putQualifier19.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence16.MonthsOfYear = strList40;
        getExportSpecimens0.ActivityTypes = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList44 = getObservationsV2_43.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        getObservationsV2_43.ResultGrades = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens61 = getExportSpecimens0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getExportSpecimens0.AnalyticalGroupIds = strList67;
        java.util.List<java.lang.String> strList71 = getExportSpecimens0.getSamplingLocationGroupIds();
        java.util.List<java.lang.String> strList72 = getExportSpecimens0.LaboratoryIds;
        java.util.List<java.lang.String> strList73 = getExportSpecimens0.ProjectIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest11);
        org.junit.Assert.assertNotNull(qualifier12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(recurrenceFrequencyType17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(putQualifier21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest38);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(getExportSpecimens61);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNull(strList73);
    }

    @Test
    public void test56674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56674");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType1 = analyticalGroup0.getType();
        analyticalGroup0.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = analyticalGroupItem5.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analyticalGroupItem7.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = analyticalGroupItem7.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = analyticalGroupItem10.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem10.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = null;
        analyticalGroupItem10.AnalysisMethod = analysisMethod13;
        java.lang.String str15 = analyticalGroupItem10.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = analyticalGroupItem16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem21.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = analyticalGroupItem21.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = null;
        analyticalGroupItem21.AnalysisMethod = analysisMethod24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem5, analyticalGroupItem7, analyticalGroupItem10, analyticalGroupItem16, analyticalGroupItem19, analyticalGroupItem21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList27, analyticalGroupItemArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup29 = analyticalGroup4.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList27);
        analyticalGroup0.AnalyticalGroupItems = analyticalGroupItemList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup0.AuditAttributes = auditAttributes31;
        java.lang.String str33 = analyticalGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType34 = analyticalGroup0.getType();
        java.lang.String str35 = analyticalGroup0.Id;
        org.junit.Assert.assertNull(analyticalGroupType1);
        org.junit.Assert.assertNull(analysisMethod6);
        org.junit.Assert.assertNull(analysisMethod8);
        org.junit.Assert.assertNull(analysisMethod9);
        org.junit.Assert.assertNull(analysisMethod11);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(analysisMethod17);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod23);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(analyticalGroup29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(analyticalGroupType34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test56675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56675");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList1 = searchResultShippingContainer0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str4 = shippingContainer3.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity5.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = postActivity5.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity11 = postActivity9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer12 = shippingContainer3.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str14 = shippingContainer13.TrackingId;
        shippingContainer13.TrackingId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str18 = shippingContainer17.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity19.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = postActivity19.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = postActivity23.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer26 = shippingContainer17.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer[] shippingContainerArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer[] { shippingContainer2, shippingContainer3, shippingContainer13, shippingContainer17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>) shippingContainerList28, shippingContainerArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer30 = searchResultShippingContainer0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>) shippingContainerList28);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList31 = searchResultShippingContainer30.getDomainObjects();
        java.lang.Integer int32 = searchResultShippingContainer30.getTotalCount();
        org.junit.Assert.assertNull(shippingContainerList1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postActivity9);
        org.junit.Assert.assertNotNull(postActivity11);
        org.junit.Assert.assertNotNull(shippingContainer12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postActivity23);
        org.junit.Assert.assertNotNull(postActivity25);
        org.junit.Assert.assertNotNull(shippingContainer26);
        org.junit.Assert.assertNotNull(shippingContainerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(searchResultShippingContainer30);
        org.junit.Assert.assertNotNull(shippingContainerList31);
        org.junit.Assert.assertNull(int32);
    }

    @Test
    public void test56676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56676");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod2 = referencePointPeriod0.setStandardIdentifier("9999-12-31T23:59:59.999Z");
        referencePointPeriod2.IsMeasuredAgainstLocalAssumedDatum = false;
        referencePointPeriod2.Unit = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        referencePointPeriod2.AppliedByUser = "http";
        referencePointPeriod2.Uncertainty = 1.0d;
        java.lang.Double double11 = referencePointPeriod2.getElevation();
        org.junit.Assert.assertNotNull(referencePointPeriod2);
        org.junit.Assert.assertNull(double11);
    }

    @Test
    public void test56677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56677");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyCategoricalValues getObservedPropertyCategoricalValues0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyCategoricalValues();
        getObservedPropertyCategoricalValues0.Id = "9999-12-31T23:59:59.999Z";
        java.lang.String str3 = getObservedPropertyCategoricalValues0.getId();
        java.lang.Object obj4 = getObservedPropertyCategoricalValues0.getResponseType();
        getObservedPropertyCategoricalValues0.Id = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str3, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCategoricalValue");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCategoricalValue");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCategoricalValue");
    }

    @Test
    public void test56678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56678");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint();
        java.time.Instant instant1 = referencePoint0.PrimarySinceDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str3 = referencePointPeriod2.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str5 = referencePointPeriod4.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase7 = referencePointPeriod4.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod4.Uncertainty = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase11 = referencePointPeriod4.setStandardIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod12.Comment = "/AQUARIUS/Provisioning/v1";
        java.time.Instant instant15 = referencePointPeriod12.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod16.Comment = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod19.Comment = "/AQUARIUS/Provisioning/v1";
        java.time.Instant instant22 = referencePointPeriod19.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str24 = referencePointPeriod23.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str26 = referencePointPeriod25.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase28 = referencePointPeriod25.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod25.Uncertainty = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase32 = referencePointPeriod25.setStandardIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str34 = referencePointPeriod33.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase36 = referencePointPeriod33.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod33.Uncertainty = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase40 = referencePointPeriod33.setStandardIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str42 = referencePointPeriod41.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase44 = referencePointPeriod41.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.time.Instant instant46 = referencePointPeriod45.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str49 = referencePointPeriod48.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase51 = referencePointPeriod48.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod48.Uncertainty = 10.0d;
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase55 = referencePointPeriod48.setValidFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str57 = referencePointPeriod56.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod[] referencePointPeriodArray58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod[] { referencePointPeriod2, referencePointPeriod4, referencePointPeriod12, referencePointPeriod16, referencePointPeriod19, referencePointPeriod23, referencePointPeriod25, referencePointPeriod33, referencePointPeriod41, referencePointPeriod45, referencePointPeriod47, referencePointPeriod48, referencePointPeriod56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod> referencePointPeriodList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod>) referencePointPeriodList59, referencePointPeriodArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint referencePoint61 = referencePoint0.setReferencePointPeriods(referencePointPeriodList59);
        java.lang.String str62 = referencePoint0.getName();
        java.lang.String str63 = referencePoint0.getName();
        referencePoint0.UniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        java.time.Instant instant67 = timeSeriesThresholdPeriod66.StartTime;
        java.time.Instant instant68 = timeSeriesThresholdPeriod66.StartTime;
        java.time.Instant instant69 = timeSeriesThresholdPeriod66.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase73 = locationDatumPeriod71.setComment("'.'SSSSSSS");
        java.lang.Double double74 = locationDatumPeriodBase73.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant76 = qualifier75.DateApplied;
        java.lang.String str77 = qualifier75.User;
        java.lang.String str78 = qualifier75.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj80 = timeAlignedDataServiceRequest79.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant82 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = locationDescriptionListServiceResponse81.setNextToken(instant82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest84 = timeAlignedDataServiceRequest79.setQueryFrom(instant82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier85 = qualifier75.setDateApplied(instant82);
        java.time.Instant instant86 = qualifier85.getDateApplied();
        locationDatumPeriodBase73.ValidFrom = instant86;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase88 = putRecurringReport70.setNextGenerationDate(instant86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod89 = timeSeriesThresholdPeriod66.setStartTime(instant86);
        referencePoint0.DecommissionedDate = instant86;
        java.lang.String str91 = referencePoint0.LocationUniqueId;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(referencePointPeriodBase7);
        org.junit.Assert.assertNotNull(referencePointPeriodBase11);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(referencePointPeriodBase28);
        org.junit.Assert.assertNotNull(referencePointPeriodBase32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(referencePointPeriodBase36);
        org.junit.Assert.assertNotNull(referencePointPeriodBase40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(referencePointPeriodBase44);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(referencePointPeriodBase51);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(referencePointPeriodBase55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(referencePointPeriodArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(referencePoint61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(instant67);
        org.junit.Assert.assertNull(instant68);
        org.junit.Assert.assertNull(instant69);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase73);
        org.junit.Assert.assertNull(double74);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse83);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest84);
        org.junit.Assert.assertNotNull(qualifier85);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(recurringReportBase88);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod89);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test56679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56679");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        role0.CanAddData = true;
        java.lang.String str5 = role0.UniqueId;
        java.lang.Boolean boolean6 = role0.isCanEditData();
        role0.CanAddData = true;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test56680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56680");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult3 = datumConversionResult1.setFailureReason("MinInstant");
        fieldVisit0.DatumConversionResult = datumConversionResult3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = fieldVisit0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d), 100.0d };
        java.util.ArrayList<java.lang.Double> doubleList12 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList12, doubleArray11);
        ratingModelEffectiveShiftsByStageValuesServiceResponse6.EffectiveShiftValues = doubleList12;
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse16 = ratingModelEffectiveShiftsByStageValuesServiceResponse6.setTimestamp(instant15);
        fieldVisit0.LastModified = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity18 = fieldVisit0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity19 = fieldVisit0.LevelSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription21 = fieldVisit0.setWeather("/AQUARIUS");
        org.junit.Assert.assertNotNull(datumConversionResult3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse16);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity18);
        org.junit.Assert.assertNull(levelSurveyActivity19);
        org.junit.Assert.assertNotNull(fieldVisitDescription21);
    }

    @Test
    public void test56681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56681");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType1 = expandedRatingCurve0.Type;
        expandedRatingCurve0.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve5 = expandedRatingCurve0.setOutputParameter(parameterWithUnit4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = expandedRatingCurve5.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve8 = expandedRatingCurve5.setId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        expandedRatingCurve8.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str12 = ratingCurve11.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType14 = expandedRatingCurve13.Type;
        expandedRatingCurve13.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve18 = expandedRatingCurve13.setOutputParameter(parameterWithUnit17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve19 = ratingCurve11.setInputParameter(parameterWithUnit17);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList20 = ratingCurve11.getOffsets();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType22 = expandedRatingCurve21.Type;
        expandedRatingCurve21.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve26 = expandedRatingCurve21.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList27 = expandedRatingCurve26.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList28 = expandedRatingCurve26.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType30 = expandedRatingCurve29.Type;
        expandedRatingCurve29.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve34 = expandedRatingCurve29.setOutputParameter(parameterWithUnit33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit35 = expandedRatingCurve34.getOutputParameter();
        expandedRatingCurve26.OutputParameter = parameterWithUnit35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit38 = parameterWithUnit35.setParameterName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve39 = ratingCurve11.setOutputParameter(parameterWithUnit38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType41 = expandedRatingCurve40.Type;
        expandedRatingCurve40.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve45 = expandedRatingCurve40.setOutputParameter(parameterWithUnit44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit46 = expandedRatingCurve45.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType48 = expandedRatingCurve47.Type;
        expandedRatingCurve47.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve52 = expandedRatingCurve47.setOutputParameter(parameterWithUnit51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve53 = expandedRatingCurve45.setOutputParameter(parameterWithUnit51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] offsetPointArray54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList55 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>) offsetPointList55, offsetPointArray54);
        expandedRatingCurve45.Offsets = offsetPointList55;
        ratingCurve39.Offsets = offsetPointList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str60 = ratingCurve59.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit61 = ratingCurve59.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType63 = expandedRatingCurve62.Type;
        expandedRatingCurve62.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve67 = expandedRatingCurve62.setIsBlended((java.lang.Boolean) true);
        java.lang.String str68 = expandedRatingCurve62.Id;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList69 = expandedRatingCurve62.AdjustedRatingTable;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList70 = expandedRatingCurve62.Offsets;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve72 = expandedRatingCurve62.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList75, ratingPointArray74);
        ratingCurve73.BaseRatingTable = ratingPointList75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList80 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList80, ratingPointArray79);
        ratingCurve78.BaseRatingTable = ratingPointList80;
        ratingCurve73.BaseRatingTable = ratingPointList80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve84 = expandedRatingCurve72.setAdjustedRatingTable(ratingPointList80);
        ratingCurve59.BaseRatingTable = ratingPointList80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve86 = ratingCurve39.setBaseRatingTable(ratingPointList80);
        expandedRatingCurve8.AdjustedRatingTable = ratingPointList80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType88 = expandedRatingCurve8.Type;
        org.junit.Assert.assertNull(ratingCurveType1);
        org.junit.Assert.assertNotNull(expandedRatingCurve5);
        org.junit.Assert.assertNotNull(parameterWithUnit6);
        org.junit.Assert.assertNotNull(expandedRatingCurve8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(ratingCurveType14);
        org.junit.Assert.assertNotNull(expandedRatingCurve18);
        org.junit.Assert.assertNotNull(ratingCurve19);
        org.junit.Assert.assertNull(offsetPointList20);
        org.junit.Assert.assertNull(ratingCurveType22);
        org.junit.Assert.assertNotNull(expandedRatingCurve26);
        org.junit.Assert.assertNull(ratingShiftList27);
        org.junit.Assert.assertNull(ratingShiftList28);
        org.junit.Assert.assertNull(ratingCurveType30);
        org.junit.Assert.assertNotNull(expandedRatingCurve34);
        org.junit.Assert.assertNotNull(parameterWithUnit35);
        org.junit.Assert.assertNotNull(parameterWithUnit38);
        org.junit.Assert.assertNotNull(ratingCurve39);
        org.junit.Assert.assertNull(ratingCurveType41);
        org.junit.Assert.assertNotNull(expandedRatingCurve45);
        org.junit.Assert.assertNotNull(parameterWithUnit46);
        org.junit.Assert.assertNull(ratingCurveType48);
        org.junit.Assert.assertNotNull(expandedRatingCurve52);
        org.junit.Assert.assertNotNull(expandedRatingCurve53);
        org.junit.Assert.assertNotNull(offsetPointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(parameterWithUnit61);
        org.junit.Assert.assertNull(ratingCurveType63);
        org.junit.Assert.assertNotNull(expandedRatingCurve67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(ratingPointList69);
        org.junit.Assert.assertNull(offsetPointList70);
        org.junit.Assert.assertNotNull(expandedRatingCurve72);
        org.junit.Assert.assertNotNull(ratingPointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(ratingPointArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(expandedRatingCurve84);
        org.junit.Assert.assertNotNull(ratingCurve86);
        org.junit.Assert.assertNull(ratingCurveType88);
    }

    @Test
    public void test56682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56682");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType1 = timeSeriesPoint0.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint3 = timeSeriesPoint0.setType(pointType2);
        java.lang.Double double4 = timeSeriesPoint0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType5 = timeSeriesPoint0.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod8 = timeSeriesThresholdPeriod6.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod6.AppliedTime = instant9;
        java.time.Instant instant11 = timeSeriesThresholdPeriod6.getEndTime();
        java.time.Instant instant12 = timeSeriesThresholdPeriod6.getAppliedTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint13 = timeSeriesPoint0.setTime(instant12);
        java.util.ArrayList<java.lang.String> strList14 = timeSeriesPoint0.Qualifiers;
        java.lang.Double double15 = timeSeriesPoint0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap;
        timeSeriesPoint0.Type = pointType16;
        java.util.ArrayList<java.lang.String> strList18 = timeSeriesPoint0.Qualifiers;
        org.junit.Assert.assertNull(pointType1);
        org.junit.Assert.assertTrue("'" + pointType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNotNull(timeSeriesPoint3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertTrue("'" + pointType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeSeriesPoint13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertTrue("'" + pointType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNull(strList18);
    }

    @Test
    public void test56683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56683");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType1 = putUserV2_0.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_3 = putUserV2_0.setEmail("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = putUserV2_0.setUserProfile(userProfile4);
        java.lang.String str6 = putUserV2_5.getEmail();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_8 = putUserV2_5.setCustomId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_10 = putUserV2_8.setEmail("http://MaxDurationhttp/json/reply/Float");
        org.junit.Assert.assertNull(userType1);
        org.junit.Assert.assertNotNull(putUserV2_3);
        org.junit.Assert.assertNotNull(putUserV2_5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxInstant" + "'", str6, "MaxInstant");
        org.junit.Assert.assertNotNull(putUserV2_8);
        org.junit.Assert.assertNotNull(putUserV2_10);
    }

    @Test
    public void test56684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56684");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSetting putSetting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSetting();
        java.lang.String str1 = putSetting0.Key;
        putSetting0.Group = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.String str4 = putSetting0.getValue();
        java.lang.String str5 = putSetting0.Group;
        java.lang.String str6 = putSetting0.getDescription();
        java.lang.String str7 = putSetting0.getDescription();
        java.lang.String str8 = putSetting0.getValue();
        java.lang.String str9 = putSetting0.Group;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****" + "'", str5, "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****" + "'", str9, "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
    }

    @Test
    public void test56685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56685");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup0.Identifier = "";
        java.lang.Object obj3 = putQualifierGroup0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup5 = putQualifierGroup0.setUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList7 = getSpecimens6.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = getSpecimens6.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_10.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType15 = null;
        controlConditionActivity14.ControlCleaned = controlCleanedType15;
        java.lang.String str17 = controlConditionActivity14.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        controlConditionActivity14.DateCleaned = instant21;
        gageHeightReading13.ReadingTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = doubleWithDisplay25.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str28 = doubleWithDisplay27.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading29 = gageHeightReading13.setGageHeight(doubleWithDisplay27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setMeanGageHeightMethod("hi!");
        java.lang.String str34 = dischargeSummary33.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = dischargeSummary33.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType38 = calibrationCheck37.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = calibrationCheck37.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = dischargeSummary41.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse44.setNextToken(instant45);
        dischargeSummary41.MeasurementTime = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse40.setNextToken(instant45);
        java.time.Instant instant49 = locationDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck50 = calibrationCheck37.setTime(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary33.setMeasurementTime(instant49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_52 = getChartDataV2_30.setStartResultTime(instant49);
        gageHeightReading13.ReadingTime = instant49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_54 = getChartDataV2_10.setStartObservedTime(instant49);
        getSpecimens6.EndModificationTime = instant49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_57.setDataClassifications((java.util.List<java.lang.String>) strList61);
        getObservationsV2_63.DepthUnitCustomId = "hi!";
        java.lang.String str66 = getObservationsV2_63.DepthUnitId;
        java.util.List<java.lang.String> strList67 = getObservationsV2_63.LabResultLaboratoryIds;
        getObservationsV2_63.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int70 = getObservationsV2_63.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        getObservationsV2_72.SpecimenIds = strList75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray82 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags85 = putLocationTags78.setTagUniqueIds(strList83);
        getObservationsV2_72.QualityControlTypes = strList83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest87 = timeAlignedDataServiceRequest71.setTimeSeriesUniqueIds(strList83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_88 = getObservationsV2_63.setSamplingLocationIds((java.util.List<java.lang.String>) strList83);
        putUser56.Roles = strList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens90 = getSpecimens6.setSpecimenStatuses((java.util.List<java.lang.String>) strList83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup91 = putQualifierGroup5.setQualifierCodeList(strList83);
        java.util.ArrayList<java.lang.String> strList92 = putQualifierGroup5.getQualifierCodeList();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup94 = putQualifierGroup5.setUniqueId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup96 = putQualifierGroup94.setIdentifier("multipart/form-data; boundary=****c052e2e0-9b0e-4df2-9a74-52850b5df85a****");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertNotNull(putQualifierGroup5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(getSpecimens9);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(doubleWithDisplay27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(gageHeightReading29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dischargeSummary36);
        org.junit.Assert.assertNull(calibrationCheckType38);
        org.junit.Assert.assertNull(doubleWithDisplay39);
        org.junit.Assert.assertNotNull(dischargeSummary43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(calibrationCheck50);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(getChartDataV2_52);
        org.junit.Assert.assertNotNull(getChartDataV2_54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(putLocationTags85);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest87);
        org.junit.Assert.assertNotNull(getObservationsV2_88);
        org.junit.Assert.assertNotNull(getSpecimens90);
        org.junit.Assert.assertNotNull(putQualifierGroup91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(putQualifierGroup94);
        org.junit.Assert.assertNotNull(putQualifierGroup96);
    }

    @Test
    public void test56686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56686");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location0.setUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.Double double6 = location0.Elevation;
        java.lang.Double double7 = location0.getLongitude();
        location0.UtcOffset = "/AQUARIUS/Acquisition/v2";
        location0.Longitude = 100.0d;
        java.lang.Double double12 = location0.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location14 = location0.setLatitude((java.lang.Double) 1.0d);
        java.lang.String str15 = location0.UtcOffset;
        java.time.Instant instant16 = location0.getLastModified();
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNotNull(location14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str15, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(instant16);
    }

    @Test
    public void test56687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56687");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setImportTime(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent4 = importHistoryEvent2.setImportType(importType3);
        importHistoryEvent2.TimeZoneOffset = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent8 = importHistoryEvent2.setFileName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent10 = importHistoryEvent8.setId("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str11 = importHistoryEvent10.getFileName();
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertTrue("'" + importType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent4);
        org.junit.Assert.assertNotNull(importHistoryEvent8);
        org.junit.Assert.assertNotNull(importHistoryEvent10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str11, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test56688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56688");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary4 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary0.setInvalidRowsCsvUrl("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary7.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary11 = observedPropertyImportSummary7.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary13 = observedPropertyImportSummary7.setSuccessCount((java.lang.Integer) 0);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList14 = observedPropertyImportSummary7.getNonErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary17 = observationImportSummary15.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Integer int18 = observationImportSummary17.UpdateCount;
        java.lang.Integer int19 = observationImportSummary17.UpdateCount;
        java.lang.String str20 = observationImportSummary17.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary22 = observationImportSummary17.setUpdateCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary25 = observationImportSummary23.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary27 = observationImportSummary25.setExpectedCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary29 = observationImportSummary25.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int31 = samplingLocationImportSummary30.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList32 = samplingLocationImportSummary30.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList33 = samplingLocationImportSummary30.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary35 = samplingLocationImportSummary30.setExpectedCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary36.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList39 = taxonImportSummary36.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation42 = importSummaryObservation40.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation44 = importSummaryObservation42.setSuccessCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary45.UpdateCount = (-1);
        java.lang.Integer int48 = observationImportSummary45.ExpectedCount;
        java.lang.String str49 = observationImportSummary45.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList51, importErrorArray50);
        observationImportSummary45.ImportJobErrors = importErrorList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation54 = importSummaryObservation42.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList51);
        taxonImportSummary36.ImportJobErrors = importErrorList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary56 = samplingLocationImportSummary30.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary57 = observationImportSummary29.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList51);
        observationImportSummary22.ImportJobErrors = importErrorList51;
        observedPropertyImportSummary7.ImportJobErrors = importErrorList51;
        importSummary0.ImportJobErrors = importErrorList51;
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(importSummary4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary11);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary13);
        org.junit.Assert.assertNull(importItemObservedPropertyList14);
        org.junit.Assert.assertNotNull(observationImportSummary17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str20, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(observationImportSummary22);
        org.junit.Assert.assertNotNull(observationImportSummary25);
        org.junit.Assert.assertNotNull(observationImportSummary27);
        org.junit.Assert.assertNotNull(observationImportSummary29);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(importItemSamplingLocationList32);
        org.junit.Assert.assertNull(importErrorList33);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary35);
        org.junit.Assert.assertNull(importItemTaxonList39);
        org.junit.Assert.assertNotNull(importSummaryObservation42);
        org.junit.Assert.assertNotNull(importSummaryObservation44);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(importErrorArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(importSummaryObservation54);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary56);
        org.junit.Assert.assertNotNull(observationImportSummary57);
    }

    @Test
    public void test56689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56689");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitHistory getFieldVisitHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitHistory();
        java.lang.String str1 = getFieldVisitHistory0.Id;
        java.lang.String str2 = getFieldVisitHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitHistory getFieldVisitHistory4 = getFieldVisitHistory0.setId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str5 = getFieldVisitHistory0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getFieldVisitHistory4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str5, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
    }

    @Test
    public void test56690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56690");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationUserRoles getLocationUserRoles0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationUserRoles();
        java.lang.String str1 = getLocationUserRoles0.LocationUniqueId;
        getLocationUserRoles0.LocationUniqueId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationUserRoles getLocationUserRoles5 = getLocationUserRoles0.setLocationUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.String str6 = getLocationUserRoles0.getLocationUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getLocationUserRoles5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****" + "'", str6, "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
    }

    @Test
    public void test56691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56691");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit2 = postUnitGroupWithUnit0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit4 = postUnitGroupWithUnit2.setSystemCode(unitGroupWithUnitsSystemCodeType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit7 = postUnitGroupWithUnit5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit9 = postUnitGroupWithUnit7.setSystemCode(unitGroupWithUnitsSystemCodeType8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit10 = postUnitGroupWithUnit2.setSystemCode(unitGroupWithUnitsSystemCodeType8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit12 = postUnitGroupWithUnit2.setId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str13 = postUnitGroupWithUnit2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = postUnitGroupWithUnit2.getAuditAttributes();
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit2);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit4);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit7);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit9);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit10);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str13, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(auditAttributes14);
    }

    @Test
    public void test56692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56692");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str1 = ratingModelEffectiveShiftsServiceRequest0.RatingModelIdentifier;
        java.time.Instant instant2 = ratingModelEffectiveShiftsServiceRequest0.QueryTo;
        ratingModelEffectiveShiftsServiceRequest0.TimeSeriesUniqueId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double6 = putBulkEditResultGradesV2_5.DepthValue;
        java.util.List<java.lang.String> strList7 = putBulkEditResultGradesV2_5.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_13 = putBulkEditResultGradesV2_5.setStartModificationTime(instant11);
        java.lang.String str14 = putBulkEditResultGradesV2_13.getFilterId();
        java.lang.String str15 = putBulkEditResultGradesV2_13.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList17 = getExportObservations16.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj19 = putLocationType18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest20.ReportTitle = "MinDuration";
        java.lang.String str23 = reportListServiceRequest20.getLocationUniqueId();
        java.time.Instant instant24 = null;
        reportListServiceRequest20.CreatedFrom = instant24;
        java.lang.String[] strArray38 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        reportListServiceRequest20.TagValues = strList39;
        putLocationType18.ExtendedAttributeDefinitionIds = strList39;
        getExportObservations16.SpecimenIds = strList39;
        java.lang.Double double44 = getExportObservations16.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations48 = getExportObservations16.setStartModificationTime(instant46);
        java.util.List<java.lang.String> strList49 = getExportObservations48.SamplingLocationGroupIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str51 = locationMonitoringMethod50.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList52 = null;
        locationMonitoringMethod50.Tags = tagMetadataList52;
        java.lang.String str54 = locationMonitoringMethod50.getParameterId();
        java.lang.String str55 = locationMonitoringMethod50.Parameter;
        locationMonitoringMethod50.Comment = "";
        locationMonitoringMethod50.LocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str60 = locationMonitoringMethod50.getParameterId();
        java.lang.String str61 = locationMonitoringMethod50.SerialNumber;
        java.lang.String str62 = locationMonitoringMethod50.getParameterId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList64 = fieldVisitReading63.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay65 = null;
        fieldVisitReading63.AdjustmentAmount = quantityWithDisplay65;
        java.time.Instant instant67 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        fieldVisitReading63.Time = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod69 = locationMonitoringMethod50.setLastModifiedUtc(instant67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations70 = getExportObservations48.setStartModificationTime(instant67);
        putBulkEditResultGradesV2_13.EndResultTime = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest72 = ratingModelEffectiveShiftsServiceRequest0.setQueryTo(instant67);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(double44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(getExportObservations48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(locationMonitoringMethod69);
        org.junit.Assert.assertNotNull(getExportObservations70);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest72);
    }

    @Test
    public void test56693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56693");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag2 = appliedTag0.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag4 = appliedTag0.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str5 = appliedTag0.getValue();
        java.lang.String str6 = appliedTag0.Key;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag8 = appliedTag0.setKey("****26835278-3e68-484a-a157-468aab2e69a2****");
        appliedTag0.Value = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        org.junit.Assert.assertNotNull(appliedTag2);
        org.junit.Assert.assertNotNull(appliedTag4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(appliedTag8);
    }

    @Test
    public void test56694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56694");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        java.lang.String str8 = timeAlignedPoint0.Qualifiers9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setGradeName10("");
        java.lang.String str11 = timeAlignedPoint10.DisplayValue5;
        java.time.Instant instant12 = timeAlignedPoint10.Timestamp;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint10.setDisplayValue7("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint14.setGradeName4("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str17 = timeAlignedPoint16.ApprovalName7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint19 = timeAlignedPoint16.setApprovalName9("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint21 = timeAlignedPoint19.setQualifiers2("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint23 = timeAlignedPoint21.setGradeCode10((java.lang.Long) 0L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(timeAlignedPoint19);
        org.junit.Assert.assertNotNull(timeAlignedPoint21);
        org.junit.Assert.assertNotNull(timeAlignedPoint23);
    }

    @Test
    public void test56695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56695");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postTag5.Name = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime9 = putSchedule8.StartDate;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule11 = putSchedule8.setEndDate(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup12 = putSchedule11.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime13 = null;
        putSchedule11.EndDate = offsetDateTime13;
        java.time.OffsetDateTime offsetDateTime15 = putSchedule11.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType16 = putSchedule11.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime18 = putSchedule17.StartDate;
        java.time.OffsetDateTime offsetDateTime19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule20 = putSchedule17.setEndDate(offsetDateTime19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = putSchedule20.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime22 = null;
        putSchedule20.LastGenerationDate = offsetDateTime22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int25 = putSchedule24.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule27 = putSchedule24.setRecurrenceType(recurrenceType26);
        putSchedule20.RecurrenceType = recurrenceType26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule11.setRecurrenceType(recurrenceType26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup32 = samplingLocationGroup30.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup34 = samplingLocationGroup32.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSchedule29.SamplingLocationGroup = samplingLocationGroup34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType36 = samplingLocationGroup34.getLocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = putUnit37.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = putDetectioncondition39.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition42 = putDetectioncondition39.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity45 = samplingPlanPlannedActivity43.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = auditAttributes46.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity45.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = samplingPlanPlannedActivity45.AuditAttributes;
        putDetectioncondition39.AuditAttributes = auditAttributes50;
        putUnit37.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = auditAttributes50.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup55 = samplingLocationGroup34.setAuditAttributes(auditAttributes50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = samplingLocationGroup55.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag57 = postTag5.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit58.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit62 = postFieldVisit58.setStartTime(offsetDateTime61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit64 = postFieldVisit58.setId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList67 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList67, extendedAttributeArray66);
        postActivity65.ExtendedAttributes = extendedAttributeList67;
        postFieldVisit64.ExtendedAttributes = extendedAttributeList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str72 = categoricalValue71.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate76 = specimenTemplate74.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType77 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate76.Preservative = preservativeType77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails81 = labResultDetails79.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails83 = labResultDetails81.setAuditAttributes(auditAttributes82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate84 = specimenTemplate76.setAuditAttributes(auditAttributes82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition85 = postDetectioncondition73.setAuditAttributes(auditAttributes82);
        categoricalValue71.AuditAttributes = auditAttributes82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit87 = postFieldVisit64.setAuditAttributes(auditAttributes82);
        postTag57.AuditAttributes = auditAttributes82;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(putSchedule11);
        org.junit.Assert.assertNull(samplingLocationGroup12);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType16);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(putSchedule20);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + recurrenceType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule27);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNotNull(samplingLocationGroup32);
        org.junit.Assert.assertNotNull(samplingLocationGroup34);
        org.junit.Assert.assertNull(locationGroupType36);
        org.junit.Assert.assertNull(auditAttributes38);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNotNull(putDetectioncondition42);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity45);
        org.junit.Assert.assertNotNull(auditAttributes48);
        org.junit.Assert.assertNotNull(auditAttributes50);
        org.junit.Assert.assertNotNull(auditAttributes54);
        org.junit.Assert.assertNotNull(samplingLocationGroup55);
        org.junit.Assert.assertNotNull(auditAttributes56);
        org.junit.Assert.assertNotNull(postTag57);
        org.junit.Assert.assertNotNull(postFieldVisit62);
        org.junit.Assert.assertNotNull(postFieldVisit64);
        org.junit.Assert.assertNotNull(extendedAttributeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(specimenTemplate76);
        org.junit.Assert.assertTrue("'" + preservativeType77 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType77.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails81);
        org.junit.Assert.assertNotNull(labResultDetails83);
        org.junit.Assert.assertNotNull(specimenTemplate84);
        org.junit.Assert.assertNotNull(postDetectioncondition85);
        org.junit.Assert.assertNotNull(postFieldVisit87);
    }

    @Test
    public void test56696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56696");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup();
        java.lang.String str1 = accessGroup0.Name;
        accessGroup0.CanEditAllData = true;
        accessGroup0.CanEditAllData = true;
        accessGroup0.Name = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation10 = postSamplingLocation8.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation12 = postSamplingLocation8.setAddress(address11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = postSamplingLocation12.getElevation();
        postSamplingLocation12.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = postSamplingLocation12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList19, samplingLocationGroupArray18);
        postAccessGroup17.SamplingLocationGroups = samplingLocationGroupList19;
        postSamplingLocation12.SamplingLocationGroups = samplingLocationGroupList19;
        accessGroup0.SamplingLocationGroups = samplingLocationGroupList19;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList24 = accessGroup0.getSamplingLocationGroups();
        java.lang.String str25 = accessGroup0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSamplingLocation10);
        org.junit.Assert.assertNotNull(postSamplingLocation12);
        org.junit.Assert.assertNull(quantity13);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(samplingLocationGroupList24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test56697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56697");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationCanEdit getSamplingLocationCanEdit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationCanEdit();
        java.lang.String str1 = getSamplingLocationCanEdit0.Id;
        getSamplingLocationCanEdit0.Id = "/AQUARIUS/Acquisition/v2";
        getSamplingLocationCanEdit0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56698");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse2 = qualifierResponse0.setIsSystem((java.lang.Boolean) true);
        qualifierResponse2.IsSystem = false;
        java.lang.String str5 = qualifierResponse2.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse7 = qualifierResponse2.setIsSystem((java.lang.Boolean) false);
        java.lang.String str8 = qualifierResponse7.getQualifierCode();
        java.util.ArrayList<java.lang.String> strList9 = qualifierResponse7.getGroupIdentifiers();
        java.lang.String str10 = qualifierResponse7.getUniqueId();
        java.lang.Boolean boolean11 = qualifierResponse7.getIsSystem();
        org.junit.Assert.assertNotNull(qualifierResponse2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(qualifierResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + false + "'", boolean11, false);
    }

    @Test
    public void test56699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56699");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj2 = importItemAnalysisMethod1.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        getObservationsV2_5.SpecimenIds = strList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray15 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags11.setTagUniqueIds(strList16);
        getObservationsV2_5.QualityControlTypes = strList16;
        java.util.List<java.lang.String> strList20 = getObservationsV2_5.getLabReportIds();
        importItem4.Errors = getObservationsV2_5;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList22 = importItem4.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation25 = importItemSamplingLocation23.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        java.util.List<java.lang.String> strList42 = getObservationsV2_27.getLabReportIds();
        importItem26.Errors = getObservationsV2_27;
        java.lang.Object obj44 = importItem26.getExistingItem();
        importItem26.Input = "hi!";
        java.lang.Object obj47 = importItem26.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType48 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem49 = importItem26.setStatus(importItemStatusType48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation50 = importItemSamplingLocation25.setStatus(importItemStatusType48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList52 = importItemObject51.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList54, importChangeItemArray53);
        importItemObject51.ItemComparison = importChangeItemList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray61 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = putLocationTags57.setTagUniqueIds(strList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject65 = importItemObject51.setExistingItem((java.lang.Object) putLocationTags57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser68 = openIdConnectUser66.setIdentifier("");
        java.lang.Boolean boolean69 = openIdConnectUser68.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject70 = importItemObject51.setErrors((java.lang.Object) openIdConnectUser68);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList71 = importItemObject70.ItemComparison;
        importItemSamplingLocation50.ItemComparison = importChangeItemList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem73 = importItem4.setItemComparison(importChangeItemList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty74 = importItemObservedProperty3.setItemComparison(importChangeItemList71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList75 = importItemObservedProperty3.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod76 = importItemAnalysisMethod1.setItemComparison(importChangeItemList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod77 = importItemAnalysisMethod0.setItemComparison(importChangeItemList75);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList78 = importItemAnalysisMethod0.getItemComparison();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(importChangeItemList22);
        org.junit.Assert.assertNotNull(importItemSamplingLocation25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + importItemStatusType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType48.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem49);
        org.junit.Assert.assertNotNull(importItemSamplingLocation50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(importChangeItemArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putLocationTags64);
        org.junit.Assert.assertNotNull(importItemObject65);
        org.junit.Assert.assertNotNull(openIdConnectUser68);
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertNotNull(importItemObject70);
        org.junit.Assert.assertNotNull(importChangeItemList71);
        org.junit.Assert.assertNotNull(importItem73);
        org.junit.Assert.assertNotNull(importItemObservedProperty74);
        org.junit.Assert.assertNotNull(importChangeItemList75);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod76);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod77);
        org.junit.Assert.assertNotNull(importChangeItemList78);
    }

    @Test
    public void test56700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56700");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj1 = putLocationType0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType3 = putLocationType0.setUniqueId("'.'SSSSSSS");
        putLocationType3.UniqueId = "";
        java.lang.String str6 = putLocationType3.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType8 = putLocationType3.setUniqueId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase11 = roleFlattened9.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean12 = roleFlattened9.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str14 = deleteFieldVisits13.Sort;
        deleteFieldVisits13.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        java.util.List<java.lang.String> strList24 = getObservationsV2_17.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary25.Reviewer = "";
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary25.MeasurementTime = instant28;
        getObservationsV2_17.StartResultTime = instant28;
        java.lang.String[] strArray40 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_17.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList41);
        deleteFieldVisits13.PlanningStatuses = strList41;
        roleFlattened9.RoleApprovalTransitions = strList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean48 = roleFlattened47.CanRemoveFieldVisits;
        roleFlattened47.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str52 = putLocationType51.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_53.setDataClassifications((java.util.List<java.lang.String>) strList57);
        getObservationsV2_59.DepthUnitCustomId = "hi!";
        java.lang.String str62 = getObservationsV2_59.CustomId;
        java.util.List<java.lang.String> strList63 = getObservationsV2_59.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray74 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = putLocationTags70.setTagUniqueIds(strList75);
        getObservationsV2_64.QualityControlTypes = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_59.setMedia((java.util.List<java.lang.String>) strList75);
        putLocationType51.ExtendedAttributeDefinitionIds = strList75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase81 = roleFlattened47.setRoleApprovalTransitions(strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits82 = deleteFieldVisits46.setIds((java.util.List<java.lang.String>) strList75);
        roleFlattened9.RoleApprovalTransitions = strList75;
        putLocationType8.ExtendedAttributeDefinitionIds = strList75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray89 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags92 = putLocationTags85.setTagUniqueIds(strList90);
        java.util.ArrayList<java.lang.String> strList93 = putLocationTags92.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationTypeBase locationTypeBase94 = putLocationType8.setExtendedAttributeDefinitionIds(strList93);
        java.util.ArrayList<java.lang.String> strList95 = locationTypeBase94.ExtendedAttributeDefinitionIds;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(putLocationType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(putLocationType8);
        org.junit.Assert.assertNotNull(roleFlattenedBase11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(putLocationTags77);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNotNull(roleFlattenedBase81);
        org.junit.Assert.assertNotNull(deleteFieldVisits82);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(putLocationTags92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(locationTypeBase94);
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test56701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56701");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        gapToleranceOperation0.User = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation4 = gapToleranceOperation0.setComments("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = gapToleranceOperation4.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str7 = gapToleranceOperation6.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion;
        gapToleranceOperation6.OperationType = metadataChangeOperationType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation10 = gapToleranceOperation4.setOperationType(metadataChangeOperationType8);
        org.junit.Assert.assertNotNull(gapToleranceOperation4);
        org.junit.Assert.assertNull(metadataChangeOperationType5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion + "'", metadataChangeOperationType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion));
        org.junit.Assert.assertNotNull(gapToleranceOperation10);
    }

    @Test
    public void test56702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56702");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant1 = methodOperation0.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation9 = methodOperation0.setDateAppliedUtc(instant6);
        methodOperation0.Comments = "/AQUARIUS";
        java.lang.String str12 = methodOperation0.getComments();
        methodOperation0.User = "****b4959745-e712-43bc-98bb-4017f673cd3d****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(methodOperation9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/AQUARIUS" + "'", str12, "/AQUARIUS");
    }

    @Test
    public void test56703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56703");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = resultDetectionCondition1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition4 = resultDetectionCondition1.setId("/AQUARIUS");
        java.lang.String str5 = resultDetectionCondition1.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition7 = resultDetectionCondition1.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult8 = numericResult0.setDetectionCondition(resultDetectionCondition7);
        numericResult0.RoundingSpecification = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult12 = numericResult0.setRoundedValue("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity13.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity17 = postActivity13.setPlannedActivity(plannedActivity16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity18.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = postActivity18.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = postActivity22.setAuditAttributes(auditAttributes23);
        java.lang.Object obj25 = postActivity22.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = postActivity22.getDepth();
        postActivity22.Id = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        putObservedProperty29.Name = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType32 = putObservedProperty29.getResultType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation33.setPlannedFieldResult(plannedFieldResult34);
        observation35.CustomId = "";
        observation35.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str42 = metricConfiguration41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty43.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration46 = metricConfiguration41.setObservedProperty(observedProperty43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType47 = observedProperty43.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup49 = postObservedProperty48.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = null;
        quantity50.Unit = unit51;
        postObservedProperty48.LowerLimit = quantity50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity54 = postObservedProperty48.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = quantity54.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty56 = observedProperty43.setUpperLimit(quantity54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation57 = samplingLocation40.setElevation(quantity54);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList58 = samplingLocation57.getAttachments();
        java.lang.String str59 = samplingLocation57.getHorizontalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation60 = observation35.setSamplingLocation(samplingLocation57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity61 = samplingLocation57.Elevation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty62 = putObservedProperty29.setLowerLimit(quantity61);
        postActivity22.Depth = quantity61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit64 = null;
        quantity61.Unit = unit64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity66 = postActivity13.setDepth(quantity61);
        numericResult0.Quantity = quantity61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = numericResult0.getAuditAttributes();
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(resultDetectionCondition4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(resultDetectionCondition7);
        org.junit.Assert.assertNotNull(numericResult8);
        org.junit.Assert.assertNotNull(numericResult12);
        org.junit.Assert.assertNotNull(postActivity17);
        org.junit.Assert.assertNotNull(postActivity22);
        org.junit.Assert.assertNotNull(postActivity24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertNull(quantity26);
        org.junit.Assert.assertNull(resultType32);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(metricConfiguration46);
        org.junit.Assert.assertNull(resultType47);
        org.junit.Assert.assertNull(unitGroup49);
        org.junit.Assert.assertNotNull(quantity54);
        org.junit.Assert.assertNull(unit55);
        org.junit.Assert.assertNotNull(observedProperty56);
        org.junit.Assert.assertNotNull(samplingLocation57);
        org.junit.Assert.assertNull(domainObjectAttachmentList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(observation60);
        org.junit.Assert.assertNotNull(quantity61);
        org.junit.Assert.assertNotNull(putObservedProperty62);
        org.junit.Assert.assertNotNull(postActivity66);
        org.junit.Assert.assertNull(auditAttributes68);
    }

    @Test
    public void test56704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56704");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck3 = calibrationCheck1.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck5 = calibrationCheck1.setUnit("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails();
        calibrationCheck5.StandardDetails = standardDetails6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = dischargeSummary8.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = dischargeSummary8.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = dischargeSummary8.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = doubleWithDisplay12.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = dischargeSummary8.setDurationInHours(doubleWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck16 = calibrationCheck5.setValue(doubleWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint17 = timeSeriesPoint0.setValue(doubleWithDisplay12);
        org.junit.Assert.assertNotNull(calibrationCheck3);
        org.junit.Assert.assertNotNull(calibrationCheck5);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNull(doubleWithDisplay11);
        org.junit.Assert.assertNotNull(doubleWithDisplay14);
        org.junit.Assert.assertNotNull(dischargeSummary15);
        org.junit.Assert.assertNotNull(calibrationCheck16);
        org.junit.Assert.assertNotNull(timeSeriesPoint17);
    }

    @Test
    public void test56705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56705");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = specimenTemplate4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate6.Preservative = preservativeType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = specimenTemplate6.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition15 = postDetectioncondition3.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard16 = putStandard0.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard18 = putStandard16.setName("-PT87591240H");
        java.lang.String str19 = putStandard18.getName();
        putStandard18.Id = "/AQUARIUS";
        java.lang.String str22 = putStandard18.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard24 = putStandard18.setActive((java.lang.Boolean) false);
        java.lang.String str25 = putStandard24.IssuingOrganization;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = putStandard24.getAuditAttributes();
        org.junit.Assert.assertNotNull(specimenTemplate6);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(specimenTemplate14);
        org.junit.Assert.assertNotNull(postDetectioncondition15);
        org.junit.Assert.assertNotNull(putStandard16);
        org.junit.Assert.assertNotNull(putStandard18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-PT87591240H" + "'", str19, "-PT87591240H");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(putStandard24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(auditAttributes26);
    }

    @Test
    public void test56706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56706");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon4 = importItemTaxon2.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj5 = importItemTaxon2.Errors;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj7 = putLocationType6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon8 = importItemTaxon2.setErrors((java.lang.Object) putLocationType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.ActivityIds = strList20;
        importItemTaxon8.WarningMessages = strList20;
        getObservationExportIIV2_0.ProjectIds = strList20;
        java.time.Instant instant26 = getObservationExportIIV2_0.getEndObservedTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType();
        java.util.List<java.lang.String> strList28 = locationType27.getExtendedAttributeDefinitionIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList30 = null;
        putUser29.AccessGroups = strList30;
        java.lang.String str32 = putUser29.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType33 = putUser29.getUserType();
        java.lang.String str34 = putUser29.getId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        getFieldVisitReadingsByLocationServiceRequest35.ApplyRounding = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        getObservationsV2_38.SpecimenIds = strList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray48 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = putLocationTags44.setTagUniqueIds(strList49);
        getObservationsV2_38.QualityControlTypes = strList49;
        java.util.List<java.lang.String> strList53 = getObservationsV2_38.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList54 = getObservationsV2_38.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType55 = getObservationsV2_38.FieldResultType;
        java.time.Instant instant56 = getObservationsV2_38.getEndObservedTime();
        java.lang.String str57 = getObservationsV2_38.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray62 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags58.setTagUniqueIds(strList63);
        java.util.ArrayList<java.lang.String> strList66 = putLocationTags65.TagUniqueIds;
        getObservationsV2_38.ProjectIds = strList66;
        getFieldVisitReadingsByLocationServiceRequest35.Parameters = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser69 = putUser29.setAccessGroups((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType70 = locationType27.setExtendedAttributeDefinitionIds((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_71 = getObservationExportIIV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList66);
        getObservationExportIIV2_0.DepthUnitId = "multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(importItemTaxon8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(userType33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putLocationTags51);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(fieldResultType55);
        org.junit.Assert.assertNull(instant56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(putUser69);
        org.junit.Assert.assertNotNull(locationType70);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_71);
    }

    @Test
    public void test56707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56707");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double1 = getExportObservations0.NumericResultValue;
        java.util.List<java.lang.String> strList2 = getExportObservations0.getActivityTypes();
        java.util.List<java.lang.String> strList3 = getExportObservations0.ProjectIds;
        java.util.List<java.lang.String> strList4 = getExportObservations0.AnalysisMethodIds;
        getExportObservations0.MinNumericResultValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType7 = getExportObservations0.getFieldResultType();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(fieldResultType7);
    }

    @Test
    public void test56708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56708");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList3, samplingLocationGroupArray2);
        postAccessGroup1.SamplingLocationGroups = samplingLocationGroupList3;
        putAccessGroup0.SamplingLocationGroups = samplingLocationGroupList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan8.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan8.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = samplingPlan8.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan15 = samplingPlan8.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag16 = putTag7.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup17 = putAccessGroup0.setAuditAttributes(auditAttributes14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList18 = putAccessGroup0.SamplingLocationGroups;
        java.lang.String str19 = putAccessGroup0.Description;
        org.junit.Assert.assertNotNull(samplingLocationGroupArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNotNull(samplingPlan15);
        org.junit.Assert.assertNotNull(putTag16);
        org.junit.Assert.assertNotNull(putAccessGroup17);
        org.junit.Assert.assertNotNull(samplingLocationGroupList18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test56709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56709");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment0.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment4 = postReportAttachment0.setLocationUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant6 = ratingCurveListServiceRequest5.QueryTo;
        java.lang.String str7 = ratingCurveListServiceRequest5.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest9 = ratingCurveListServiceRequest5.setRatingModelIdentifier("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str11 = timeSeriesApprovalsTransactionListServiceRequest10.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType13 = null;
        controlConditionActivity12.ControlCleaned = controlCleanedType13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        controlConditionActivity12.DateCleaned = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest19 = timeSeriesApprovalsTransactionListServiceRequest10.setQueryTo(instant16);
        java.time.Instant instant20 = timeSeriesApprovalsTransactionListServiceRequest10.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj23 = timeAlignedDataServiceRequest22.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = timeAlignedDataServiceRequest22.setQueryFrom(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription28 = timeSeriesDescription21.setRawStartTime(instant25);
        timeSeriesApprovalsTransactionListServiceRequest10.QueryTo = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest30 = ratingCurveListServiceRequest9.setQueryTo(instant25);
        postReportAttachment0.CreatedTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval33 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes34 = deleteTimeSeriesNotes32.setTimeRange(interval33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval35 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes36 = deleteTimeSeriesNotes32.setTimeRange(interval35);
        java.lang.String str37 = deleteTimeSeriesNotes32.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries postReflectedTimeSeries38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList39 = postReflectedTimeSeries38.Points;
        java.lang.String str40 = postReflectedTimeSeries38.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment41.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment45 = postReportAttachment41.setLocationUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval46 = postReportAttachment45.SourceTimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend49 = postTimeSeriesOverwriteAppend47.setTimeRange(interval48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend51 = postTimeSeriesOverwriteAppend47.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval52 = postTimeSeriesOverwriteAppend51.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend54 = postTimeSeriesOverwriteAppend51.setTimeRange(interval53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment55 = postReportAttachment45.setSourceTimeRange(interval53);
        postReflectedTimeSeries38.TimeRange = interval53;
        deleteTimeSeriesNotes32.TimeRange = interval53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment58 = postReportAttachment0.setSourceTimeRange(interval53);
        org.junit.Assert.assertNotNull(postReportAttachment4);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest27);
        org.junit.Assert.assertNotNull(timeSeriesDescription28);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest30);
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotes34);
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotes36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(timeSeriesPointList39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(postReportAttachment45);
        org.junit.Assert.assertNull(interval46);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend49);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend51);
        org.junit.Assert.assertNull(interval52);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend54);
        org.junit.Assert.assertNotNull(postReportAttachment55);
        org.junit.Assert.assertNotNull(postReportAttachment58);
    }

    @Test
    public void test56710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56710");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.ActivityIds = strList14;
        getExportSamplingLocations2.SamplingLocationGroupIds = strList14;
        java.util.List<java.lang.String> strList19 = getExportSamplingLocations2.getSamplingLocationGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = getChartDataV2_0.setCollectionMethodIds(strList19);
        java.lang.String str21 = getChartDataV2_0.DetectionCondition;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(getChartDataV2_20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test56711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56711");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult5 = postObservationV2_2.getTaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_7 = postObservationV2_2.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_9 = postObservationV2_7.setMediumSubdivision("MinInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList10 = postObservationV2_7.ExtendedAttributes;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(taxonomicResult5);
        org.junit.Assert.assertNotNull(postObservationV2_7);
        org.junit.Assert.assertNotNull(postObservationV2_9);
        org.junit.Assert.assertNull(extendedAttributeList10);
    }

    @Test
    public void test56712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56712");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str1 = putUnitGroup0.getCustomId();
        java.lang.Boolean boolean2 = putUnitGroup0.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType3 = null;
        putUnitGroup0.SystemCode = unitGroupSystemCodeType3;
        java.lang.String str5 = putUnitGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putUnitGroup0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = putUnitGroup0.AuditAttributes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(auditAttributes7);
    }

    @Test
    public void test56713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56713");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str2 = putActivityTemplate1.getId();
        java.lang.String str3 = putActivityTemplate1.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = auditAttributes4.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate7 = putActivityTemplate1.setAuditAttributes(auditAttributes6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate7.Medium = mediumType8;
        activityTemplate0.Medium = mediumType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate12.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList17 = specimenTemplate16.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = specimenTemplate18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList23 = specimenTemplate22.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate12, specimenTemplate15, specimenTemplate16, specimenTemplate20, specimenTemplate21, specimenTemplate22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25, specimenTemplateArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = postFieldVisitActivityWithTemplate11.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25);
        activityTemplate0.SpecimenTemplates = specimenTemplateList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.NONE;
        activityTemplate0.Type = activityTemplateType29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails31.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime34 = activityWithDetails31.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation35 = activityWithDetails31.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str38 = metricConfiguration37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty39.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration42 = metricConfiguration37.setObservedProperty(observedProperty39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType43 = observedProperty39.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup45 = postObservedProperty44.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit47 = null;
        quantity46.Unit = unit47;
        postObservedProperty44.LowerLimit = quantity46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = postObservedProperty44.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = quantity50.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty52 = observedProperty39.setUpperLimit(quantity50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = samplingLocation36.setElevation(quantity50);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList54 = samplingLocation53.getAttachments();
        java.lang.String str55 = samplingLocation53.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList56 = samplingLocation53.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit58 = null;
        quantity57.Unit = unit58;
        samplingLocation53.Elevation = quantity57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails61 = activityWithDetails31.setSamplingLocation(samplingLocation53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails63 = activityWithDetails61.setRefreshed((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod64 = activityWithDetails63.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime66 = activity65.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity68 = activity65.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str70 = putActivityTemplate69.getId();
        java.lang.String str71 = putActivityTemplate69.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = auditAttributes72.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate75 = putActivityTemplate69.setAuditAttributes(auditAttributes74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType76 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate75.Medium = mediumType76;
        java.lang.String str78 = putActivityTemplate75.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        collectionMethod79.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate82 = putActivityTemplate75.setCollectionMethod(collectionMethod79);
        java.lang.String str83 = collectionMethod79.IdentifierOrganization;
        activity68.CollectionMethod = collectionMethod79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails85 = activityWithDetails63.setCollectionMethod(collectionMethod79);
        activityTemplate0.CollectionMethod = collectionMethod79;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(auditAttributes6);
        org.junit.Assert.assertNotNull(putActivityTemplate7);
        org.junit.Assert.assertTrue("'" + mediumType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(labInstructionTemplateList17);
        org.junit.Assert.assertNotNull(specimenTemplate20);
        org.junit.Assert.assertNull(labInstructionTemplateList23);
        org.junit.Assert.assertNotNull(specimenTemplateArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate27);
        org.junit.Assert.assertTrue("'" + activityTemplateType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.NONE + "'", activityTemplateType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.NONE));
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNull(samplingLocation35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(metricConfiguration42);
        org.junit.Assert.assertNull(resultType43);
        org.junit.Assert.assertNull(unitGroup45);
        org.junit.Assert.assertNotNull(quantity50);
        org.junit.Assert.assertNull(unit51);
        org.junit.Assert.assertNotNull(observedProperty52);
        org.junit.Assert.assertNotNull(samplingLocation53);
        org.junit.Assert.assertNull(domainObjectAttachmentList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(importHistoryEventSimpleList56);
        org.junit.Assert.assertNotNull(activityWithDetails61);
        org.junit.Assert.assertNotNull(activityWithDetails63);
        org.junit.Assert.assertNull(collectionMethod64);
        org.junit.Assert.assertNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(activity68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(auditAttributes74);
        org.junit.Assert.assertNotNull(putActivityTemplate75);
        org.junit.Assert.assertTrue("'" + mediumType76 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType76.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(putActivityTemplate82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(activityWithDetails85);
    }

    @Test
    public void test56714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56714");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray6 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = putLocationTags2.setTagUniqueIds(strList7);
        java.util.ArrayList<java.lang.String> strList10 = putLocationTags9.TagUniqueIds;
        getFieldVisits0.ScheduleIds = strList10;
        java.lang.Integer int12 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList13 = getFieldVisits0.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        getObservationsV2_14.SpecimenIds = strList17;
        getFieldVisits0.Search = strList17;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits35 = getFieldVisits0.setSamplingPlanIds((java.util.List<java.lang.String>) strList33);
        java.lang.Object obj36 = getFieldVisits0.getResponseType();
        java.lang.Integer int37 = getFieldVisits0.getLimit();
        java.time.Instant instant38 = getFieldVisits0.EndStartTime;
        java.lang.String str39 = getFieldVisits0.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList42 = getObservationsV2_41.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        getObservationsV2_41.ResultGrades = strList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems59 = getExtendedAttributeDropdownlistitems40.setSearch((java.util.List<java.lang.String>) strList54);
        java.lang.String str60 = getExtendedAttributeDropdownlistitems40.getId();
        java.util.List<java.lang.String> strList61 = getExtendedAttributeDropdownlistitems40.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits62 = getFieldVisits0.setSamplingLocationIds(strList61);
        getFieldVisits62.Sort = "zZZZZ";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(putLocationTags9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getFieldVisits35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultFieldVisitSimple");
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(getFieldVisits62);
    }

    @Test
    public void test56715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56715");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "MinDuration";
        java.lang.String str4 = approval0.Comment;
        java.time.Instant instant5 = approval0.getDateAppliedUtc();
        java.lang.String str6 = approval0.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval8 = approval0.setUser("-PT87591240H");
        approval8.User = "multipart/form-data; boundary=****a02903b2-8109-4914-8058-61246cf0a809****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(approval8);
    }

    @Test
    public void test56716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56716");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setDepthValue((java.lang.Double) 100.0d);
        java.lang.Double double35 = putBulkEditResultGradesV2_32.MinNumericResultValue;
        java.util.List<java.lang.String> strList36 = putBulkEditResultGradesV2_32.getSamplingContextTagIds();
        java.lang.String str37 = putBulkEditResultGradesV2_32.getFieldVisitId();
        java.time.Instant instant38 = putBulkEditResultGradesV2_32.getStartResultTime();
        putBulkEditResultGradesV2_32.ImportHistoryEventId = "****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNull(double35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(instant38);
    }

    @Test
    public void test56717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56717");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = getSpecimens0.setSort("MinDuration");
        java.lang.Integer int4 = getSpecimens3.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        java.util.List<java.lang.String> strList21 = getObservationsV2_6.getLabReportIds();
        importItem5.Errors = getObservationsV2_6;
        java.lang.Object obj23 = importItem5.getExistingItem();
        importItem5.Input = "hi!";
        java.lang.Object obj26 = importItem5.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem28 = importItem5.setStatus(importItemStatusType27);
        importItem28.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate31.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = specimenTemplate31.setId("hi!");
        java.lang.Boolean boolean36 = specimenTemplate35.getFiltered();
        importItem28.Item = specimenTemplate35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray43 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_40.setDataClassifications((java.util.List<java.lang.String>) strList44);
        postTag39.PickListValues = strList44;
        java.util.ArrayList<java.lang.String> strList48 = postTag39.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor49 = processor38.setInputTimeSeriesUniqueIds(strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem50 = importItem28.setWarningMessages((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_51.setDataClassifications((java.util.List<java.lang.String>) strList55);
        getObservationsV2_57.DepthUnitCustomId = "hi!";
        java.lang.String str60 = getObservationsV2_57.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        getObservationsV2_61.SpecimenIds = strList64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray71 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = putLocationTags67.setTagUniqueIds(strList72);
        getObservationsV2_61.QualityControlTypes = strList72;
        java.util.List<java.lang.String> strList76 = getObservationsV2_61.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList77 = getObservationsV2_61.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType78 = getObservationsV2_61.FieldResultType;
        java.time.Instant instant79 = getObservationsV2_61.getEndObservedTime();
        java.lang.String str80 = getObservationsV2_61.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray85 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags88 = putLocationTags81.setTagUniqueIds(strList86);
        java.util.ArrayList<java.lang.String> strList89 = putLocationTags88.TagUniqueIds;
        getObservationsV2_61.ProjectIds = strList89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_57.setQualityControlTypes((java.util.List<java.lang.String>) strList89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem92 = importItem50.setFields((java.util.List<java.lang.String>) strList89);
        getSpecimens3.SamplingLocationIds = strList89;
        java.util.List<java.lang.String> strList94 = getSpecimens3.ActivityTypes;
        java.lang.Object obj95 = getSpecimens3.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getSpecimens3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + importItemStatusType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem28);
        org.junit.Assert.assertNotNull(specimenTemplate35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(processor49);
        org.junit.Assert.assertNotNull(importItem50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putLocationTags74);
        org.junit.Assert.assertNull(strList76);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNull(fieldResultType78);
        org.junit.Assert.assertNull(instant79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(putLocationTags88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(importItem92);
        org.junit.Assert.assertNull(strList94);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpecimen");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpecimen");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpecimen");
    }

    @Test
    public void test56718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56718");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate3 = postActivityTemplate0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate5 = postActivityTemplate3.setCustomId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate7 = postActivityTemplate3.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postActivityTemplate3.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate10 = postActivityTemplate3.setComment("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate12 = postActivityTemplate10.setId("https");
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(postActivityTemplate3);
        org.junit.Assert.assertNotNull(postActivityTemplate5);
        org.junit.Assert.assertNotNull(postActivityTemplate7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(postActivityTemplate10);
        org.junit.Assert.assertNotNull(postActivityTemplate12);
    }

    @Test
    public void test56719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56719");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putFieldTrip0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setParticipants("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip5 = putFieldTrip0.setNotes("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip7 = putFieldTrip0.setEndTime(offsetDateTime6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip9 = putFieldTrip0.setParticipants("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation10.setPlannedFieldResult(plannedFieldResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction13 = null;
        observation12.LabInstruction = labInstruction13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation12.setStatistics(observationStatistics15);
        java.time.OffsetDateTime offsetDateTime17 = observation16.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList18 = observation16.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation16.setObservedProperty(observedProperty19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation16.setResultGrade(resultGrade21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation22.setSpecimen(specimen23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon26 = taxonomicResult25.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = taxonomicResult25.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan29.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan29.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup34 = samplingPlan29.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan36 = samplingPlan29.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag37 = putTag28.setAuditAttributes(auditAttributes35);
        taxonomicResult25.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon39 = taxonomicResult25.Taxon;
        observation24.TaxonomicResult = taxonomicResult25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        putNullMeasureQualifier41.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier45 = putNullMeasureQualifier41.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = postDetectioncondition46.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition49 = postDetectioncondition46.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition46.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition53 = postDetectioncondition46.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition55 = postDetectioncondition53.setId("MinInstant");
        postDetectioncondition55.SystemCode = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str59 = project58.getName();
        java.time.OffsetDateTime offsetDateTime60 = null;
        project58.EndTime = offsetDateTime60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project63 = project58.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str65 = labInstructionTemplate64.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime67 = putSchedule66.StartDate;
        java.time.OffsetDateTime offsetDateTime68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule69 = putSchedule66.setEndDate(offsetDateTime68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = putSchedule69.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime71 = null;
        putSchedule69.LastGenerationDate = offsetDateTime71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType73 = putSchedule69.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = plannedFieldResult74.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails78 = labResultDetails76.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails80 = labResultDetails78.setAuditAttributes(auditAttributes79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult81 = plannedFieldResult74.setAuditAttributes(auditAttributes79);
        putSchedule69.AuditAttributes = auditAttributes79;
        labInstructionTemplate64.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project84 = project58.setAuditAttributes(auditAttributes79);
        postDetectioncondition55.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier86 = putNullMeasureQualifier45.setAuditAttributes(auditAttributes79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult87 = taxonomicResult25.setAuditAttributes(auditAttributes79);
        putFieldTrip0.AuditAttributes = auditAttributes79;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNotNull(putFieldTrip5);
        org.junit.Assert.assertNotNull(putFieldTrip7);
        org.junit.Assert.assertNotNull(putFieldTrip9);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNull(importHistoryEventSimpleList18);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNull(taxon26);
        org.junit.Assert.assertNull(auditAttributes27);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup34);
        org.junit.Assert.assertNotNull(samplingPlan36);
        org.junit.Assert.assertNotNull(putTag37);
        org.junit.Assert.assertNull(taxon39);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier45);
        org.junit.Assert.assertNull(auditAttributes47);
        org.junit.Assert.assertNotNull(postDetectioncondition49);
        org.junit.Assert.assertNotNull(postDetectioncondition53);
        org.junit.Assert.assertNotNull(postDetectioncondition55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(project63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(putSchedule69);
        org.junit.Assert.assertNull(auditAttributes70);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType73);
        org.junit.Assert.assertNull(auditAttributes75);
        org.junit.Assert.assertNotNull(labResultDetails78);
        org.junit.Assert.assertNotNull(labResultDetails80);
        org.junit.Assert.assertNotNull(plannedFieldResult81);
        org.junit.Assert.assertNotNull(project84);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier86);
        org.junit.Assert.assertNotNull(taxonomicResult87);
    }

    @Test
    public void test56720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56720");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        java.lang.String str4 = location0.getLocationPath();
        java.lang.String str5 = location0.ElevationUnits;
        java.time.Instant instant6 = location0.LastModified;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location8 = location0.setLongitude((java.lang.Double) (-1.0d));
        location8.Longitude = (-1.0d);
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(location8);
    }

    @Test
    public void test56721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56721");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer fieldNamer3 = new com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient5 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "0001-01-01T00:00:00.000Z", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer3, false);
        java.net.HttpURLConnection httpURLConnection7 = sdkServiceClient5.delete("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        boolean boolean8 = sdkServiceClient5.getAlwaysSendBasicAuthHeaders();
        net.servicestack.client.ConnectionFilter connectionFilter9 = null;
        sdkServiceClient5.ResponseFilter = connectionFilter9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedPropertyCategoricalValues putObservedPropertyCategoricalValues11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedPropertyCategoricalValues();
        java.lang.String str12 = putObservedPropertyCategoricalValues11.Id;
        java.lang.String str13 = putObservedPropertyCategoricalValues11.Id;
        java.lang.Object obj14 = putObservedPropertyCategoricalValues11.getResponseType();
        java.lang.Object obj15 = putObservedPropertyCategoricalValues11.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedPropertyCategoricalValues putObservedPropertyCategoricalValues17 = putObservedPropertyCategoricalValues11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedPropertyCategoricalValues putObservedPropertyCategoricalValues19 = putObservedPropertyCategoricalValues17.setId("-PT87591240H");
        net.servicestack.client.Route route20 = sdkServiceClient5.getRoute((java.lang.Object) putObservedPropertyCategoricalValues19);
        net.servicestack.client.ExceptionFilter exceptionFilter21 = sdkServiceClient5.ExceptionFilter;
        sdkServiceClient5.clearCookies();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory26 = attachment25.AttachmentCategory;
        java.lang.Double double27 = attachment25.GpsLongitude;
        java.lang.String str28 = attachment25.UploadedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment30 = attachment25.setUniqueId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType attachmentType31 = attachment30.AttachmentType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory32 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.CrossSection;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment33 = attachment30.setAttachmentCategory(attachmentCategory32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType attachmentType34 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Zip;
        attachment33.AttachmentType = attachmentType34;
        // The following exception was thrown during execution in test generation
        try {
            com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnitGroup putUnitGroup36 = sdkServiceClient5.send("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****", "http://MaxDurationhttp/json/reply/Double", (java.lang.Object) attachmentType34);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.MalformedURLException: no protocol: '.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sdkServiceClient5);
        org.junit.Assert.assertNotNull(httpURLConnection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CategoricalValue>");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CategoricalValue>");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CategoricalValue>");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CategoricalValue>");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CategoricalValue>");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CategoricalValue>");
        org.junit.Assert.assertNotNull(putObservedPropertyCategoricalValues17);
        org.junit.Assert.assertNotNull(putObservedPropertyCategoricalValues19);
        org.junit.Assert.assertNotNull(route20);
        org.junit.Assert.assertNull(exceptionFilter21);
        org.junit.Assert.assertNull(attachmentCategory26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(attachment30);
        org.junit.Assert.assertNull(attachmentType31);
        org.junit.Assert.assertTrue("'" + attachmentCategory32 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.CrossSection + "'", attachmentCategory32.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.CrossSection));
        org.junit.Assert.assertNotNull(attachment33);
        org.junit.Assert.assertTrue("'" + attachmentType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Zip + "'", attachmentType34.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Zip));
    }

    @Test
    public void test56722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56722");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum();
        java.lang.String str1 = putBaseStandardReferenceDatum0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum3 = putBaseStandardReferenceDatum0.setComments("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum5 = putBaseStandardReferenceDatum0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putBaseStandardReferenceDatum0.Method = "MinDuration";
        java.lang.String str8 = putBaseStandardReferenceDatum0.Comments;
        java.lang.String str9 = putBaseStandardReferenceDatum0.Comments;
        java.lang.String str10 = putBaseStandardReferenceDatum0.StandardIdentifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatum3);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatum5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MaxInstant" + "'", str8, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MaxInstant" + "'", str9, "MaxInstant");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test56723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56723");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str2 = postBasicTimeSeries1.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase5 = putParameter3.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str6 = putParameter3.getRoundingSpec();
        java.lang.String str7 = putParameter3.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList9 = postCalculatedDerivedTimeSeries8.TimeSeriesUniqueIds;
        java.lang.String str10 = postCalculatedDerivedTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries12 = postCalculatedDerivedTimeSeries8.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str13 = postCalculatedDerivedTimeSeries12.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart16 = inputPart14.setHeaders((java.lang.Object) interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries12.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase18 = putParameter3.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase20 = parameterBase18.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase18.InterpolationType = interpolationType21;
        postBasicTimeSeries1.InterpolationType = interpolationType21;
        parameter0.InterpolationType = interpolationType21;
        java.lang.String str25 = parameter0.RoundingSpec;
        java.lang.String str26 = parameter0.UnitGroupIdentifier;
        parameter0.RoundingSpec = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter30 = parameter0.setMinValue((java.lang.Double) 0.0d);
        parameter0.UnitIdentifier = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        parameter0.MaxValue = 0.0d;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(parameterBase5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str13, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart16);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(parameterBase18);
        org.junit.Assert.assertNotNull(parameterBase20);
        org.junit.Assert.assertTrue("'" + interpolationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(parameter30);
    }

    @Test
    public void test56724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56724");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = getExportObservations0.setFieldVisitId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSpecimenIds();
        getExportObservations0.FieldVisitId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations0.setDepthUnitId("-PT87591240H");
        java.util.List<java.lang.String> strList8 = getExportObservations0.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList10 = putOpenIdConnectRelyingPartyConfiguration9.getScopes();
        java.lang.String str11 = putOpenIdConnectRelyingPartyConfiguration9.getOptionalIssuerDiscoveryUri();
        putOpenIdConnectRelyingPartyConfiguration9.IdentifierClaim = "9999-12-31T23:59:59.999Z";
        java.lang.String str14 = putOpenIdConnectRelyingPartyConfiguration9.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str16 = getChartDataV2_15.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_18 = getChartDataV2_15.setFilterId("");
        java.util.List<java.lang.String> strList19 = getChartDataV2_15.ResultGrades;
        java.util.List<java.lang.String> strList20 = getChartDataV2_15.CollectionMethodIds;
        getChartDataV2_15.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType23 = getChartDataV2_15.getFieldResultType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay26 = reading25.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading28 = reading25.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading30 = reading28.setModel("MaxInstant");
        java.lang.Integer int31 = reading30.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField35 = extendedAttributeField33.setDisplayName("");
        java.lang.Boolean boolean36 = extendedAttributeField35.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj38 = timeAlignedDataServiceRequest37.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_39.setDataClassifications((java.util.List<java.lang.String>) strList43);
        getObservationsV2_45.DepthUnitCustomId = "hi!";
        java.lang.String str48 = getObservationsV2_45.CustomId;
        java.util.List<java.lang.String> strList49 = getObservationsV2_45.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray60 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = putLocationTags56.setTagUniqueIds(strList61);
        getObservationsV2_50.QualityControlTypes = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = getObservationsV2_45.setMedia((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str67 = getObservationsV2_66.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        getObservationsV2_68.SpecimenIds = strList71;
        getObservationsV2_66.ProjectIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_45.setObservedPropertyIds((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest76 = timeAlignedDataServiceRequest37.setTimeSeriesOutputUnitIds(strList71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField77 = extendedAttributeField35.setValueOptions((java.util.List<java.lang.String>) strList71);
        putBulkEditResultGradesV2_32.AnalysisMethodSimpleIds = strList71;
        reading30.ReadingQualifiers = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty80 = importItemObservedProperty24.setFields((java.util.List<java.lang.String>) strList71);
        getChartDataV2_15.LabResultLaboratoryIds = strList71;
        putOpenIdConnectRelyingPartyConfiguration9.Scopes = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations83 = getExportObservations0.setSearch((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations85 = getExportObservations0.setCursor("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Double double86 = getExportObservations85.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations88 = getExportObservations85.setDepthUnitId("ZZZZZ");
        java.lang.String str89 = getExportObservations85.DepthUnitCustomId;
        getExportObservations85.NumericResultValue = 10.0d;
        org.junit.Assert.assertNotNull(getExportObservations2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(getExportObservations7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(getChartDataV2_18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(fieldResultType23);
        org.junit.Assert.assertNull(doubleWithDisplay26);
        org.junit.Assert.assertNotNull(reading28);
        org.junit.Assert.assertNotNull(reading30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(extendedAttributeField35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(putLocationTags63);
        org.junit.Assert.assertNotNull(getObservationsV2_65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest76);
        org.junit.Assert.assertNotNull(extendedAttributeField77);
        org.junit.Assert.assertNotNull(importItemObservedProperty80);
        org.junit.Assert.assertNotNull(getExportObservations83);
        org.junit.Assert.assertNotNull(getExportObservations85);
        org.junit.Assert.assertNull(double86);
        org.junit.Assert.assertNotNull(getExportObservations88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test56725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56725");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        java.lang.String str5 = postObservationV2_2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation6 = postObservationV2_2.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setComment("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(samplingLocation6);
        org.junit.Assert.assertNotNull(postObservationV2_8);
    }

    @Test
    public void test56726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56726");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        role0.CanAddData = true;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList5 = role0.RoleApprovalTransitions;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNull(roleApprovalTransitionList5);
    }

    @Test
    public void test56727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56727");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = fieldTrip0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str4 = postFieldVisitActivityWithTemplate3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate6 = postFieldVisitActivityWithTemplate3.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = plannedFieldResult7.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult14 = plannedFieldResult7.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType16 = analyticalGroup15.getType();
        analyticalGroup15.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = null;
        analyticalGroupItem25.AnalysisMethod = analysisMethod28;
        java.lang.String str30 = analyticalGroupItem25.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = null;
        analyticalGroupItem36.AnalysisMethod = analysisMethod39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem20, analyticalGroupItem22, analyticalGroupItem25, analyticalGroupItem31, analyticalGroupItem34, analyticalGroupItem36 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList42, analyticalGroupItemArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup44 = analyticalGroup19.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList42);
        analyticalGroup15.AnalyticalGroupItems = analyticalGroupItemList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup15.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult48 = plannedFieldResult14.setAuditAttributes(auditAttributes46);
        postFieldVisitActivityWithTemplate6.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport50 = postLabReport2.setAuditAttributes(auditAttributes46);
        java.time.OffsetDateTime offsetDateTime51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport52 = postLabReport2.setDateReceived(offsetDateTime51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = locationGroupType53.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType56 = locationGroupType53.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = locationGroupType53.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str59 = putActivityTemplate58.getId();
        java.lang.String str60 = putActivityTemplate58.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = auditAttributes61.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate64 = putActivityTemplate58.setAuditAttributes(auditAttributes63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType65 = locationGroupType53.setAuditAttributes(auditAttributes63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport66 = postLabReport52.setAuditAttributes(auditAttributes63);
        java.time.OffsetDateTime offsetDateTime67 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport68 = postLabReport66.setDateReceived(offsetDateTime67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = postLabReport68.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = postLabReport68.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip71 = fieldTrip0.setAuditAttributes(auditAttributes70);
        java.time.OffsetDateTime offsetDateTime72 = null;
        fieldTrip71.StartTime = offsetDateTime72;
        fieldTrip71.Notes = "zZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip77 = fieldTrip71.setId("****c052e2e0-9b0e-4df2-9a74-52850b5df85a****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate6);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(plannedFieldResult14);
        org.junit.Assert.assertNull(analyticalGroupType16);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod23);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(analyticalGroup44);
        org.junit.Assert.assertNotNull(plannedFieldResult48);
        org.junit.Assert.assertNotNull(postLabReport50);
        org.junit.Assert.assertNotNull(postLabReport52);
        org.junit.Assert.assertNull(auditAttributes54);
        org.junit.Assert.assertNotNull(locationGroupType56);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(auditAttributes63);
        org.junit.Assert.assertNotNull(putActivityTemplate64);
        org.junit.Assert.assertNotNull(locationGroupType65);
        org.junit.Assert.assertNotNull(postLabReport66);
        org.junit.Assert.assertNotNull(postLabReport68);
        org.junit.Assert.assertNotNull(auditAttributes69);
        org.junit.Assert.assertNotNull(auditAttributes70);
        org.junit.Assert.assertNotNull(fieldTrip71);
        org.junit.Assert.assertNotNull(fieldTrip77);
    }

    @Test
    public void test56728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56728");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList4 = activityWithDetails0.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity6 = null;
        putActivity5.Depth = quantity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList9, metricResultArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity11 = putActivity5.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails12 = activityWithDetails0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] specimenNestedInActivityArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList15, specimenNestedInActivityArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity17 = putActivity13.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails18 = activityWithDetails12.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList15);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList19 = activityWithDetails18.getExtendedAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList20 = activityWithDetails18.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        java.lang.String str24 = domainObjectAttachment22.getId();
        domainObjectAttachment22.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment22.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = domainObjectAttachment28.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        java.lang.String str33 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment28, domainObjectAttachment31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35, domainObjectAttachmentArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit37 = fieldVisit21.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple38 = fieldVisit21.FieldTrip;
        fieldVisit21.Participants = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails41 = activityWithDetails18.setFieldVisit(fieldVisit21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails43 = activityWithDetails41.setComment("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(specimenNestedInActivityList4);
        org.junit.Assert.assertNotNull(metricResultArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(putActivity11);
        org.junit.Assert.assertNotNull(activityWithDetails12);
        org.junit.Assert.assertNotNull(specimenNestedInActivityArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(putActivity17);
        org.junit.Assert.assertNotNull(activityWithDetails18);
        org.junit.Assert.assertNull(extendedAttributeList19);
        org.junit.Assert.assertNull(extendedAttributeList20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNotNull(domainObjectAttachment30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(fieldVisit37);
        org.junit.Assert.assertNull(fieldTripSimple38);
        org.junit.Assert.assertNotNull(activityWithDetails41);
        org.junit.Assert.assertNotNull(activityWithDetails43);
    }

    @Test
    public void test56729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56729");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.util.List<java.lang.String> strList1 = deleteFieldVisits0.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest4 = trendLineAnalysisServiceRequest2.setType(trendLineAnalysisType3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType5 = trendLineAnalysisServiceRequest4.Type;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList6 = trendLineAnalysisServiceRequest4.getPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj8 = timeAlignedDataServiceRequest7.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str10 = attachment9.getUrl();
        java.lang.String str11 = attachment9.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double13 = putBulkEditResultGradesV2_12.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        getObservationsV2_14.SpecimenIds = strList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray24 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags20.setTagUniqueIds(strList25);
        getObservationsV2_14.QualityControlTypes = strList25;
        java.util.List<java.lang.String> strList29 = getObservationsV2_14.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList30 = getObservationsV2_14.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType31 = getObservationsV2_14.FieldResultType;
        java.time.Instant instant32 = getObservationsV2_14.getEndObservedTime();
        java.lang.String str33 = getObservationsV2_14.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        java.util.ArrayList<java.lang.String> strList42 = putLocationTags41.TagUniqueIds;
        getObservationsV2_14.ProjectIds = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_44 = putBulkEditResultGradesV2_12.setSearch((java.util.List<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_46 = putBulkEditResultGradesV2_44.setLabResultLaboratoryIds(strList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType48 = calibrationCheck47.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay49 = calibrationCheck47.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary51.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse54.setNextToken(instant55);
        dischargeSummary51.MeasurementTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse50.setNextToken(instant55);
        java.time.Instant instant59 = locationDescriptionListServiceResponse50.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck60 = calibrationCheck47.setTime(instant59);
        putBulkEditResultGradesV2_46.StartResultTime = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment62 = attachment9.setDateUploaded(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest63 = timeAlignedDataServiceRequest7.setQueryFrom(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest64 = trendLineAnalysisServiceRequest4.setQueryFrom(instant59);
        deleteFieldVisits0.StartStartTime = instant59;
        java.lang.String str66 = deleteFieldVisits0.Sort;
        java.lang.String str67 = deleteFieldVisits0.Sort;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest4);
        org.junit.Assert.assertNull(trendLineAnalysisType5);
        org.junit.Assert.assertNull(timeSeriesPointList6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(fieldResultType31);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_44);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_46);
        org.junit.Assert.assertNull(calibrationCheckType48);
        org.junit.Assert.assertNull(doubleWithDisplay49);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(calibrationCheck60);
        org.junit.Assert.assertNotNull(attachment62);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest63);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test56730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56730");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NameTag nameTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NameTag();
        java.lang.String str1 = nameTag0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NameTag nameTag3 = nameTag0.setUniqueId("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(nameTag3);
    }

    @Test
    public void test56731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56731");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        java.time.Instant instant2 = calibrationCheck0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck4 = calibrationCheck0.setModel("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck0.setModel("0001-01-01T00:00:00.000Z");
        java.lang.String str7 = calibrationCheck0.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck9 = calibrationCheck0.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = groundWaterMeasurement10.WaterLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str13 = datumConvertedQuantityWithDisplay12.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement14 = groundWaterMeasurement10.setWaterLevel((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType17 = null;
        controlConditionActivity16.ControlCleaned = controlCleanedType17;
        java.lang.String str19 = controlConditionActivity16.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        controlConditionActivity16.DateCleaned = instant23;
        gageHeightReading15.ReadingTime = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = doubleWithDisplay27.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str30 = doubleWithDisplay29.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading31 = gageHeightReading15.setGageHeight(doubleWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary34.Reviewer = "";
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary34.MeasurementTime = instant37;
        postRecurringReport33.NextGenerationDate = instant37;
        java.time.Instant instant40 = postRecurringReport33.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset41 = statisticalDateTimeOffset32.setDateTimeOffset(instant40);
        gageHeightReading31.ReadingTime = instant40;
        java.lang.Boolean boolean43 = gageHeightReading31.getIsUsed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant45 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity46 = gageHeightAtZeroFlowActivity44.setApplicableSince(instant45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity48 = gageHeightAtZeroFlowActivity46.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str50 = volumetricDischargeReading49.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading52 = volumetricDischargeReading49.setIsUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary53.Reviewer = "";
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary53.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType58 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary53.BaseFlow = baseFlowType58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary53.DischargeUncertainty = dischargeUncertainty60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = dischargeSummary62.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay64 = dischargeSummary62.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay65 = dischargeSummary62.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = doubleWithDisplay66.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary62.setDurationInHours(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty70 = dischargeUncertainty60.setQuantitativeUncertainty(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading71 = volumetricDischargeReading49.setEndingVolume(doubleWithDisplay66);
        volumetricDischargeReading49.Name = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary76 = dischargeSummary74.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary76.DifferenceDuringVisit = doubleWithDisplay77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay80 = doubleWithDisplay77.setDisplay("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading81 = volumetricDischargeReading49.setDischarge(doubleWithDisplay77);
        gageHeightAtZeroFlowActivity46.ZeroFlowHeight = doubleWithDisplay77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading83 = gageHeightReading31.setGageHeight(doubleWithDisplay77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement84 = groundWaterMeasurement14.setCut(doubleWithDisplay77);
        calibrationCheck0.Value = doubleWithDisplay77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck87 = calibrationCheck0.setComments("multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****");
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(calibrationCheck4);
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(calibrationCheck9);
        org.junit.Assert.assertNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(groundWaterMeasurement14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(doubleWithDisplay29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(gageHeightReading31);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset41);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity46);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(volumetricDischargeReading52);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + baseFlowType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType58.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay63);
        org.junit.Assert.assertNull(quantityWithDisplay64);
        org.junit.Assert.assertNull(doubleWithDisplay65);
        org.junit.Assert.assertNotNull(doubleWithDisplay68);
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(dischargeUncertainty70);
        org.junit.Assert.assertNotNull(volumetricDischargeReading71);
        org.junit.Assert.assertNotNull(dischargeSummary76);
        org.junit.Assert.assertNotNull(doubleWithDisplay80);
        org.junit.Assert.assertNotNull(volumetricDischargeReading81);
        org.junit.Assert.assertNotNull(gageHeightReading83);
        org.junit.Assert.assertNotNull(groundWaterMeasurement84);
        org.junit.Assert.assertNotNull(calibrationCheck87);
    }

    @Test
    public void test56732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56732");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities0.Limit = 10;
        java.util.List<java.lang.String> strList3 = getActivities0.ActivityTemplateId;
        java.util.List<java.lang.String> strList4 = getActivities0.getMedia();
        java.time.Instant instant5 = getActivities0.getFromStartTime();
        java.time.Instant instant6 = getActivities0.ToStartTime;
        java.util.List<java.lang.String> strList7 = getActivities0.getProjectIds();
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test56733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56733");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity4 = fieldVisitDataServiceResponse3.LevelSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity5 = fieldVisitDataServiceResponse3.ControlConditionActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList7 = fieldVisitDataServiceResponse6.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse9 = fieldVisitDataServiceResponse6.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        fieldVisitDataServiceResponse6.ResponseTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList17 = inspectionActivity16.getInspections();
        java.lang.String str18 = inspectionActivity16.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList19 = inspectionActivity16.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity21 = inspectionActivity16.setParty("http");
        fieldVisitDataServiceResponse6.InspectionActivity = inspectionActivity16;
        fieldVisitDataServiceResponse3.InspectionActivity = inspectionActivity16;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList24 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = fieldVisitDataServiceResponse3.setAttachments(attachmentList24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult26 = fieldVisitDataServiceResponse3.DatumConversionResult;
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNull(levelSurveyActivity4);
        org.junit.Assert.assertNull(controlConditionActivity5);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList7);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNull(inspectionList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(readingList19);
        org.junit.Assert.assertNotNull(inspectionActivity21);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse25);
        org.junit.Assert.assertNull(datumConversionResult26);
    }

    @Test
    public void test56734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56734");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork2 = completedWork0.setGroundWaterLevelPerformed((java.lang.Boolean) false);
        completedWork0.SafetyInspectionPerformed = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork6 = completedWork0.setSafetyInspectionPerformed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork8 = completedWork6.setSedimentSampleTaken((java.lang.Boolean) true);
        java.lang.Boolean boolean9 = completedWork6.isRecorderDataCollected();
        java.lang.Boolean boolean10 = completedWork6.isRecorderDataCollected();
        java.lang.Boolean boolean11 = completedWork6.WaterQualityCrossSectionPerformed;
        java.lang.Boolean boolean12 = completedWork6.isRecorderDataCollected();
        org.junit.Assert.assertNotNull(completedWork2);
        org.junit.Assert.assertNotNull(completedWork6);
        org.junit.Assert.assertNotNull(completedWork8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test56735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56735");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList4 = null;
        timeSeriesDataServiceResponse0.Approvals = approvalList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse0.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str8 = timeSeriesDataServiceResponse0.getLabel();
        timeSeriesDataServiceResponse0.NumPoints = 0L;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList11 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList12 = timeSeriesDataServiceResponse0.Points;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(interpolationTypeList11);
        org.junit.Assert.assertNull(timeSeriesPointList12);
    }

    @Test
    public void test56736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56736");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList4 = null;
        timeSeriesDataServiceResponse0.Approvals = approvalList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList7 = timeSeriesDataServiceResponse6.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse9 = timeSeriesDataServiceResponse6.setTimeRange(statisticalTimeRange8);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList10 = null;
        timeSeriesDataServiceResponse6.Approvals = approvalList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse13 = timeSeriesDataServiceResponse6.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse13.TimeRange = statisticalTimeRange14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset17 = timeSeriesPoint16.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset19 = null;
        timeSeriesPoint18.Timestamp = statisticalDateTimeOffset19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint22 = timeSeriesPoint18.setTimestamp(statisticalDateTimeOffset21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint23 = timeSeriesPoint16.setTimestamp(statisticalDateTimeOffset21);
        statisticalTimeRange14.EndTime = statisticalDateTimeOffset21;
        timeSeriesDataServiceResponse0.TimeRange = statisticalTimeRange14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList27 = timeSeriesDataServiceResponse26.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange28 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse29 = timeSeriesDataServiceResponse26.setTimeRange(statisticalTimeRange28);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList30 = null;
        timeSeriesDataServiceResponse26.Approvals = approvalList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList33 = timeSeriesDataServiceResponse32.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange34 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse35 = timeSeriesDataServiceResponse32.setTimeRange(statisticalTimeRange34);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList36 = null;
        timeSeriesDataServiceResponse32.Approvals = approvalList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse39 = timeSeriesDataServiceResponse32.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse39.TimeRange = statisticalTimeRange40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset43 = timeSeriesPoint42.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset45 = null;
        timeSeriesPoint44.Timestamp = statisticalDateTimeOffset45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint48 = timeSeriesPoint44.setTimestamp(statisticalDateTimeOffset47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint49 = timeSeriesPoint42.setTimestamp(statisticalDateTimeOffset47);
        statisticalTimeRange40.EndTime = statisticalDateTimeOffset47;
        timeSeriesDataServiceResponse26.TimeRange = statisticalTimeRange40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary54.Reviewer = "";
        java.time.Instant instant57 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary54.MeasurementTime = instant57;
        postRecurringReport53.NextGenerationDate = instant57;
        java.time.Instant instant60 = postRecurringReport53.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset61 = statisticalDateTimeOffset52.setDateTimeOffset(instant60);
        statisticalTimeRange40.StartTime = statisticalDateTimeOffset61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset63 = statisticalTimeRange40.EndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange64 = statisticalTimeRange14.setEndTime(statisticalDateTimeOffset63);
        statisticalDateTimeOffset63.RepresentsEndOfTimePeriod = false;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNull(interpolationTypeList7);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse9);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse13);
        org.junit.Assert.assertNull(statisticalDateTimeOffset17);
        org.junit.Assert.assertNotNull(timeSeriesPoint22);
        org.junit.Assert.assertNotNull(timeSeriesPoint23);
        org.junit.Assert.assertNull(interpolationTypeList27);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse29);
        org.junit.Assert.assertNull(interpolationTypeList33);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse35);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse39);
        org.junit.Assert.assertNull(statisticalDateTimeOffset43);
        org.junit.Assert.assertNotNull(timeSeriesPoint48);
        org.junit.Assert.assertNotNull(timeSeriesPoint49);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset61);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset63);
        org.junit.Assert.assertNotNull(statisticalTimeRange64);
    }

    @Test
    public void test56737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56737");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str1 = locationUserRole0.UserUniqueId;
        java.lang.String str2 = locationUserRole0.RoleName;
        java.lang.String str3 = locationUserRole0.getUserLoginName();
        locationUserRole0.UserLoginName = "http://MaxDurationhttp/json/reply/Float";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole7 = locationUserRole0.setUserUniqueId("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole9 = locationUserRole0.setUserUniqueId("multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locationFolderUserRole7);
        org.junit.Assert.assertNotNull(locationFolderUserRole9);
    }

    @Test
    public void test56738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56738");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest2 = fieldVisitDataByLocationServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = fieldVisitDataByLocationServiceRequest0.isApplyRounding();
        java.lang.Boolean boolean4 = fieldVisitDataByLocationServiceRequest0.isIncludeCrossSectionSurveyProfile();
        java.lang.String str5 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean6 = fieldVisitDataByLocationServiceRequest0.isConvertToLocalAssumedDatum();
        java.lang.String str7 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest9 = fieldVisitDataByLocationServiceRequest0.setIncludeVerticals((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest12 = fieldVisitDataByLocationServiceRequest10.setIncludeNodeDetails((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList13 = fieldVisitDataByLocationServiceRequest12.getActivities();
        java.lang.Boolean boolean14 = fieldVisitDataByLocationServiceRequest12.isConvertToLocalAssumedDatum();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType> inspectionTypeList15 = fieldVisitDataByLocationServiceRequest12.InspectionTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] activityTypeArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] { activityType17, activityType18, activityType19, activityType20, activityType21, activityType22, activityType23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>) activityTypeList25, activityTypeArray24);
        fieldVisitDataByLocationServiceRequest16.Activities = activityTypeList25;
        fieldVisitDataByLocationServiceRequest12.Activities = activityTypeList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest29 = fieldVisitDataByLocationServiceRequest0.setActivities(activityTypeList25);
        java.lang.Boolean boolean30 = fieldVisitDataByLocationServiceRequest0.IncludeNodeDetails;
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest9);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest12);
        org.junit.Assert.assertNull(activityTypeList13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(inspectionTypeList15);
        org.junit.Assert.assertTrue("'" + activityType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod + "'", activityType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod));
        org.junit.Assert.assertTrue("'" + activityType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment + "'", activityType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment));
        org.junit.Assert.assertTrue("'" + activityType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure + "'", activityType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure));
        org.junit.Assert.assertTrue("'" + activityType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow + "'", activityType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow));
        org.junit.Assert.assertTrue("'" + activityType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertNotNull(activityTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest29);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
    }

    @Test
    public void test56739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56739");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType3 = postProject2.Type;
        java.lang.String str4 = postProject2.Name;
        java.lang.String str5 = postProject2.getScopeStatement();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.STUDY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject7 = postProject2.setType(projectType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject9 = postProject2.setDescription("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject11 = postProject9.setEndTime(offsetDateTime10);
        java.time.OffsetDateTime offsetDateTime12 = postProject11.StartTime;
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNull(projectType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + projectType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.STUDY + "'", projectType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.STUDY));
        org.junit.Assert.assertNotNull(postProject7);
        org.junit.Assert.assertNotNull(postProject9);
        org.junit.Assert.assertNotNull(postProject11);
        org.junit.Assert.assertNull(offsetDateTime12);
    }

    @Test
    public void test56740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56740");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimenObservations getSpecimenObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimenObservations();
        java.lang.String str1 = getSpecimenObservations0.getId();
        java.lang.String str2 = getSpecimenObservations0.getId();
        java.lang.String str3 = getSpecimenObservations0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test56741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56741");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        postTaxon0.ItisTsn = "MaxDuration";
        postTaxon0.Comment = "MaxInstant";
        java.lang.String str7 = postTaxon0.getItisTsn();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        putSamplingLocation8.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation13.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation13.setCategoricalResult(categoricalResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19, importHistoryEventSimpleArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation13.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod22 = postLabAnalysisMethod12.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty23 = postObservedProperty11.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation24 = putSamplingLocation8.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon25 = postTaxon0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel26 = postTaxon25.TaxonomyLevel;
        java.lang.String str27 = postTaxon25.getScientificName();
        java.lang.String str28 = postTaxon25.getId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxDuration" + "'", str7, "MaxDuration");
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod22);
        org.junit.Assert.assertNotNull(postObservedProperty23);
        org.junit.Assert.assertNotNull(putSamplingLocation24);
        org.junit.Assert.assertNotNull(postTaxon25);
        org.junit.Assert.assertNull(taxonomyLevel26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test56742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56742");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition2 = postDetectioncondition0.setDescription("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition4 = postDetectioncondition0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition6 = postDetectioncondition0.setId("zZZZZ");
        org.junit.Assert.assertNotNull(postDetectioncondition2);
        org.junit.Assert.assertNotNull(postDetectioncondition4);
        org.junit.Assert.assertNotNull(postDetectioncondition6);
    }

    @Test
    public void test56743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56743");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType3 = fieldVisitSimple0.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple5 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple6 = fieldVisitSimple0.getFieldTrip();
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple8 = fieldVisitSimple0.setStartTime(offsetDateTime7);
        java.time.OffsetDateTime offsetDateTime9 = fieldVisitSimple0.getStartTime();
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple11 = fieldVisitSimple0.setStartTime(offsetDateTime10);
        org.junit.Assert.assertNull(planningStatusType3);
        org.junit.Assert.assertNotNull(fieldVisitSimple5);
        org.junit.Assert.assertNull(fieldTripSimple6);
        org.junit.Assert.assertNotNull(fieldVisitSimple8);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(fieldVisitSimple11);
    }

    @Test
    public void test56744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56744");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest0.TimeSeriesUniqueId = "/AQUARIUS";
        java.time.Instant instant3 = null;
        correctionListServiceRequest0.QueryFrom = instant3;
        java.time.Instant instant5 = correctionListServiceRequest0.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType8 = calibrationCheck7.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = calibrationCheck7.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck20 = calibrationCheck7.setTime(instant19);
        monitoringMethodListServiceResponse6.ResponseTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType24 = calibrationCheck23.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = calibrationCheck23.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary27.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        dischargeSummary27.MeasurementTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse26.setNextToken(instant31);
        java.time.Instant instant35 = locationDescriptionListServiceResponse26.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck36 = calibrationCheck23.setTime(instant35);
        monitoringMethodListServiceResponse22.ResponseTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse39 = monitoringMethodListServiceResponse22.setSummary("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str40 = monitoringMethodListServiceResponse22.getSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] monitoringMethodArray42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod> monitoringMethodList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>) monitoringMethodList43, monitoringMethodArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse45 = monitoringMethodListServiceResponse41.setMonitoringMethods(monitoringMethodList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse46 = monitoringMethodListServiceResponse22.setMonitoringMethods(monitoringMethodList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse47 = monitoringMethodListServiceResponse6.setMonitoringMethods(monitoringMethodList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType49 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation50 = methodOperation48.setOperationType(metadataChangeOperationType49);
        java.lang.String str51 = methodOperation50.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType52 = methodOperation50.getOperationType();
        methodOperation50.MethodCode = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation56 = methodOperation50.setUser("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant58 = timeSeriesDescription57.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription60 = timeSeriesDescription57.setLabel("hi!");
        java.lang.String str61 = timeSeriesDescription60.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj63 = timeAlignedDataServiceRequest62.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant65 = sensor64.getLastModifiedUtc();
        java.time.Instant instant66 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor67 = sensor64.setLastModifiedUtc(instant66);
        java.time.Instant instant68 = sensor64.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest69 = timeAlignedDataServiceRequest62.setQueryTo(instant68);
        timeSeriesDescription60.CorrectedEndTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation71 = methodOperation56.setDateAppliedUtc(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse72 = monitoringMethodListServiceResponse47.setResponseTime(instant68);
        correctionListServiceRequest0.QueryFrom = instant68;
        java.lang.String str74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantSerializer.format(instant68);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(calibrationCheckType8);
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(calibrationCheck20);
        org.junit.Assert.assertNull(calibrationCheckType24);
        org.junit.Assert.assertNull(doubleWithDisplay25);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(calibrationCheck36);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str40, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(monitoringMethodArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse45);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse46);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse47);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType49.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType52.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation56);
        org.junit.Assert.assertNull(instant58);
        org.junit.Assert.assertNotNull(timeSeriesDescription60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(sensor67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest69);
        org.junit.Assert.assertNotNull(methodOperation71);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str74, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test56745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56745");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] monitoringMethodArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod> monitoringMethodList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>) monitoringMethodList2, monitoringMethodArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse4 = monitoringMethodListServiceResponse0.setMonitoringMethods(monitoringMethodList2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod> monitoringMethodList5 = monitoringMethodListServiceResponse4.getMonitoringMethods();
        org.junit.Assert.assertNotNull(monitoringMethodArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse4);
        org.junit.Assert.assertNotNull(monitoringMethodList5);
    }

    @Test
    public void test56746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56746");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType1 = expandedRatingCurve0.Type;
        expandedRatingCurve0.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve5 = expandedRatingCurve0.setIsBlended((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] periodOfApplicabilityArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>) periodOfApplicabilityList7, periodOfApplicabilityArray6);
        expandedRatingCurve0.PeriodsOfApplicability = periodOfApplicabilityList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType10 = expandedRatingCurve0.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList13, ratingPointArray12);
        ratingCurve11.BaseRatingTable = ratingPointList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve16 = expandedRatingCurve0.setAdjustedRatingTable(ratingPointList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType18 = expandedRatingCurve17.Type;
        expandedRatingCurve17.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve22 = expandedRatingCurve17.setOutputParameter(parameterWithUnit21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit24 = parameterWithUnit21.setParameterName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit26 = parameterWithUnit21.setParameterUnit("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve27 = expandedRatingCurve0.setOutputParameter(parameterWithUnit26);
        parameterWithUnit26.ParameterName = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit31 = parameterWithUnit26.setParameterUnit("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit33 = parameterWithUnit31.setParameterName("****b4959745-e712-43bc-98bb-4017f673cd3d****");
        parameterWithUnit31.ParameterUnit = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        org.junit.Assert.assertNull(ratingCurveType1);
        org.junit.Assert.assertNotNull(expandedRatingCurve5);
        org.junit.Assert.assertNotNull(periodOfApplicabilityArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ratingCurveType10);
        org.junit.Assert.assertNotNull(ratingPointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(expandedRatingCurve16);
        org.junit.Assert.assertNull(ratingCurveType18);
        org.junit.Assert.assertNotNull(expandedRatingCurve22);
        org.junit.Assert.assertNotNull(parameterWithUnit24);
        org.junit.Assert.assertNotNull(parameterWithUnit26);
        org.junit.Assert.assertNotNull(expandedRatingCurve27);
        org.junit.Assert.assertNotNull(parameterWithUnit31);
        org.junit.Assert.assertNotNull(parameterWithUnit33);
    }

    @Test
    public void test56747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56747");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability2 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList4, extendedAttributeApplicabilityArray3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes6 = getExtendedAttributes1.setApplicability(extendedAttributeApplicabilityList4);
        getExtendedAttributes0.Applicability = extendedAttributeApplicabilityList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability9 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList11, extendedAttributeApplicabilityArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes13 = getExtendedAttributes8.setApplicability(extendedAttributeApplicabilityList11);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList14 = null;
        getExtendedAttributes13.Applicability = extendedAttributeApplicabilityList14;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList16 = getExtendedAttributes13.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList20, extendedAttributeApplicabilityArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes22 = getExtendedAttributes17.setApplicability(extendedAttributeApplicabilityList20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList26, extendedAttributeApplicabilityArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes28 = getExtendedAttributes23.setApplicability(extendedAttributeApplicabilityList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes29 = getExtendedAttributes22.setApplicability(extendedAttributeApplicabilityList26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList30 = getExtendedAttributes22.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes31 = getExtendedAttributes13.setApplicability(extendedAttributeApplicabilityList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList35, extendedAttributeApplicabilityArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes37 = getExtendedAttributes32.setApplicability(extendedAttributeApplicabilityList35);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList38 = null;
        getExtendedAttributes37.Applicability = extendedAttributeApplicabilityList38;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList40 = getExtendedAttributes37.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability42 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList44, extendedAttributeApplicabilityArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes46 = getExtendedAttributes41.setApplicability(extendedAttributeApplicabilityList44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability48 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList50, extendedAttributeApplicabilityArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes52 = getExtendedAttributes47.setApplicability(extendedAttributeApplicabilityList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes53 = getExtendedAttributes46.setApplicability(extendedAttributeApplicabilityList50);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList54 = getExtendedAttributes46.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes55 = getExtendedAttributes37.setApplicability(extendedAttributeApplicabilityList54);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList56 = getExtendedAttributes37.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes57 = getExtendedAttributes13.setApplicability(extendedAttributeApplicabilityList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes58 = getExtendedAttributes0.setApplicability(extendedAttributeApplicabilityList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability60 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList62, extendedAttributeApplicabilityArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes64 = getExtendedAttributes59.setApplicability(extendedAttributeApplicabilityList62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability66 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability66 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList68, extendedAttributeApplicabilityArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes70 = getExtendedAttributes65.setApplicability(extendedAttributeApplicabilityList68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes71 = getExtendedAttributes64.setApplicability(extendedAttributeApplicabilityList68);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList72 = getExtendedAttributes64.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes73 = getExtendedAttributes0.setApplicability(extendedAttributeApplicabilityList72);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList74 = getExtendedAttributes0.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability76 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability76 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList78 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList78, extendedAttributeApplicabilityArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes80 = getExtendedAttributes75.setApplicability(extendedAttributeApplicabilityList78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability82 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability82 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList84 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList84, extendedAttributeApplicabilityArray83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes86 = getExtendedAttributes81.setApplicability(extendedAttributeApplicabilityList84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes87 = getExtendedAttributes80.setApplicability(extendedAttributeApplicabilityList84);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList88 = getExtendedAttributes80.getApplicability();
        getExtendedAttributes0.Applicability = extendedAttributeApplicabilityList88;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList90 = getExtendedAttributes0.Applicability;
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes6);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes13);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList16);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes22);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes28);
        org.junit.Assert.assertNotNull(getExtendedAttributes29);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList30);
        org.junit.Assert.assertNotNull(getExtendedAttributes31);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes37);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList40);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability42 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability42.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes46);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability48 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability48.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes52);
        org.junit.Assert.assertNotNull(getExtendedAttributes53);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList54);
        org.junit.Assert.assertNotNull(getExtendedAttributes55);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList56);
        org.junit.Assert.assertNotNull(getExtendedAttributes57);
        org.junit.Assert.assertNotNull(getExtendedAttributes58);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability60 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability60.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes64);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability66 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability66.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes70);
        org.junit.Assert.assertNotNull(getExtendedAttributes71);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList72);
        org.junit.Assert.assertNotNull(getExtendedAttributes73);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList74);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability76 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability76.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes80);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability82 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability82.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes86);
        org.junit.Assert.assertNotNull(getExtendedAttributes87);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList88);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList90);
    }

    @Test
    public void test56748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56748");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setContentType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation3.setLongitude("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation7 = attachmentRepresentation3.setSuccess((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation9 = attachmentRepresentation3.setComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str11 = auditAttributesFull10.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = auditAttributesFull10.CreationUserProfile;
        attachmentRepresentation9.AuditAttributes = auditAttributesFull10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation15 = attachmentRepresentation9.setLongitude("http");
        java.lang.String str16 = attachmentRepresentation9.getComment();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
        org.junit.Assert.assertNotNull(attachmentRepresentation7);
        org.junit.Assert.assertNotNull(attachmentRepresentation9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(userProfile12);
        org.junit.Assert.assertNotNull(attachmentRepresentation15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str16, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test56749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56749");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setBaseOffset((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit4 = unit0.setSymbol("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit6 = unit4.setUnitIdentifier("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit8 = unit4.setIsSystem((java.lang.Boolean) true);
        java.lang.Double double9 = unit4.BaseMultiplier;
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNotNull(unit4);
        org.junit.Assert.assertNotNull(unit6);
        org.junit.Assert.assertNotNull(unit8);
        org.junit.Assert.assertNull(double9);
    }

    @Test
    public void test56750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56750");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList6 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setSuccessCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary10 = taxonImportSummary0.setExpectedCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary12 = taxonImportSummary10.setInvalidRowsCsvUrl("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(importItemTaxonList6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
        org.junit.Assert.assertNotNull(taxonImportSummary10);
        org.junit.Assert.assertNotNull(taxonImportSummary12);
    }

    @Test
    public void test56751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56751");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postObservedProperty0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType3 = postObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty5 = postObservedProperty0.setUnitGroup(unitGroup4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty0.setResultType(resultType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = postObservedProperty0.UpperLimit;
        java.lang.String str9 = postObservedProperty0.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = postObservedProperty0.setDescription("****b32afde2-1a30-49af-8737-f89cabfac033****");
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNull(analysisType3);
        org.junit.Assert.assertNotNull(postObservedProperty5);
        org.junit.Assert.assertTrue("'" + resultType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty7);
        org.junit.Assert.assertNull(quantity8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postObservedProperty11);
    }

    @Test
    public void test56752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56752");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity4 = putActivity0.setCollectionMethod(collectionMethod3);
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity4.setStartTime(offsetDateTime5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity6.setId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity10 = putActivity6.setDetail((java.lang.Boolean) true);
        java.time.OffsetDateTime offsetDateTime11 = null;
        putActivity10.EndTime = offsetDateTime11;
        org.junit.Assert.assertNotNull(putActivity4);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(putActivity10);
    }

    @Test
    public void test56753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56753");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity23 = adcpDischargeActivity0.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = adcpDischargeActivity23.getWidth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = adcpDischargeActivity23.getMagneticVariation();
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNotNull(adcpDischargeActivity23);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNull(doubleWithDisplay25);
    }

    @Test
    public void test56754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56754");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        postSchedule0.Id = "0001-01-01T00:00:00.000Z";
        postSchedule0.SamplingLocationGroupSelectionTypeRandomCount = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = postSchedule0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule7 = postSchedule0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime9 = putSchedule8.StartDate;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule11 = putSchedule8.setEndDate(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule13 = putSchedule11.setRecurrenceType(recurrenceType12);
        java.lang.String str14 = putSchedule11.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType15 = putSchedule11.getRecurrenceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule16 = postSchedule0.setRecurrenceType(recurrenceType15);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNotNull(postSchedule7);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(putSchedule11);
        org.junit.Assert.assertTrue("'" + recurrenceType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + recurrenceType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(postSchedule16);
    }

    @Test
    public void test56755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56755");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.FieldNamer fieldNamer3 = new com.aquaticinformatics.aquarius.sdk.samples.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient5 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("MaxDuration", "http", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer3, false);
        sdkServiceClient5.setTimeout((int) (byte) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        getObservationsV2_14.DepthUnitCustomId = "hi!";
        java.lang.String str17 = getObservationsV2_14.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.ActivityIds = strList29;
        getObservationsV2_14.ResultStatuses = strList29;
        getObservationsV2_14.FieldVisitId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_36.setDataClassifications((java.util.List<java.lang.String>) strList40);
        java.util.List<java.lang.String> strList43 = getObservationsV2_36.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary44.Reviewer = "";
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary44.MeasurementTime = instant47;
        getObservationsV2_36.StartResultTime = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType52 = null;
        controlConditionActivity51.ControlCleaned = controlCleanedType52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse54.setNextToken(instant55);
        controlConditionActivity51.DateCleaned = instant55;
        timeAlignedDataServiceRequest50.QueryFrom = instant55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        getObservationsV2_59.SpecimenIds = strList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray69 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = putLocationTags65.setTagUniqueIds(strList70);
        getObservationsV2_59.ActivityIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest74 = timeAlignedDataServiceRequest50.setTimeSeriesOutputUnitIds(strList70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_36.setCollectionMethodIds((java.util.List<java.lang.String>) strList70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = getObservationsV2_14.setSpecimenIds((java.util.List<java.lang.String>) strList70);
        java.lang.String str78 = sdkServiceClient5.createUrl((java.lang.Object) strList70, "POST");
        sdkServiceClient5.setApiToken("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag83 = tag81.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str84 = tag83.Key;
        tag83.AppliesToLocationNotes = false;
        java.lang.String str87 = tag83.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag89 = tag83.setAppliesToReports((java.lang.Boolean) true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = sdkServiceClient5.toJson((java.lang.Object) tag83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sdkServiceClient5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(putLocationTags72);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest74);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(getObservationsV2_76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str78, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNotNull(tag83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(tag89);
    }

    @Test
    public void test56756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56756");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_64 = deleteObservationsV2_62.setResultGrades(strList63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_66 = deleteObservationsV2_62.setActivityCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        java.util.List<java.lang.String> strList67 = deleteObservationsV2_66.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType68 = deleteObservationsV2_66.getFieldResultType();
        deleteObservationsV2_66.DepthUnitCustomId = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        java.util.List<java.lang.String> strList71 = deleteObservationsV2_66.getAnalysisMethodSimpleIds();
        java.util.List<java.lang.String> strList72 = deleteObservationsV2_66.getIds();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_64);
        org.junit.Assert.assertNotNull(deleteObservationsV2_66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(fieldResultType68);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(strList72);
    }

    @Test
    public void test56757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56757");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical0.VerticalType = verticalType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation6 = velocityObservation4.setDeploymentMethod(deploymentMethodType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation9 = velocityObservation7.setDeploymentMethod(deploymentMethodType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList11, velocityDepthObservationArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation13 = velocityObservation9.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation14 = velocityObservation4.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical15 = vertical0.setVelocityObservation(velocityObservation4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical17 = vertical15.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay16);
        vertical15.CosineOfUniqueFlow = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation20 = vertical15.getVelocityObservation();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertTrue("'" + verticalType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation6);
        org.junit.Assert.assertTrue("'" + deploymentMethodType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation9);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(velocityObservation13);
        org.junit.Assert.assertNotNull(velocityObservation14);
        org.junit.Assert.assertNotNull(vertical15);
        org.junit.Assert.assertNotNull(vertical17);
        org.junit.Assert.assertNotNull(velocityObservation20);
    }

    @Test
    public void test56758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56758");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutNoteTag putNoteTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutNoteTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutNameTagBase putNameTagBase2 = putNoteTag0.setUniqueId("MaxDuration");
        java.lang.Object obj3 = putNoteTag0.getResponseType();
        putNoteTag0.Name = "multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****";
        org.junit.Assert.assertNotNull(putNameTagBase2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTag");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTag");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$NameTag");
    }

    @Test
    public void test56759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56759");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratory getLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratory getLaboratory2 = getLaboratory0.setId("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.Object obj3 = getLaboratory0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLaboratory getLaboratory5 = getLaboratory0.setId("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str6 = getLaboratory0.Id;
        org.junit.Assert.assertNotNull(getLaboratory2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Laboratory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Laboratory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Laboratory");
        org.junit.Assert.assertNotNull(getLaboratory5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str6, "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test56760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56760");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary9 = taxonImportSummary0.setSuccessCount((java.lang.Integer) (-1));
        taxonImportSummary0.InvalidRowsCsvUrl = "9999-12-31T23:59:59.9999999Z";
        taxonImportSummary0.InvalidRowsCsvUrl = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary15 = taxonImportSummary0.setSummaryReportText("2021.8.9990");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList16 = taxonImportSummary15.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary18 = taxonImportSummary15.setSkippedCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary20 = taxonImportSummary18.setInvalidRowsCsvUrl("multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****");
        taxonImportSummary20.SuccessCount = 100;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNotNull(taxonImportSummary9);
        org.junit.Assert.assertNotNull(taxonImportSummary15);
        org.junit.Assert.assertNull(importItemTaxonList16);
        org.junit.Assert.assertNotNull(taxonImportSummary18);
        org.junit.Assert.assertNotNull(taxonImportSummary20);
    }

    @Test
    public void test56761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56761");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList5 = getExportObservations0.getSpecimenIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations0.setDetectionCondition("MaxDuration");
        java.util.List<java.lang.String> strList8 = getExportObservations7.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        java.lang.String str10 = getLabReportImportHistoryEvents9.getCursor();
        getLabReportImportHistoryEvents9.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents14 = getLabReportImportHistoryEvents9.setCursor("2021.4.62.0");
        java.lang.Object obj15 = getLabReportImportHistoryEvents14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        java.util.List<java.lang.String> strList32 = getObservationsV2_17.getLabReportIds();
        importItem16.Errors = getObservationsV2_17;
        java.lang.Object obj34 = importItem16.getExistingItem();
        importItem16.Input = "hi!";
        java.lang.Object obj37 = importItem16.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem39 = importItem16.setStatus(importItemStatusType38);
        importItem39.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate42.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate46 = specimenTemplate42.setId("hi!");
        java.lang.Boolean boolean47 = specimenTemplate46.getFiltered();
        importItem39.Item = specimenTemplate46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_51.setDataClassifications((java.util.List<java.lang.String>) strList55);
        postTag50.PickListValues = strList55;
        java.util.ArrayList<java.lang.String> strList59 = postTag50.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor60 = processor49.setInputTimeSeriesUniqueIds(strList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem61 = importItem39.setWarningMessages((java.util.List<java.lang.String>) strList59);
        java.util.List<java.lang.String> strList62 = importItem39.getWarningMessages();
        getLabReportImportHistoryEvents14.LabReportIds = strList62;
        java.util.List<java.lang.String> strList64 = getLabReportImportHistoryEvents14.LabReportIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations65 = getExportObservations7.setResultStatuses(strList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations67 = getExportObservations65.setFilterId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        java.time.Instant instant68 = getExportObservations65.getStartResultTime();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getExportObservations7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReportImportHistoryEvent");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReportImportHistoryEvent");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReportImportHistoryEvent");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + importItemStatusType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem39);
        org.junit.Assert.assertNotNull(specimenTemplate46);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(processor60);
        org.junit.Assert.assertNotNull(importItem61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(getExportObservations65);
        org.junit.Assert.assertNotNull(getExportObservations67);
        org.junit.Assert.assertNull(instant68);
    }

    @Test
    public void test56762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56762");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = samplingPlanPlannedActivity1.setAuditAttributes(auditAttributes2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = auditAttributes4.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity3.AuditAttributes = auditAttributes4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = samplingPlanPlannedActivity3.AuditAttributes;
        putAccessGroup0.AuditAttributes = auditAttributes8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup11 = putAccessGroup0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate14 = postFieldVisitActivityWithTemplate12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType15 = null;
        postFieldVisitActivityWithTemplate14.Medium = mediumType15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity17.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = postActivity17.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = postActivity21.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate24 = postFieldVisitActivityWithTemplate14.setAuditAttributes(auditAttributes22);
        putAccessGroup0.AuditAttributes = auditAttributes22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup27 = putAccessGroup0.setName("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        java.lang.Boolean boolean28 = putAccessGroup0.CanEditAllData;
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity3);
        org.junit.Assert.assertNotNull(auditAttributes6);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putAccessGroup11);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate14);
        org.junit.Assert.assertNotNull(postActivity21);
        org.junit.Assert.assertNotNull(postActivity23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate24);
        org.junit.Assert.assertNotNull(putAccessGroup27);
        org.junit.Assert.assertNull(boolean28);
    }

    @Test
    public void test56763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56763");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard2 = locationReferenceStandard0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard4 = locationReferenceStandard2.setReferenceStandardOffsets(referenceStandardOffsetList3);
        java.lang.String str5 = locationReferenceStandard4.Comments;
        locationReferenceStandard4.Method = "multipart/form-data; boundary=****b32afde2-1a30-49af-8737-f89cabfac033****";
        org.junit.Assert.assertNotNull(locationReferenceStandard2);
        org.junit.Assert.assertNotNull(locationReferenceStandard4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test56764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56764");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList36 = getGroupedObservationsV2_26.LabResultLabAnalysisMethodIds;
        getGroupedObservationsV2_26.SpecimenName = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_40 = getGroupedObservationsV2_26.setDepthUnitId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.util.List<java.lang.String> strList41 = getGroupedObservationsV2_40.Media;
        java.lang.Double double42 = getGroupedObservationsV2_40.getMinNumericResultValue();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(double42);
    }

    @Test
    public void test56765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56765");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList5 = standardDefinition4.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = standardDefinition4.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition8 = standardDefinition4.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard11 = postStandard9.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard13 = postStandard11.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList15, observationStandardArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard17 = postStandard13.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition18 = standardDefinition4.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition19.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition23 = standardDefinition19.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList24 = standardDefinition23.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval25 = standardDefinition23.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList27, observationStandardArray26);
        standardDefinition23.ObservationStandards = observationStandardList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str31 = samplingLocationSimple30.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str33 = samplingLocationSimple32.Name;
        java.lang.String str34 = samplingLocationSimple32.Name;
        java.lang.String str35 = samplingLocationSimple32.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str37 = samplingLocationSimple36.Name;
        java.lang.String str38 = samplingLocationSimple36.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str40 = samplingLocationSimple39.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str42 = samplingLocationSimple41.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple[] samplingLocationSimpleArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple[] { samplingLocationSimple30, samplingLocationSimple32, samplingLocationSimple36, samplingLocationSimple39, samplingLocationSimple41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList44, samplingLocationSimpleArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition46 = standardDefinition23.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition47 = standardDefinition4.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList44);
        java.lang.String str48 = standardDefinition47.Id;
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(samplingLocationSimpleList5);
        org.junit.Assert.assertNull(interval6);
        org.junit.Assert.assertNotNull(standardDefinition8);
        org.junit.Assert.assertNotNull(postStandard11);
        org.junit.Assert.assertNotNull(postStandard13);
        org.junit.Assert.assertNotNull(observationStandardArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postStandard17);
        org.junit.Assert.assertNotNull(standardDefinition18);
        org.junit.Assert.assertNotNull(standardDefinition23);
        org.junit.Assert.assertNull(samplingLocationSimpleList24);
        org.junit.Assert.assertNull(interval25);
        org.junit.Assert.assertNotNull(observationStandardArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(samplingLocationSimpleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(standardDefinition46);
        org.junit.Assert.assertNotNull(standardDefinition47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test56766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56766");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate2 = searchResultActivityTemplate0.setTotalCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate> activityTemplateList3 = searchResultActivityTemplate2.DomainObjects;
        org.junit.Assert.assertNotNull(searchResultActivityTemplate2);
        org.junit.Assert.assertNull(activityTemplateList3);
    }

    @Test
    public void test56767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56767");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries4 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        postDatumConvertedTimeSeries4.Publish = true;
        postDatumConvertedTimeSeries4.ComputationIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList9 = postDatumConvertedTimeSeries4.ExtendedAttributeValues;
        java.lang.Boolean boolean10 = postDatumConvertedTimeSeries4.isTargetIsLocalAssumedDatum();
        java.lang.String str11 = postDatumConvertedTimeSeries4.getUtcOffset();
        java.lang.String str12 = postDatumConvertedTimeSeries4.getComputationIdentifier();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries4);
        org.junit.Assert.assertNull(extendedAttributeValueList9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str12, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test56768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56768");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup2 = deleteUnitGroup0.setId("MaxDuration");
        deleteUnitGroup0.Id = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        java.lang.String str5 = deleteUnitGroup0.getId();
        java.lang.String str6 = deleteUnitGroup0.getId();
        org.junit.Assert.assertNotNull(deleteUnitGroup2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****" + "'", str5, "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****" + "'", str6, "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
    }

    @Test
    public void test56769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56769");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocation deleteLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocation();
        java.lang.String str1 = deleteLocation0.getLocationUniqueId();
        deleteLocation0.LocationUniqueId = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str4 = deleteLocation0.LocationUniqueId;
        deleteLocation0.LocationUniqueId = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****" + "'", str4, "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
    }

    @Test
    public void test56770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56770");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical0.VerticalType = verticalType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter4 = vertical0.getCurrentMeter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical8 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration> calibrationList9 = vertical0.getCalibrations();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertTrue("'" + verticalType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNull(currentMeter4);
        org.junit.Assert.assertNotNull(vertical6);
        org.junit.Assert.assertNotNull(vertical8);
        org.junit.Assert.assertNull(calibrationList9);
    }

    @Test
    public void test56771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56771");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest2 = fieldVisitDataByLocationServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = fieldVisitDataByLocationServiceRequest0.isApplyRounding();
        java.lang.Boolean boolean4 = fieldVisitDataByLocationServiceRequest0.isIncludeCrossSectionSurveyProfile();
        java.lang.String str5 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean6 = fieldVisitDataByLocationServiceRequest0.isConvertToLocalAssumedDatum();
        java.lang.String str7 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest9 = fieldVisitDataByLocationServiceRequest0.setIncludeVerticals((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest12 = fieldVisitDataByLocationServiceRequest10.setIncludeNodeDetails((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList13 = fieldVisitDataByLocationServiceRequest12.getActivities();
        java.lang.Boolean boolean14 = fieldVisitDataByLocationServiceRequest12.isConvertToLocalAssumedDatum();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType> inspectionTypeList15 = fieldVisitDataByLocationServiceRequest12.InspectionTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] activityTypeArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] { activityType17, activityType18, activityType19, activityType20, activityType21, activityType22, activityType23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>) activityTypeList25, activityTypeArray24);
        fieldVisitDataByLocationServiceRequest16.Activities = activityTypeList25;
        fieldVisitDataByLocationServiceRequest12.Activities = activityTypeList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest29 = fieldVisitDataByLocationServiceRequest0.setActivities(activityTypeList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest31 = fieldVisitDataByLocationServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest33 = fieldVisitDataByLocationServiceRequest31.setIncludeInvalidActivities((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest9);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest12);
        org.junit.Assert.assertNull(activityTypeList13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(inspectionTypeList15);
        org.junit.Assert.assertTrue("'" + activityType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod + "'", activityType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod));
        org.junit.Assert.assertTrue("'" + activityType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment + "'", activityType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment));
        org.junit.Assert.assertTrue("'" + activityType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure + "'", activityType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure));
        org.junit.Assert.assertTrue("'" + activityType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow + "'", activityType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow));
        org.junit.Assert.assertTrue("'" + activityType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertNotNull(activityTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest29);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest31);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest33);
    }

    @Test
    public void test56772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56772");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str1 = categoricalValue0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = categoricalValue0.AuditAttributes;
        categoricalValue0.CustomId = "9999-12-31T23:59:59.999Z";
        categoricalValue0.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue8 = categoricalValue0.setCustomId("");
        categoricalValue0.CustomId = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(categoricalValue8);
    }

    @Test
    public void test56773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56773");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = analyticalGroupItem4.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = null;
        analyticalGroupItem9.AnalysisMethod = analysisMethod12;
        java.lang.String str14 = analyticalGroupItem9.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = null;
        analyticalGroupItem20.AnalysisMethod = analysisMethod23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem4, analyticalGroupItem6, analyticalGroupItem9, analyticalGroupItem15, analyticalGroupItem18, analyticalGroupItem20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList26, analyticalGroupItemArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup28 = analyticalGroup3.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList26);
        java.lang.Integer int29 = analyticalGroup3.getNumberOfAnalysisMethodsInGroupItems();
        specimenWithObservations2.AnalyticalGroup = analyticalGroup3;
        specimenWithObservations2.NumberOfReceivedObservations = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations34 = specimenWithObservations2.setId("http://MaxDurationhttp/json/reply/ArrayList");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList35 = specimenWithObservations34.getExtendedAttributes();
        specimenWithObservations34.NumberOfRequestedObservations = 10;
        java.lang.String str38 = specimenWithObservations34.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup40 = specimen39.getAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen42 = specimen39.setPreservative(preservativeType41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations43 = specimenWithObservations34.setPreservative(preservativeType41);
        specimenWithObservations34.NumberOfRequestedObservations = 0;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(analysisMethod8);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod17);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(analyticalGroup28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(specimenWithObservations34);
        org.junit.Assert.assertNull(extendedAttributeList35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str38, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNull(analyticalGroup40);
        org.junit.Assert.assertTrue("'" + preservativeType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID + "'", preservativeType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID));
        org.junit.Assert.assertNotNull(specimen42);
        org.junit.Assert.assertNotNull(specimenWithObservations43);
    }

    @Test
    public void test56774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56774");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.lang.String str63 = deleteObservationsV2_62.FilterId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType66 = null;
        controlConditionActivity65.ControlCleaned = controlCleanedType66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant69 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = locationDescriptionListServiceResponse68.setNextToken(instant69);
        controlConditionActivity65.DateCleaned = instant69;
        timeAlignedDataServiceRequest64.QueryFrom = instant69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray83 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags86 = putLocationTags79.setTagUniqueIds(strList84);
        getObservationsV2_73.ActivityIds = strList84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest88 = timeAlignedDataServiceRequest64.setTimeSeriesOutputUnitIds(strList84);
        java.time.Instant instant89 = timeAlignedDataServiceRequest88.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_90 = deleteObservationsV2_62.setStartModificationTime(instant89);
        java.util.List<java.lang.String> strList91 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_92 = deleteObservationsV2_90.setResultGrades(strList91);
        java.lang.String str93 = deleteObservationsV2_90.getImportHistoryEventId();
        java.time.Instant instant94 = deleteObservationsV2_90.getEndResultTime();
        deleteObservationsV2_90.DetectionCondition = "multipart/form-data; boundary=****b32afde2-1a30-49af-8737-f89cabfac033****";
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str63, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse70);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(putLocationTags86);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(deleteObservationsV2_90);
        org.junit.Assert.assertNotNull(deleteObservationsV2_92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(instant94);
    }

    @Test
    public void test56775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56775");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance> gapToleranceList2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setGapTolerances(gapToleranceList2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str5 = approval4.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str7 = approval6.User;
        approval6.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval11 = approval6.setApprovalLevel((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str13 = approval12.User;
        java.lang.String str14 = approval12.Comment;
        java.lang.String str15 = approval12.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str18 = approval17.User;
        approval17.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval22 = approval17.setApprovalLevel((java.lang.Integer) 4);
        java.lang.String str23 = approval17.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction approvalsTransaction24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str26 = approval25.User;
        approval25.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] approvalArray29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] { approval4, approval6, approval12, approval16, approval17, approvalsTransaction24, approval25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>) approvalList30, approvalArray29);
        timeSeriesDataServiceResponse0.Approvals = approvalList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset34 = timeSeriesPoint33.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = reading35.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading38 = reading35.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading40 = reading38.setModel("MaxInstant");
        reading40.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant43 = reading40.Time;
        java.lang.String str44 = reading40.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading40.Value = doubleWithDisplay45;
        timeSeriesPoint33.Value = doubleWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset49 = timeSeriesPoint48.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay51 = reading50.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading53 = reading50.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading55 = reading53.setModel("MaxInstant");
        reading55.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant58 = reading55.Time;
        java.lang.String str59 = reading55.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading55.Value = doubleWithDisplay60;
        timeSeriesPoint48.Value = doubleWithDisplay60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset64 = null;
        timeSeriesPoint63.Timestamp = statisticalDateTimeOffset64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint67 = timeSeriesPoint63.setTimestamp(statisticalDateTimeOffset66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset69 = null;
        timeSeriesPoint68.Timestamp = statisticalDateTimeOffset69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint72 = timeSeriesPoint68.setTimestamp(statisticalDateTimeOffset71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset74 = null;
        timeSeriesPoint73.Timestamp = statisticalDateTimeOffset74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint77 = timeSeriesPoint73.setTimestamp(statisticalDateTimeOffset76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] timeSeriesPointArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] { timeSeriesPoint33, timeSeriesPoint48, timeSeriesPoint67, timeSeriesPoint72, timeSeriesPoint77 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>) timeSeriesPointList79, timeSeriesPointArray78);
        timeSeriesDataServiceResponse0.Points = timeSeriesPointList79;
        timeSeriesDataServiceResponse0.LocationIdentifier = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(approval11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(approval22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(approvalArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(statisticalDateTimeOffset34);
        org.junit.Assert.assertNull(doubleWithDisplay36);
        org.junit.Assert.assertNotNull(reading38);
        org.junit.Assert.assertNotNull(reading40);
        org.junit.Assert.assertNull(instant43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(statisticalDateTimeOffset49);
        org.junit.Assert.assertNull(doubleWithDisplay51);
        org.junit.Assert.assertNotNull(reading53);
        org.junit.Assert.assertNotNull(reading55);
        org.junit.Assert.assertNull(instant58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(timeSeriesPoint67);
        org.junit.Assert.assertNotNull(timeSeriesPoint72);
        org.junit.Assert.assertNotNull(timeSeriesPoint77);
        org.junit.Assert.assertNotNull(timeSeriesPointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test56776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56776");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject4 = postProject2.setStartTime(offsetDateTime3);
        java.lang.Boolean boolean5 = postProject2.getApproved();
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNotNull(postProject4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test56777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56777");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingLocations postImportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingLocations();
        java.lang.String str1 = postImportSamplingLocations0.FileType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingLocations postImportSamplingLocations3 = postImportSamplingLocations0.setFileType("0001-01-01T00:00:00.000Z");
        postImportSamplingLocations3.FileType = "9999-12-31T23:59:59.999Z";
        java.lang.Object obj6 = postImportSamplingLocations3.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingLocations postImportSamplingLocations8 = postImportSamplingLocations3.setFileType("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        postImportSamplingLocations3.FileType = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postImportSamplingLocations3);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationImportSummary");
        org.junit.Assert.assertNotNull(postImportSamplingLocations8);
    }

    @Test
    public void test56778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56778");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_10 = postObservationV2_8.setRelatedTaxon(taxon9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = postObservationV2_8.CategoricalResult;
        java.time.OffsetDateTime offsetDateTime12 = postObservationV2_8.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = postObservationV2_8.getLabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty15 = chartData14.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData17 = chartData14.setDepthUnitGroupWithUnits(unitGroupWithUnits16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str20 = metricConfiguration19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty21.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration24 = metricConfiguration19.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType25 = observedProperty21.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup27 = postObservedProperty26.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit29 = null;
        quantity28.Unit = unit29;
        postObservedProperty26.LowerLimit = quantity28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = postObservedProperty26.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = quantity32.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = observedProperty21.setUpperLimit(quantity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation35 = samplingLocation18.setElevation(quantity32);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList36 = samplingLocation35.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList39, extendedAttributeArray38);
        postActivity37.ExtendedAttributes = extendedAttributeList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation42 = samplingLocation35.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList39);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList43 = samplingLocation42.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData44 = chartData14.setSamplingLocation(samplingLocation42);
        samplingLocation42.HorizontalCollectionMethod = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList47 = samplingLocation42.getSamplingLocationGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_48 = postObservationV2_8.setSamplingLocation(samplingLocation42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen51 = specimen49.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen53 = specimen51.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity54 = specimen51.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate57 = specimenTemplate55.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType58 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate57.Preservative = preservativeType58;
        specimenTemplate57.FiltrationComment = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup62 = specimenTemplate57.AnalyticalGroup;
        specimen51.TemplateCreatedFrom = specimenTemplate57;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList64 = specimen51.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_65 = postObservationV2_48.setSpecimen(specimen51);
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNotNull(postObservationV2_10);
        org.junit.Assert.assertNull(categoricalResult11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNull(observedProperty15);
        org.junit.Assert.assertNotNull(chartData17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(metricConfiguration24);
        org.junit.Assert.assertNull(resultType25);
        org.junit.Assert.assertNull(unitGroup27);
        org.junit.Assert.assertNotNull(quantity32);
        org.junit.Assert.assertNull(unit33);
        org.junit.Assert.assertNotNull(observedProperty34);
        org.junit.Assert.assertNotNull(samplingLocation35);
        org.junit.Assert.assertNull(domainObjectAttachmentList36);
        org.junit.Assert.assertNotNull(extendedAttributeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(samplingLocation42);
        org.junit.Assert.assertNotNull(extendedAttributeList43);
        org.junit.Assert.assertNotNull(chartData44);
        org.junit.Assert.assertNull(samplingLocationGroupList47);
        org.junit.Assert.assertNotNull(postObservationV2_48);
        org.junit.Assert.assertNotNull(specimen51);
        org.junit.Assert.assertNotNull(specimen53);
        org.junit.Assert.assertNull(activity54);
        org.junit.Assert.assertNotNull(specimenTemplate57);
        org.junit.Assert.assertTrue("'" + preservativeType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNull(analyticalGroup62);
        org.junit.Assert.assertNull(extendedAttributeList64);
        org.junit.Assert.assertNotNull(postObservationV2_65);
    }

    @Test
    public void test56779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56779");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setType(activityWithDetailsType7);
        java.lang.Boolean boolean9 = putActivity0.getRefreshed();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = putActivity10.PlannedActivity;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList12 = putActivity10.MetricResults;
        java.lang.String str13 = putActivity10.SourceActivityId;
        putActivity10.CustomId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity17 = putActivity10.setDetail((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity20 = null;
        putActivity19.PlannedActivity = plannedActivity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity22.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity22.setPlannedActivity(plannedActivity25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str28 = samplingContextTag27.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag30 = samplingContextTag27.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag32 = samplingContextTag30.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str34 = samplingContextTag33.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str36 = samplingContextTag35.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        samplingContextTag35.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str40 = samplingContextTag39.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag42 = samplingContextTag39.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag32, samplingContextTag33, samplingContextTag35, samplingContextTag42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList44, samplingContextTagArray43);
        postActivity22.SamplingContextTags = samplingContextTagList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity47 = putActivity19.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity49 = putActivity47.setCollectionMethod(collectionMethod48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = putDetectioncondition50.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition53 = putDetectioncondition50.setCustomId("http");
        java.lang.String str54 = putDetectioncondition50.getName();
        java.lang.String str55 = putDetectioncondition50.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation58 = postSamplingLocation56.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation61 = observation59.setPlannedFieldResult(plannedFieldResult60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction62 = null;
        observation61.LabInstruction = labInstruction62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation65 = observation61.setStatistics(observationStatistics64);
        java.time.OffsetDateTime offsetDateTime66 = observation65.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList67 = observation65.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = observation65.setObservedProperty(observedProperty68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade70 = observation69.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails73 = labResultDetails71.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails75 = labResultDetails73.setAuditAttributes(auditAttributes74);
        observation69.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation77 = postSamplingLocation58.setAuditAttributes(auditAttributes74);
        putDetectioncondition50.AuditAttributes = auditAttributes74;
        putActivity49.AuditAttributes = auditAttributes74;
        activityWithDetails18.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity81 = activityWithDetails18.getPlannedActivity();
        activityWithDetails18.SourceActivityId = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity85 = null;
        putActivity84.Depth = quantity85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList88 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList88, metricResultArray87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity90 = putActivity84.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails91 = activityWithDetails18.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList88);
        putActivity17.MetricResults = metricResultList88;
        putActivity0.MetricResults = metricResultList88;
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(plannedActivity11);
        org.junit.Assert.assertNull(metricResultList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(putActivity17);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(samplingContextTag30);
        org.junit.Assert.assertNotNull(samplingContextTag32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(samplingContextTag42);
        org.junit.Assert.assertNotNull(samplingContextTagArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putActivity47);
        org.junit.Assert.assertNotNull(putActivity49);
        org.junit.Assert.assertNull(auditAttributes51);
        org.junit.Assert.assertNotNull(putDetectioncondition53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(postSamplingLocation58);
        org.junit.Assert.assertNotNull(observation61);
        org.junit.Assert.assertNotNull(observation65);
        org.junit.Assert.assertNull(offsetDateTime66);
        org.junit.Assert.assertNull(importHistoryEventSimpleList67);
        org.junit.Assert.assertNotNull(observation69);
        org.junit.Assert.assertNull(resultGrade70);
        org.junit.Assert.assertNotNull(labResultDetails73);
        org.junit.Assert.assertNotNull(labResultDetails75);
        org.junit.Assert.assertNotNull(postSamplingLocation77);
        org.junit.Assert.assertNull(plannedActivity81);
        org.junit.Assert.assertNotNull(metricResultArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(putActivity90);
        org.junit.Assert.assertNotNull(activityWithDetails91);
    }

    @Test
    public void test56780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56780");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue searchResultCategoricalValue0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue();
        java.lang.String str1 = searchResultCategoricalValue0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList2 = searchResultCategoricalValue0.DomainObjects;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList3 = searchResultCategoricalValue0.DomainObjects;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList4 = searchResultCategoricalValue0.DomainObjects;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList5 = searchResultCategoricalValue0.DomainObjects;
        java.lang.String str6 = searchResultCategoricalValue0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList7 = searchResultCategoricalValue0.DomainObjects;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(categoricalValueList2);
        org.junit.Assert.assertNull(categoricalValueList3);
        org.junit.Assert.assertNull(categoricalValueList4);
        org.junit.Assert.assertNull(categoricalValueList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(categoricalValueList7);
    }

    @Test
    public void test56781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56781");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setParameter("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore;
        fieldVisitReading2.ReadingType = fieldVisitReadingType5;
        java.util.ArrayList<java.lang.String> strList7 = fieldVisitReading2.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading9 = fieldVisitReading2.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList10 = fieldVisitReading9.getDatumConvertedValues();
        fieldVisitReading9.SerialNumber = "multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore + "'", fieldVisitReadingType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore));
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(fieldVisitReading9);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList10);
    }

    @Test
    public void test56782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56782");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.Description;
        java.lang.String str2 = postAccessGroup0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup4 = postAccessGroup0.setDescription("MaxDuration");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postAccessGroup4);
    }

    @Test
    public void test56783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56783");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double3 = putBulkEditResultGradesV2_2.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList20 = getObservationsV2_4.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType21 = getObservationsV2_4.FieldResultType;
        java.time.Instant instant22 = getObservationsV2_4.getEndObservedTime();
        java.lang.String str23 = getObservationsV2_4.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        java.util.ArrayList<java.lang.String> strList32 = putLocationTags31.TagUniqueIds;
        getObservationsV2_4.ProjectIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_2.setSearch((java.util.List<java.lang.String>) strList32);
        java.util.List<java.lang.String> strList35 = putBulkEditResultGradesV2_2.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription39 = locationDescription37.setIdentifier("");
        java.util.ArrayList<java.lang.String> strList40 = locationDescription39.getSecondaryFolders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType42 = getExtendedAttributes41.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str44 = deleteFieldVisits43.getSort();
        java.util.List<java.lang.String> strList45 = deleteFieldVisits43.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_46.setDataClassifications((java.util.List<java.lang.String>) strList50);
        java.util.List<java.lang.String> strList53 = getObservationsV2_46.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary54.Reviewer = "";
        java.time.Instant instant57 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary54.MeasurementTime = instant57;
        getObservationsV2_46.StartResultTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType62 = null;
        controlConditionActivity61.ControlCleaned = controlCleanedType62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse66 = locationDescriptionListServiceResponse64.setNextToken(instant65);
        controlConditionActivity61.DateCleaned = instant65;
        timeAlignedDataServiceRequest60.QueryFrom = instant65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        getObservationsV2_69.SpecimenIds = strList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray79 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = putLocationTags75.setTagUniqueIds(strList80);
        getObservationsV2_69.ActivityIds = strList80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest84 = timeAlignedDataServiceRequest60.setTimeSeriesOutputUnitIds(strList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = getObservationsV2_46.setCollectionMethodIds((java.util.List<java.lang.String>) strList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits86 = deleteFieldVisits43.setSamplingPlanIds((java.util.List<java.lang.String>) strList80);
        getExtendedAttributes41.Ids = strList80;
        locationDescription39.SecondaryFolders = strList80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen89 = importItemSpecimen36.setWarningMessages((java.util.List<java.lang.String>) strList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_90 = putBulkEditResultGradesV2_2.setLabReportIds((java.util.List<java.lang.String>) strList80);
        getObservationExportIIV2_0.TaxonIds = strList80;
        java.util.List<java.lang.String> strList92 = getObservationExportIIV2_0.getSamplingLocationGroupIds();
        getObservationExportIIV2_0.ImportHistoryEventId = "2021.4.62.0";
        getObservationExportIIV2_0.DetectionCondition = "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****";
        java.util.List<java.lang.String> strList97 = getObservationExportIIV2_0.getProjectIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(fieldResultType21);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(locationDescription39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(appliesToType42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse66);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(putLocationTags82);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest84);
        org.junit.Assert.assertNotNull(getObservationsV2_85);
        org.junit.Assert.assertNotNull(deleteFieldVisits86);
        org.junit.Assert.assertNotNull(importItemSpecimen89);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_90);
        org.junit.Assert.assertNull(strList92);
        org.junit.Assert.assertNull(strList97);
    }

    @Test
    public void test56784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56784");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        getObservationExportIIV2_0.Limit = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_7 = getObservationExportIIV2_0.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        postRecurringReport9.NextGenerationDate = instant13;
        java.time.Instant instant16 = postRecurringReport9.getNextGenerationDate();
        java.lang.String str17 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant16);
        metadataChangeTransactionListServiceRequest8.QueryFrom = instant16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_19 = getObservationExportIIV2_0.setEndModificationTime(instant16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str21 = deleteFieldVisits20.Sort;
        deleteFieldVisits20.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant24 = deleteFieldVisits20.EndStartTime;
        java.util.List<java.lang.String> strList25 = deleteFieldVisits20.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.SamplingContextTagIds;
        java.time.Instant instant28 = getObservationsV2_26.getEndModificationTime();
        java.util.List<java.lang.String> strList29 = getObservationsV2_26.Media;
        java.util.List<java.lang.String> strList30 = getObservationsV2_26.ActivityTypes;
        java.util.List<java.lang.String> strList31 = getObservationsV2_26.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        getObservationsV2_26.LabResultLabAnalysisMethodIds = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits39 = deleteFieldVisits20.setFieldTripIds((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_40 = getObservationExportIIV2_0.setMedia((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_41.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase46 = locationDatumPeriod44.setComment("'.'SSSSSSS");
        java.lang.String str47 = locationDatumPeriodBase46.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = locationDescriptionListServiceResponse48.setNextToken(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase51 = locationDatumPeriodBase46.setValidFrom(instant49);
        getChartDataV2_41.StartModificationTime = instant49;
        getObservationExportIIV2_0.EndObservedTime = instant49;
        java.time.Instant instant54 = getObservationExportIIV2_0.EndModificationTime;
        java.lang.String str55 = getObservationExportIIV2_0.CustomId;
        java.util.List<java.lang.String> strList56 = getObservationExportIIV2_0.Media;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_58 = getObservationExportIIV2_0.setImportHistoryEventId("multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_7);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str17, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getObservationExportIIV2_19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits39);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_40);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse50);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase51);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str55, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_58);
    }

    @Test
    public void test56785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56785");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup2 = searchResultAccessGroup0.setTotalCount((java.lang.Integer) 1);
        searchResultAccessGroup2.Cursor = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup5.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList9, accessGroupArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup11 = searchResultAccessGroup5.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList9);
        java.lang.String str12 = searchResultAccessGroup11.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList13 = searchResultAccessGroup11.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup15 = searchResultAccessGroup11.setTotalCount((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList16 = searchResultAccessGroup15.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList18 = searchResultAccessGroup17.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup20 = searchResultAccessGroup17.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup22 = searchResultAccessGroup17.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup23.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList27, accessGroupArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup29 = searchResultAccessGroup23.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList27);
        searchResultAccessGroup23.Cursor = "MinDuration";
        java.lang.Integer int32 = searchResultAccessGroup23.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList33 = searchResultAccessGroup23.DomainObjects;
        searchResultAccessGroup17.DomainObjects = accessGroupList33;
        searchResultAccessGroup15.DomainObjects = accessGroupList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup36 = searchResultAccessGroup2.setDomainObjects(accessGroupList33);
        org.junit.Assert.assertNotNull(searchResultAccessGroup2);
        org.junit.Assert.assertNotNull(accessGroupArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str12, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(accessGroupList13);
        org.junit.Assert.assertNotNull(searchResultAccessGroup15);
        org.junit.Assert.assertNotNull(accessGroupList16);
        org.junit.Assert.assertNull(accessGroupList18);
        org.junit.Assert.assertNotNull(searchResultAccessGroup20);
        org.junit.Assert.assertNotNull(searchResultAccessGroup22);
        org.junit.Assert.assertNotNull(accessGroupArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(accessGroupList33);
        org.junit.Assert.assertNotNull(searchResultAccessGroup36);
    }

    @Test
    public void test56786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56786");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = getChartDataV2_0.setDepthValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_0.setSort("MinInstant");
        java.lang.String str5 = getChartDataV2_4.DepthUnitId;
        java.time.Instant instant6 = getChartDataV2_4.getEndModificationTime();
        java.util.List<java.lang.String> strList7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_4.setActivityTypes(strList7);
        java.util.List<java.lang.String> strList9 = getChartDataV2_8.ResultStatuses;
        org.junit.Assert.assertNotNull(getChartDataV2_2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test56787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56787");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        java.lang.String str1 = putAttachment0.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment3 = putAttachment0.setFileSize((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment5 = putAttachment3.setContentType("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putAttachment3);
        org.junit.Assert.assertNotNull(putAttachment5);
    }

    @Test
    public void test56788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56788");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setDescription("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries7 = postBasicTimeSeries2.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str8 = postBasicTimeSeries7.SubLocationIdentifier;
        java.lang.String str9 = postBasicTimeSeries7.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries11 = postBasicTimeSeries7.setLabel("multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries14 = postBasicTimeSeries12.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str15 = postBasicTimeSeries14.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries17 = postBasicTimeSeries14.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries19 = postBasicTimeSeries14.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str20 = postBasicTimeSeries14.getUtcOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries22 = postBasicTimeSeries14.setParameter("/api");
        com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer durationSerializer23 = new com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer();
        java.time.Duration duration24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase28 = locationDatumPeriod26.setComment("'.'SSSSSSS");
        java.lang.Double double29 = locationDatumPeriodBase28.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant31 = qualifier30.DateApplied;
        java.lang.String str32 = qualifier30.User;
        java.lang.String str33 = qualifier30.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj35 = timeAlignedDataServiceRequest34.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest39 = timeAlignedDataServiceRequest34.setQueryFrom(instant37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier40 = qualifier30.setDateApplied(instant37);
        java.time.Instant instant41 = qualifier40.getDateApplied();
        locationDatumPeriodBase28.ValidFrom = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase43 = putRecurringReport25.setNextGenerationDate(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase45 = putRecurringReport25.setRecurrencePeriod("/AQUARIUS");
        java.lang.Class<?> wildcardClass46 = putRecurringReport25.getClass();
        com.google.gson.JsonSerializationContext jsonSerializationContext47 = null;
        com.google.gson.JsonElement jsonElement48 = durationSerializer23.serialize(duration24, (java.lang.reflect.Type) wildcardClass46, jsonSerializationContext47);
        postBasicTimeSeries22.GapTolerance = duration24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList51 = postCalculatedDerivedTimeSeries50.TimeSeriesUniqueIds;
        java.lang.String str52 = postCalculatedDerivedTimeSeries50.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation53.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList57, extendedAttributeValueArray56);
        postLocation53.ExtendedAttributeValues = extendedAttributeValueList57;
        postCalculatedDerivedTimeSeries50.ExtendedAttributeValues = extendedAttributeValueList57;
        java.lang.String str61 = postCalculatedDerivedTimeSeries50.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries63 = postCalculatedDerivedTimeSeries50.setComputationPeriodIdentifier("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList64 = postCalculatedDerivedTimeSeries50.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries65 = postBasicTimeSeries22.setExtendedAttributeValues(extendedAttributeValueList64);
        postBasicTimeSeries7.ExtendedAttributeValues = extendedAttributeValueList64;
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postBasicTimeSeries11);
        org.junit.Assert.assertNotNull(postBasicTimeSeries14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str15, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries17);
        org.junit.Assert.assertNotNull(postBasicTimeSeries19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(postBasicTimeSeries22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase28);
        org.junit.Assert.assertNull(double29);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest39);
        org.junit.Assert.assertNotNull(qualifier40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(recurringReportBase43);
        org.junit.Assert.assertNotNull(recurringReportBase45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(jsonElement48);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries63);
        org.junit.Assert.assertNotNull(extendedAttributeValueList64);
        org.junit.Assert.assertNotNull(postBasicTimeSeries65);
    }

    @Test
    public void test56789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56789");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList1 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType2 = fieldVisit0.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule3 = fieldVisit0.Schedule;
        java.lang.String str4 = fieldVisit0.Notes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple5 = fieldVisit0.Project;
        org.junit.Assert.assertNull(domainObjectAttachmentList1);
        org.junit.Assert.assertNull(planningStatusType2);
        org.junit.Assert.assertNull(schedule3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(projectSimple5);
    }

    @Test
    public void test56790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56790");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj1 = importItemAnalysisMethod0.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod3 = importItemAnalysisMethod0.setRowId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod5 = importItemAnalysisMethod3.setExistingItem(analysisMethod4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod7 = importItemAnalysisMethod3.setRowId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        importItemAnalysisMethod3.RowId = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod3);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod5);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod7);
    }

    @Test
    public void test56791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56791");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit deleteVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit();
        java.lang.String str1 = deleteVisit0.VisitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit deleteVisit3 = deleteVisit0.setVisitIdentifier("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit deleteVisit5 = deleteVisit3.setVisitIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        deleteVisit3.VisitIdentifier = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteVisit3);
        org.junit.Assert.assertNotNull(deleteVisit5);
    }

    @Test
    public void test56792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56792");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity1 = fieldVisitDataServiceResponse0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity2 = fieldVisitDataServiceResponse0.getLevelSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList4 = inspectionActivity3.getInspections();
        fieldVisitDataServiceResponse0.InspectionActivity = inspectionActivity3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult8 = datumConversionResult6.setTargetDatum("http");
        java.lang.Boolean boolean9 = datumConversionResult8.isValuesConverted();
        java.lang.Boolean boolean10 = datumConversionResult8.isValuesConverted();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse11 = fieldVisitDataServiceResponse0.setDatumConversionResult(datumConversionResult8);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity1);
        org.junit.Assert.assertNull(levelSurveyActivity2);
        org.junit.Assert.assertNull(inspectionList4);
        org.junit.Assert.assertNotNull(datumConversionResult8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse11);
    }

    @Test
    public void test56793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56793");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin1 = postVisitFileResponse0.getHandledByPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier4 = putQualifier2.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = timeAlignedDataServiceRequest5.setTimeSeriesUniqueIds(strList17);
        putQualifier2.GroupIdentifiers = strList17;
        java.util.ArrayList<java.lang.String> strList23 = putQualifier2.GroupIdentifiers;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier25 = putQualifier2.setDisplayName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.util.ArrayList<java.lang.String> strList26 = putQualifier25.getGroupIdentifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse27 = postVisitFileResponse0.setVisitUris(strList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        postVisitFileResponse0.VisitIdentifiers = strList33;
        org.junit.Assert.assertNull(fieldDataPlugin1);
        org.junit.Assert.assertNotNull(putQualifier4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest21);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(putQualifier25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(postVisitFileResponse27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
    }

    @Test
    public void test56794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56794");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession();
        postSession0.EncryptedPassword = "9999-12-31T23:59:59.999Z";
        postSession0.Username = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str5 = postSession0.getLocale();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession7 = postSession0.setEncryptedPassword("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str8 = postSession7.getLocale();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postSession7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test56795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56795");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant3 = qualifier2.DateApplied;
        java.lang.String str4 = qualifier2.User;
        java.lang.String str5 = qualifier2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj7 = timeAlignedDataServiceRequest6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = timeAlignedDataServiceRequest6.setQueryFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier12 = qualifier2.setDateApplied(instant9);
        getExportSpecimens0.Before = instant9;
        java.time.Instant instant14 = getExportSpecimens0.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList16 = getSpecimens15.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType18 = putUserV2_17.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities30 = getActivities19.setToStartTime(instant29);
        java.lang.String str31 = getActivities30.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList33 = getObservationsV2_32.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        getObservationsV2_32.ResultGrades = strList45;
        getActivities30.Media = strList45;
        putUserV2_17.AccessGroups = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens52 = getSpecimens15.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens53 = getExportSpecimens0.setSamplingLocationIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType55 = timeSeriesPoint54.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str57 = setting56.getKey();
        java.lang.String str58 = setting56.getDescription();
        java.lang.String str59 = setting56.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = dischargeSummary60.setMeanGageHeightMethod("hi!");
        java.lang.String str63 = dischargeSummary62.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary65 = dischargeSummary62.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj67 = timeAlignedDataServiceRequest66.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant69 = sensor68.getLastModifiedUtc();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor71 = sensor68.setLastModifiedUtc(instant70);
        java.time.Instant instant72 = sensor68.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest73 = timeAlignedDataServiceRequest66.setQueryTo(instant72);
        dischargeSummary65.MeasurementStartTime = instant72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting75 = setting56.setLastModifiedTime(instant72);
        java.time.Instant instant76 = setting56.getLastModifiedTime();
        timeSeriesPoint54.Time = instant76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens78 = getExportSpecimens53.setStartModificationTime(instant76);
        java.time.Instant instant79 = getExportSpecimens53.getStartModificationTime();
        java.util.List<java.lang.String> strList80 = getExportSpecimens53.LaboratoryIds;
        java.util.List<java.lang.String> strList81 = getExportSpecimens53.getSamplingLocationIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest11);
        org.junit.Assert.assertNotNull(qualifier12);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(userType18);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(getActivities30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getSpecimens52);
        org.junit.Assert.assertNotNull(getExportSpecimens53);
        org.junit.Assert.assertNull(pointType55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(dischargeSummary62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(dischargeSummary65);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(sensor71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest73);
        org.junit.Assert.assertNotNull(setting75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(getExportSpecimens78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test56796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56796");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        activityTemplate0.AuditAttributes = auditAttributes1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str4 = putActivityTemplate3.getId();
        java.lang.String str5 = putActivityTemplate3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate9 = putActivityTemplate3.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate9.Medium = mediumType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate12 = activityTemplate0.setMedium(mediumType10);
        java.lang.String str13 = activityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str15 = metricConfiguration14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty16.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = metricConfiguration14.setObservedProperty(observedProperty16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType20 = observedProperty16.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup22 = postObservedProperty21.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit24 = null;
        quantity23.Unit = unit24;
        postObservedProperty21.LowerLimit = quantity23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity27 = postObservedProperty21.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit28 = quantity27.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty29 = observedProperty16.setUpperLimit(quantity27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate30 = activityTemplate0.setDepth(quantity27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        activityTemplate31.AuditAttributes = auditAttributes32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod34 = activityTemplate31.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType35 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.SAMPLE_INTEGRATED_VERTICAL_PROFILE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate36 = activityTemplate31.setType(activityTemplateType35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str38 = metricConfiguration37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty39.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration42 = metricConfiguration37.setObservedProperty(observedProperty39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType43 = observedProperty39.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup45 = postObservedProperty44.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit47 = null;
        quantity46.Unit = unit47;
        postObservedProperty44.LowerLimit = quantity46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = postObservedProperty44.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = quantity50.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty52 = observedProperty39.setUpperLimit(quantity50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj54 = postObservedProperty53.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate57 = postFieldVisitActivityWithTemplate55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation60 = observation58.setPlannedFieldResult(plannedFieldResult59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction61 = null;
        observation60.LabInstruction = labInstruction61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation64 = observation60.setStatistics(observationStatistics63);
        java.time.OffsetDateTime offsetDateTime65 = observation64.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit67 = null;
        quantity66.Unit = unit67;
        observation64.Depth = quantity66;
        postFieldVisitActivityWithTemplate57.Depth = quantity66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit71 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity72 = quantity66.setUnit(unit71);
        postObservedProperty53.LowerLimit = quantity66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = unit74.AuditAttributes;
        unit74.BaseMultiplier = 0.0d;
        postObservedProperty53.DefaultUnit = unit74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity79 = quantity50.setUnit(unit74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate80 = activityTemplate31.setDepth(quantity50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate81 = activityTemplate30.setDepth(quantity50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate83 = activityTemplate81.setId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putActivityTemplate9);
        org.junit.Assert.assertTrue("'" + mediumType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(metricConfiguration19);
        org.junit.Assert.assertNull(resultType20);
        org.junit.Assert.assertNull(unitGroup22);
        org.junit.Assert.assertNotNull(quantity27);
        org.junit.Assert.assertNull(unit28);
        org.junit.Assert.assertNotNull(observedProperty29);
        org.junit.Assert.assertNotNull(activityTemplate30);
        org.junit.Assert.assertNull(collectionMethod34);
        org.junit.Assert.assertTrue("'" + activityTemplateType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.SAMPLE_INTEGRATED_VERTICAL_PROFILE + "'", activityTemplateType35.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.SAMPLE_INTEGRATED_VERTICAL_PROFILE));
        org.junit.Assert.assertNotNull(activityTemplate36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(metricConfiguration42);
        org.junit.Assert.assertNull(resultType43);
        org.junit.Assert.assertNull(unitGroup45);
        org.junit.Assert.assertNotNull(quantity50);
        org.junit.Assert.assertNull(unit51);
        org.junit.Assert.assertNotNull(observedProperty52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate57);
        org.junit.Assert.assertNotNull(observation60);
        org.junit.Assert.assertNotNull(observation64);
        org.junit.Assert.assertNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(quantity72);
        org.junit.Assert.assertNull(auditAttributes75);
        org.junit.Assert.assertNotNull(quantity79);
        org.junit.Assert.assertNotNull(activityTemplate80);
        org.junit.Assert.assertNotNull(activityTemplate81);
        org.junit.Assert.assertNotNull(activityTemplate83);
    }

    @Test
    public void test56797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56797");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList1 = dischargeActivity0.getEngineeredStructureDischargeActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList4, adcpDischargeActivityArray3);
        dischargeActivity2.AdcpDischargeActivities = adcpDischargeActivityList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList8, engineeredStructureDischargeActivityArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity10 = dischargeActivity2.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList8);
        dischargeActivity0.EngineeredStructureDischargeActivities = engineeredStructureDischargeActivityList8;
        org.junit.Assert.assertNull(engineeredStructureDischargeActivityList1);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dischargeActivity10);
    }

    @Test
    public void test56798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56798");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str1 = appliedTag0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag3 = appliedTag0.setName("hi!");
        java.lang.String str4 = appliedTag0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag6 = appliedTag0.setKey("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str7 = appliedTag6.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(appliedTag3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(appliedTag6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56799");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant1 = timeSeriesDescription0.getCorrectedStartTime();
        java.lang.String str2 = timeSeriesDescription0.getComputationIdentifier();
        timeSeriesDescription0.TimeSeriesType = "-PT87591240H";
        java.lang.String str5 = timeSeriesDescription0.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        java.util.List<java.lang.String> strList13 = getObservationsV2_6.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        getObservationsV2_6.StartResultTime = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = timeSeriesDescription0.setCorrectedStartTime(instant17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities21.Limit = 10;
        java.util.List<java.lang.String> strList24 = getActivities21.ActivityTemplateId;
        java.lang.String str25 = getActivities21.Sort;
        java.util.List<java.lang.String> strList26 = getActivities21.CollectionMethodIds;
        java.lang.String str27 = getActivities21.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList29 = fieldVisitDescriptionListServiceResponse28.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse28.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType36 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary31.BaseFlow = baseFlowType36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType38 = dischargeSummary31.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList40 = ratingModelDescriptionListServiceResponse39.RatingModelDescriptions;
        java.time.Instant instant41 = ratingModelDescriptionListServiceResponse39.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType43 = calibrationCheck42.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = calibrationCheck42.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary46.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse49.setNextToken(instant50);
        dischargeSummary46.MeasurementTime = instant50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = locationDescriptionListServiceResponse45.setNextToken(instant50);
        java.time.Instant instant54 = locationDescriptionListServiceResponse45.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck55 = calibrationCheck42.setTime(instant54);
        java.time.Instant instant56 = calibrationCheck55.Time;
        ratingModelDescriptionListServiceResponse39.NextToken = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary31.setMeasurementEndTime(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse59 = fieldVisitDescriptionListServiceResponse28.setResponseTime(instant56);
        getActivities21.FromStartTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription61 = timeSeriesDescription20.setRawStartTime(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription63 = timeSeriesDescription20.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription64.UtcOffset = 100.0d;
        timeSeriesDescription64.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary72 = dischargeSummary70.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse73.setNextToken(instant74);
        dischargeSummary70.MeasurementTime = instant74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse77 = locationDescriptionListServiceResponse69.setNextToken(instant74);
        java.time.Instant instant78 = locationDescriptionListServiceResponse69.getNextToken();
        java.time.Instant instant79 = locationDescriptionListServiceResponse69.getNextToken();
        timeSeriesDescription64.RawEndTime = instant79;
        java.lang.String str81 = timeSeriesDescription64.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList83 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList83, extendedAttributeArray82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription85 = timeSeriesDescription64.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList83);
        timeSeriesDescription63.ExtendedAttributes = extendedAttributeList83;
        java.time.Instant instant87 = timeSeriesDescription63.getRawStartTime();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(timeSeriesDescription20);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(fieldVisitDescriptionList29);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + baseFlowType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType36.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType38.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList40);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNull(calibrationCheckType43);
        org.junit.Assert.assertNull(doubleWithDisplay44);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(calibrationCheck55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNotNull(publishServiceResponse59);
        org.junit.Assert.assertNotNull(timeSeriesDescription61);
        org.junit.Assert.assertNotNull(timeSeriesDescription63);
        org.junit.Assert.assertNotNull(dischargeSummary72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(extendedAttributeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription85);
        org.junit.Assert.assertNotNull(instant87);
    }

    @Test
    public void test56800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56800");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        importError0.ErrorCode = "http://MaxDurationhttp";
        importError0.ErrorMessage = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        importError0.ErrorCode = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
    }

    @Test
    public void test56801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56801");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest2 = upchainProcessorListByTimeSeriesServiceRequest0.setTimeSeriesUniqueId("MaxDuration");
        java.time.Instant instant3 = upchainProcessorListByTimeSeriesServiceRequest0.QueryFrom;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest5 = upchainProcessorListByTimeSeriesServiceRequest0.setTimeSeriesUniqueId("PT87591240H");
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest5);
    }

    @Test
    public void test56802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56802");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset();
        postBaseStandardReferenceDatumOffset0.LocationUniqueId = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset4 = postBaseStandardReferenceDatumOffset0.setMethod("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        postBaseStandardReferenceDatumOffset4.Method = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.lang.String str7 = postBaseStandardReferenceDatumOffset4.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset9 = postBaseStandardReferenceDatumOffset4.setOffsetToBaseReference((java.lang.Double) 10.0d);
        postBaseStandardReferenceDatumOffset9.LocationUniqueId = "MinDuration";
        postBaseStandardReferenceDatumOffset9.Method = "";
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str7, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatumOffset9);
    }

    @Test
    public void test56803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56803");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        getChartDataV2_4.ObservedPropertyIds = strList23;
        getChartDataV2_4.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList33 = getExportObservations32.getLabReportIds();
        java.lang.String str34 = getExportObservations32.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj36 = getActivityTemplates35.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        getObservationsV2_37.QualityControlTypes = strList48;
        getActivityTemplates35.Type = strList48;
        getExportObservations32.AnalyticalGroupIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_54 = getChartDataV2_4.setAnalysisMethodIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations55 = getExportObservations0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList56 = getExportObservations0.ObservedPropertyIds;
        java.util.List<java.lang.String> strList57 = null;
        getExportObservations0.SamplingLocationIds = strList57;
        java.time.Instant instant59 = getExportObservations0.getStartModificationTime();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(getChartDataV2_54);
        org.junit.Assert.assertNotNull(getExportObservations55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(instant59);
    }

    @Test
    public void test56804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56804");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary1.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary5 = observedPropertyImportSummary1.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList7, importItemObservedPropertyArray6);
        observedPropertyImportSummary1.ErrorImportItems = importItemObservedPropertyList7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary11 = observedPropertyImportSummary1.setSuccessCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList12 = observedPropertyImportSummary11.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary13 = observedPropertyImportSummary0.setErrorImportItems(importItemObservedPropertyList12);
        java.lang.Integer int14 = observedPropertyImportSummary13.SkippedCount;
        observedPropertyImportSummary13.InvalidRowsCsvUrl = "-PT87591240H";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList17 = observedPropertyImportSummary13.ImportJobErrors;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList18 = observedPropertyImportSummary13.ImportItems;
        org.junit.Assert.assertNotNull(observedPropertyImportSummary5);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary11);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList12);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(importErrorList17);
        org.junit.Assert.assertNull(importItemObservedPropertyList18);
    }

    @Test
    public void test56805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56805");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType3 = fieldVisitSimple0.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple4 = fieldVisitSimple0.getSamplingLocation();
        java.lang.String str5 = fieldVisitSimple0.Id;
        fieldVisitSimple0.Participants = "2021.8.9990";
        org.junit.Assert.assertNull(planningStatusType3);
        org.junit.Assert.assertNull(samplingLocationSimple4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test56806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56806");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        putSpecimen0.Name = "-PT87591240H";
        java.lang.Boolean boolean3 = putSpecimen0.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSpecimen5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str8 = shippingContainer7.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity9.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = postActivity9.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity15 = postActivity13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer16 = shippingContainer7.setAuditAttributes(auditAttributes14);
        java.lang.String str17 = shippingContainer16.getId();
        putSpecimen5.ShippingContainer = shippingContainer16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = shippingContainer16.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer21 = shippingContainer16.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postActivity13);
        org.junit.Assert.assertNotNull(postActivity15);
        org.junit.Assert.assertNotNull(shippingContainer16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(auditAttributes19);
        org.junit.Assert.assertNotNull(shippingContainer21);
    }

    @Test
    public void test56807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56807");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.getComment();
        putTaxon0.ParentId = "-PT87591240H";
        java.lang.String str6 = putTaxon0.ItisUrl;
        java.lang.String str7 = putTaxon0.getComment();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56808");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str1 = postBasicTimeSeries0.UtcOffset;
        postBasicTimeSeries0.SubLocationIdentifier = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries0.setSubLocationIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries7 = postBasicTimeSeries0.setUtcOffset("/AQUARIUS/Publish/v2");
        java.lang.String str8 = postBasicTimeSeries0.getComputationIdentifier();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test56809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56809");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod4 = postLabAnalysisMethod2.setAuditAttributes(auditAttributes3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList6, observedPropertyArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod8 = postLabAnalysisMethod4.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList6);
        postAnalysisMethod0.ObservedProperties = observedPropertyList6;
        java.lang.String str10 = postAnalysisMethod0.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList12 = postAnalysisMethod11.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = postLabAnalysisMethod13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList17, observedPropertyArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = postLabAnalysisMethod15.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList17);
        postAnalysisMethod11.ObservedProperties = observedPropertyList17;
        postAnalysisMethod0.ObservedProperties = observedPropertyList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = postAnalysisMethod0.AuditAttributes;
        java.lang.String str23 = postAnalysisMethod0.Context;
        postAnalysisMethod0.Context = "PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod27 = postAnalysisMethod0.setDescription("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod29 = postAnalysisMethod0.setContext("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str30 = postAnalysisMethod0.Id;
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod4);
        org.junit.Assert.assertNotNull(observedPropertyArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList12);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod15);
        org.junit.Assert.assertNotNull(observedPropertyArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod19);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(postAnalysisMethod27);
        org.junit.Assert.assertNotNull(postAnalysisMethod29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test56810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56810");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries4 = postStatisticalDerivedTimeSeries2.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = postStatisticalDerivedTimeSeries2.setLabel("'.'SSSSSSS");
        importItemObject0.Errors = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj9 = putLocationType8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest10.ReportTitle = "MinDuration";
        java.lang.String str13 = reportListServiceRequest10.getLocationUniqueId();
        java.time.Instant instant14 = null;
        reportListServiceRequest10.CreatedFrom = instant14;
        java.lang.String[] strArray28 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        reportListServiceRequest10.TagValues = strList29;
        putLocationType8.ExtendedAttributeDefinitionIds = strList29;
        importItemObject0.Fields = strList29;
        importItemObject0.RowId = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport();
        importItemObject0.Errors = getRecurringReport36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType38 = importItemObject0.getStatus();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries4);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(importItemStatusType38);
    }

    @Test
    public void test56811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56811");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostFieldDataPluginFile postFieldDataPluginFile0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostFieldDataPluginFile();
        java.lang.Object obj1 = postFieldDataPluginFile0.getResponseType();
        java.lang.Integer int2 = postFieldDataPluginFile0.getPluginPriority();
        java.lang.Object obj3 = postFieldDataPluginFile0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile4 = postFieldDataPluginFile0.getFile();
        java.lang.Object obj5 = postFieldDataPluginFile0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile6 = null;
        postFieldDataPluginFile0.File = iHttpFile6;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertNull(iHttpFile4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
    }

    @Test
    public void test56812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56812");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.lang.String str63 = deleteObservationsV2_62.FilterId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType66 = null;
        controlConditionActivity65.ControlCleaned = controlCleanedType66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant69 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = locationDescriptionListServiceResponse68.setNextToken(instant69);
        controlConditionActivity65.DateCleaned = instant69;
        timeAlignedDataServiceRequest64.QueryFrom = instant69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray83 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags86 = putLocationTags79.setTagUniqueIds(strList84);
        getObservationsV2_73.ActivityIds = strList84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest88 = timeAlignedDataServiceRequest64.setTimeSeriesOutputUnitIds(strList84);
        java.time.Instant instant89 = timeAlignedDataServiceRequest88.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_90 = deleteObservationsV2_62.setStartModificationTime(instant89);
        deleteObservationsV2_90.Cursor = "http";
        java.lang.String str93 = deleteObservationsV2_90.FieldVisitId;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str63, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse70);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(putLocationTags86);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(deleteObservationsV2_90);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test56813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56813");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium searchResultMedium0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium();
        java.lang.String str1 = searchResultMedium0.getCursor();
        searchResultMedium0.TotalCount = 100;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56814");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary4 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple5 = importSummary0.ImportHistoryEventSimple;
        importSummary0.UpdateCount = 10;
        java.lang.Integer int8 = importSummary0.getSuccessCount();
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(importSummary4);
        org.junit.Assert.assertNotNull(importHistoryEventSimple5);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test56815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56815");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity2 = null;
        putActivity1.PlannedActivity = plannedActivity2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str5 = postLaboratory4.Address;
        java.lang.String str6 = postLaboratory4.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity9 = samplingPlanPlannedActivity7.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = auditAttributes10.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity9.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = samplingPlanPlannedActivity9.AuditAttributes;
        postLaboratory4.AuditAttributes = auditAttributes14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory17 = postLaboratory4.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon19 = taxonomicResult18.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = taxonomicResult18.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan22.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan22.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup27 = samplingPlan22.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan29 = samplingPlan22.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag30 = putTag21.setAuditAttributes(auditAttributes28);
        taxonomicResult18.AuditAttributes = auditAttributes28;
        postLaboratory17.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity33 = putActivity1.setAuditAttributes(auditAttributes28);
        postTaxon0.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon36 = postTaxon0.setComment("http://MaxDurationhttp/json/reply/Double");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity9);
        org.junit.Assert.assertNotNull(auditAttributes12);
        org.junit.Assert.assertNotNull(auditAttributes14);
        org.junit.Assert.assertNotNull(postLaboratory17);
        org.junit.Assert.assertNull(taxon19);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup27);
        org.junit.Assert.assertNotNull(samplingPlan29);
        org.junit.Assert.assertNotNull(putTag30);
        org.junit.Assert.assertNotNull(putActivity33);
        org.junit.Assert.assertNotNull(postTaxon36);
    }

    @Test
    public void test56816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56816");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList1 = fieldVisit0.Attachments;
        java.time.OffsetDateTime offsetDateTime2 = null;
        fieldVisit0.EndTime = offsetDateTime2;
        java.lang.String str4 = fieldVisit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit6 = fieldVisit0.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple7 = fieldVisit0.Project;
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit9 = fieldVisit0.setEndTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit11 = fieldVisit0.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation12.setPlannedFieldResult(plannedFieldResult13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction15 = null;
        observation14.LabInstruction = labInstruction15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation14.setStatistics(observationStatistics17);
        java.time.OffsetDateTime offsetDateTime19 = observation18.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        observation18.Depth = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation18.setNumericResult(numericResult24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation25.setLabResultDetails(labResultDetails26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime29 = postSchedule28.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime31 = putSchedule30.StartDate;
        java.time.OffsetDateTime offsetDateTime32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = putSchedule30.setEndDate(offsetDateTime32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = putSchedule33.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime35 = putSchedule33.getEndDate();
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule37 = putSchedule33.setStartDate(offsetDateTime36);
        java.lang.Integer int38 = putSchedule33.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule33.RecurrenceDayMonthly = recurrenceDayMonthlyType39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule41 = postSchedule28.setRecurrenceDayMonthly(recurrenceDayMonthlyType39);
        java.time.OffsetDateTime offsetDateTime42 = null;
        postSchedule28.StartDate = offsetDateTime42;
        java.time.OffsetDateTime offsetDateTime44 = null;
        postSchedule28.EndDate = offsetDateTime44;
        java.time.OffsetDateTime offsetDateTime46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule47 = postSchedule28.setEndDate(offsetDateTime46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject50 = postProject48.setAuditAttributes(auditAttributes49);
        java.time.OffsetDateTime offsetDateTime51 = null;
        postProject48.StartTime = offsetDateTime51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity53.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity57 = postActivity53.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity59 = postActivity57.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject60 = postProject48.setAuditAttributes(auditAttributes58);
        postSchedule28.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation62 = observation27.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit63 = fieldVisit11.setAuditAttributes(auditAttributes58);
        org.junit.Assert.assertNull(domainObjectAttachmentList1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNull(projectSimple7);
        org.junit.Assert.assertNotNull(fieldVisit9);
        org.junit.Assert.assertNotNull(fieldVisit11);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNull(offsetDateTime29);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(putSchedule33);
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(putSchedule37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule41);
        org.junit.Assert.assertNotNull(postSchedule47);
        org.junit.Assert.assertNotNull(postProject50);
        org.junit.Assert.assertNotNull(postActivity57);
        org.junit.Assert.assertNotNull(postActivity59);
        org.junit.Assert.assertNotNull(postProject60);
        org.junit.Assert.assertNotNull(observation62);
        org.junit.Assert.assertNotNull(fieldVisit63);
    }

    @Test
    public void test56817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56817");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics0.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        observationStatistics0.P50 = 1.0d;
        java.lang.String str5 = observationStatistics0.ObservedPropertyId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics7 = observationStatistics0.setMin((java.lang.Double) 0.0d);
        observationStatistics7.Min = (-1.0d);
        observationStatistics7.P25 = 0.0d;
        java.lang.Double double12 = observationStatistics7.P75;
        java.lang.Double double13 = observationStatistics7.Max;
        java.lang.Integer int14 = observationStatistics7.Count;
        java.lang.String str15 = observationStatistics7.getSamplingLocationId();
        observationStatistics7.SamplingLocationId = "-PT87591240H";
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str5, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(observationStatistics7);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test56818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56818");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        java.lang.String str3 = monitoringMethod0.ParameterUniqueId;
        java.lang.String str4 = monitoringMethod0.ParameterId;
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS" + "'", str3, "/AQUARIUS");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test56819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56819");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getFieldTripIds();
        java.util.List<java.lang.String> strList2 = getSpecimens0.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType15 = null;
        controlConditionActivity14.ControlCleaned = controlCleanedType15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        controlConditionActivity14.DateCleaned = instant18;
        timeAlignedDataServiceRequest13.QueryFrom = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse3.setNextToken(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens23 = getSpecimens0.setEndModificationTime(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag26 = tag24.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str27 = tag26.Key;
        java.util.ArrayList<java.lang.String> strList28 = tag26.getPickListValues();
        java.lang.Boolean boolean29 = tag26.AppliesToLocationNotes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent32 = importHistoryEvent30.setImportTime(offsetDateTime31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType33 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent34 = importHistoryEvent32.setImportType(importType33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean37 = roleFlattened36.CanRemoveFieldVisits;
        roleFlattened36.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str41 = putLocationType40.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_42.setDataClassifications((java.util.List<java.lang.String>) strList46);
        getObservationsV2_48.DepthUnitCustomId = "hi!";
        java.lang.String str51 = getObservationsV2_48.CustomId;
        java.util.List<java.lang.String> strList52 = getObservationsV2_48.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.QualityControlTypes = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = getObservationsV2_48.setMedia((java.util.List<java.lang.String>) strList64);
        putLocationType40.ExtendedAttributeDefinitionIds = strList64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase70 = roleFlattened36.setRoleApprovalTransitions(strList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits71 = deleteFieldVisits35.setIds((java.util.List<java.lang.String>) strList64);
        importHistoryEvent32.DomainObjectIds = strList64;
        tag26.PickListValues = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens74 = getSpecimens0.setSamplingLocationIds((java.util.List<java.lang.String>) strList64);
        java.util.List<java.lang.String> strList75 = getSpecimens0.Search;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType78 = gapToleranceOperation77.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList80 = fieldVisitDataServiceResponse79.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse82 = fieldVisitDataServiceResponse79.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary83.Reviewer = "";
        java.time.Instant instant86 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary83.MeasurementTime = instant86;
        fieldVisitDataServiceResponse79.ResponseTime = instant86;
        gapToleranceOperation77.DateAppliedUtc = instant86;
        attachment76.DateLastAccessed = instant86;
        getSpecimens0.Before = instant86;
        java.util.List<java.lang.String> strList92 = getSpecimens0.FieldVisitId;
        java.lang.String str93 = getSpecimens0.Sort;
        java.util.List<java.lang.String> strList94 = getSpecimens0.FieldTripIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(getSpecimens23);
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNotNull(importHistoryEvent32);
        org.junit.Assert.assertTrue("'" + importType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType33.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent34);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(getObservationsV2_68);
        org.junit.Assert.assertNotNull(roleFlattenedBase70);
        org.junit.Assert.assertNotNull(deleteFieldVisits71);
        org.junit.Assert.assertNotNull(getSpecimens74);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNull(metadataChangeOperationType78);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList80);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse82);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNull(strList92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(strList94);
    }

    @Test
    public void test56820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56820");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType8 = null;
        getObservationsV2_0.FieldResultType = fieldResultType8;
        java.util.List<java.lang.String> strList10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_0.setDataClassifications(strList10);
        getObservationsV2_0.ActivityCustomId = "-PT87591240H";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
    }

    @Test
    public void test56821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56821");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        java.lang.String str3 = postDatumConvertedTimeSeries0.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList5 = postCalculatedDerivedTimeSeries4.TimeSeriesUniqueIds;
        java.lang.String str6 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation7.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList11, extendedAttributeValueArray10);
        postLocation7.ExtendedAttributeValues = extendedAttributeValueList11;
        postCalculatedDerivedTimeSeries4.ExtendedAttributeValues = extendedAttributeValueList11;
        java.lang.String str15 = postCalculatedDerivedTimeSeries4.ComputationPeriodIdentifier;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList16 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        postDatumConvertedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries19 = postDatumConvertedTimeSeries0.setPublish((java.lang.Boolean) false);
        java.lang.Boolean boolean20 = postDatumConvertedTimeSeries0.Publish;
        java.lang.Boolean boolean21 = postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum;
        java.lang.String str22 = postDatumConvertedTimeSeries0.Unit;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(extendedAttributeValueList16);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test56822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56822");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesAppend postTimeSeriesAppend0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesAppend();
        java.lang.Object obj1 = postTimeSeriesAppend0.getResponseType();
        postTimeSeriesAppend0.UniqueId = "POST";
        postTimeSeriesAppend0.UniqueId = "MaxInstant";
        postTimeSeriesAppend0.UniqueId = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval9 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend10 = postTimeSeriesOverwriteAppend8.setTimeRange(interval9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval11 = postTimeSeriesOverwriteAppend10.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] timeSeriesPointArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] { timeSeriesPoint12 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>) timeSeriesPointList14, timeSeriesPointArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend16 = postTimeSeriesOverwriteAppend10.setPoints(timeSeriesPointList14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend18 = postTimeSeriesOverwriteAppend16.setUniqueId("MinDuration");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList19 = postTimeSeriesOverwriteAppend16.getPoints();
        postTimeSeriesAppend0.Points = timeSeriesPointList19;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList21 = postTimeSeriesAppend0.Points;
        java.lang.Object obj22 = postTimeSeriesAppend0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend10);
        org.junit.Assert.assertNull(interval11);
        org.junit.Assert.assertNotNull(timeSeriesPointArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend16);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend18);
        org.junit.Assert.assertNotNull(timeSeriesPointList19);
        org.junit.Assert.assertNotNull(timeSeriesPointList21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
    }

    @Test
    public void test56823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56823");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnit deleteUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnit();
        deleteUnit0.Id = "/AQUARIUS/Provisioning/v1";
        deleteUnit0.Id = "9999-12-31T23:59:59.999Z";
        deleteUnit0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str7 = deleteUnit0.Id;
        java.lang.String str8 = deleteUnit0.getId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test56824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56824");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession();
        java.lang.String str1 = postSession0.EncryptedPassword;
        postSession0.Username = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56825");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject4 = postProject2.setCustomId("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str5 = postProject4.ApprovalAgency;
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNotNull(postProject4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test56826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56826");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest3 = fieldVisitDataByLocationServiceRequest1.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty4 = importItemObservedProperty0.setErrors((java.lang.Object) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray9 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = putLocationTags5.setTagUniqueIds(strList10);
        java.util.ArrayList<java.lang.String> strList13 = putLocationTags12.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty14 = importItemObservedProperty0.setWarningMessages((java.util.List<java.lang.String>) strList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList16 = importItemObject15.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList18, importChangeItemArray17);
        importItemObject15.ItemComparison = importChangeItemList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject29 = importItemObject15.setExistingItem((java.lang.Object) putLocationTags21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser32 = openIdConnectUser30.setIdentifier("");
        java.lang.Boolean boolean33 = openIdConnectUser32.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject34 = importItemObject15.setErrors((java.lang.Object) openIdConnectUser32);
        importItemObject15.Input = "MaxInstant";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList37 = importItemObject15.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty38 = importItemObservedProperty14.setItemComparison(importChangeItemList37);
        java.lang.Object obj39 = importItemObservedProperty38.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str41 = labInstructionTemplate40.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime43 = putSchedule42.StartDate;
        java.time.OffsetDateTime offsetDateTime44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule45 = putSchedule42.setEndDate(offsetDateTime44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = putSchedule45.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime47 = null;
        putSchedule45.LastGenerationDate = offsetDateTime47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType49 = putSchedule45.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = plannedFieldResult50.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails54 = labResultDetails52.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails56 = labResultDetails54.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult57 = plannedFieldResult50.setAuditAttributes(auditAttributes55);
        putSchedule45.AuditAttributes = auditAttributes55;
        labInstructionTemplate40.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty60.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity63 = observedProperty60.getUpperLimit();
        java.lang.String str64 = observedProperty60.Id;
        labInstructionTemplate40.ObservedProperty = observedProperty60;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList66 = observedProperty60.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation68.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult71 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation72 = observation68.setCategoricalResult(categoricalResult71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList74 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList74, importHistoryEventSimpleArray73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation76 = observation68.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList74);
        observedProperty67.ImportHistoryEventSimples = importHistoryEventSimpleList74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit78 = observedProperty67.getDefaultUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType79 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty80 = observedProperty67.setResultType(resultType79);
        observedProperty60.ResultType = resultType79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity82 = observedProperty60.LowerLimit;
        observedProperty60.Name = "";
        importItemObservedProperty38.ExistingItem = observedProperty60;
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest3);
        org.junit.Assert.assertNotNull(importItemObservedProperty4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(putLocationTags12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(importItemObservedProperty14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(importChangeItemArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNotNull(importItemObject29);
        org.junit.Assert.assertNotNull(openIdConnectUser32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(importItemObject34);
        org.junit.Assert.assertNotNull(importChangeItemList37);
        org.junit.Assert.assertNotNull(importItemObservedProperty38);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + true + "'", obj39, true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(putSchedule45);
        org.junit.Assert.assertNull(auditAttributes46);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType49);
        org.junit.Assert.assertNull(auditAttributes51);
        org.junit.Assert.assertNotNull(labResultDetails54);
        org.junit.Assert.assertNotNull(labResultDetails56);
        org.junit.Assert.assertNotNull(plannedFieldResult57);
        org.junit.Assert.assertNull(quantity63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(importHistoryEventSimpleList66);
        org.junit.Assert.assertNotNull(observation72);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(observation76);
        org.junit.Assert.assertNull(unit78);
        org.junit.Assert.assertTrue("'" + resultType79 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType79.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(observedProperty80);
        org.junit.Assert.assertNull(quantity82);
    }

    @Test
    public void test56827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56827");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2();
        java.lang.String str1 = postObservationsDryRunV2_0.FileType;
        java.lang.Boolean boolean2 = postObservationsDryRunV2_0.LinkFieldVisitsForNewObservations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_4 = postObservationsDryRunV2_0.setTimeZoneOffset("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = postObservationsDryRunV2_4.TimeZoneOffset;
        java.lang.Boolean boolean6 = postObservationsDryRunV2_4.LinkFieldVisitsForNewObservations;
        java.lang.Boolean boolean7 = postObservationsDryRunV2_4.getLinkFieldVisitsForNewObservations();
        java.lang.String str8 = postObservationsDryRunV2_4.getFileType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test56828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56828");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetSensor getSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetSensor getSensor2 = getSensor0.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetSensor getSensor4 = getSensor2.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = getSensor4.UniqueId;
        java.lang.Object obj6 = getSensor4.getResponseType();
        java.lang.String str7 = getSensor4.getUniqueId();
        java.lang.String str8 = getSensor4.getUniqueId();
        org.junit.Assert.assertNotNull(getSensor2);
        org.junit.Assert.assertNotNull(getSensor4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test56829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56829");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        java.lang.String str1 = importSummarySpecimen0.getSummaryReportText();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen3 = importSummarySpecimen0.setExpectedCount((java.lang.Integer) (-1));
        java.lang.Integer int4 = importSummarySpecimen0.getSkippedCount();
        importSummarySpecimen0.InvalidRowsCsvUrl = "****82feecb1-0c54-43a1-b60a-302dc897d638****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(importSummarySpecimen3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test56830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56830");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str7 = dischargeChannelMeasurement1.Channel;
        dischargeChannelMeasurement1.Channel = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement1.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark14 = locationRemark12.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark17 = locationRemark15.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        locationRemark17.FromTime = instant19;
        locationRemark14.CreateTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement23 = dischargeChannelMeasurement11.setEndTime(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity24 = volumetricDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = volumetricDischargeActivity24.MeasurementContainerVolume;
        java.lang.Boolean boolean26 = volumetricDischargeActivity24.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str28 = levelSurveyMeasurement27.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = levelSurveyMeasurement27.MeasuredElevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = levelSurveyMeasurement27.getMeasuredElevation();
        java.time.Instant instant31 = levelSurveyMeasurement27.MeasurementTime;
        java.lang.String str32 = levelSurveyMeasurement27.getReferencePointUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str34 = pointVelocityDischargeActivity33.getModel();
        java.lang.String str35 = pointVelocityDischargeActivity33.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = null;
        pointVelocityDischargeActivity33.Width = quantityWithDisplay36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType38 = null;
        pointVelocityDischargeActivity33.StartPoint = startPointType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity41 = pointVelocityDischargeActivity33.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        pointVelocityDischargeActivity33.MeterInspectedAfter = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity33.setSoftwareVersion("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity47 = pointVelocityDischargeActivity33.setSerialNumber("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity50 = pointVelocityDischargeActivity48.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity48.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity54 = pointVelocityDischargeActivity48.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity56 = pointVelocityDischargeActivity54.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = null;
        crossSectionPoint57.Distance = quantityWithDisplay58;
        crossSectionPoint57.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay62 = crossSectionPoint57.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint64 = crossSectionPoint57.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay65 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint66 = crossSectionPoint64.setElevation(quantityWithDisplay65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay67 = null;
        crossSectionPoint66.Depth = quantityWithDisplay67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint66.Depth = datumConvertedQuantityWithDisplay69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay71 = crossSectionPoint66.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity72 = pointVelocityDischargeActivity54.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity73 = pointVelocityDischargeActivity47.setDistanceToMeter(quantityWithDisplay71);
        levelSurveyMeasurement27.MeasuredElevation = quantityWithDisplay71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity75 = volumetricDischargeActivity24.setMeasurementContainerVolume(quantityWithDisplay71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity77 = volumetricDischargeActivity75.setIsValid((java.lang.Boolean) false);
        volumetricDischargeActivity75.IsObserved = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity81 = volumetricDischargeActivity75.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement82 = volumetricDischargeActivity81.DischargeChannelMeasurement;
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNotNull(locationRemark14);
        org.junit.Assert.assertNotNull(locationRemark17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement23);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity24);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(quantityWithDisplay29);
        org.junit.Assert.assertNull(quantityWithDisplay30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity41);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity47);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity50);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity54);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity56);
        org.junit.Assert.assertNull(quantityWithDisplay62);
        org.junit.Assert.assertNotNull(crossSectionPoint64);
        org.junit.Assert.assertNotNull(crossSectionPoint66);
        org.junit.Assert.assertNotNull(quantityWithDisplay71);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity72);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity73);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity75);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity77);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity81);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement82);
    }

    @Test
    public void test56831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56831");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint0.MdlValue;
        java.lang.Double double4 = chartDataPoint0.Value;
        java.lang.Double double5 = chartDataPoint0.getDepthValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition6 = chartDataPoint0.ResultDetectionCondition;
        chartDataPoint0.DepthValue = 100.0d;
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(resultDetectionCondition6);
    }

    @Test
    public void test56832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56832");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setIdentifier("");
        openIdConnectUser0.SubjectIdentifier = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user6 = openIdConnectUser0.setCanLaunchRatingDevelopmentToolbox((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user8 = user6.setEmail("http://MaxDurationhttp/json/reply/Integer");
        java.lang.Boolean boolean9 = user8.Active;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user11 = user8.setFirstName("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.lang.String str12 = user11.getFirstName();
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNotNull(user6);
        org.junit.Assert.assertNotNull(user8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(user11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str12, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
    }

    @Test
    public void test56833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56833");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute();
        putExtendedAttribute0.Key = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        putExtendedAttribute0.Required = true;
        java.lang.String str5 = putExtendedAttribute0.Key;
        java.lang.Boolean boolean6 = putExtendedAttribute0.isRequired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute8 = putExtendedAttribute0.setUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute10 = putExtendedAttribute0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList11 = null;
        putExtendedAttribute0.Applicability = extendedAttributeApplicabilityList11;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(putExtendedAttribute8);
        org.junit.Assert.assertNotNull(putExtendedAttribute10);
    }

    @Test
    public void test56834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56834");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setParameter("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = methodOperation4.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation7 = methodOperation4.setOperationType(metadataChangeOperationType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation9 = methodOperation7.setComments("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant11 = methodOperation10.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary12.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        dischargeSummary12.MeasurementTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation19 = methodOperation10.setDateAppliedUtc(instant16);
        methodOperation10.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation23 = methodOperation10.setStackPosition((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation26 = methodOperation24.setOperationType(metadataChangeOperationType25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType27 = methodOperation26.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation28 = methodOperation23.setOperationType(metadataChangeOperationType27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method method30 = methodOperation28.setMethodCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.time.Instant instant31 = method30.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.lang.Integer int33 = methodOperation32.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation36 = methodOperation34.setOperationType(metadataChangeOperationType35);
        java.lang.String str37 = methodOperation36.getUser();
        java.lang.Integer int38 = methodOperation36.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation40 = methodOperation36.setUser("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant42 = methodOperation41.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary43.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse46.setNextToken(instant47);
        dischargeSummary43.MeasurementTime = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation50 = methodOperation41.setDateAppliedUtc(instant47);
        methodOperation41.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation54 = methodOperation41.setComments("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method[] methodArray55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method[] { methodOperation9, method30, methodOperation32, methodOperation36, methodOperation41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method> methodList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method>) methodList56, methodArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse58 = timeSeriesDataServiceResponse0.setMethods(methodList56);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList59 = timeSeriesDataServiceResponse58.InterpolationTypes;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNull(metadataChangeOperationType5);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation7);
        org.junit.Assert.assertNotNull(methodOperation9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(methodOperation19);
        org.junit.Assert.assertNotNull(methodOperation23);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation26);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation28);
        org.junit.Assert.assertNotNull(method30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(methodOperation40);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(methodOperation50);
        org.junit.Assert.assertNotNull(methodOperation54);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse58);
        org.junit.Assert.assertNull(interpolationTypeList59);
    }

    @Test
    public void test56835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56835");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate2 = activityTemplate0.setMedium(mediumType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate4 = activityTemplate2.setAuditAttributes(auditAttributes3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = activityTemplate4.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = postActivityTemplate6.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate9 = postActivityTemplate6.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate12 = activityTemplate10.setMedium(mediumType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate13 = postActivityTemplate9.setMedium(mediumType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str15 = putActivityTemplate14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = putActivityTemplate14.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType17 = putActivityTemplate14.getMedium();
        java.lang.String str18 = putActivityTemplate14.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = putActivityTemplate14.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate21 = putActivityTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        activityTemplate22.AuditAttributes = auditAttributes23;
        java.lang.String str25 = activityTemplate22.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate27.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList32 = specimenTemplate31.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = specimenTemplate33.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList38 = specimenTemplate37.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate27, specimenTemplate30, specimenTemplate31, specimenTemplate35, specimenTemplate36, specimenTemplate37 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList40, specimenTemplateArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate42 = postFieldVisitActivityWithTemplate26.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList40);
        activityTemplate22.SpecimenTemplates = specimenTemplateList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate44 = putActivityTemplate14.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList40);
        postActivityTemplate13.SpecimenTemplates = specimenTemplateList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate46 = activityTemplate4.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str48 = putActivityTemplate47.getId();
        java.lang.String str49 = putActivityTemplate47.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = auditAttributes50.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate53 = putActivityTemplate47.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType54 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.TISSUE;
        putActivityTemplate47.Medium = mediumType54;
        activityTemplate46.Medium = mediumType54;
        org.junit.Assert.assertTrue("'" + mediumType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate2);
        org.junit.Assert.assertNotNull(activityTemplate4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(quantity7);
        org.junit.Assert.assertNotNull(postActivityTemplate9);
        org.junit.Assert.assertTrue("'" + mediumType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate12);
        org.junit.Assert.assertNotNull(postActivityTemplate13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNull(mediumType17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(quantity19);
        org.junit.Assert.assertNotNull(putActivityTemplate21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(labInstructionTemplateList32);
        org.junit.Assert.assertNotNull(specimenTemplate35);
        org.junit.Assert.assertNull(labInstructionTemplateList38);
        org.junit.Assert.assertNotNull(specimenTemplateArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate42);
        org.junit.Assert.assertNotNull(putActivityTemplate44);
        org.junit.Assert.assertNotNull(activityTemplate46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(putActivityTemplate53);
        org.junit.Assert.assertTrue("'" + mediumType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.TISSUE + "'", mediumType54.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.TISSUE));
    }

    @Test
    public void test56836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56836");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate3 = postActivityTemplate0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate5 = postActivityTemplate3.setCustomId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate7 = postActivityTemplate3.setId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList8 = postActivityTemplate3.getSpecimenTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList10 = importItemObject9.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList12, importChangeItemArray11);
        importItemObject9.ItemComparison = importChangeItemList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation17 = importItemSamplingLocation15.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        java.util.List<java.lang.String> strList34 = getObservationsV2_19.getLabReportIds();
        importItem18.Errors = getObservationsV2_19;
        java.lang.Object obj36 = importItem18.getExistingItem();
        importItem18.Input = "hi!";
        java.lang.Object obj39 = importItem18.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType40 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem41 = importItem18.setStatus(importItemStatusType40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation42 = importItemSamplingLocation17.setStatus(importItemStatusType40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation44 = importItemSamplingLocation17.setStatus(importItemStatusType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation46 = importItemSamplingLocation17.setStatus(importItemStatusType45);
        importItemObject9.Status = importItemStatusType45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard50 = postStandard48.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard52 = postStandard50.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList54, observationStandardArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard56 = postStandard52.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard58 = postStandard56.setDescription("9999-12-31T23:59:59.999Z");
        java.lang.String str59 = postStandard58.getCustomId();
        postStandard58.Id = "9999-12-31T23:59:59.999Z";
        java.lang.String str62 = postStandard58.Id;
        importItemObject9.ExistingItem = str62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject65 = importItemObject9.setRowId("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate67.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList72 = specimenTemplate71.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate75 = specimenTemplate73.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList78 = specimenTemplate77.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate67, specimenTemplate70, specimenTemplate71, specimenTemplate75, specimenTemplate76, specimenTemplate77 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList80 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList80, specimenTemplateArray79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate82 = postFieldVisitActivityWithTemplate66.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate84 = postFieldVisitActivityWithTemplate82.setCollectionMethod(collectionMethod83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        postFieldVisitActivityWithTemplate82.CollectionMethod = collectionMethod85;
        importItemObject9.ExistingItem = collectionMethod85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod89 = collectionMethod85.setName("http");
        postActivityTemplate3.CollectionMethod = collectionMethod85;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(postActivityTemplate3);
        org.junit.Assert.assertNotNull(postActivityTemplate5);
        org.junit.Assert.assertNotNull(postActivityTemplate7);
        org.junit.Assert.assertNull(specimenTemplateList8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(importChangeItemArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(importItemSamplingLocation17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + importItemStatusType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType40.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem41);
        org.junit.Assert.assertNotNull(importItemSamplingLocation42);
        org.junit.Assert.assertTrue("'" + importItemStatusType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation44);
        org.junit.Assert.assertTrue("'" + importItemStatusType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW + "'", importItemStatusType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW));
        org.junit.Assert.assertNotNull(importItemSamplingLocation46);
        org.junit.Assert.assertNotNull(postStandard50);
        org.junit.Assert.assertNotNull(postStandard52);
        org.junit.Assert.assertNotNull(observationStandardArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(postStandard56);
        org.junit.Assert.assertNotNull(postStandard58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str59, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str62, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(importItemObject65);
        org.junit.Assert.assertNull(labInstructionTemplateList72);
        org.junit.Assert.assertNotNull(specimenTemplate75);
        org.junit.Assert.assertNull(labInstructionTemplateList78);
        org.junit.Assert.assertNotNull(specimenTemplateArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate82);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate84);
        org.junit.Assert.assertNotNull(collectionMethod89);
    }

    @Test
    public void test56837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56837");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setImportTime(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent4 = importHistoryEvent2.setImportType(importType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent7 = importHistoryEvent5.setFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.ANALYSIS_METHODS_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent9 = importHistoryEvent7.setImportType(importType8);
        importHistoryEvent2.ImportType = importType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent12 = importHistoryEvent2.setFileName("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertTrue("'" + importType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent4);
        org.junit.Assert.assertNotNull(importHistoryEvent7);
        org.junit.Assert.assertTrue("'" + importType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.ANALYSIS_METHODS_CSV + "'", importType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.ANALYSIS_METHODS_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent9);
        org.junit.Assert.assertNotNull(importHistoryEvent12);
    }

    @Test
    public void test56838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56838");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] appliedTagArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] { appliedTag8 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>) appliedTagList10, appliedTagArray9);
        sensor0.Tags = appliedTagList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor14 = sensor0.setUnitId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str15 = sensor0.getManufacturer();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNotNull(appliedTagArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sensor14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test56839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56839");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_64 = deleteObservationsV2_62.setResultGrades(strList63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_66 = deleteObservationsV2_62.setActivityCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str67 = deleteObservationsV2_62.SpecimenName;
        java.time.Instant instant68 = deleteObservationsV2_62.EndResultTime;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_64);
        org.junit.Assert.assertNotNull(deleteObservationsV2_66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(instant68);
    }

    @Test
    public void test56840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56840");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate2 = specimenTemplate0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate2.Preservative = preservativeType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN;
        specimenTemplate2.Preservative = preservativeType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = specimenTemplate2.setFiltered((java.lang.Boolean) true);
        specimenTemplate2.Name = "multipart/form-data; boundary=****4b3b82c5-fb27-4c5a-8cf6-cb2705168ae1****";
        org.junit.Assert.assertNotNull(specimenTemplate2);
        org.junit.Assert.assertTrue("'" + preservativeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertTrue("'" + preservativeType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN + "'", preservativeType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.LIQUID_NITROGEN));
        org.junit.Assert.assertNotNull(specimenTemplate8);
    }

    @Test
    public void test56841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56841");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.getLevelDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval3 = approval0.setApprovalLevel((java.lang.Integer) (-1));
        java.lang.String str4 = approval0.getComment();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(approval3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test56842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56842");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        java.lang.String str6 = postBasicTimeSeries2.getUtcOffset();
        java.lang.String str7 = postBasicTimeSeries2.getComputationPeriodIdentifier();
        java.lang.String str8 = postBasicTimeSeries2.getComputationPeriodIdentifier();
        java.lang.String str9 = postBasicTimeSeries2.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries11 = postBasicTimeSeries2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries12.Parameter = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType15 = postReflectedTimeSeries12.InterpolationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer durationDeserializer16 = new com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer();
        com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer durationSerializer17 = new com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer();
        java.time.Duration duration18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase22 = locationDatumPeriod20.setComment("'.'SSSSSSS");
        java.lang.Double double23 = locationDatumPeriodBase22.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant25 = qualifier24.DateApplied;
        java.lang.String str26 = qualifier24.User;
        java.lang.String str27 = qualifier24.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj29 = timeAlignedDataServiceRequest28.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = timeAlignedDataServiceRequest28.setQueryFrom(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier34 = qualifier24.setDateApplied(instant31);
        java.time.Instant instant35 = qualifier34.getDateApplied();
        locationDatumPeriodBase22.ValidFrom = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase37 = putRecurringReport19.setNextGenerationDate(instant35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase39 = putRecurringReport19.setRecurrencePeriod("/AQUARIUS");
        java.lang.Class<?> wildcardClass40 = putRecurringReport19.getClass();
        com.google.gson.JsonSerializationContext jsonSerializationContext41 = null;
        com.google.gson.JsonElement jsonElement42 = durationSerializer17.serialize(duration18, (java.lang.reflect.Type) wildcardClass40, jsonSerializationContext41);
        com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer durationSerializer43 = new com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer();
        java.time.Duration duration44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MinValue;
        java.lang.String str45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer.format(duration44);
        java.lang.String str46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer.format(duration44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str48 = locationMonitoringMethod47.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList49 = null;
        locationMonitoringMethod47.Tags = tagMetadataList49;
        java.lang.String str51 = locationMonitoringMethod47.getParameterId();
        java.lang.String str52 = locationMonitoringMethod47.Parameter;
        locationMonitoringMethod47.Comment = "";
        locationMonitoringMethod47.LocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str57 = locationMonitoringMethod47.getParameterId();
        java.lang.String str58 = locationMonitoringMethod47.SerialNumber;
        java.lang.String str59 = locationMonitoringMethod47.getModel();
        java.lang.Class<?> wildcardClass60 = locationMonitoringMethod47.getClass();
        com.google.gson.JsonSerializationContext jsonSerializationContext61 = null;
        com.google.gson.JsonElement jsonElement62 = durationSerializer43.serialize(duration44, (java.lang.reflect.Type) wildcardClass60, jsonSerializationContext61);
        com.google.gson.JsonDeserializationContext jsonDeserializationContext63 = null;
        java.time.Duration duration64 = durationDeserializer16.deserialize(jsonElement42, (java.lang.reflect.Type) wildcardClass60, jsonDeserializationContext63);
        postReflectedTimeSeries12.GapTolerance = duration64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries66 = postBasicTimeSeries2.setGapTolerance(duration64);
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postBasicTimeSeries11);
        org.junit.Assert.assertNull(interpolationType15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase22);
        org.junit.Assert.assertNull(double23);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest33);
        org.junit.Assert.assertNotNull(qualifier34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(recurringReportBase37);
        org.junit.Assert.assertNotNull(recurringReportBase39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(jsonElement42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MinDuration" + "'", str45, "MinDuration");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MinDuration" + "'", str46, "MinDuration");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(jsonElement62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(postBasicTimeSeries66);
    }

    @Test
    public void test56843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56843");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "MinDuration";
        java.lang.String str4 = approval0.Comment;
        java.time.Instant instant5 = approval0.getDateAppliedUtc();
        java.lang.String str6 = approval0.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval8 = approval0.setUser("-PT87591240H");
        java.lang.String str9 = approval0.getLevelDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval11 = approval0.setUser("http://MaxDurationhttp/json/reply/String");
        java.lang.Integer int12 = approval0.getApprovalLevel();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(approval8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinDuration" + "'", str9, "MinDuration");
        org.junit.Assert.assertNotNull(approval11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test56844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56844");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint2 = crossSectionPoint0.setDistance(quantityWithDisplay1);
        java.lang.String str3 = crossSectionPoint0.getComments();
        java.lang.Integer int4 = crossSectionPoint0.getPointOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        volumetricDischargeReading5.IsUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = volumetricDischargeReading5.StartingVolume;
        java.lang.Boolean boolean9 = volumetricDischargeReading5.IsUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical12 = vertical10.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = vertical12.getSegmentWidth();
        java.lang.Double double14 = vertical12.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = null;
        vertical15.EffectiveDepth = quantityWithDisplay16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical19 = vertical15.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        java.lang.String str23 = dischargeSummary22.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary24.Reviewer = "";
        dischargeSummary24.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary24.MeasurementGrade = measurementGradeType29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary22.setMeasurementGrade(measurementGradeType29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = pointVelocityDischargeActivity32.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity32.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity38 = pointVelocityDischargeActivity32.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList39 = pointVelocityDischargeActivity38.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity38.DistanceToMeter = datumConvertedQuantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary22.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical43 = vertical19.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical44 = vertical12.setTaglinePosition((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay40);
        java.lang.String str45 = datumConvertedQuantityWithDisplay40.TargetDatum;
        volumetricDischargeReading5.VolumeChange = datumConvertedQuantityWithDisplay40;
        java.lang.String str47 = datumConvertedQuantityWithDisplay40.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint48 = crossSectionPoint0.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay40);
        java.lang.Double double49 = datumConvertedQuantityWithDisplay40.getNumeric();
        org.junit.Assert.assertNotNull(crossSectionPoint2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(vertical12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNotNull(vertical19);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + measurementGradeType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity34);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity38);
        org.junit.Assert.assertNull(verticalList39);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(vertical43);
        org.junit.Assert.assertNotNull(vertical44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(crossSectionPoint48);
        org.junit.Assert.assertNull(double49);
    }

    @Test
    public void test56845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56845");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str9 = samplingContextTag8.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag11 = samplingContextTag8.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = samplingContextTag11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str15 = samplingContextTag14.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        samplingContextTag16.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str21 = samplingContextTag20.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = samplingContextTag20.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag13, samplingContextTag14, samplingContextTag16, samplingContextTag23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25, samplingContextTagArray24);
        postActivity3.SamplingContextTags = samplingContextTagList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity30 = putActivity28.setCustomId("MaxInstant");
        java.lang.String str31 = putActivity30.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity33 = putActivity30.setPlannedActivity(plannedActivity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod34 = putActivity30.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium35 = putActivity30.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation38 = putSamplingLocation36.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation40 = putSamplingLocation38.setVerticalCollectionMethod("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation42 = putSamplingLocation38.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation45 = observation43.setPlannedFieldResult(plannedFieldResult44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction46 = null;
        observation45.LabInstruction = labInstruction46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation49 = observation45.setStatistics(observationStatistics48);
        java.time.OffsetDateTime offsetDateTime50 = observation49.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = null;
        quantity51.Unit = unit52;
        observation49.Depth = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation55 = putSamplingLocation42.setElevation(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = locationGroupType57.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType60 = locationGroupType57.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup56.LocationGroupType = locationGroupType57;
        java.lang.String str62 = putSamplingLocationGroup56.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup64 = putSamplingLocationGroup56.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType65 = putSamplingLocationGroup56.getLocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = locationGroupType65.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject69 = postProject67.setAuditAttributes(auditAttributes68);
        java.time.OffsetDateTime offsetDateTime70 = null;
        postProject67.StartTime = offsetDateTime70;
        java.time.OffsetDateTime offsetDateTime72 = postProject67.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject74 = postProject67.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan75.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType78 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan75.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup80 = samplingPlan75.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan82 = samplingPlan75.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject83 = postProject74.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = postProject74.AuditAttributes;
        locationGroupType65.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation86 = putSamplingLocation55.setAuditAttributes(auditAttributes84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity87 = putActivity30.setAuditAttributes(auditAttributes84);
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(samplingContextTag11);
        org.junit.Assert.assertNotNull(samplingContextTag13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(samplingContextTag23);
        org.junit.Assert.assertNotNull(samplingContextTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putActivity28);
        org.junit.Assert.assertNotNull(putActivity30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(putActivity33);
        org.junit.Assert.assertNull(collectionMethod34);
        org.junit.Assert.assertNull(medium35);
        org.junit.Assert.assertNotNull(putSamplingLocation38);
        org.junit.Assert.assertNotNull(putSamplingLocation40);
        org.junit.Assert.assertNotNull(putSamplingLocation42);
        org.junit.Assert.assertNotNull(observation45);
        org.junit.Assert.assertNotNull(observation49);
        org.junit.Assert.assertNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(putSamplingLocation55);
        org.junit.Assert.assertNull(auditAttributes58);
        org.junit.Assert.assertNotNull(locationGroupType60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup64);
        org.junit.Assert.assertNotNull(locationGroupType65);
        org.junit.Assert.assertNull(auditAttributes66);
        org.junit.Assert.assertNotNull(postProject69);
        org.junit.Assert.assertNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(postProject74);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType78 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType78.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup80);
        org.junit.Assert.assertNotNull(samplingPlan82);
        org.junit.Assert.assertNotNull(postProject83);
        org.junit.Assert.assertNotNull(auditAttributes84);
        org.junit.Assert.assertNotNull(putSamplingLocation86);
        org.junit.Assert.assertNotNull(putActivity87);
    }

    @Test
    public void test56846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56846");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str1 = postUser0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList3 = getObservationsV2_2.SamplingContextTagIds;
        java.time.Instant instant4 = getObservationsV2_2.getEndModificationTime();
        java.util.List<java.lang.String> strList5 = getObservationsV2_2.Media;
        java.util.List<java.lang.String> strList6 = getObservationsV2_2.ActivityTypes;
        java.util.List<java.lang.String> strList7 = getObservationsV2_2.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        getObservationsV2_16.DepthUnitCustomId = "hi!";
        java.lang.String str19 = getObservationsV2_16.CustomId;
        java.util.List<java.lang.String> strList20 = getObservationsV2_16.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.QualityControlTypes = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_16.setMedia((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str38 = getObservationsV2_37.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getObservationsV2_37.ProjectIds = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_16.setObservedPropertyIds((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = timeAlignedDataServiceRequest8.setTimeSeriesOutputUnitIds(strList42);
        getObservationsV2_2.DataClassifications = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser49 = postUser0.setRoles((java.util.List<java.lang.String>) strList42);
        java.lang.String str50 = postUser49.getId();
        java.util.List<java.lang.String> strList51 = postUser49.getAccessGroups();
        java.lang.String str52 = postUser49.CustomId;
        java.lang.String str53 = postUser49.Email;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest47);
        org.junit.Assert.assertNotNull(postUser49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test56847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56847");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList1 = searchResultSpecimen0.getDomainObjects();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList2 = searchResultSpecimen0.getDomainObjects();
        searchResultSpecimen0.Cursor = "multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList5 = searchResultSpecimen0.DomainObjects;
        org.junit.Assert.assertNull(specimenList1);
        org.junit.Assert.assertNull(specimenList2);
        org.junit.Assert.assertNull(specimenList5);
    }

    @Test
    public void test56848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56848");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Integer int3 = importSummaryObservation2.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str5 = importHistoryEventSimple4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple4.ImportType = importType6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation8 = importSummaryObservation2.setImportHistoryEventSimple(importHistoryEventSimple4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList9 = importSummaryObservation8.getErrorImportItems();
        java.lang.String str10 = importSummaryObservation8.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary11.UpdateCount = (-1);
        java.lang.Integer int14 = observationImportSummary11.ExpectedCount;
        java.lang.String str15 = observationImportSummary11.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList17, importErrorArray16);
        observationImportSummary11.ImportJobErrors = importErrorList17;
        observationImportSummary11.NewCount = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str23 = importHistoryEventSimple22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary24 = observationImportSummary11.setImportHistoryEventSimple(importHistoryEventSimple22);
        java.lang.String str25 = importHistoryEventSimple22.getFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple27 = importHistoryEventSimple22.setImportedBy(userProfile26);
        java.lang.String str28 = importHistoryEventSimple27.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation29 = importSummaryObservation8.setImportHistoryEventSimple(importHistoryEventSimple27);
        java.lang.String str30 = importSummaryObservation29.InvalidRowsCsvUrl;
        java.lang.String str31 = importSummaryObservation29.InvalidRowsCsvUrl;
        java.lang.Integer int32 = importSummaryObservation29.getErrorCount();
        java.lang.Integer int33 = importSummaryObservation29.UpdateCount;
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + importType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNotNull(importSummaryObservation8);
        org.junit.Assert.assertNull(importItemObservationList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str10, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(importErrorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(observationImportSummary24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(importHistoryEventSimple27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(importSummaryObservation29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test56849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56849");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = putProject0.getCustomId();
        putProject0.ScopeStatement = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType6 = putProject0.Type;
        java.lang.String str7 = putProject0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject9 = putProject0.setApprovalAgency("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str10 = putProject0.getApprovalAgency();
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(projectType6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(putProject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test56850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56850");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Boolean boolean3 = extendedAttribute2.AppliesToLocationTypes;
        extendedAttribute2.Required = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute7 = extendedAttribute2.setKey("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute9 = extendedAttribute2.setAppliesToLocations((java.lang.Boolean) true);
        extendedAttribute2.AppliesToLocations = false;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(extendedAttribute7);
        org.junit.Assert.assertNotNull(extendedAttribute9);
    }

    @Test
    public void test56851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56851");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList1 = ratingModelDescriptionListServiceResponse0.RatingModelDescriptions;
        java.time.Instant instant2 = ratingModelDescriptionListServiceResponse0.getNextToken();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList3 = ratingModelDescriptionListServiceResponse0.RatingModelDescriptions;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList4 = ratingModelDescriptionListServiceResponse0.RatingModelDescriptions;
        java.time.Instant instant5 = ratingModelDescriptionListServiceResponse0.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary8.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        dischargeSummary8.MeasurementTime = instant12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse7.setNextToken(instant12);
        java.time.Instant instant16 = locationDescriptionListServiceResponse7.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities17 = getActivities6.setToStartTime(instant16);
        java.lang.String str18 = getActivities17.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities20 = getActivities17.setLimit((java.lang.Integer) 1);
        getActivities20.Cursor = "";
        getActivities20.Limit = 0;
        java.time.Instant instant25 = getActivities20.getToStartTime();
        ratingModelDescriptionListServiceResponse0.NextToken = instant25;
        org.junit.Assert.assertNull(ratingModelDescriptionList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(ratingModelDescriptionList3);
        org.junit.Assert.assertNull(ratingModelDescriptionList4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(getActivities17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(getActivities20);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test56852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56852");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        calibrationCheck0.SensorUniqueId = "MinDuration";
        java.lang.String str4 = calibrationCheck0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType.CheckbarAsFound;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck0.setCalibrationCheckType(calibrationCheckType5);
        java.lang.Boolean boolean7 = calibrationCheck0.isPublish();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + calibrationCheckType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType.CheckbarAsFound + "'", calibrationCheckType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType.CheckbarAsFound));
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test56853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56853");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteFieldDataPlugin deleteFieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteFieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteFieldDataPlugin deleteFieldDataPlugin2 = deleteFieldDataPlugin0.setUniqueId("2021.4.62.0");
        java.lang.String str3 = deleteFieldDataPlugin2.getUniqueId();
        java.lang.String str4 = deleteFieldDataPlugin2.getUniqueId();
        org.junit.Assert.assertNotNull(deleteFieldDataPlugin2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2021.4.62.0" + "'", str3, "2021.4.62.0");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2021.4.62.0" + "'", str4, "2021.4.62.0");
    }

    @Test
    public void test56854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56854");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory();
        java.lang.Object obj1 = getUnitGroupHistory0.getResponseType();
        java.lang.String str2 = getUnitGroupHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory4 = getUnitGroupHistory0.setId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory6 = getUnitGroupHistory0.setId("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        java.lang.String str7 = getUnitGroupHistory6.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getUnitGroupHistory4);
        org.junit.Assert.assertNotNull(getUnitGroupHistory6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****" + "'", str7, "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
    }

    @Test
    public void test56855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56855");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolderUserRole deleteLocationFolderUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolderUserRole();
        deleteLocationFolderUserRole0.LocationFolderUniqueId = "http://MaxDurationhttp/json/reply/Float";
        deleteLocationFolderUserRole0.LocationFolderUniqueId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
    }

    @Test
    public void test56856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56856");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        postRecurringReport1.NextGenerationDate = instant5;
        java.time.Instant instant8 = postRecurringReport1.getNextGenerationDate();
        java.lang.String str9 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant8);
        metadataChangeTransactionListServiceRequest0.QueryFrom = instant8;
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest12 = metadataChangeTransactionListServiceRequest0.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList16 = locationDescriptionListServiceResponse15.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str18 = timeSeriesApprovalsTransactionListServiceRequest17.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType20 = null;
        controlConditionActivity19.ControlCleaned = controlCleanedType20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        controlConditionActivity19.DateCleaned = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest26 = timeSeriesApprovalsTransactionListServiceRequest17.setQueryTo(instant23);
        java.time.Instant instant27 = timeSeriesApprovalsTransactionListServiceRequest17.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse15.setNextToken(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest29 = metadataChangeTransactionListServiceRequest12.setQueryFrom(instant27);
        java.time.Instant instant30 = metadataChangeTransactionListServiceRequest29.QueryFrom;
        java.lang.Object obj31 = metadataChangeTransactionListServiceRequest29.getResponseType();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str9, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNull(locationDescriptionList16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
    }

    @Test
    public void test56857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56857");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest0.GetParts = "http";
        java.lang.Boolean boolean3 = timeSeriesDataCorrectedServiceRequest0.isIncludeGapMarkers();
        java.lang.Boolean boolean4 = timeSeriesDataCorrectedServiceRequest0.isReturnFullCoverage();
        java.lang.Boolean boolean5 = timeSeriesDataCorrectedServiceRequest0.ApplyRounding;
        java.lang.Boolean boolean6 = timeSeriesDataCorrectedServiceRequest0.isReturnFullCoverage();
        java.lang.Boolean boolean7 = timeSeriesDataCorrectedServiceRequest0.ReturnFullCoverage;
        java.lang.Boolean boolean8 = timeSeriesDataCorrectedServiceRequest0.isReturnFullCoverage();
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test56858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56858");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = postSensor0.setUnitId("");
        java.lang.String str5 = postSensor0.getModel();
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test56859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56859");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType2 = getObservationsV2_0.getSampleFraction();
        java.time.Instant instant3 = getObservationsV2_0.getStartObservedTime();
        getObservationsV2_0.CustomId = "MaxInstant";
        java.lang.String str6 = getObservationsV2_0.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str8 = locationDescriptionListServiceRequest7.LocationName;
        locationDescriptionListServiceRequest7.Publish = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList12 = getExportSpecimens11.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant14 = qualifier13.DateApplied;
        java.lang.String str15 = qualifier13.User;
        java.lang.String str16 = qualifier13.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj18 = timeAlignedDataServiceRequest17.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = timeAlignedDataServiceRequest17.setQueryFrom(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier23 = qualifier13.setDateApplied(instant20);
        getExportSpecimens11.Before = instant20;
        java.util.List<java.lang.String> strList25 = getExportSpecimens11.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        java.util.List<java.lang.String> strList42 = getObservationsV2_27.getLabReportIds();
        importItem26.Errors = getObservationsV2_27;
        java.lang.Object obj44 = importItem26.getExistingItem();
        java.util.List<java.lang.String> strList45 = importItem26.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        java.util.List<java.lang.String> strList62 = getObservationsV2_47.getLabReportIds();
        importItem46.Errors = getObservationsV2_47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList65 = getObservationsV2_64.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        getObservationsV2_66.SpecimenIds = strList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray76 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags72.setTagUniqueIds(strList77);
        getObservationsV2_66.QualityControlTypes = strList77;
        getObservationsV2_64.ResultGrades = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem82 = importItem46.setFields((java.util.List<java.lang.String>) strList77);
        importItem26.Fields = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens84 = getExportSpecimens11.setSamplingLocationIds((java.util.List<java.lang.String>) strList77);
        locationDescriptionListServiceRequest7.TagKeys = strList77;
        getObservationsV2_0.ProjectIds = strList77;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(sampleFractionType2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest22);
        org.junit.Assert.assertNotNull(qualifier23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(importItem82);
        org.junit.Assert.assertNotNull(getExportSpecimens84);
    }

    @Test
    public void test56860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56860");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnit deleteUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnit deleteUnit2 = deleteUnit0.setUniqueId("");
        java.lang.String str3 = deleteUnit2.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnit deleteUnit5 = deleteUnit2.setUniqueId("PT87591240H");
        org.junit.Assert.assertNotNull(deleteUnit2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(deleteUnit5);
    }

    @Test
    public void test56861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56861");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetOpenIdConnectUser getOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetOpenIdConnectUser();
        java.lang.String str1 = getOpenIdConnectUser0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetOpenIdConnectUser getOpenIdConnectUser3 = getOpenIdConnectUser0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetOpenIdConnectUser getOpenIdConnectUser5 = getOpenIdConnectUser3.setUniqueId("/AQUARIUS/Publish/v2");
        java.lang.String str6 = getOpenIdConnectUser5.UniqueId;
        getOpenIdConnectUser5.UniqueId = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        java.lang.String str9 = getOpenIdConnectUser5.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getOpenIdConnectUser3);
        org.junit.Assert.assertNotNull(getOpenIdConnectUser5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Publish/v2" + "'", str6, "/AQUARIUS/Publish/v2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****" + "'", str9, "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
    }

    @Test
    public void test56862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56862");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDepthUnitId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str14 = getChartDataV2_13.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_16 = getChartDataV2_13.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_18 = getChartDataV2_13.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType21 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition22 = tagDefinition20.setValueType(tagValueType21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition24 = tagDefinition20.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition26 = tagDefinition24.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition28 = tagDefinition24.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray39 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTagUniqueIds(strList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest29.setTimeSeriesOutputUnitIds(strList40);
        tagDefinition28.PickListValues = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_45 = getGroupedObservationsV2_19.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType46 = getGroupedObservationsV2_45.FieldResultType;
        getGroupedObservationsV2_45.Cursor = "2021.4.62.0";
        java.lang.String str49 = getGroupedObservationsV2_45.getImportHistoryEventId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_50.setDataClassifications((java.util.List<java.lang.String>) strList54);
        getObservationsV2_56.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        getObservationsV2_56.EndObservedTime = instant60;
        java.util.List<java.lang.String> strList63 = getObservationsV2_56.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str65 = getChartDataV2_64.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_67 = getChartDataV2_64.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = dischargeSummary69.setMeanGageHeightMethod("hi!");
        java.lang.String str72 = dischargeSummary71.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = dischargeSummary71.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType76 = calibrationCheck75.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay77 = calibrationCheck75.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary81 = dischargeSummary79.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse84 = locationDescriptionListServiceResponse82.setNextToken(instant83);
        dischargeSummary79.MeasurementTime = instant83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse86 = locationDescriptionListServiceResponse78.setNextToken(instant83);
        java.time.Instant instant87 = locationDescriptionListServiceResponse78.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck88 = calibrationCheck75.setTime(instant87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary89 = dischargeSummary71.setMeasurementTime(instant87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_90 = getChartDataV2_68.setStartResultTime(instant87);
        java.time.Instant instant91 = getChartDataV2_90.StartObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType92 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS;
        getChartDataV2_90.FieldResultType = fieldResultType92;
        getChartDataV2_67.FieldResultType = fieldResultType92;
        getObservationsV2_56.FieldResultType = fieldResultType92;
        getGroupedObservationsV2_45.FieldResultType = fieldResultType92;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_97 = getChartDataV2_13.setFieldResultType(fieldResultType92);
        getObservationsV2_12.FieldResultType = fieldResultType92;
        java.lang.String str99 = getObservationsV2_12.FieldVisitId;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getChartDataV2_16);
        org.junit.Assert.assertNotNull(getChartDataV2_18);
        org.junit.Assert.assertNotNull(tagDefinition22);
        org.junit.Assert.assertNotNull(tagDefinition24);
        org.junit.Assert.assertNotNull(tagDefinition26);
        org.junit.Assert.assertNotNull(tagDefinition28);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_45);
        org.junit.Assert.assertNull(fieldResultType46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(getChartDataV2_67);
        org.junit.Assert.assertNotNull(dischargeSummary71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(dischargeSummary74);
        org.junit.Assert.assertNull(calibrationCheckType76);
        org.junit.Assert.assertNull(doubleWithDisplay77);
        org.junit.Assert.assertNotNull(dischargeSummary81);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse84);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(calibrationCheck88);
        org.junit.Assert.assertNotNull(dischargeSummary89);
        org.junit.Assert.assertNotNull(getChartDataV2_90);
        org.junit.Assert.assertNull(instant91);
        org.junit.Assert.assertTrue("'" + fieldResultType92 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS + "'", fieldResultType92.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS));
        org.junit.Assert.assertNotNull(getChartDataV2_97);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test56863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56863");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.DiscreteMeasurementActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest3 = fieldVisitDataServiceRequest0.setIncludeCrossSectionSurveyProfile((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest5 = fieldVisitDataServiceRequest0.setIncludeInvalidActivities((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest7 = fieldVisitDataServiceRequest5.setConvertToStandardReferenceDatum("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        java.lang.Boolean boolean8 = fieldVisitDataServiceRequest5.IncludeNodeDetails;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest5);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test56864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56864");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray4 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = putLocationTags0.setTagUniqueIds(strList5);
        java.util.ArrayList<java.lang.String> strList8 = putLocationTags7.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = putLocationTags7.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str12 = putLocationTags11.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest13.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str17 = applyTagRequest16.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str19 = applyTagRequest18.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest13, applyTagRequest16, applyTagRequest18, applyTagRequest20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList22, applyTagRequestArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags11.setTags(applyTagRequestList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags7.setTags(applyTagRequestList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags25.setLocationUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags27.setLocationUniqueId("MinDuration");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList30 = putLocationTags29.getTags();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(putLocationTags7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(putLocationTags10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(applyTagRequestArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(applyTagRequestList30);
    }

    @Test
    public void test56865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56865");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setType(activityWithDetailsType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = putActivity8.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity10 = putActivity8.getPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = putActivity8.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList13 = putActivity8.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity15 = putActivity8.setId("****26835278-3e68-484a-a157-468aab2e69a2****");
        putActivity15.Refreshed = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_20 = putObservationV2_18.setObservedProperty(observedProperty19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity21 = putObservationV2_20.Activity;
        java.time.OffsetDateTime offsetDateTime22 = null;
        putObservationV2_20.ObservedTime = offsetDateTime22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType24 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_25 = putObservationV2_20.setQualityControlType(qualityControlType24);
        java.time.OffsetDateTime offsetDateTime26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_27 = putObservationV2_20.setObservedTime(offsetDateTime26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult28 = putObservationV2_20.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = plannedFieldResult29.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_31 = putObservationV2_20.setPlannedFieldResult(plannedFieldResult29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction32 = putObservationV2_20.getLabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str35 = metricConfiguration34.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty36.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration39 = metricConfiguration34.setObservedProperty(observedProperty36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType40 = observedProperty36.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup42 = postObservedProperty41.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit44 = null;
        quantity43.Unit = unit44;
        postObservedProperty41.LowerLimit = quantity43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = postObservedProperty41.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = quantity47.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty49 = observedProperty36.setUpperLimit(quantity47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation50 = samplingLocation33.setElevation(quantity47);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList51 = samplingLocation50.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList54, plannedActivityArray53);
        putFieldVisit52.PlannedActivities = plannedActivityList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        java.lang.String str64 = domainObjectAttachment62.getId();
        domainObjectAttachment62.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment68 = domainObjectAttachment62.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str70 = domainObjectAttachment69.getId();
        java.lang.String str71 = domainObjectAttachment69.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment73 = domainObjectAttachment69.setAttachment(attachment72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str75 = domainObjectAttachment74.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str77 = domainObjectAttachment76.getId();
        java.lang.String str78 = domainObjectAttachment76.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment79 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment80 = domainObjectAttachment76.setAttachment(attachment79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str82 = domainObjectAttachment81.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment57, domainObjectAttachment62, domainObjectAttachment69, domainObjectAttachment74, domainObjectAttachment76, domainObjectAttachment81 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList84 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList84, domainObjectAttachmentArray83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit86 = putFieldVisit52.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList84);
        samplingLocation50.Attachments = domainObjectAttachmentList84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation89 = samplingLocation50.setId("2021.4.62.0");
        java.lang.String str90 = samplingLocation89.Latitude;
        java.lang.String str91 = samplingLocation89.getLatitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_92 = putObservationV2_20.setSamplingLocation(samplingLocation89);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList93 = samplingLocation89.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity94 = putActivity15.setSamplingLocation(samplingLocation89);
        java.lang.String str95 = samplingLocation89.getLongitude();
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNull(quantity9);
        org.junit.Assert.assertNull(plannedActivity10);
        org.junit.Assert.assertNotNull(putActivity12);
        org.junit.Assert.assertNull(extendedAttributeList13);
        org.junit.Assert.assertNotNull(putActivity15);
        org.junit.Assert.assertNotNull(putObservationV2_20);
        org.junit.Assert.assertNull(activity21);
        org.junit.Assert.assertTrue("'" + qualityControlType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType24.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_25);
        org.junit.Assert.assertNotNull(putObservationV2_27);
        org.junit.Assert.assertNull(taxonomicResult28);
        org.junit.Assert.assertNull(auditAttributes30);
        org.junit.Assert.assertNotNull(putObservationV2_31);
        org.junit.Assert.assertNull(labInstruction32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(metricConfiguration39);
        org.junit.Assert.assertNull(resultType40);
        org.junit.Assert.assertNull(unitGroup42);
        org.junit.Assert.assertNotNull(quantity47);
        org.junit.Assert.assertNull(unit48);
        org.junit.Assert.assertNotNull(observedProperty49);
        org.junit.Assert.assertNotNull(samplingLocation50);
        org.junit.Assert.assertNull(domainObjectAttachmentList51);
        org.junit.Assert.assertNotNull(plannedActivityArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(domainObjectAttachment68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(domainObjectAttachment73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(domainObjectAttachment80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(putFieldVisit86);
        org.junit.Assert.assertNotNull(samplingLocation89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(putObservationV2_92);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList93);
        org.junit.Assert.assertNotNull(putActivity94);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test56866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56866");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str1 = extendedAttributeListItem0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem3 = extendedAttributeListItem0.setCustomId("-PT87591240H");
        java.lang.String str4 = extendedAttributeListItem3.Id;
        java.lang.String str5 = extendedAttributeListItem3.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(extendedAttributeListItem3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test56867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56867");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit0.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str3 = postFieldVisit0.Participants;
        java.lang.String str4 = postFieldVisit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple6 = fieldVisitSimple5.getSamplingLocation();
        java.time.OffsetDateTime offsetDateTime7 = fieldVisitSimple5.StartTime;
        java.time.OffsetDateTime offsetDateTime8 = null;
        fieldVisitSimple5.StartTime = offsetDateTime8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED;
        fieldVisitSimple5.PlanningStatus = planningStatusType10;
        postFieldVisit0.PlanningStatus = planningStatusType10;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList13 = postFieldVisit0.getPlannedActivities();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList14 = postFieldVisit0.getPlannedFieldResults();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str3, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(samplingLocationSimple6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + planningStatusType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED + "'", planningStatusType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED));
        org.junit.Assert.assertNull(plannedActivityList13);
        org.junit.Assert.assertNull(plannedFieldResultList14);
    }

    @Test
    public void test56868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56868");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = unit0.AuditAttributes;
        unit0.Name = "2021.4.62.0";
        unit0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertNull(auditAttributes1);
    }

    @Test
    public void test56869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56869");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse4 = postLocationAttachmentResponse0.setComments("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag5.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag9 = appliedTag5.setKey("http");
        java.lang.String str10 = appliedTag9.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag13 = appliedTag11.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag15 = appliedTag11.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag17 = appliedTag11.setValue("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] appliedTagArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] { appliedTag9, appliedTag11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>) appliedTagList19, appliedTagArray18);
        postLocationAttachmentResponse0.Tags = appliedTagList19;
        java.lang.String str22 = postLocationAttachmentResponse0.getUrl();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse24 = postLocationAttachmentResponse0.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.String str25 = postLocationAttachmentResponse24.getFileName();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList26 = postLocationAttachmentResponse24.getTags();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse4);
        org.junit.Assert.assertNotNull(appliedTag9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(appliedTag13);
        org.junit.Assert.assertNotNull(appliedTag15);
        org.junit.Assert.assertNotNull(appliedTag17);
        org.junit.Assert.assertNotNull(appliedTagArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(appliedTagList26);
    }

    @Test
    public void test56870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56870");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType5 = getExportObservations0.getFormat();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList7 = getExportObservations6.getLabReportIds();
        java.lang.String str8 = getExportObservations6.DepthUnitCustomId;
        java.util.List<java.lang.String> strList9 = getExportObservations6.getSearch();
        java.util.List<java.lang.String> strList10 = getExportObservations6.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary13.Reviewer = "";
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary13.MeasurementTime = instant16;
        postRecurringReport12.NextGenerationDate = instant16;
        java.time.Instant instant19 = postRecurringReport12.getNextGenerationDate();
        java.lang.String str20 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant19);
        metadataChangeTransactionListServiceRequest11.QueryFrom = instant19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations22 = getExportObservations6.setEndObservedTime(instant19);
        getExportObservations22.MaxNumericResultValue = 1.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations26 = getExportObservations22.setImportHistoryEventId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX;
        getExportObservations22.Format = getExportObservationsFormatType27;
        getExportObservations0.Format = getExportObservationsFormatType27;
        java.time.Instant instant30 = getExportObservations0.getStartObservedTime();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(getExportObservationsFormatType5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str20, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations22);
        org.junit.Assert.assertNotNull(getExportObservations26);
        org.junit.Assert.assertTrue("'" + getExportObservationsFormatType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX + "'", getExportObservationsFormatType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX));
        org.junit.Assert.assertNull(instant30);
    }

    @Test
    public void test56871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56871");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitsResponse unitsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit> unitList1 = unitsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit> unitList2 = unitsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit> unitList3 = unitsResponse0.Results;
        org.junit.Assert.assertNull(unitList1);
        org.junit.Assert.assertNull(unitList2);
        org.junit.Assert.assertNull(unitList3);
    }

    @Test
    public void test56872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56872");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase();
        java.lang.String str1 = monitoringMethodWriteBase0.MethodCode;
        monitoringMethodWriteBase0.MethodCode = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56873");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile1 = postReportPlugin0.getFile();
        java.lang.String str2 = postReportPlugin0.getAssemblyName();
        java.lang.String str3 = postReportPlugin0.FolderName;
        java.lang.String str4 = postReportPlugin0.getFolderName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin6 = postReportPlugin0.setFolderName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        org.junit.Assert.assertNull(iHttpFile1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postReportPlugin6);
    }

    @Test
    public void test56874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56874");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = calibrationCheck0.setTime(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary17.DifferenceDuringVisit = doubleWithDisplay18;
        reading14.Value = doubleWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck21 = calibrationCheck13.setValue(doubleWithDisplay18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant23 = ratingCurveListServiceRequest22.QueryTo;
        java.lang.String str24 = ratingCurveListServiceRequest22.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary26.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse29.setNextToken(instant30);
        dischargeSummary26.MeasurementTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse25.setNextToken(instant30);
        java.time.Instant instant34 = locationDescriptionListServiceResponse25.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType37 = null;
        controlConditionActivity36.ControlCleaned = controlCleanedType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = locationDescriptionListServiceResponse39.setNextToken(instant40);
        controlConditionActivity36.DateCleaned = instant40;
        timeAlignedDataServiceRequest35.QueryFrom = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse25.setNextToken(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest45 = ratingCurveListServiceRequest22.setQueryTo(instant40);
        java.time.Instant instant46 = ratingCurveListServiceRequest45.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck47 = calibrationCheck21.setTime(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str49 = pointVelocityDischargeActivity48.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity51 = pointVelocityDischargeActivity48.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity53 = pointVelocityDischargeActivity48.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = vertical54.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType56 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical54.VerticalType = verticalType56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType59 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation60 = velocityObservation58.setDeploymentMethod(deploymentMethodType59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType62 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation63 = velocityObservation61.setDeploymentMethod(deploymentMethodType62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65, velocityDepthObservationArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation67 = velocityObservation63.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation68 = velocityObservation58.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical69 = vertical54.setVelocityObservation(velocityObservation58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical71 = vertical69.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay70);
        pointVelocityDischargeActivity48.Width = datumConvertedQuantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck73 = calibrationCheck47.setValue((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay70);
        java.lang.Boolean boolean74 = calibrationCheck73.IsValid;
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(calibrationCheck13);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(calibrationCheck21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(calibrationCheck47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity51);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity53);
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertTrue("'" + verticalType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType56.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType59.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation60);
        org.junit.Assert.assertTrue("'" + deploymentMethodType62 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType62.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation63);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(velocityObservation67);
        org.junit.Assert.assertNotNull(velocityObservation68);
        org.junit.Assert.assertNotNull(vertical69);
        org.junit.Assert.assertNotNull(vertical71);
        org.junit.Assert.assertNotNull(calibrationCheck73);
        org.junit.Assert.assertNull(boolean74);
    }

    @Test
    public void test56875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56875");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = labInstruction0.setAnalysisMethod(analysisMethod1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = labInstruction2.AnalysisMethod;
        labInstruction2.HoldingTime = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = labInstruction2.getAnalysisMethod();
        org.junit.Assert.assertNotNull(labInstruction2);
        org.junit.Assert.assertNull(analysisMethod3);
        org.junit.Assert.assertNull(analysisMethod6);
    }

    @Test
    public void test56876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56876");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj1 = postQualifier0.getResponseType();
        java.lang.String str2 = postQualifier0.QualifierCode;
        java.lang.Object obj3 = postQualifier0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierBase qualifierBase5 = postQualifier0.setDisplayName("POST");
        java.lang.Object obj6 = postQualifier0.getResponseType();
        java.lang.Object obj7 = postQualifier0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        java.util.ArrayList<java.lang.String> strList16 = putLocationTags15.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags15.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str20 = putLocationTags19.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest21.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str25 = applyTagRequest24.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str27 = applyTagRequest26.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest21, applyTagRequest24, applyTagRequest26, applyTagRequest28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList30, applyTagRequestArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags19.setTags(applyTagRequestList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags15.setTags(applyTagRequestList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags33.setLocationUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags35.setLocationUniqueId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags35.setLocationUniqueId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        java.lang.Object obj41 = getLabReports40.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports43 = getLabReports40.setLimit((java.lang.Integer) 0);
        java.util.List<java.lang.String> strList44 = null;
        getLabReports43.LaboratoryIds = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList47 = postUserV2_46.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = dischargeSummary50.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        dischargeSummary50.MeasurementTime = instant54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse49.setNextToken(instant54);
        java.time.Instant instant58 = locationDescriptionListServiceResponse49.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities59 = getActivities48.setToStartTime(instant58);
        java.lang.String str60 = getActivities59.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities62 = getActivities59.setLimit((java.lang.Integer) 1);
        getActivities62.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        getObservationsV2_66.SpecimenIds = strList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray76 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags72.setTagUniqueIds(strList77);
        getObservationsV2_66.QualityControlTypes = strList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest81 = timeAlignedDataServiceRequest65.setTimeSeriesUniqueIds(strList77);
        getActivities62.CollectionMethodIds = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_83 = postUserV2_46.setRoles((java.util.List<java.lang.String>) strList77);
        getLabReports43.Search = strList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags85 = putLocationTags39.setTagUniqueIds(strList77);
        postQualifier0.GroupIdentifiers = strList77;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNotNull(qualifierBase5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(applyTagRequestArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertNotNull(getLabReports43);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(dischargeSummary52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(getActivities59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(getActivities62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest81);
        org.junit.Assert.assertNotNull(postUserV2_83);
        org.junit.Assert.assertNotNull(putLocationTags85);
    }

    @Test
    public void test56877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56877");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds2 = timeSeriesUniqueIds0.setIsDeleted((java.lang.Boolean) true);
        timeSeriesUniqueIds2.UniqueId = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.Boolean boolean5 = timeSeriesUniqueIds2.IsDeleted;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds7 = timeSeriesUniqueIds2.setHasAttributeChange((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        postRecurringReport11.NextGenerationDate = instant15;
        java.time.Instant instant18 = postRecurringReport11.getNextGenerationDate();
        java.lang.String str19 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant18);
        metadataChangeTransactionListServiceRequest10.QueryFrom = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest21 = downchainProcessorListByRatingModelServiceRequest9.setQueryTo(instant18);
        downchainProcessorListByRatingModelServiceRequest8.QueryFrom = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds23 = timeSeriesUniqueIds7.setFirstPointChanged(instant18);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds2);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + true + "'", boolean5, true);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds7);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str19, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest21);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds23);
    }

    @Test
    public void test56878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56878");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation75 = postSamplingLocation73.setName("POST");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList76 = postSamplingLocation73.Standards;
        postSamplingLocation73.Latitude = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation80 = postSamplingLocation73.setHorizontalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation82 = postSamplingLocation80.setLatitude("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation84 = postSamplingLocation82.setVerticalDatum("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone85 = postSamplingLocation82.TimeZone;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation87 = postSamplingLocation82.setName("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNotNull(postSamplingLocation75);
        org.junit.Assert.assertNull(standardSimpleList76);
        org.junit.Assert.assertNotNull(postSamplingLocation80);
        org.junit.Assert.assertNotNull(postSamplingLocation82);
        org.junit.Assert.assertNotNull(postSamplingLocation84);
        org.junit.Assert.assertNull(timeZone85);
        org.junit.Assert.assertNotNull(postSamplingLocation87);
    }

    @Test
    public void test56879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56879");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        java.time.Instant instant4 = getObservationExportIIV2_0.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_6 = getObservationExportIIV2_0.setDepthUnitId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_8 = getObservationExportIIV2_6.setCursor("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList10 = getObservationExportIIV2_9.getCollectionMethodIds();
        java.lang.String str11 = getObservationExportIIV2_9.getDepthUnitCustomId();
        java.time.Instant instant12 = getObservationExportIIV2_9.getStartResultTime();
        getObservationExportIIV2_9.DetectionCondition = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV;
        getObservationExportIIV2_9.Format = getObservationExportIIFormatType15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_17 = getObservationExportIIV2_6.setFormat(getObservationExportIIFormatType15);
        java.util.List<java.lang.String> strList18 = null;
        getObservationExportIIV2_17.AnalysisMethodSimpleIds = strList18;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_6);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertTrue("'" + getObservationExportIIFormatType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV + "'", getObservationExportIIFormatType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV));
        org.junit.Assert.assertNotNull(getObservationExportIIV2_17);
    }

    @Test
    public void test56880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56880");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup0.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4, accessGroupArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup6 = searchResultAccessGroup0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4);
        searchResultAccessGroup0.Cursor = "MinDuration";
        java.lang.Integer int9 = searchResultAccessGroup0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList10 = searchResultAccessGroup0.DomainObjects;
        java.lang.String str11 = searchResultAccessGroup0.getCursor();
        java.lang.String str12 = searchResultAccessGroup0.getCursor();
        java.lang.String str13 = searchResultAccessGroup0.getCursor();
        org.junit.Assert.assertNotNull(accessGroupArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(accessGroupList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MinDuration" + "'", str11, "MinDuration");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MinDuration" + "'", str12, "MinDuration");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MinDuration" + "'", str13, "MinDuration");
    }

    @Test
    public void test56881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56881");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.getApprovalName8();
        timeAlignedPoint0.ApprovalLevel10 = 0L;
        java.lang.String str13 = timeAlignedPoint0.Method2;
        timeAlignedPoint0.GradeName3 = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.String str16 = timeAlignedPoint0.GradeName7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint18 = timeAlignedPoint0.setDisplayValue9("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str19 = timeAlignedPoint0.getQualifiers10();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint21 = timeAlignedPoint0.setMethod4("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.lang.String str22 = timeAlignedPoint21.GradeName2;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeAlignedPoint18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(timeAlignedPoint21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test56882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56882");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation3.setPlannedFieldResult(plannedFieldResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = null;
        observation5.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setStatistics(observationStatistics8);
        java.time.OffsetDateTime offsetDateTime10 = observation9.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = observation9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade14 = observation13.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        observation13.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation21 = postSamplingLocation2.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime23 = fieldTripBasic22.getEndTime();
        java.lang.String str24 = fieldTripBasic22.Participants;
        fieldTripBasic22.Notes = "'.'SSSSSSS";
        java.lang.String str27 = fieldTripBasic22.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str29 = domainObjectAttachment28.getId();
        java.lang.String str30 = domainObjectAttachment28.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment31 = null;
        domainObjectAttachment28.Attachment = attachment31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str34 = domainObjectAttachment33.getId();
        domainObjectAttachment33.Id = "2021.4.62.0";
        java.lang.String str37 = domainObjectAttachment33.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        domainObjectAttachment38.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = domainObjectAttachment38.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = domainObjectAttachment44.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str48 = domainObjectAttachment47.getId();
        java.lang.String str49 = domainObjectAttachment47.getId();
        domainObjectAttachment47.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = domainObjectAttachment47.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = domainObjectAttachment53.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        domainObjectAttachment57.Attachment = attachment60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        java.lang.String str64 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment28, domainObjectAttachment33, domainObjectAttachment44, domainObjectAttachment53, domainObjectAttachment56, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList66, domainObjectAttachmentArray65);
        fieldTripBasic22.Attachments = domainObjectAttachmentList66;
        postSamplingLocation2.Attachments = domainObjectAttachmentList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity70.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity74 = postActivity70.setPlannedActivity(plannedActivity73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType75 = postActivity70.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType76 = postActivity70.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation79 = observation77.setPlannedFieldResult(plannedFieldResult78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction80 = null;
        observation79.LabInstruction = labInstruction80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics82 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation83 = observation79.setStatistics(observationStatistics82);
        java.time.OffsetDateTime offsetDateTime84 = observation83.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList85 = observation83.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty86 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation87 = observation83.setObservedProperty(observedProperty86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics88 = observation83.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray90 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList91 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList91, extendedAttributeArray90);
        postActivity89.ExtendedAttributes = extendedAttributeList91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation94 = observation83.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity95 = postActivity70.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation96 = postSamplingLocation2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone97 = postSamplingLocation96.TimeZone;
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(resultGrade14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(postSamplingLocation21);
        org.junit.Assert.assertNull(offsetDateTime23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2021.4.62.0" + "'", str37, "2021.4.62.0");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment44);
        org.junit.Assert.assertNotNull(domainObjectAttachment46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(domainObjectAttachment53);
        org.junit.Assert.assertNotNull(domainObjectAttachment55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(postActivity74);
        org.junit.Assert.assertNull(activityType75);
        org.junit.Assert.assertNull(activityType76);
        org.junit.Assert.assertNotNull(observation79);
        org.junit.Assert.assertNotNull(observation83);
        org.junit.Assert.assertNull(offsetDateTime84);
        org.junit.Assert.assertNull(importHistoryEventSimpleList85);
        org.junit.Assert.assertNotNull(observation87);
        org.junit.Assert.assertNull(observationStatistics88);
        org.junit.Assert.assertNotNull(extendedAttributeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(observation94);
        org.junit.Assert.assertNotNull(postActivity95);
        org.junit.Assert.assertNotNull(postSamplingLocation96);
        org.junit.Assert.assertNull(timeZone97);
    }

    @Test
    public void test56883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56883");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSpecimen deleteSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSpecimen();
        deleteSpecimen0.Id = "9999-12-31T23:59:59.999Z";
        deleteSpecimen0.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSpecimen deleteSpecimen6 = deleteSpecimen0.setId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSpecimen deleteSpecimen8 = deleteSpecimen0.setId("/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(deleteSpecimen6);
        org.junit.Assert.assertNotNull(deleteSpecimen8);
    }

    @Test
    public void test56884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56884");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen2.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = putSpecimen2.getShippingContainer();
        java.lang.String str5 = putSpecimen2.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str7 = putLabReport6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = putLabReport6.Laboratory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory9.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str12 = laboratory9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = laboratory9.getAuditAttributes();
        java.lang.String str14 = laboratory9.getPointOfContact();
        putLabReport6.Laboratory = laboratory9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen16 = putSpecimen2.setLaboratory(laboratory9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = putSpecimen2.AnalyticalGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = specimenTemplate18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate20.Preservative = preservativeType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails23.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = specimenTemplate20.setAuditAttributes(auditAttributes26);
        putSpecimen2.TemplateCreatedFrom = specimenTemplate20;
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(shippingContainer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(laboratory8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(putSpecimen16);
        org.junit.Assert.assertNull(analyticalGroup17);
        org.junit.Assert.assertNotNull(specimenTemplate20);
        org.junit.Assert.assertTrue("'" + preservativeType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(specimenTemplate28);
    }

    @Test
    public void test56885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56885");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postTaxon0.ImportHistoryEventSimples;
        postTaxon0.ScientificName = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setComment("multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails6.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails6.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails6.setAuditAttributes(auditAttributes11);
        java.lang.String str13 = labResultDetails12.getAnalysisComment();
        labResultDetails12.PreparationMethod = "";
        labResultDetails12.QualityFlag = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails12.setDilutionFactor("http");
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails21 = labResultDetails12.setDateReceived(offsetDateTime20);
        java.lang.String str22 = labResultDetails12.PreparationMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType25 = mediaType23.setWildcardType((java.lang.Boolean) true);
        java.lang.String str26 = mediaType23.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str28 = labResultDetails27.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = labResultDetails27.setLaboratory(laboratory29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory31.Id = "MaxInstant";
        java.lang.String str34 = laboratory31.PhoneNumber;
        laboratory31.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str37 = laboratory31.PointOfContact;
        laboratory31.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails40 = labResultDetails27.setLaboratory(laboratory31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType41 = mediaType23.setParameters((java.lang.Object) laboratory31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails42 = labResultDetails12.setLaboratory(laboratory31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation45 = putSamplingLocation43.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation47 = putSamplingLocation45.setVerticalCollectionMethod("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation49 = putSamplingLocation45.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation52 = observation50.setPlannedFieldResult(plannedFieldResult51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction53 = null;
        observation52.LabInstruction = labInstruction53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation56 = observation52.setStatistics(observationStatistics55);
        java.time.OffsetDateTime offsetDateTime57 = observation56.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit59 = null;
        quantity58.Unit = unit59;
        observation56.Depth = quantity58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation62 = putSamplingLocation49.setElevation(quantity58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = locationGroupType64.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType67 = locationGroupType64.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup63.LocationGroupType = locationGroupType64;
        java.lang.String str69 = putSamplingLocationGroup63.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup71 = putSamplingLocationGroup63.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType72 = putSamplingLocationGroup63.getLocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = locationGroupType72.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject76 = postProject74.setAuditAttributes(auditAttributes75);
        java.time.OffsetDateTime offsetDateTime77 = null;
        postProject74.StartTime = offsetDateTime77;
        java.time.OffsetDateTime offsetDateTime79 = postProject74.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject81 = postProject74.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan82.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType85 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan82.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup87 = samplingPlan82.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes88 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan89 = samplingPlan82.setAuditAttributes(auditAttributes88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject90 = postProject81.setAuditAttributes(auditAttributes88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes91 = postProject81.AuditAttributes;
        locationGroupType72.AuditAttributes = auditAttributes91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation93 = putSamplingLocation62.setAuditAttributes(auditAttributes91);
        java.lang.String str94 = putSamplingLocation93.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes95 = putSamplingLocation93.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails96 = labResultDetails42.setAuditAttributes(auditAttributes95);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes97 = labResultDetails42.getAuditAttributes();
        postTaxon5.AuditAttributes = auditAttributes97;
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(labResultDetails8);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str13, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(labResultDetails21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(mediaType25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(labResultDetails30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(labResultDetails40);
        org.junit.Assert.assertNotNull(mediaType41);
        org.junit.Assert.assertNotNull(labResultDetails42);
        org.junit.Assert.assertNotNull(putSamplingLocation45);
        org.junit.Assert.assertNotNull(putSamplingLocation47);
        org.junit.Assert.assertNotNull(putSamplingLocation49);
        org.junit.Assert.assertNotNull(observation52);
        org.junit.Assert.assertNotNull(observation56);
        org.junit.Assert.assertNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(putSamplingLocation62);
        org.junit.Assert.assertNull(auditAttributes65);
        org.junit.Assert.assertNotNull(locationGroupType67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup71);
        org.junit.Assert.assertNotNull(locationGroupType72);
        org.junit.Assert.assertNull(auditAttributes73);
        org.junit.Assert.assertNotNull(postProject76);
        org.junit.Assert.assertNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(postProject81);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType85 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType85.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup87);
        org.junit.Assert.assertNotNull(samplingPlan89);
        org.junit.Assert.assertNotNull(postProject90);
        org.junit.Assert.assertNotNull(auditAttributes91);
        org.junit.Assert.assertNotNull(putSamplingLocation93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "POST" + "'", str94, "POST");
        org.junit.Assert.assertNotNull(auditAttributes95);
        org.junit.Assert.assertNotNull(labResultDetails96);
        org.junit.Assert.assertNotNull(auditAttributes97);
    }

    @Test
    public void test56886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56886");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        putAttachment0.Latitude = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment4 = putAttachment0.setLatitude("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment6 = putAttachment0.setFileSize((java.lang.Integer) 10);
        java.lang.String str7 = putAttachment0.ContentType;
        putAttachment0.Latitude = "http://MaxDurationhttp";
        org.junit.Assert.assertNotNull(putAttachment4);
        org.junit.Assert.assertNotNull(putAttachment6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56887");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit deleteFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit deleteFieldVisit2 = deleteFieldVisit0.setId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str3 = deleteFieldVisit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit deleteFieldVisit5 = deleteFieldVisit0.setId("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str6 = deleteFieldVisit0.Id;
        org.junit.Assert.assertNotNull(deleteFieldVisit2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str3, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(deleteFieldVisit5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****" + "'", str6, "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
    }

    @Test
    public void test56888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56888");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard2 = postStandard0.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard4 = postStandard2.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard6 = postStandard4.setDescription("/AQUARIUS/Provisioning/v1");
        postStandard4.Id = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval9 = postStandard4.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard11 = postStandard4.setCustomId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNotNull(postStandard2);
        org.junit.Assert.assertNotNull(postStandard4);
        org.junit.Assert.assertNotNull(postStandard6);
        org.junit.Assert.assertNull(interval9);
        org.junit.Assert.assertNotNull(postStandard11);
    }

    @Test
    public void test56889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56889");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str1 = analysisMethod0.getName();
        analysisMethod0.MethodId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList8, observedPropertyArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod10 = postLabAnalysisMethod6.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = postLabAnalysisMethod6.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = postLabAnalysisMethod12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty();
        java.lang.Integer int15 = searchResultObservedProperty14.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty17 = searchResultObservedProperty14.setCursor("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod18.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList22, observedPropertyArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = postLabAnalysisMethod20.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod26 = postLabAnalysisMethod20.setAuditAttributes(auditAttributes25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList27 = postLabAnalysisMethod26.getObservedProperties();
        searchResultObservedProperty14.DomainObjects = observedPropertyList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod12.setObservedProperties(observedPropertyList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analysisMethod0.setObservedProperties(observedPropertyList27);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList31 = analysisMethod0.ObservedProperties;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = analysisMethod0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = analysisMethod0.getImportHistoryEventSimples();
        java.lang.String str34 = analysisMethod0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(observedPropertyArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(searchResultObservedProperty17);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(observedPropertyArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod24);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod26);
        org.junit.Assert.assertNotNull(observedPropertyList27);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(analysisMethod30);
        org.junit.Assert.assertNotNull(observedPropertyList31);
        org.junit.Assert.assertNull(auditAttributes32);
        org.junit.Assert.assertNull(importHistoryEventSimpleList33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test56890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56890");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter searchResultFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter();
        java.lang.String str1 = searchResultFilter0.getCursor();
        java.lang.Integer int2 = searchResultFilter0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter searchResultFilter4 = searchResultFilter0.setTotalCount((java.lang.Integer) (-1));
        searchResultFilter0.Cursor = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str7 = searchResultFilter0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter> filterList8 = searchResultFilter0.getDomainObjects();
        java.lang.String str9 = searchResultFilter0.getCursor();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(searchResultFilter4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str7, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(filterList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str9, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test56891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56891");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade();
        grade0.Description = "ZZZZZ";
        java.lang.Integer int3 = grade0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade5 = grade0.setIsSystem((java.lang.Boolean) true);
        grade0.GradeCode = 5;
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(grade5);
    }

    @Test
    public void test56892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56892");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str1 = activeMeterDetails0.SoftwareVersion;
        java.lang.String str2 = activeMeterDetails0.Manufacturer;
        activeMeterDetails0.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList6, activeMeterCalibrationArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails8 = activeMeterDetails0.setMeterCalibrations(activeMeterCalibrationList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails10 = activeMeterDetails8.setSoftwareVersion("POST");
        java.lang.String str11 = activeMeterDetails8.Model;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList12 = activeMeterDetails8.getMeterCalibrations();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails8);
        org.junit.Assert.assertNotNull(activeMeterDetails10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList12);
    }

    @Test
    public void test56893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56893");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        java.lang.Double double27 = getGroupedObservationsV2_0.getDepthValue();
        java.lang.Double double28 = getGroupedObservationsV2_0.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        postRecurringReport30.NextGenerationDate = instant34;
        java.time.Instant instant37 = postRecurringReport30.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = statisticalDateTimeOffset29.setDateTimeOffset(instant37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_39 = getGroupedObservationsV2_0.setEndResultTime(instant37);
        java.util.List<java.lang.String> strList40 = getGroupedObservationsV2_39.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_42 = getGroupedObservationsV2_39.setImportHistoryEventId("zZZZZ");
        getGroupedObservationsV2_39.DepthValue = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList46 = putOpenIdConnectRelyingPartyConfiguration45.getScopes();
        java.lang.String str47 = putOpenIdConnectRelyingPartyConfiguration45.getOptionalIssuerDiscoveryUri();
        java.lang.String str48 = putOpenIdConnectRelyingPartyConfiguration45.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_50.setDataClassifications((java.util.List<java.lang.String>) strList54);
        java.time.Instant instant57 = getObservationsV2_50.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        getObservationsV2_59.SpecimenIds = strList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray69 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = putLocationTags65.setTagUniqueIds(strList70);
        getObservationsV2_59.QualityControlTypes = strList70;
        java.util.List<java.lang.String> strList74 = getObservationsV2_59.getLabReportIds();
        importItem58.Errors = getObservationsV2_59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList77 = getObservationsV2_76.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        getObservationsV2_78.SpecimenIds = strList81;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray88 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags91 = putLocationTags84.setTagUniqueIds(strList89);
        getObservationsV2_78.QualityControlTypes = strList89;
        getObservationsV2_76.ResultGrades = strList89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem94 = importItem58.setFields((java.util.List<java.lang.String>) strList89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_95 = getObservationsV2_50.setSearch((java.util.List<java.lang.String>) strList89);
        importItemSamplingLocation49.Fields = strList89;
        putOpenIdConnectRelyingPartyConfiguration45.HostedDomains = strList89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_98 = getGroupedObservationsV2_39.setActivityTypes((java.util.List<java.lang.String>) strList89);
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset38);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_42);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNull(instant57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(putLocationTags72);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(putLocationTags91);
        org.junit.Assert.assertNotNull(importItem94);
        org.junit.Assert.assertNotNull(getObservationsV2_95);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_98);
    }

    @Test
    public void test56894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56894");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2();
        java.lang.Boolean boolean1 = postObservationsDryRunV2_0.LinkFieldVisitsForNewObservations;
        java.lang.Boolean boolean2 = postObservationsDryRunV2_0.getLinkFieldVisitsForNewObservations();
        postObservationsDryRunV2_0.FileType = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_6 = postObservationsDryRunV2_0.setLinkFieldVisitsForNewObservations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_8 = postObservationsDryRunV2_6.setFileType("multipart/form-data; boundary=****9dca3c57-4d61-4929-84c6-58c5a7f24542****");
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_6);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_8);
    }

    @Test
    public void test56895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56895");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList2, adcpDischargeActivityArray1);
        dischargeActivity0.AdcpDischargeActivities = adcpDischargeActivityList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList6, engineeredStructureDischargeActivityArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity8 = dischargeActivity0.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList10, otherMethodDischargeActivityArray9);
        dischargeActivity0.OtherMethodDischargeActivities = otherMethodDischargeActivityList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList13 = dischargeActivity0.AdcpDischargeActivities;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList14 = dischargeActivity0.getEngineeredStructureDischargeActivities();
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dischargeActivity8);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(adcpDischargeActivityList13);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList14);
    }

    @Test
    public void test56896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56896");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putSchedule3.EndDate = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = putSchedule3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int10 = samplingPlan9.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan12 = samplingPlan9.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan14 = samplingPlan12.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup17 = samplingLocationGroup15.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup19 = samplingLocationGroup17.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str20 = samplingLocationGroup17.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan21 = samplingPlan14.setSamplingLocationGroup(samplingLocationGroup17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule22 = putSchedule3.setSamplingLocationGroup(samplingLocationGroup17);
        java.lang.String str23 = samplingLocationGroup17.Id;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(putSchedule8);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(samplingPlan12);
        org.junit.Assert.assertNotNull(samplingPlan14);
        org.junit.Assert.assertNotNull(samplingLocationGroup17);
        org.junit.Assert.assertNotNull(samplingLocationGroup19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str20, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(samplingPlan21);
        org.junit.Assert.assertNotNull(putSchedule22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test56897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56897");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        java.lang.String str1 = fieldVisitDataByLocationServiceRequest0.getConvertToStandardReferenceDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest3 = fieldVisitDataByLocationServiceRequest0.setApplyRounding((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList4 = fieldVisitDataByLocationServiceRequest0.Activities;
        java.lang.Boolean boolean5 = fieldVisitDataByLocationServiceRequest0.isIncludeVerticals();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList6 = fieldVisitDataByLocationServiceRequest0.getActivities();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest3);
        org.junit.Assert.assertNull(activityTypeList4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(activityTypeList6);
    }

    @Test
    public void test56898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56898");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_0.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = getChartDataV2_0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_5 = getChartDataV2_0.setCursor("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str7 = openIdConnectRelyingPartyConfiguration6.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration6.ClientIdentifier = "MaxDuration";
        openIdConnectRelyingPartyConfiguration6.IssuerIdentifier = "MinInstant";
        java.util.List<java.lang.String> strList12 = openIdConnectRelyingPartyConfiguration6.Scopes;
        java.lang.String str13 = openIdConnectRelyingPartyConfiguration6.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        processor14.ProcessorType = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities17.Limit = 10;
        java.util.List<java.lang.String> strList20 = getActivities17.ActivityTemplateId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList22 = getExportObservations21.getLabReportIds();
        java.lang.String str23 = getExportObservations21.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj25 = getActivityTemplates24.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        getObservationsV2_26.SpecimenIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        getObservationsV2_26.QualityControlTypes = strList37;
        getActivityTemplates24.Type = strList37;
        getExportObservations21.AnalyticalGroupIds = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities43 = getActivities17.setMedia((java.util.List<java.lang.String>) strList37);
        processor14.InputTimeSeriesUniqueIds = strList37;
        openIdConnectRelyingPartyConfiguration6.Scopes = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_5.setSpecimenIds((java.util.List<java.lang.String>) strList37);
        java.lang.String str47 = getChartDataV2_5.getCursor();
        getChartDataV2_5.DepthValue = 0.0d;
        java.util.List<java.lang.String> strList50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_51 = getChartDataV2_5.setMedia(strList50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getChartDataV2_5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(getActivities43);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ZZZZZ" + "'", str47, "ZZZZZ");
        org.junit.Assert.assertNotNull(getChartDataV2_51);
    }

    @Test
    public void test56899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56899");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnit deleteUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnit();
        deleteUnit0.Id = "https";
        java.lang.String str3 = deleteUnit0.Id;
        deleteUnit0.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "https" + "'", str3, "https");
    }

    @Test
    public void test56900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56900");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        java.lang.Double double3 = vertical2.getCosineOfUniqueFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = vertical2.TaglinePosition;
        vertical2.IsDischargeEstimated = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = null;
        adcpDischargeActivity7.TransducerDepth = quantityWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        adcpDischargeActivity7.TransducerDepth = quantityWithDisplay10;
        java.lang.Boolean boolean12 = adcpDischargeActivity7.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity14 = adcpDischargeActivity7.setDepthReference("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        volumetricDischargeReading15.IsUsed = false;
        java.lang.Boolean boolean18 = volumetricDischargeReading15.IsUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str20 = pointVelocityDischargeActivity19.getModel();
        java.lang.String str21 = pointVelocityDischargeActivity19.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay22 = null;
        pointVelocityDischargeActivity19.Width = quantityWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType24 = null;
        pointVelocityDischargeActivity19.StartPoint = startPointType24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = pointVelocityDischargeActivity19.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        pointVelocityDischargeActivity19.MeterInspectedAfter = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = pointVelocityDischargeActivity19.setSoftwareVersion("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity19.setSerialNumber("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity36 = pointVelocityDischargeActivity34.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity34.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity40 = pointVelocityDischargeActivity34.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity42 = pointVelocityDischargeActivity40.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = null;
        crossSectionPoint43.Distance = quantityWithDisplay44;
        crossSectionPoint43.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = crossSectionPoint43.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint50 = crossSectionPoint43.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint52 = crossSectionPoint50.setElevation(quantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay53 = null;
        crossSectionPoint52.Depth = quantityWithDisplay53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint52.Depth = datumConvertedQuantityWithDisplay55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = crossSectionPoint52.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity58 = pointVelocityDischargeActivity40.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity59 = pointVelocityDischargeActivity33.setDistanceToMeter(quantityWithDisplay57);
        volumetricDischargeReading15.DurationInSeconds = quantityWithDisplay57;
        adcpDischargeActivity7.Width = quantityWithDisplay57;
        java.lang.String str62 = quantityWithDisplay57.Display;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical63 = vertical2.setTaglinePosition(quantityWithDisplay57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical65 = vertical63.setIsSoundedDepthEstimated((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(adcpDischargeActivity14);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity27);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity31);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity36);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity40);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity42);
        org.junit.Assert.assertNull(quantityWithDisplay48);
        org.junit.Assert.assertNotNull(crossSectionPoint50);
        org.junit.Assert.assertNotNull(crossSectionPoint52);
        org.junit.Assert.assertNotNull(quantityWithDisplay57);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity58);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(vertical63);
        org.junit.Assert.assertNotNull(vertical65);
    }

    @Test
    public void test56901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56901");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.ComputationPeriodIdentifier = "MaxInstant";
        java.lang.String str3 = postDatumConvertedTimeSeries0.getSubLocationIdentifier();
        java.lang.String str4 = postDatumConvertedTimeSeries0.getComputationIdentifier();
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComputationPeriodIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries7 = postDatumConvertedTimeSeries0.setTargetIsLocalAssumedDatum((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries9 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("9999-12-31T23:59:59.9999999Z");
        java.lang.String str10 = postDatumConvertedTimeSeries9.Description;
        java.lang.String str11 = postDatumConvertedTimeSeries9.Description;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries7);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test56902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56902");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod getMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetMonitoringMethod();
        java.lang.String str1 = getMonitoringMethod0.getMethodCode();
        getMonitoringMethod0.MethodCode = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56903");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity();
        schedulePlannedActivity0.Instruction = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate5 = activityTemplate3.setMedium(mediumType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity6 = schedulePlannedActivity0.setActivityTemplate(activityTemplate5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType7 = schedulePlannedActivity0.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = null;
        activityTemplate8.AuditAttributes = auditAttributes9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str12 = putActivityTemplate11.getId();
        java.lang.String str13 = putActivityTemplate11.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = auditAttributes14.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate17 = putActivityTemplate11.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate17.Medium = mediumType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate20 = activityTemplate8.setMedium(mediumType18);
        schedulePlannedActivity0.ActivityTemplate = activityTemplate8;
        java.lang.String str22 = schedulePlannedActivity0.Instruction;
        java.lang.String str23 = schedulePlannedActivity0.getInstruction();
        org.junit.Assert.assertTrue("'" + mediumType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate5);
        org.junit.Assert.assertNotNull(schedulePlannedActivity6);
        org.junit.Assert.assertNull(activityType7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(auditAttributes16);
        org.junit.Assert.assertNotNull(putActivityTemplate17);
        org.junit.Assert.assertTrue("'" + mediumType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-PT87591240H" + "'", str22, "-PT87591240H");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-PT87591240H" + "'", str23, "-PT87591240H");
    }

    @Test
    public void test56904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56904");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        java.lang.String str3 = activity1.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType4 = activity1.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device7 = device5.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = device7.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str10 = device7.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity11 = activity1.setDevice(device7);
        java.lang.String str12 = activity1.getCustomId();
        java.lang.Boolean boolean13 = activity1.getRefreshed();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity15 = activity1.setId("http://MaxDurationhttp");
        activity15.SourceActivityId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postActivityTemplate18.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType20 = postActivityTemplate18.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str22 = metricConfiguration21.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty23.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration26 = metricConfiguration21.setObservedProperty(observedProperty23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType27 = observedProperty23.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup29 = postObservedProperty28.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = null;
        quantity30.Unit = unit31;
        postObservedProperty28.LowerLimit = quantity30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity34 = postObservedProperty28.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit35 = quantity34.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty36 = observedProperty23.setUpperLimit(quantity34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation38.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation42 = observation38.setCategoricalResult(categoricalResult41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList44, importHistoryEventSimpleArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation46 = observation38.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod47 = postLabAnalysisMethod37.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList44);
        observedProperty36.ImportHistoryEventSimples = importHistoryEventSimpleList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = observedProperty36.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = observedProperty50.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate52 = postActivityTemplate18.setDepth(quantity51);
        postActivityTemplate52.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = null;
        postActivityTemplate52.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity57.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity61 = postActivity57.setPlannedActivity(plannedActivity60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType62 = postActivity57.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate64.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList69 = specimenTemplate68.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate72 = specimenTemplate70.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList75 = specimenTemplate74.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate64, specimenTemplate67, specimenTemplate68, specimenTemplate72, specimenTemplate73, specimenTemplate74 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList77 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList77, specimenTemplateArray76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate79 = postFieldVisitActivityWithTemplate63.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate81 = postFieldVisitActivityWithTemplate79.setCollectionMethod(collectionMethod80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity82 = postActivity57.setCollectionMethod(collectionMethod80);
        postActivityTemplate52.CollectionMethod = collectionMethod80;
        java.lang.String str84 = collectionMethod80.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = collectionMethod80.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity86 = activity15.setCollectionMethod(collectionMethod80);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList87 = activity86.getSamplingContextTags();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(activityType4);
        org.junit.Assert.assertNotNull(device7);
        org.junit.Assert.assertNotNull(device9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str10, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(activity15);
        org.junit.Assert.assertNull(quantity19);
        org.junit.Assert.assertNull(activityTemplateType20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(metricConfiguration26);
        org.junit.Assert.assertNull(resultType27);
        org.junit.Assert.assertNull(unitGroup29);
        org.junit.Assert.assertNotNull(quantity34);
        org.junit.Assert.assertNull(unit35);
        org.junit.Assert.assertNotNull(observedProperty36);
        org.junit.Assert.assertNotNull(observation42);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(observation46);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod47);
        org.junit.Assert.assertNotNull(observedProperty50);
        org.junit.Assert.assertNotNull(quantity51);
        org.junit.Assert.assertNotNull(postActivityTemplate52);
        org.junit.Assert.assertNotNull(postActivity61);
        org.junit.Assert.assertNull(activityType62);
        org.junit.Assert.assertNull(labInstructionTemplateList69);
        org.junit.Assert.assertNotNull(specimenTemplate72);
        org.junit.Assert.assertNull(labInstructionTemplateList75);
        org.junit.Assert.assertNotNull(specimenTemplateArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate79);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate81);
        org.junit.Assert.assertNotNull(postActivity82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(auditAttributes85);
        org.junit.Assert.assertNotNull(activity86);
        org.junit.Assert.assertNull(samplingContextTagList87);
    }

    @Test
    public void test56905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56905");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.SamplingContextTagIds;
        java.util.List<java.lang.String> strList3 = getChartDataV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        java.lang.Double double22 = getObservationsV2_4.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = getObservationsV2_24.setDataClassifications((java.util.List<java.lang.String>) strList28);
        postTag23.PickListValues = strList28;
        getObservationsV2_4.SpecimenIds = strList28;
        getChartDataV2_0.ActivityTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList35 = getObservationsV2_34.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        getObservationsV2_34.ResultGrades = strList47;
        java.lang.Double double52 = getObservationsV2_34.getMinNumericResultValue();
        getObservationsV2_34.DetectionCondition = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest55.ReportTitle = "MinDuration";
        java.lang.String str58 = reportListServiceRequest55.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        getObservationsV2_59.SpecimenIds = strList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray69 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = putLocationTags65.setTagUniqueIds(strList70);
        getObservationsV2_59.QualityControlTypes = strList70;
        java.util.List<java.lang.String> strList74 = getObservationsV2_59.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = getObservationsV2_59.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList77 = getObservationsV2_76.getMedia();
        java.time.Instant instant78 = getObservationsV2_76.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        getObservationsV2_79.SpecimenIds = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = getObservationsV2_76.setProjectIds((java.util.List<java.lang.String>) strList82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest86 = reportListServiceRequest55.setTagKeys(strList82);
        reportListServiceRequest55.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        java.util.ArrayList<java.lang.String> strList89 = reportListServiceRequest55.getTimeSeriesUniqueIds();
        java.util.ArrayList<java.lang.String> strList90 = reportListServiceRequest55.TagKeys;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_34.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList90);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_92 = getChartDataV2_0.setResultGrades((java.util.List<java.lang.String>) strList90);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_30);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(double52);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(putLocationTags72);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(getObservationsV2_76);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNull(instant78);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_85);
        org.junit.Assert.assertNotNull(reportListServiceRequest86);
        org.junit.Assert.assertNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(getChartDataV2_92);
    }

    @Test
    public void test56906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56906");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRoleFlattened putRoleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRoleFlattened();
        putRoleFlattened0.UniqueId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase4 = putRoleFlattened0.setName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRoleFlattened putRoleFlattened6 = putRoleFlattened0.setUniqueId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        putRoleFlattened6.CanAddOrRemoveLocations = true;
        putRoleFlattened6.CanRemoveFieldVisits = false;
        org.junit.Assert.assertNotNull(roleFlattenedBase4);
        org.junit.Assert.assertNotNull(putRoleFlattened6);
    }

    @Test
    public void test56907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56907");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getAssemblyQualifiedTypeName();
        java.lang.Integer int2 = fieldDataPlugin0.getPluginPriority();
        java.lang.Boolean boolean3 = fieldDataPlugin0.IsEnabled;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin5 = fieldDataPlugin0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        fieldDataPlugin5.IsEnabled = false;
        java.lang.Integer int8 = fieldDataPlugin5.getPluginPriority();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin10 = fieldDataPlugin5.setPluginFolderName("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str11 = fieldDataPlugin10.getPluginFolderName();
        java.lang.String str12 = fieldDataPlugin10.PluginFolderName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(fieldDataPlugin5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(fieldDataPlugin10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str11, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str12, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
    }

    @Test
    public void test56908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56908");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField5 = extendedAttributeField2.setDisplayName("'.'SSSSSSS");
        java.lang.String str6 = extendedAttributeField5.getDisplayName();
        extendedAttributeField5.IsReadOnly = true;
        java.lang.Integer int9 = extendedAttributeField5.getNumericPrecision();
        java.lang.Boolean boolean10 = extendedAttributeField5.CanBeEmpty;
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(extendedAttributeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "'.'SSSSSSS" + "'", str6, "'.'SSSSSSS");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test56909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56909");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup searchResultSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList4, samplingLocationGroupArray3);
        postAccessGroup2.SamplingLocationGroups = samplingLocationGroupList4;
        putAccessGroup1.SamplingLocationGroups = samplingLocationGroupList4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup searchResultSamplingLocationGroup8 = searchResultSamplingLocationGroup0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList4);
        java.lang.Integer int9 = searchResultSamplingLocationGroup8.TotalCount;
        java.lang.String str10 = searchResultSamplingLocationGroup8.Cursor;
        java.lang.String str11 = searchResultSamplingLocationGroup8.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList12 = searchResultSamplingLocationGroup8.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup searchResultSamplingLocationGroup14 = searchResultSamplingLocationGroup8.setTotalCount((java.lang.Integer) 5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup searchResultSamplingLocationGroup16 = searchResultSamplingLocationGroup8.setTotalCount((java.lang.Integer) (-1));
        searchResultSamplingLocationGroup8.Cursor = "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****";
        org.junit.Assert.assertNotNull(samplingLocationGroupArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(searchResultSamplingLocationGroup8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(samplingLocationGroupList12);
        org.junit.Assert.assertNotNull(searchResultSamplingLocationGroup14);
        org.junit.Assert.assertNotNull(searchResultSamplingLocationGroup16);
    }

    @Test
    public void test56910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56910");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = sensorBase2.setManufacturer("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase6 = sensorBase2.setLocationUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase8 = sensorBase2.setParameterId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str9 = sensorBase8.SerialNumber;
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(sensorBase6);
        org.junit.Assert.assertNotNull(sensorBase8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test56911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56911");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str1 = unitMetadata0.getBaseOffset();
        java.lang.String str2 = unitMetadata0.UniqueId;
        java.lang.String str3 = unitMetadata0.BaseMultiplier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata5 = unitMetadata0.setGroupIdentifier("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata7 = unitMetadata0.setBaseMultiplier("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata9 = unitMetadata0.setGroupIdentifier("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str10 = unitMetadata0.getIdentifier();
        java.lang.String str11 = unitMetadata0.getIdentifier();
        unitMetadata0.UniqueId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata15 = unitMetadata0.setSymbol("http");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(unitMetadata5);
        org.junit.Assert.assertNotNull(unitMetadata7);
        org.junit.Assert.assertNotNull(unitMetadata9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(unitMetadata15);
    }

    @Test
    public void test56912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56912");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription3 = locationDescription1.setIdentifier("");
        java.util.ArrayList<java.lang.String> strList4 = locationDescription3.getSecondaryFolders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType6 = getExtendedAttributes5.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str8 = deleteFieldVisits7.getSort();
        java.util.List<java.lang.String> strList9 = deleteFieldVisits7.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        java.util.List<java.lang.String> strList17 = getObservationsV2_10.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        getObservationsV2_10.StartResultTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.ActivityIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setCollectionMethodIds((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits50 = deleteFieldVisits7.setSamplingPlanIds((java.util.List<java.lang.String>) strList44);
        getExtendedAttributes5.Ids = strList44;
        locationDescription3.SecondaryFolders = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen53 = importItemSpecimen0.setWarningMessages((java.util.List<java.lang.String>) strList44);
        java.util.List<java.lang.String> strList54 = importItemSpecimen53.getWarningMessages();
        java.lang.Object obj55 = importItemSpecimen53.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen56 = importItemSpecimen53.ExistingItem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen57 = importItemSpecimen53.Item;
        java.util.List<java.lang.String> strList58 = importItemSpecimen53.Fields;
        org.junit.Assert.assertNotNull(locationDescription3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(appliesToType6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(deleteFieldVisits50);
        org.junit.Assert.assertNotNull(importItemSpecimen53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(specimen56);
        org.junit.Assert.assertNull(specimen57);
        org.junit.Assert.assertNull(strList58);
    }

    @Test
    public void test56913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56913");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter2 = postFilter0.setCustomId("MaxInstant");
        java.time.OffsetDateTime offsetDateTime3 = postFilter0.EndTime;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter5 = postFilter0.setEndTime(offsetDateTime4);
        java.time.OffsetDateTime offsetDateTime6 = postFilter0.getStartTime();
        org.junit.Assert.assertNotNull(postFilter2);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(postFilter5);
        org.junit.Assert.assertNull(offsetDateTime6);
    }

    @Test
    public void test56914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56914");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter2 = postFilter0.setCustomId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList3 = postFilter2.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime4 = postFilter2.StartTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList5 = postFilter2.ObservedProperties;
        java.time.OffsetDateTime offsetDateTime6 = null;
        postFilter2.EndTime = offsetDateTime6;
        org.junit.Assert.assertNotNull(postFilter2);
        org.junit.Assert.assertNull(observedPropertyList3);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNull(observedPropertyList5);
    }

    @Test
    public void test56915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56915");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] activeMeterDetailsArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>) activeMeterDetailsList4, activeMeterDetailsArray3);
        activeMetersAndCalibrationsServiceResponse2.ActiveMeterDetails = activeMeterDetailsList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse7 = activeMetersAndCalibrationsServiceResponse1.setActiveMeterDetails(activeMeterDetailsList4);
        activeMetersAndCalibrationsServiceResponse0.ActiveMeterDetails = activeMeterDetailsList4;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList9 = activeMetersAndCalibrationsServiceResponse0.getActiveMeterDetails();
        org.junit.Assert.assertNotNull(activeMeterDetailsArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(activeMetersAndCalibrationsServiceResponse7);
        org.junit.Assert.assertNotNull(activeMeterDetailsList9);
    }

    @Test
    public void test56916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56916");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.Double double1 = attachment0.getGpsLongitude();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = attachment0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment4 = attachment0.setUrl("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Double double5 = attachment4.GpsLongitude;
        java.time.Instant instant6 = attachment4.getDateUploaded();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report9 = report7.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report11 = report9.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report13 = report11.setIsTransient((java.lang.Boolean) false);
        java.time.Instant instant14 = report11.getCreatedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList16 = getExportSpecimens15.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant18 = qualifier17.DateApplied;
        java.lang.String str19 = qualifier17.User;
        java.lang.String str20 = qualifier17.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = qualifier17.setDateApplied(instant24);
        getExportSpecimens15.Before = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark31 = locationRemark29.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList33 = fieldVisitDataServiceResponse32.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse35 = fieldVisitDataServiceResponse32.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary36.Reviewer = "";
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary36.MeasurementTime = instant39;
        fieldVisitDataServiceResponse32.ResponseTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark42 = locationRemark29.setCreateTime(instant39);
        getExportSpecimens15.EndModificationTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report44 = report11.setCreatedTime(instant39);
        attachment4.DateUploaded = instant39;
        java.lang.String str46 = attachment4.getUploadedByUser();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(tagMetadataList2);
        org.junit.Assert.assertNotNull(attachment4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(report9);
        org.junit.Assert.assertNotNull(report11);
        org.junit.Assert.assertNotNull(report13);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(qualifier27);
        org.junit.Assert.assertNotNull(locationRemark31);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList33);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse35);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationRemark42);
        org.junit.Assert.assertNotNull(report44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test56917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56917");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary2 = observationImportSummary0.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Integer int3 = observationImportSummary2.UpdateCount;
        java.lang.Integer int4 = observationImportSummary2.UpdateCount;
        observationImportSummary2.InvalidRowsCsvUrl = "MaxInstant";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList7 = observationImportSummary2.getImportJobErrors();
        java.lang.Integer int8 = observationImportSummary2.NewCount;
        org.junit.Assert.assertNotNull(observationImportSummary2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(importErrorList7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test56918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56918");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = postObservedProperty0.setCasNumber("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity4 = postObservedProperty3.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails5.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime8 = activityWithDetails5.getEndTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList9 = activityWithDetails5.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = null;
        putActivity10.Depth = quantity11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList14, metricResultArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity16 = putActivity10.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails17 = activityWithDetails5.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails19 = activityWithDetails5.setDepth(quantity18);
        java.time.OffsetDateTime offsetDateTime20 = activityWithDetails19.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = indexConfiguration21.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = indexConfiguration21.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList24 = indexConfiguration21.getIndexRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration26 = indexConfiguration21.setIssuingOrganization("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str28 = metricConfiguration27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty29.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration32 = metricConfiguration27.setObservedProperty(observedProperty29);
        java.lang.String str33 = observedProperty29.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity34 = observedProperty29.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration35 = indexConfiguration21.setObservedProperty(observedProperty29);
        java.lang.String str36 = indexConfiguration35.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration38 = indexConfiguration35.setId("MinInstant");
        activityWithDetails19.IndexConfiguration = indexConfiguration35;
        java.time.OffsetDateTime offsetDateTime40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails41 = activityWithDetails19.setStartTime(offsetDateTime40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        java.lang.String str43 = postActivityTemplate42.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_46 = postObservationV2_44.setLabInstruction(labInstruction45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime48 = activity47.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity50 = activity47.setLoggerFileName("'.'SSSSSSS");
        postObservationV2_44.Activity = activity47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity52.LoggerFileName = "hi!";
        java.lang.String str55 = postActivity52.LoggerFileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj57 = postObservedProperty56.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate60 = postFieldVisitActivityWithTemplate58.setAuditAttributes(auditAttributes59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation63 = observation61.setPlannedFieldResult(plannedFieldResult62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction64 = null;
        observation63.LabInstruction = labInstruction64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation67 = observation63.setStatistics(observationStatistics66);
        java.time.OffsetDateTime offsetDateTime68 = observation67.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit70 = null;
        quantity69.Unit = unit70;
        observation67.Depth = quantity69;
        postFieldVisitActivityWithTemplate60.Depth = quantity69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit74 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity75 = quantity69.setUnit(unit74);
        postObservedProperty56.LowerLimit = quantity69;
        postActivity52.Depth = quantity69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit78 = quantity69.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity79 = activity47.setDepth(quantity69);
        postActivityTemplate42.Depth = quantity69;
        activityWithDetails19.Depth = quantity69;
        postObservedProperty3.LowerLimit = quantity69;
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNotNull(postObservedProperty3);
        org.junit.Assert.assertNull(quantity4);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(specimenNestedInActivityList9);
        org.junit.Assert.assertNotNull(metricResultArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(putActivity16);
        org.junit.Assert.assertNotNull(activityWithDetails17);
        org.junit.Assert.assertNotNull(activityWithDetails19);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNull(indexRangeList24);
        org.junit.Assert.assertNotNull(indexConfiguration26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(metricConfiguration32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(quantity34);
        org.junit.Assert.assertNotNull(indexConfiguration35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(indexConfiguration38);
        org.junit.Assert.assertNotNull(activityWithDetails41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(postObservationV2_46);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(activity50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate60);
        org.junit.Assert.assertNotNull(observation63);
        org.junit.Assert.assertNotNull(observation67);
        org.junit.Assert.assertNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(quantity75);
        org.junit.Assert.assertNull(unit78);
        org.junit.Assert.assertNotNull(activity79);
    }

    @Test
    public void test56919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56919");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset();
        referenceStandardOffset0.Comments = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset4 = referenceStandardOffset0.setComments("2021.8.9990");
        org.junit.Assert.assertNotNull(referenceStandardOffset4);
    }

    @Test
    public void test56920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56920");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus2 = observationNestedInSpecimen0.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen4 = observationNestedInSpecimen0.setLabInstruction(labInstruction3);
        java.time.OffsetDateTime offsetDateTime5 = null;
        observationNestedInSpecimen0.ObservedTime = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult7 = observationNestedInSpecimen0.getNumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = observationNestedInSpecimen0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType9 = observationNestedInSpecimen0.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus10 = observationNestedInSpecimen0.ResultStatus;
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(resultStatus2);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen4);
        org.junit.Assert.assertNull(numericResult7);
        org.junit.Assert.assertNull(observedProperty8);
        org.junit.Assert.assertNull(dataClassificationType9);
        org.junit.Assert.assertNull(resultStatus10);
    }

    @Test
    public void test56921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56921");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation0.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase4 = postLocation0.setLocationType("/AQUARIUS/Acquisition/v2");
        postLocation0.Longitude = 100.0d;
        java.lang.Double double7 = postLocation0.getLatitude();
        java.lang.Boolean boolean8 = postLocation0.isPublish();
        postLocation0.UtcOffset = "2021.4.62.0";
        java.lang.String str11 = postLocation0.UtcOffset;
        java.lang.String str12 = postLocation0.getLocationPath();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase14 = postLocation0.setLongitude((java.lang.Double) (-1.0d));
        org.junit.Assert.assertNotNull(locationBase4);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2021.4.62.0" + "'", str11, "2021.4.62.0");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locationBase14);
    }

    @Test
    public void test56922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56922");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnit getUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnit getUnit2 = getUnit0.setUniqueId("'.'SSSSSSS");
        getUnit0.UniqueId = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        java.lang.String str5 = getUnit0.getUniqueId();
        org.junit.Assert.assertNotNull(getUnit2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str5, "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
    }

    @Test
    public void test56923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56923");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation33 = postSamplingLocation0.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation35 = postSamplingLocation33.setHorizontalDatum("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType36 = postSamplingLocation35.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = postSamplingLocation35.getAuditAttributes();
        java.lang.String str38 = postSamplingLocation35.getId();
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postSamplingLocation33);
        org.junit.Assert.assertNotNull(postSamplingLocation35);
        org.junit.Assert.assertNull(locationType36);
        org.junit.Assert.assertNull(auditAttributes37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test56924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56924");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty2 = postObservedProperty0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType3 = postObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity4 = postObservedProperty0.LowerLimit;
        java.lang.String str5 = postObservedProperty0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType7 = postExtendedAttribute6.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType8 = postExtendedAttribute6.getAppliesToType();
        java.lang.String str9 = postExtendedAttribute6.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute11 = postExtendedAttribute6.setMandatory((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str13 = collectionMethod12.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod15 = collectionMethod12.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag19 = samplingContextTag16.setAuditAttributes(auditAttributes18);
        java.lang.String str20 = samplingContextTag16.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = putDetectioncondition22.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition25 = putDetectioncondition22.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity28 = samplingPlanPlannedActivity26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = auditAttributes29.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity28.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = samplingPlanPlannedActivity28.AuditAttributes;
        putDetectioncondition22.AuditAttributes = auditAttributes33;
        analysisMethodSimple21.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = samplingContextTag16.setAuditAttributes(auditAttributes33);
        collectionMethod12.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute38 = postExtendedAttribute6.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType39 = postExtendedAttribute6.AppliesToType;
        java.lang.Boolean boolean40 = postExtendedAttribute6.getMandatory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = postExtendedAttribute6.AuditAttributes;
        postObservedProperty0.AuditAttributes = auditAttributes41;
        postObservedProperty0.Name = "multipart/form-data; boundary=****4b3b82c5-fb27-4c5a-8cf6-cb2705168ae1****";
        org.junit.Assert.assertNotNull(postObservedProperty2);
        org.junit.Assert.assertNull(analysisType3);
        org.junit.Assert.assertNull(quantity4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(dataType7);
        org.junit.Assert.assertNull(appliesToType8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postExtendedAttribute11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(collectionMethod15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(samplingContextTag19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(putDetectioncondition25);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity28);
        org.junit.Assert.assertNotNull(auditAttributes31);
        org.junit.Assert.assertNotNull(auditAttributes33);
        org.junit.Assert.assertNotNull(samplingContextTag36);
        org.junit.Assert.assertNotNull(postExtendedAttribute38);
        org.junit.Assert.assertNull(appliesToType39);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + false + "'", boolean40, false);
        org.junit.Assert.assertNotNull(auditAttributes41);
    }

    @Test
    public void test56925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56925");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str1 = deleteFieldVisits0.Sort;
        java.util.List<java.lang.String> strList2 = deleteFieldVisits0.getSearch();
        java.time.Instant instant3 = deleteFieldVisits0.getStartStartTime();
        java.util.List<java.lang.String> strList4 = deleteFieldVisits0.ScheduleIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        java.util.List<java.lang.String> strList21 = getObservationsV2_6.getLabReportIds();
        importItem5.Errors = getObservationsV2_6;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList23 = importItem5.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList25 = importItemObject24.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList27, importChangeItemArray26);
        importItemObject24.ItemComparison = importChangeItemList27;
        importItem5.ItemComparison = importChangeItemList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_33.setDataClassifications((java.util.List<java.lang.String>) strList37);
        postTag32.PickListValues = strList37;
        java.util.ArrayList<java.lang.String> strList41 = postTag32.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor42 = processor31.setInputTimeSeriesUniqueIds(strList41);
        importItem5.Fields = strList41;
        java.util.List<java.lang.String> strList44 = importItem5.Fields;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits45 = deleteFieldVisits0.setSamplingPlanIds(strList44);
        java.util.List<java.lang.String> strList46 = deleteFieldVisits45.getScheduleIds();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(importChangeItemList23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(importChangeItemArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(processor42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(deleteFieldVisits45);
        org.junit.Assert.assertNull(strList46);
    }

    @Test
    public void test56926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56926");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset();
        java.lang.String str1 = referenceStandardOffset0.getStandard();
        java.lang.String str2 = referenceStandardOffset0.getStandard();
        java.lang.String str3 = referenceStandardOffset0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset5 = referenceStandardOffset0.setStandard("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset7 = referenceStandardOffset0.setStandard("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        referenceStandardOffset0.Comments = "multipart/form-data; boundary=****93fa0488-d73a-481f-9f01-6a8383e9b743****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(referenceStandardOffset5);
        org.junit.Assert.assertNotNull(referenceStandardOffset7);
    }

    @Test
    public void test56927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56927");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        getObservationsV2_0.StartResultTime = instant11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_0.setCustomId("http://MaxDurationhttp");
        java.util.List<java.lang.String> strList16 = getObservationsV2_15.getAnalysisMethodIds();
        java.util.List<java.lang.String> strList17 = getObservationsV2_15.getAnalysisMethodIds();
        java.lang.String str18 = getObservationsV2_15.getDepthUnitId();
        getObservationsV2_15.MinNumericResultValue = 1.0d;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test56928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56928");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod0.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str4 = referencePointPeriod0.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod6 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection7 = referencePointPeriod6.MeasurementDirection;
        referencePointPeriod6.Method = "MinDuration";
        java.time.Instant instant10 = referencePointPeriod6.ValidFrom;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(referencePointPeriod6);
        org.junit.Assert.assertNull(measurementDirection7);
        org.junit.Assert.assertNull(instant10);
    }

    @Test
    public void test56929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56929");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        java.lang.String str2 = attachmentRepresentation0.Resolution;
        java.lang.String str3 = attachmentRepresentation0.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation0.setContentType("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
    }

    @Test
    public void test56930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56930");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetScheduleHistory getScheduleHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetScheduleHistory();
        java.lang.String str1 = getScheduleHistory0.Id;
        getScheduleHistory0.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetScheduleHistory getScheduleHistory5 = getScheduleHistory0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetScheduleHistory getScheduleHistory7 = getScheduleHistory0.setId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        getScheduleHistory0.Id = "multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getScheduleHistory5);
        org.junit.Assert.assertNotNull(getScheduleHistory7);
    }

    @Test
    public void test56931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56931");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList3 = putActivity0.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        domainObjectAttachment5.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment11 = domainObjectAttachment5.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment13 = domainObjectAttachment11.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str15 = domainObjectAttachment14.getId();
        java.lang.String str16 = domainObjectAttachment14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment11, domainObjectAttachment14 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList18, domainObjectAttachmentArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit20 = fieldVisit4.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList18);
        putActivity0.FieldVisit = fieldVisit20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType23 = null;
        putSpreadsheetTemplate22.Type = spreadsheetTemplateType23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType25 = putSpreadsheetTemplate22.getType();
        java.lang.String str26 = putSpreadsheetTemplate22.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList30, plannedActivityArray29);
        putFieldVisit28.PlannedActivities = plannedActivityList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str34 = domainObjectAttachment33.getId();
        java.lang.String str35 = domainObjectAttachment33.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = domainObjectAttachment33.setAttachment(attachment36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        domainObjectAttachment38.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = domainObjectAttachment38.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str46 = domainObjectAttachment45.getId();
        java.lang.String str47 = domainObjectAttachment45.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment45.setAttachment(attachment48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str53 = domainObjectAttachment52.getId();
        java.lang.String str54 = domainObjectAttachment52.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = domainObjectAttachment52.setAttachment(attachment55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment33, domainObjectAttachment38, domainObjectAttachment45, domainObjectAttachment50, domainObjectAttachment52, domainObjectAttachment57 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList60, domainObjectAttachmentArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit62 = putFieldVisit28.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan63 = putFieldVisit28.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str66 = domainObjectAttachment65.getId();
        java.lang.String str67 = domainObjectAttachment65.getId();
        domainObjectAttachment65.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment71 = domainObjectAttachment65.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment64, domainObjectAttachment65 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList73, domainObjectAttachmentArray72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit75 = putFieldVisit28.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList73);
        fieldTrip27.Attachments = domainObjectAttachmentList73;
        putSpreadsheetTemplate22.Attachments = domainObjectAttachmentList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit78 = fieldVisit20.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple79 = fieldVisit78.FieldTrip;
        java.time.OffsetDateTime offsetDateTime80 = null;
        fieldVisit78.StartTime = offsetDateTime80;
        org.junit.Assert.assertNull(specimenNestedInActivityList3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment11);
        org.junit.Assert.assertNotNull(domainObjectAttachment13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(fieldVisit20);
        org.junit.Assert.assertNull(spreadsheetTemplateType25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(plannedActivityArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(domainObjectAttachment37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(domainObjectAttachment56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putFieldVisit62);
        org.junit.Assert.assertNull(samplingPlan63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(domainObjectAttachment71);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(putFieldVisit75);
        org.junit.Assert.assertNotNull(fieldVisit78);
        org.junit.Assert.assertNull(fieldTripSimple79);
    }

    @Test
    public void test56932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56932");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        java.lang.String str2 = postLaboratory0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        postLaboratory0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory13 = postLaboratory0.setPointOfContact("2021.4.62.0");
        java.lang.String str14 = postLaboratory13.getPhoneNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory16 = postLaboratory13.setDescription("multipart/form-data; boundary=****a4634bc0-3392-401e-8662-ce9e9cd5abca****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLaboratory13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(postLaboratory16);
    }

    @Test
    public void test56933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56933");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_0.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType5 = null;
        controlConditionActivity4.ControlCleaned = controlCleanedType5;
        java.lang.String str7 = controlConditionActivity4.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        controlConditionActivity4.DateCleaned = instant11;
        gageHeightReading3.ReadingTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = doubleWithDisplay15.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str18 = doubleWithDisplay17.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading19 = gageHeightReading3.setGageHeight(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setMeanGageHeightMethod("hi!");
        java.lang.String str24 = dischargeSummary23.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary23.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType28 = calibrationCheck27.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = calibrationCheck27.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse34.setNextToken(instant35);
        dischargeSummary31.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse30.setNextToken(instant35);
        java.time.Instant instant39 = locationDescriptionListServiceResponse30.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck27.setTime(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary23.setMeasurementTime(instant39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_42 = getChartDataV2_20.setStartResultTime(instant39);
        gageHeightReading3.ReadingTime = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_44 = getChartDataV2_0.setStartObservedTime(instant39);
        getChartDataV2_0.CustomId = "ZZZZZ";
        java.lang.Double double47 = getChartDataV2_0.getMaxNumericResultValue();
        java.util.List<java.lang.String> strList48 = getChartDataV2_0.getProjectIds();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(doubleWithDisplay17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(gageHeightReading19);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(calibrationCheckType28);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(getChartDataV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_44);
        org.junit.Assert.assertNull(double47);
        org.junit.Assert.assertNull(strList48);
    }

    @Test
    public void test56934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56934");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setSegmentVelocity(quantityWithDisplay1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = vertical5.setFlowDirection(flowDirectionType6);
        vertical4.FlowDirection = flowDirectionType6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = pointVelocityDischargeActivity9.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList11 = pointVelocityDischargeActivity9.Verticals;
        java.lang.String str12 = pointVelocityDischargeActivity9.SerialNumber;
        java.lang.Integer int13 = pointVelocityDischargeActivity9.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType dischargeMethodType14 = pointVelocityDischargeActivity9.DischargeMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = pointVelocityDischargeActivity9.setSoftwareVersion("9999-12-31T23:59:59.999Z");
        java.lang.String str17 = pointVelocityDischargeActivity16.getMeterEquation();
        java.lang.Boolean boolean18 = pointVelocityDischargeActivity16.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = dischargeSummary19.setPublish((java.lang.Boolean) false);
        java.lang.String str22 = dischargeSummary21.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary23.Reviewer = "";
        dischargeSummary23.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary23.MeasurementGrade = measurementGradeType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary21.setMeasurementGrade(measurementGradeType28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity31.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity31.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity31.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList38 = pointVelocityDischargeActivity37.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity37.DistanceToMeter = datumConvertedQuantityWithDisplay39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary21.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity42 = pointVelocityDischargeActivity16.setWidth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType44 = fieldVisitReading43.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval45 = fieldVisitReading43.Approval;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        fieldVisitReading43.AdjustmentAmount = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading49 = fieldVisitReading43.setControlCondition("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = null;
        adcpDischargeActivity50.TransducerDepth = quantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary53.Reviewer = "";
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary53.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType58 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary53.BaseFlow = baseFlowType58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary53.DischargeUncertainty = dischargeUncertainty60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = dischargeSummary62.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay64 = dischargeSummary62.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay65 = dischargeSummary62.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = doubleWithDisplay66.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary62.setDurationInHours(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty70 = dischargeUncertainty60.setQuantitativeUncertainty(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity71 = adcpDischargeActivity50.setTopEstimateExponent(doubleWithDisplay66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity73 = adcpDischargeActivity50.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay74 = adcpDischargeActivity50.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str76 = datumConvertedQuantityWithDisplay75.TargetDatum;
        adcpDischargeActivity50.Area = datumConvertedQuantityWithDisplay75;
        fieldVisitReading43.Value = datumConvertedQuantityWithDisplay75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity79 = pointVelocityDischargeActivity42.setArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical80 = vertical4.setSoundedDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay81 = vertical4.getMeanVelocity();
        java.lang.Double double82 = vertical4.PercentageOfTotalDischarge;
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNotNull(vertical4);
        org.junit.Assert.assertTrue("'" + flowDirectionType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical7);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNull(verticalList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(dischargeMethodType14);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(dischargeSummary21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + measurementGradeType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNull(verticalList38);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity42);
        org.junit.Assert.assertNull(fieldVisitReadingType44);
        org.junit.Assert.assertNull(fieldVisitApproval45);
        org.junit.Assert.assertNotNull(fieldVisitReading49);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + baseFlowType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType58.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay63);
        org.junit.Assert.assertNull(quantityWithDisplay64);
        org.junit.Assert.assertNull(doubleWithDisplay65);
        org.junit.Assert.assertNotNull(doubleWithDisplay68);
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(dischargeUncertainty70);
        org.junit.Assert.assertNotNull(adcpDischargeActivity71);
        org.junit.Assert.assertNotNull(adcpDischargeActivity73);
        org.junit.Assert.assertNull(doubleWithDisplay74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity79);
        org.junit.Assert.assertNotNull(vertical80);
        org.junit.Assert.assertNull(quantityWithDisplay81);
        org.junit.Assert.assertNull(double82);
    }

    @Test
    public void test56935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56935");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation6 = putSamplingLocation0.setVerticalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation8 = putSamplingLocation6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup10 = postObservedProperty9.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit12 = null;
        quantity11.Unit = unit12;
        postObservedProperty9.LowerLimit = quantity11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = postObservedProperty9.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = quantity15.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation17 = putSamplingLocation8.setElevation(quantity15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation20 = postSamplingLocation18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation22 = postSamplingLocation18.setAddress(address21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity23 = postSamplingLocation22.getElevation();
        postSamplingLocation22.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = postSamplingLocation22.getAuditAttributes();
        java.lang.String str27 = postSamplingLocation22.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation29 = postSamplingLocation22.setTimeZone(timeZone28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone32 = timeZone30.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        postSamplingLocation22.TimeZone = timeZone32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation34 = putSamplingLocation17.setTimeZone(timeZone32);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList35 = putSamplingLocation34.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation37 = putSamplingLocation34.setTimeZone(timeZone36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone38 = putSamplingLocation34.TimeZone;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation40 = putSamplingLocation34.setVerticalCollectionMethod("ZZZZZ");
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putSamplingLocation6);
        org.junit.Assert.assertNotNull(putSamplingLocation8);
        org.junit.Assert.assertNull(unitGroup10);
        org.junit.Assert.assertNotNull(quantity15);
        org.junit.Assert.assertNull(unit16);
        org.junit.Assert.assertNotNull(putSamplingLocation17);
        org.junit.Assert.assertNotNull(postSamplingLocation20);
        org.junit.Assert.assertNotNull(postSamplingLocation22);
        org.junit.Assert.assertNull(quantity23);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(postSamplingLocation29);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertNotNull(putSamplingLocation34);
        org.junit.Assert.assertNull(domainObjectAttachmentList35);
        org.junit.Assert.assertNotNull(putSamplingLocation37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertNotNull(putSamplingLocation40);
    }

    @Test
    public void test56936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56936");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        java.lang.String str38 = putObservationV2_37.CustomId;
        java.lang.String str39 = putObservationV2_37.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier40 = putObservationV2_37.getNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_42 = putObservationV2_37.setCustomId("****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str44 = samplingLocation43.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation46 = samplingLocation43.setVerticalCollectionMethod("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = samplingLocation46.Elevation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList50, plannedActivityArray49);
        putFieldVisit48.PlannedActivities = plannedActivityList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str54 = domainObjectAttachment53.getId();
        java.lang.String str55 = domainObjectAttachment53.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = domainObjectAttachment53.setAttachment(attachment56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str59 = domainObjectAttachment58.getId();
        java.lang.String str60 = domainObjectAttachment58.getId();
        domainObjectAttachment58.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment64 = domainObjectAttachment58.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str66 = domainObjectAttachment65.getId();
        java.lang.String str67 = domainObjectAttachment65.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment69 = domainObjectAttachment65.setAttachment(attachment68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str71 = domainObjectAttachment70.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str73 = domainObjectAttachment72.getId();
        java.lang.String str74 = domainObjectAttachment72.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment76 = domainObjectAttachment72.setAttachment(attachment75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str78 = domainObjectAttachment77.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment53, domainObjectAttachment58, domainObjectAttachment65, domainObjectAttachment70, domainObjectAttachment72, domainObjectAttachment77 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList80 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList80, domainObjectAttachmentArray79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit82 = putFieldVisit48.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan83 = putFieldVisit48.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple84 = putFieldVisit48.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule85 = putFieldVisit48.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList86 = putFieldVisit48.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation87 = samplingLocation46.setAttachments(domainObjectAttachmentList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_88 = putObservationV2_42.setSamplingLocation(samplingLocation46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics89 = putObservationV2_42.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType90 = putObservationV2_42.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_92 = putObservationV2_42.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(nullMeasureQualifier40);
        org.junit.Assert.assertNotNull(putObservationV2_42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(samplingLocation46);
        org.junit.Assert.assertNull(quantity47);
        org.junit.Assert.assertNotNull(plannedActivityArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(domainObjectAttachment57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(domainObjectAttachment64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(domainObjectAttachment69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(domainObjectAttachment76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(putFieldVisit82);
        org.junit.Assert.assertNull(samplingPlan83);
        org.junit.Assert.assertNull(fieldTripSimple84);
        org.junit.Assert.assertNull(schedule85);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList86);
        org.junit.Assert.assertNotNull(samplingLocation87);
        org.junit.Assert.assertNotNull(putObservationV2_88);
        org.junit.Assert.assertNull(observationStatistics89);
        org.junit.Assert.assertNull(qualityControlType90);
        org.junit.Assert.assertNotNull(putObservationV2_92);
    }

    @Test
    public void test56937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56937");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory getFieldTripHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory();
        java.lang.Object obj1 = getFieldTripHistory0.getResponseType();
        getFieldTripHistory0.Id = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory getFieldTripHistory5 = getFieldTripHistory0.setId("http://MaxDurationhttp/json/reply/Integer");
        java.lang.Object obj6 = getFieldTripHistory0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getFieldTripHistory5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test56938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56938");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.String str6 = putSamplingLocationGroup0.Id;
        java.lang.String str7 = putSamplingLocationGroup0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = locationGroupType8.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = locationGroupType8.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = locationGroupType8.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory12.Id = "MaxInstant";
        java.lang.String str15 = laboratory12.PhoneNumber;
        laboratory12.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str18 = laboratory12.PointOfContact;
        laboratory12.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint23 = chartDataPoint21.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double24 = chartDataPoint23.Value;
        java.lang.String str25 = chartDataPoint23.getNumericResultUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint27 = chartDataPoint23.setValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint29 = chartDataPoint27.setValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = resultDetectionCondition30.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition33 = resultDetectionCondition30.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint34 = chartDataPoint27.setResultDetectionCondition(resultDetectionCondition30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str36 = putLabReport35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = postDetectioncondition37.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition40 = postDetectioncondition37.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition37.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition44 = postDetectioncondition37.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition37.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj47 = postDetectioncondition37.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity50 = samplingPlanPlannedActivity48.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = auditAttributes51.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity50.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition55 = postDetectioncondition37.setAuditAttributes(auditAttributes51);
        putLabReport35.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition57 = resultDetectionCondition30.setAuditAttributes(auditAttributes51);
        laboratory12.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType59 = locationGroupType8.setAuditAttributes(auditAttributes51);
        java.lang.String str60 = locationGroupType8.Id;
        putSamplingLocationGroup0.LocationGroupType = locationGroupType8;
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chartDataPoint23);
        org.junit.Assert.assertNull(double24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(chartDataPoint27);
        org.junit.Assert.assertNotNull(chartDataPoint29);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNotNull(resultDetectionCondition33);
        org.junit.Assert.assertNotNull(chartDataPoint34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(auditAttributes38);
        org.junit.Assert.assertNotNull(postDetectioncondition40);
        org.junit.Assert.assertNotNull(postDetectioncondition44);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity50);
        org.junit.Assert.assertNotNull(auditAttributes53);
        org.junit.Assert.assertNotNull(postDetectioncondition55);
        org.junit.Assert.assertNotNull(resultDetectionCondition57);
        org.junit.Assert.assertNotNull(locationGroupType59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test56939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56939");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter2 = filter0.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter4 = filter2.setId("POST");
        java.time.OffsetDateTime offsetDateTime5 = null;
        filter4.StartTime = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter8 = filter4.setDescription("http://MaxDurationhttp/json/reply/Float");
        org.junit.Assert.assertNotNull(filter2);
        org.junit.Assert.assertNotNull(filter4);
        org.junit.Assert.assertNotNull(filter8);
    }

    @Test
    public void test56940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56940");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit deleteFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit deleteFieldVisit2 = deleteFieldVisit0.setId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str3 = deleteFieldVisit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit deleteFieldVisit5 = deleteFieldVisit0.setId("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisit deleteFieldVisit7 = deleteFieldVisit0.setId("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        org.junit.Assert.assertNotNull(deleteFieldVisit2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str3, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(deleteFieldVisit5);
        org.junit.Assert.assertNotNull(deleteFieldVisit7);
    }

    @Test
    public void test56941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56941");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        volumetricDischargeReading0.IsUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = null;
        adcpDischargeActivity3.TransducerDepth = quantityWithDisplay4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary6.BaseFlow = baseFlowType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary6.DischargeUncertainty = dischargeUncertainty13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = dischargeSummary15.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = dischargeSummary15.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = dischargeSummary15.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary15.setDurationInHours(doubleWithDisplay19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty23 = dischargeUncertainty13.setQuantitativeUncertainty(doubleWithDisplay19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity3.setTopEstimateExponent(doubleWithDisplay19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = doubleWithDisplay25.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str28 = doubleWithDisplay27.getDisplay();
        java.lang.String str29 = doubleWithDisplay27.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity30 = adcpDischargeActivity24.setDischargeCoefficientVariation(doubleWithDisplay27);
        volumetricDischargeReading0.VolumeChange = doubleWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = volumetricDischargeReading0.getStartingVolume();
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + baseFlowType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay16);
        org.junit.Assert.assertNull(quantityWithDisplay17);
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(dischargeUncertainty23);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNotNull(doubleWithDisplay27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(adcpDischargeActivity30);
        org.junit.Assert.assertNull(doubleWithDisplay32);
    }

    @Test
    public void test56942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56942");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen getSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen();
        java.lang.Boolean boolean1 = getSpecimen0.Detail;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen getSpecimen3 = getSpecimen0.setId("");
        java.lang.Boolean boolean4 = getSpecimen3.Detail;
        java.lang.Boolean boolean5 = getSpecimen3.Detail;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(getSpecimen3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test56943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56943");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str1 = setting0.getKey();
        java.lang.String str2 = setting0.getDescription();
        java.lang.String str3 = setting0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setMeanGageHeightMethod("hi!");
        java.lang.String str7 = dischargeSummary6.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = dischargeSummary6.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant13 = sensor12.getLastModifiedUtc();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor15 = sensor12.setLastModifiedUtc(instant14);
        java.time.Instant instant16 = sensor12.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest10.setQueryTo(instant16);
        dischargeSummary9.MeasurementStartTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting19 = setting0.setLastModifiedTime(instant16);
        java.lang.String str20 = setting19.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting22 = setting19.setGroup("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting24 = setting22.setKey("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        setting24.Value = "multipart/form-data; boundary=****4b3b82c5-fb27-4c5a-8cf6-cb2705168ae1****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(dischargeSummary9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(sensor15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(setting19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(setting22);
        org.junit.Assert.assertNotNull(setting24);
    }

    @Test
    public void test56944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56944");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList1 = importSummary0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary3 = importSummary0.setNewCount((java.lang.Integer) 10);
        java.lang.Integer int4 = importSummary0.getErrorCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary0.setUpdateCount((java.lang.Integer) 10);
        java.lang.String str7 = importSummary6.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary9 = importSummary6.setInvalidRowsCsvUrl("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary11 = importSummary6.setErrorCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary13 = importSummary11.setExpectedCount((java.lang.Integer) 7);
        org.junit.Assert.assertNull(importItemObjectList1);
        org.junit.Assert.assertNotNull(importSummary3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(importSummary9);
        org.junit.Assert.assertNotNull(importSummary11);
        org.junit.Assert.assertNotNull(importSummary13);
    }

    @Test
    public void test56945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56945");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteReferencePoint deleteReferencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteReferencePoint();
        java.lang.String str1 = deleteReferencePoint0.ReferencePointUniqueId;
        deleteReferencePoint0.LocationUniqueId = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str4 = deleteReferencePoint0.LocationUniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str4, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test56946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56946");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset();
        putBaseStandardReferenceDatumOffset0.OffsetToBaseReference = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset4 = putBaseStandardReferenceDatumOffset0.setStandardIdentifier("MinDuration");
        putBaseStandardReferenceDatumOffset0.StandardIdentifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset8 = putBaseStandardReferenceDatumOffset0.setMethod("MinInstant");
        putBaseStandardReferenceDatumOffset0.StandardIdentifier = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset12 = putBaseStandardReferenceDatumOffset0.setComments("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset14 = putBaseStandardReferenceDatumOffset0.setComments("");
        putBaseStandardReferenceDatumOffset14.OffsetToBaseReference = (-1.0d);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset8);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset12);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset14);
    }

    @Test
    public void test56947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56947");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        java.lang.String str1 = importSummarySpecimen0.getInvalidRowsCsvUrl();
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test56948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56948");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        java.time.Instant instant1 = getSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations3 = getSamplingLocations0.setSort("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList5 = getShippingContainers4.Search;
        java.util.List<java.lang.String> strList6 = getShippingContainers4.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getLabReportIds();
        importItem8.Errors = getObservationsV2_9;
        java.lang.Object obj26 = importItem8.getExistingItem();
        importItem8.Input = "hi!";
        java.lang.Object obj29 = importItem8.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType30 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem31 = importItem8.setStatus(importItemStatusType30);
        importItem31.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate34.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate34.setId("hi!");
        java.lang.Boolean boolean39 = specimenTemplate38.getFiltered();
        importItem31.Item = specimenTemplate38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        postTag42.PickListValues = strList47;
        java.util.ArrayList<java.lang.String> strList51 = postTag42.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor52 = processor41.setInputTimeSeriesUniqueIds(strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem53 = importItem31.setWarningMessages((java.util.List<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList54 = importItem31.getWarningMessages();
        getAnalysisMethods7.ObservedPropertyIds = strList54;
        getShippingContainers4.Search = strList54;
        java.util.List<java.lang.String> strList57 = getShippingContainers4.getSearch();
        getSamplingLocations0.SamplingLocationGroupIds = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str60 = getChartDataV2_59.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_62 = getChartDataV2_59.setFilterId("");
        java.util.List<java.lang.String> strList63 = getChartDataV2_59.ResultGrades;
        getChartDataV2_59.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        getObservationsV2_67.QualityControlTypes = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest82 = timeAlignedDataServiceRequest66.setTimeSeriesUniqueIds(strList78);
        java.util.ArrayList<java.lang.String> strList83 = timeAlignedDataServiceRequest66.TimeSeriesOutputUnitIds;
        java.util.ArrayList<java.lang.String> strList84 = timeAlignedDataServiceRequest66.TimeSeriesUniqueIds;
        getChartDataV2_59.AnalysisMethodIds = strList84;
        getSamplingLocations0.Search = strList84;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(getSamplingLocations3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + importItemStatusType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType30.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem31);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(processor52);
        org.junit.Assert.assertNotNull(importItem53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(getChartDataV2_62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest82);
        org.junit.Assert.assertNull(strList83);
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test56949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56949");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest1.ReportTitle = "MinDuration";
        reportListServiceRequest1.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList7 = getExportSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        getExportSpecimens6.Before = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark20.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList24 = fieldVisitDataServiceResponse23.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse26 = fieldVisitDataServiceResponse23.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        fieldVisitDataServiceResponse23.ResponseTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark20.setCreateTime(instant30);
        getExportSpecimens6.EndModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest35 = reportListServiceRequest1.setCreatedFrom(instant30);
        getSamplingLocations0.StartModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        getObservationsV2_43.DepthUnitCustomId = "hi!";
        java.lang.String str46 = getObservationsV2_43.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        java.util.List<java.lang.String> strList62 = getObservationsV2_47.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList63 = getObservationsV2_47.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType64 = getObservationsV2_47.FieldResultType;
        java.time.Instant instant65 = getObservationsV2_47.getEndObservedTime();
        java.lang.String str66 = getObservationsV2_47.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray71 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = putLocationTags67.setTagUniqueIds(strList72);
        java.util.ArrayList<java.lang.String> strList75 = putLocationTags74.TagUniqueIds;
        getObservationsV2_47.ProjectIds = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_43.setQualityControlTypes((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations78 = getSamplingLocations0.setLocationTypeIds((java.util.List<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList79 = getSamplingLocations78.getSearch();
        getSamplingLocations78.Cursor = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations83 = getSamplingLocations78.setCursor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations85 = getSamplingLocations83.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations87 = getSamplingLocations85.setLimit((java.lang.Integer) 1);
        java.time.Instant instant88 = getSamplingLocations87.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations90 = getSamplingLocations87.setCursor("multipart/form-data; boundary=****93fa0488-d73a-481f-9f01-6a8383e9b743****");
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList24);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNotNull(reportListServiceRequest35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(fieldResultType64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putLocationTags74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(getSamplingLocations78);
        org.junit.Assert.assertNull(strList79);
        org.junit.Assert.assertNotNull(getSamplingLocations83);
        org.junit.Assert.assertNotNull(getSamplingLocations85);
        org.junit.Assert.assertNotNull(getSamplingLocations87);
        org.junit.Assert.assertNull(instant88);
        org.junit.Assert.assertNotNull(getSamplingLocations90);
    }

    @Test
    public void test56950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56950");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList1 = null;
        putUser0.AccessGroups = strList1;
        java.lang.String str3 = putUser0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType4 = putUser0.getUserType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList6 = user5.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user8 = user5.setEmail("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user10 = user8.setEmail("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType11 = user10.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile();
        java.lang.String str13 = userProfile12.LastName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user14 = user10.setUserProfile(userProfile12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser15 = putUser0.setUserProfile(userProfile12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile16 = putUser15.getUserProfile();
        userProfile16.Id = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(userType4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(user8);
        org.junit.Assert.assertNotNull(user10);
        org.junit.Assert.assertNull(userType11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(user14);
        org.junit.Assert.assertNotNull(putUser15);
        org.junit.Assert.assertNotNull(userProfile16);
    }

    @Test
    public void test56951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56951");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition3 = putDetectioncondition0.setCustomId("http");
        putDetectioncondition3.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity6.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = postActivity6.setPlannedActivity(plannedActivity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType11 = postActivity6.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate13.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList18 = specimenTemplate17.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = specimenTemplate19.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList24 = specimenTemplate23.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate13, specimenTemplate16, specimenTemplate17, specimenTemplate21, specimenTemplate22, specimenTemplate23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList26, specimenTemplateArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate28 = postFieldVisitActivityWithTemplate12.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate30 = postFieldVisitActivityWithTemplate28.setCollectionMethod(collectionMethod29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity31 = postActivity6.setCollectionMethod(collectionMethod29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity6.Medium = medium32;
        medium32.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType37 = analyticalGroup36.getType();
        analyticalGroup36.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = null;
        analyticalGroupItem46.AnalysisMethod = analysisMethod49;
        java.lang.String str51 = analyticalGroupItem46.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem55.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem57.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = analyticalGroupItem57.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = null;
        analyticalGroupItem57.AnalysisMethod = analysisMethod60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem41, analyticalGroupItem43, analyticalGroupItem46, analyticalGroupItem52, analyticalGroupItem55, analyticalGroupItem57 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList63, analyticalGroupItemArray62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup65 = analyticalGroup40.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList63);
        analyticalGroup36.AnalyticalGroupItems = analyticalGroupItemList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup36.AuditAttributes = auditAttributes67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium69 = medium32.setAuditAttributes(auditAttributes67);
        putDetectioncondition3.AuditAttributes = auditAttributes67;
        java.lang.String str71 = putDetectioncondition3.Name;
        java.lang.String str72 = putDetectioncondition3.Description;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putDetectioncondition3);
        org.junit.Assert.assertNotNull(postActivity10);
        org.junit.Assert.assertNull(activityType11);
        org.junit.Assert.assertNull(labInstructionTemplateList18);
        org.junit.Assert.assertNotNull(specimenTemplate21);
        org.junit.Assert.assertNull(labInstructionTemplateList24);
        org.junit.Assert.assertNotNull(specimenTemplateArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate28);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate30);
        org.junit.Assert.assertNotNull(postActivity31);
        org.junit.Assert.assertNull(analyticalGroupType37);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod45);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(analysisMethod59);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(analyticalGroup65);
        org.junit.Assert.assertNotNull(medium69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test56952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56952");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_2.DataClassification = dataClassificationType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails7.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails7.setAuditAttributes(auditAttributes12);
        postObservationV2_2.LabResultDetails = labResultDetails13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction15 = postObservationV2_2.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str17 = analysisMethodSimple16.getId();
        java.lang.String str18 = analysisMethodSimple16.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_19 = postObservationV2_2.setAnalysisMethod(analysisMethodSimple16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType21 = medium20.SystemCode;
        postObservationV2_2.Medium = medium20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_26 = postObservationV2_24.setLabInstruction(labInstruction25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime28 = activity27.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity30 = activity27.setLoggerFileName("'.'SSSSSSS");
        postObservationV2_24.Activity = activity27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity33 = null;
        putActivity32.Depth = quantity33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity36 = putActivity35.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity38 = putActivity35.setEndTime(offsetDateTime37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation39 = null;
        putActivity38.SamplingLocation = samplingLocation39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup42 = postObservedProperty41.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit44 = null;
        quantity43.Unit = unit44;
        postObservedProperty41.LowerLimit = quantity43;
        putActivity38.Depth = quantity43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity48 = putActivity32.setDepth(quantity43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity49 = activity27.setDepth(quantity43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_50 = postObservationV2_23.setActivity(activity49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity52 = activity49.setLoggerFileName("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_53 = postObservationV2_2.setActivity(activity52);
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + dataClassificationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNull(labInstruction15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postObservationV2_19);
        org.junit.Assert.assertNull(mediumSystemCodeType21);
        org.junit.Assert.assertNotNull(postObservationV2_26);
        org.junit.Assert.assertNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(activity30);
        org.junit.Assert.assertNull(plannedActivity36);
        org.junit.Assert.assertNotNull(putActivity38);
        org.junit.Assert.assertNull(unitGroup42);
        org.junit.Assert.assertNotNull(putActivity48);
        org.junit.Assert.assertNotNull(activity49);
        org.junit.Assert.assertNotNull(postObservationV2_50);
        org.junit.Assert.assertNotNull(activity52);
        org.junit.Assert.assertNotNull(postObservationV2_53);
    }

    @Test
    public void test56953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56953");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        java.lang.String str12 = processor0.getOutputTimeSeriesUniqueId();
        java.util.HashMap<java.lang.String, java.lang.String> strMap13 = processor0.Settings;
        processor0.ProcessorType = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str17 = approval16.User;
        approval16.LevelDescription = "MinDuration";
        processor0.ProcessorPeriod = approval16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor22 = processor0.setDescription("MaxInstant");
        java.lang.String str23 = processor0.getDescription();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(processor22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MaxInstant" + "'", str23, "MaxInstant");
    }

    @Test
    public void test56954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56954");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit postUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit postUnit2 = postUnit0.setBaseOffset((java.lang.Double) (-1.0d));
        postUnit2.CustomId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime6 = postSchedule5.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime8 = putSchedule7.StartDate;
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule10 = putSchedule7.setEndDate(offsetDateTime9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = putSchedule10.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime12 = putSchedule10.getEndDate();
        java.time.OffsetDateTime offsetDateTime13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = putSchedule10.setStartDate(offsetDateTime13);
        java.lang.Integer int15 = putSchedule10.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule10.RecurrenceDayMonthly = recurrenceDayMonthlyType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule18 = postSchedule5.setRecurrenceDayMonthly(recurrenceDayMonthlyType16);
        java.time.OffsetDateTime offsetDateTime19 = postSchedule5.EndDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity20.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = postActivity20.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = null;
        putActivity25.PlannedActivity = plannedActivity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity28.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = postActivity28.setPlannedActivity(plannedActivity31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str34 = samplingContextTag33.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = samplingContextTag33.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag38 = samplingContextTag36.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str40 = samplingContextTag39.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str42 = samplingContextTag41.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = null;
        samplingContextTag41.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str46 = samplingContextTag45.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag48 = samplingContextTag45.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag38, samplingContextTag39, samplingContextTag41, samplingContextTag48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList50, samplingContextTagArray49);
        postActivity28.SamplingContextTags = samplingContextTagList50;
        putActivity25.SamplingContextTags = samplingContextTagList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity54 = postActivity24.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str56 = collectionMethod55.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod58 = collectionMethod55.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity59 = postActivity24.setCollectionMethod(collectionMethod58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan60.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType63 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan60.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup65 = samplingPlan60.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan67 = samplingPlan60.setAuditAttributes(auditAttributes66);
        collectionMethod58.AuditAttributes = auditAttributes66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule69 = postSchedule5.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit postUnit70 = postUnit2.setAuditAttributes(auditAttributes66);
        postUnit70.CustomId = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNotNull(postUnit2);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(putSchedule10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(putSchedule14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule18);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(postActivity24);
        org.junit.Assert.assertNotNull(postActivity32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(samplingContextTag36);
        org.junit.Assert.assertNotNull(samplingContextTag38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(samplingContextTag48);
        org.junit.Assert.assertNotNull(samplingContextTagArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(postActivity54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(collectionMethod58);
        org.junit.Assert.assertNotNull(postActivity59);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType63.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup65);
        org.junit.Assert.assertNotNull(samplingPlan67);
        org.junit.Assert.assertNotNull(postSchedule69);
        org.junit.Assert.assertNotNull(postUnit70);
    }

    @Test
    public void test56955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56955");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = observation0.RelatedTaxon;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList10 = observation0.ValidationWarnings;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList12, extendedAttributeArray11);
        observation0.ExtendedAttributes = extendedAttributeList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_17 = postObservationV2_15.setLabInstruction(labInstruction16);
        java.lang.String str18 = postObservationV2_17.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod21 = postLabAnalysisMethod19.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList23, observedPropertyArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod25 = postLabAnalysisMethod21.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType27 = analyticalGroup26.getType();
        analyticalGroup26.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = null;
        analyticalGroupItem36.AnalysisMethod = analysisMethod39;
        java.lang.String str41 = analyticalGroupItem36.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = null;
        analyticalGroupItem47.AnalysisMethod = analysisMethod50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem31, analyticalGroupItem33, analyticalGroupItem36, analyticalGroupItem42, analyticalGroupItem45, analyticalGroupItem47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList53, analyticalGroupItemArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup55 = analyticalGroup30.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList53);
        analyticalGroup26.AnalyticalGroupItems = analyticalGroupItemList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup26.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod59 = postLabAnalysisMethod25.setAuditAttributes(auditAttributes57);
        java.time.OffsetDateTime offsetDateTime60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = auditAttributes57.setModificationTime(offsetDateTime60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_62 = postObservationV2_17.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_64 = postObservationV2_17.setLabInstruction(labInstruction63);
        java.lang.String str65 = labInstruction63.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation66 = observation0.setLabInstruction(labInstruction63);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList67 = observation0.getImportHistoryEventSimples();
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(taxon9);
        org.junit.Assert.assertNull(ruleValidationDetailsList10);
        org.junit.Assert.assertNotNull(extendedAttributeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(postObservationV2_17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod21);
        org.junit.Assert.assertNotNull(observedPropertyArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod25);
        org.junit.Assert.assertNull(analyticalGroupType27);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(analyticalGroup55);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod59);
        org.junit.Assert.assertNotNull(auditAttributes61);
        org.junit.Assert.assertNotNull(postObservationV2_62);
        org.junit.Assert.assertNotNull(postObservationV2_64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(observation66);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList67);
    }

    @Test
    public void test56956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56956");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList5 = putSamplingLocation0.Standards;
        java.lang.String str6 = putSamplingLocation0.VerticalCollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList7 = putSamplingLocation0.getImportHistoryEventSimples();
        java.lang.String str8 = putSamplingLocation0.getVerticalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation10 = putSamplingLocation0.setLatitude("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(standardSimpleList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(importHistoryEventSimpleList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(putSamplingLocation10);
    }

    @Test
    public void test56957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56957");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.time.Instant instant7 = getObservationsV2_6.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList10 = putOpenIdConnectRelyingPartyConfiguration9.getScopes();
        java.lang.String str11 = putOpenIdConnectRelyingPartyConfiguration9.getOptionalIssuerDiscoveryUri();
        java.lang.String str12 = putOpenIdConnectRelyingPartyConfiguration9.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        postTag13.PickListValues = strList18;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList22 = postTag13.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase24 = postTag13.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase26 = tagRequestBase24.setValueType(tagValueType25);
        java.lang.String str27 = tagRequestBase26.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        getObservationsV2_28.SpecimenIds = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        getObservationsV2_28.ActivityIds = strList39;
        tagRequestBase26.PickListValues = strList39;
        putOpenIdConnectRelyingPartyConfiguration9.HostedDomains = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities45 = deleteActivities8.setProjectIds((java.util.List<java.lang.String>) strList39);
        java.util.List<java.lang.String> strList46 = deleteActivities8.Media;
        java.util.List<java.lang.String> strList47 = deleteActivities8.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_6.setLabResultLaboratoryIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_48.setFilterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<java.lang.String> strList51 = getObservationsV2_48.getLabReportIds();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNull(tagApplicabilityList22);
        org.junit.Assert.assertNotNull(tagRequestBase24);
        org.junit.Assert.assertTrue("'" + tagValueType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(deleteActivities45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(strList51);
    }

    @Test
    public void test56958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56958");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType1 = null;
        controlConditionActivity0.ControlCleaned = controlCleanedType1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        controlConditionActivity0.DistanceToGage = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity6 = controlConditionActivity0.setParty("POST");
        java.lang.String str7 = controlConditionActivity0.getComments();
        org.junit.Assert.assertNotNull(controlConditionActivity6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56959");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser17 = openIdConnectUser15.setIdentifier("");
        java.lang.Boolean boolean18 = openIdConnectUser17.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setErrors((java.lang.Object) openIdConnectUser17);
        java.lang.Object obj20 = importItemObject0.ExistingItem;
        java.util.List<java.lang.String> strList21 = importItemObject0.getFields();
        java.util.List<java.lang.String> strList22 = importItemObject0.Fields;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity24 = putActivity23.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity26 = putActivity23.setEndTime(offsetDateTime25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = null;
        putActivity26.SamplingLocation = samplingLocation27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup30 = postObservedProperty29.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = null;
        quantity31.Unit = unit32;
        postObservedProperty29.LowerLimit = quantity31;
        putActivity26.Depth = quantity31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = importItemObject0.setItem((java.lang.Object) putActivity26);
        putActivity26.LoggerFileName = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = plannedActivity39.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType41 = plannedActivity39.Medium;
        putActivity26.PlannedActivity = plannedActivity39;
        java.lang.String str43 = plannedActivity39.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType44 = plannedActivity39.getMedium();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(openIdConnectUser17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(plannedActivity24);
        org.junit.Assert.assertNotNull(putActivity26);
        org.junit.Assert.assertNull(unitGroup30);
        org.junit.Assert.assertNotNull(importItemObject36);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNull(mediumType41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(mediumType44);
    }

    @Test
    public void test56960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56960");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo errorInfo0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo errorInfo2 = errorInfo0.setMessage("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo errorInfo4 = errorInfo2.setMessage("/AQUARIUS/Acquisition/v2");
        errorInfo4.Message = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo errorInfo8 = errorInfo4.setMessage("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ErrorInfo errorInfo10 = errorInfo8.setMessage("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str11 = errorInfo8.RequestId;
        org.junit.Assert.assertNotNull(errorInfo2);
        org.junit.Assert.assertNotNull(errorInfo4);
        org.junit.Assert.assertNotNull(errorInfo8);
        org.junit.Assert.assertNotNull(errorInfo10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test56961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56961");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolderUserRole deleteLocationFolderUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolderUserRole();
        deleteLocationFolderUserRole0.LocationFolderUniqueId = "2021.4.62.0";
        java.lang.String str3 = deleteLocationFolderUserRole0.UserUniqueId;
        deleteLocationFolderUserRole0.LocationFolderUniqueId = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolderUserRole deleteLocationFolderUserRole7 = deleteLocationFolderUserRole0.setUserUniqueId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        deleteLocationFolderUserRole7.UserUniqueId = "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(deleteLocationFolderUserRole7);
    }

    @Test
    public void test56962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56962");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession();
        java.lang.String str1 = postSession0.Locale;
        postSession0.Locale = "MaxInstant";
        java.lang.String str4 = postSession0.getLocale();
        java.lang.String str5 = postSession0.Locale;
        java.lang.String str6 = postSession0.Locale;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession8 = postSession0.setLocale("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession10 = postSession8.setLocale("multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MaxInstant" + "'", str4, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxInstant" + "'", str6, "MaxInstant");
        org.junit.Assert.assertNotNull(postSession8);
        org.junit.Assert.assertNotNull(postSession10);
    }

    @Test
    public void test56963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56963");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark19 = locationRemark17.setDescription("MaxInstant");
        java.lang.String str20 = locationRemark19.getTypeName();
        java.time.Instant instant21 = locationRemark19.CreateTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str23 = getChartDataV2_22.getActivityCustomId();
        java.util.List<java.lang.String> strList24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_25 = getChartDataV2_22.setSearch(strList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_26.setDataClassifications((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = getObservationsV2_26.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary34.Reviewer = "";
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary34.MeasurementTime = instant37;
        getObservationsV2_26.StartResultTime = instant37;
        java.lang.String[] strArray49 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_26.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription55 = locationDescription53.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType57 = null;
        controlConditionActivity56.ControlCleaned = controlCleanedType57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        controlConditionActivity56.DateCleaned = instant60;
        locationDescription55.LastModified = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_52.setStartResultTime(instant60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = getChartDataV2_22.setEndObservedTime(instant60);
        locationRemark19.CreateTime = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations67 = getExportObservations0.setEndModificationTime(instant60);
        java.util.List<java.lang.String> strList68 = getExportObservations67.ResultGrades;
        java.util.List<java.lang.String> strList69 = getExportObservations67.getSamplingLocationIds();
        java.lang.Double double70 = getExportObservations67.MaxNumericResultValue;
        java.time.Instant instant71 = getExportObservations67.EndModificationTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNotNull(locationRemark19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(getChartDataV2_25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNotNull(locationDescription55);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(getChartDataV2_65);
        org.junit.Assert.assertNotNull(getExportObservations67);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNull(double70);
        org.junit.Assert.assertNotNull(instant71);
    }

    @Test
    public void test56964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56964");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod0.Comment = "/AQUARIUS/Provisioning/v1";
        java.time.Instant instant3 = referencePointPeriod0.AppliedTimeUtc;
        java.lang.String str4 = referencePointPeriod0.getReferencePointUniqueId();
        referencePointPeriod0.Elevation = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str8 = ratingModelEffectiveShiftsServiceRequest7.RatingModelIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str10 = ratingModelEffectiveShiftsServiceRequest9.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str12 = referencePointPeriod11.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase14 = referencePointPeriod11.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod11.Uncertainty = 10.0d;
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase18 = referencePointPeriod11.setValidFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest19 = ratingModelEffectiveShiftsServiceRequest9.setQueryFrom(instant17);
        ratingModelEffectiveShiftsServiceRequest7.QueryFrom = instant17;
        referencePointPeriod0.AppliedTimeUtc = instant17;
        referencePointPeriod0.AppliedByUser = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.lang.String str24 = referencePointPeriod0.AppliedByUser;
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(referencePointPeriodBase14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(referencePointPeriodBase18);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str24, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test56965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56965");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest();
        effectiveRatingCurveServiceRequest0.RatingModelIdentifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest4 = effectiveRatingCurveServiceRequest0.setStartValue((java.lang.Double) 0.0d);
        effectiveRatingCurveServiceRequest0.RatingModelIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.time.Instant instant7 = effectiveRatingCurveServiceRequest0.getEffectiveTime();
        effectiveRatingCurveServiceRequest0.StartValue = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest11 = effectiveRatingCurveServiceRequest0.setUtcOffset((java.lang.Double) (-1.0d));
        java.lang.Double double12 = effectiveRatingCurveServiceRequest0.StepSize;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest14 = effectiveRatingCurveServiceRequest0.setRatingModelIdentifier("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest4);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest11);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest14);
    }

    @Test
    public void test56966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56966");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        fieldVisit0.Party = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str6 = levelSurveyActivity5.getParty();
        java.lang.String str7 = levelSurveyActivity5.OriginReferencePointUniqueId;
        java.lang.String str8 = levelSurveyActivity5.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit9 = fieldVisit0.setLevelSurveyActivity(levelSurveyActivity5);
        levelSurveyActivity5.OriginReferencePointUniqueId = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(fieldVisit9);
    }

    @Test
    public void test56967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56967");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation();
        fieldVisitSummaryRepresentation0.CustomId = "https";
        java.lang.String str3 = fieldVisitSummaryRepresentation0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation5 = fieldVisitSummaryRepresentation0.setId("http://MaxDurationhttp");
        fieldVisitSummaryRepresentation0.Id = "2021.8.9990";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "https" + "'", str3, "https");
        org.junit.Assert.assertNotNull(fieldVisitSummaryRepresentation5);
    }

    @Test
    public void test56968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56968");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = postSamplingLocation0.getExtendedAttributes();
        java.lang.String str4 = postSamplingLocation0.getLatitude();
        postSamplingLocation0.Latitude = "2021.4.62.0";
        java.lang.String str7 = postSamplingLocation0.Name;
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test56969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56969");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor13 = processor11.setOutputTimeSeriesUniqueId("2021.4.62.0");
        java.lang.String str14 = processor13.getOutputTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange15 = processor13.ProcessorPeriod;
        processor13.InputRatingModelIdentifier = "'.'SSSSSSS";
        java.lang.String str18 = processor13.ProcessorType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList21 = getExportSpecimens20.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant23 = qualifier22.DateApplied;
        java.lang.String str24 = qualifier22.User;
        java.lang.String str25 = qualifier22.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj27 = timeAlignedDataServiceRequest26.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = timeAlignedDataServiceRequest26.setQueryFrom(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier32 = qualifier22.setDateApplied(instant29);
        getExportSpecimens20.Before = instant29;
        java.util.List<java.lang.String> strList34 = getExportSpecimens20.getLaboratoryIds();
        java.util.List<java.lang.String> strList35 = getExportSpecimens20.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType37 = samplingPlanPlannedActivityRecurrence36.RecurrenceFrequency;
        java.util.List<java.lang.String> strList38 = samplingPlanPlannedActivityRecurrence36.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier41 = putQualifier39.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest42.setTimeSeriesUniqueIds(strList54);
        putQualifier39.GroupIdentifiers = strList54;
        java.util.ArrayList<java.lang.String> strList60 = putQualifier39.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence36.MonthsOfYear = strList60;
        getExportSpecimens20.ActivityTypes = strList60;
        qualifierResponse19.GroupIdentifiers = strList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor64 = processor13.setInputTimeSeriesUniqueIds(strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor66 = processor13.setProcessorType("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        processor66.OutputTimeSeriesUniqueId = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNotNull(processor13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2021.4.62.0" + "'", str14, "2021.4.62.0");
        org.junit.Assert.assertNull(timeRange15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest31);
        org.junit.Assert.assertNotNull(qualifier32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(recurrenceFrequencyType37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(putQualifier41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(processor64);
        org.junit.Assert.assertNotNull(processor66);
    }

    @Test
    public void test56970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56970");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation3 = activity1.SamplingLocation;
        activity1.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation6 = null;
        activity1.SamplingLocation = samplingLocation6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str9 = samplingLocation8.Description;
        java.lang.String str10 = samplingLocation8.VerticalCollectionMethod;
        java.lang.String str11 = samplingLocation8.getLongitude();
        java.lang.String str12 = samplingLocation8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation14 = samplingLocation8.setAddress(address13);
        activity1.SamplingLocation = samplingLocation8;
        samplingLocation8.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = samplingLocation8.AuditAttributes;
        org.junit.Assert.assertNull(samplingLocation3);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(samplingLocation14);
        org.junit.Assert.assertNull(auditAttributes18);
    }

    @Test
    public void test56971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56971");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest1.ReportTitle = "MinDuration";
        reportListServiceRequest1.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList7 = getExportSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        getExportSpecimens6.Before = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark20.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList24 = fieldVisitDataServiceResponse23.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse26 = fieldVisitDataServiceResponse23.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        fieldVisitDataServiceResponse23.ResponseTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark20.setCreateTime(instant30);
        getExportSpecimens6.EndModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest35 = reportListServiceRequest1.setCreatedFrom(instant30);
        getSamplingLocations0.StartModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        getObservationsV2_43.DepthUnitCustomId = "hi!";
        java.lang.String str46 = getObservationsV2_43.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        java.util.List<java.lang.String> strList62 = getObservationsV2_47.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList63 = getObservationsV2_47.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType64 = getObservationsV2_47.FieldResultType;
        java.time.Instant instant65 = getObservationsV2_47.getEndObservedTime();
        java.lang.String str66 = getObservationsV2_47.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray71 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = putLocationTags67.setTagUniqueIds(strList72);
        java.util.ArrayList<java.lang.String> strList75 = putLocationTags74.TagUniqueIds;
        getObservationsV2_47.ProjectIds = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_43.setQualityControlTypes((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations78 = getSamplingLocations0.setLocationTypeIds((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations80 = getSamplingLocations0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations82 = getSamplingLocations80.setLimit((java.lang.Integer) 1);
        java.util.List<java.lang.String> strList83 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations84 = getSamplingLocations82.setLocationTypeIds(strList83);
        java.lang.String str85 = getSamplingLocations84.getSort();
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList24);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNotNull(reportListServiceRequest35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(fieldResultType64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putLocationTags74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(getSamplingLocations78);
        org.junit.Assert.assertNotNull(getSamplingLocations80);
        org.junit.Assert.assertNotNull(getSamplingLocations82);
        org.junit.Assert.assertNotNull(getSamplingLocations84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test56972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56972");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        timeAlignedPoint0.NumericValue8 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setDisplayValue4("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint0.setGradeCode3((java.lang.Long) 1L);
        java.lang.String str14 = timeAlignedPoint13.Method2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint13.setGradeName5("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint18 = timeAlignedPoint16.setNumericValue6((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint20 = timeAlignedPoint16.setApprovalLevel6((java.lang.Long) 10L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNotNull(timeAlignedPoint18);
        org.junit.Assert.assertNotNull(timeAlignedPoint20);
    }

    @Test
    public void test56973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56973");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType7 = observedProperty3.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = postObservedProperty8.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        quantity10.Unit = unit11;
        postObservedProperty8.LowerLimit = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservedProperty8.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = quantity14.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty3.setUpperLimit(quantity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = samplingLocation0.setElevation(quantity14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = samplingLocation17.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList21, plannedActivityArray20);
        putFieldVisit19.PlannedActivities = plannedActivityList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        java.lang.String str31 = domainObjectAttachment29.getId();
        domainObjectAttachment29.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment29.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        java.lang.String str38 = domainObjectAttachment36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = domainObjectAttachment36.setAttachment(attachment39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment43.setAttachment(attachment46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment24, domainObjectAttachment29, domainObjectAttachment36, domainObjectAttachment41, domainObjectAttachment43, domainObjectAttachment48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51, domainObjectAttachmentArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit53 = putFieldVisit19.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51);
        samplingLocation17.Attachments = domainObjectAttachmentList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation56 = samplingLocation17.setId("2021.4.62.0");
        java.lang.String str57 = samplingLocation56.Latitude;
        java.lang.String str58 = samplingLocation56.getLatitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity62 = samplingPlanPlannedActivity60.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = auditAttributes63.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity62.AuditAttributes = auditAttributes63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = samplingPlanPlannedActivity62.AuditAttributes;
        putAccessGroup59.AuditAttributes = auditAttributes67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup70 = putAccessGroup59.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = putAccessGroup59.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup73 = putAccessGroup59.setCanEditAllData((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList76, samplingLocationGroupArray75);
        postAccessGroup74.SamplingLocationGroups = samplingLocationGroupList76;
        putAccessGroup59.SamplingLocationGroups = samplingLocationGroupList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation80 = samplingLocation56.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation82 = samplingLocation56.setName("");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(resultType7);
        org.junit.Assert.assertNull(unitGroup9);
        org.junit.Assert.assertNotNull(quantity14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNotNull(samplingLocation17);
        org.junit.Assert.assertNull(domainObjectAttachmentList18);
        org.junit.Assert.assertNotNull(plannedActivityArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(domainObjectAttachment40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putFieldVisit53);
        org.junit.Assert.assertNotNull(samplingLocation56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity62);
        org.junit.Assert.assertNotNull(auditAttributes65);
        org.junit.Assert.assertNotNull(auditAttributes67);
        org.junit.Assert.assertNotNull(putAccessGroup70);
        org.junit.Assert.assertNotNull(auditAttributes71);
        org.junit.Assert.assertNotNull(putAccessGroup73);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(samplingLocation80);
        org.junit.Assert.assertNotNull(samplingLocation82);
    }

    @Test
    public void test56974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56974");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList5 = user4.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user7 = user4.setEmail("hi!");
        user7.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user11 = user7.setUserProfile(userProfile10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user13 = user11.setUserType(userType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user14 = user3.setUserType(userType12);
        java.util.List<java.lang.String> strList15 = user14.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType16 = user14.UserType;
        java.util.List<java.lang.String> strList17 = user14.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList19 = null;
        putUser18.AccessGroups = strList19;
        java.lang.String str21 = putUser18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType22 = putUser18.getUserType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList24 = user23.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user26 = user23.setEmail("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user28 = user26.setEmail("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType29 = user28.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile();
        java.lang.String str31 = userProfile30.LastName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user32 = user28.setUserProfile(userProfile30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser33 = putUser18.setUserProfile(userProfile30);
        java.lang.String str34 = userProfile30.Email;
        java.lang.String str35 = userProfile30.FirstName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile37 = userProfile30.setId("'.'SSSSSSS");
        user14.UserProfile = userProfile37;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(user7);
        org.junit.Assert.assertNotNull(user11);
        org.junit.Assert.assertTrue("'" + userType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(user13);
        org.junit.Assert.assertNotNull(user14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(userType22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(user26);
        org.junit.Assert.assertNotNull(user28);
        org.junit.Assert.assertNull(userType29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(user32);
        org.junit.Assert.assertNotNull(putUser33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(userProfile37);
    }

    @Test
    public void test56975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56975");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList1 = null;
        putUser0.AccessGroups = strList1;
        java.lang.String str3 = putUser0.CustomId;
        java.util.List<java.lang.String> strList4 = null;
        putUser0.AccessGroups = strList4;
        java.util.List<java.lang.String> strList6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser7 = putUser0.setAccessGroups(strList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser9 = putUser0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str11 = postUser10.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser13 = postUser10.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType15 = putUserV2_14.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary18.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        dischargeSummary18.MeasurementTime = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse17.setNextToken(instant22);
        java.time.Instant instant26 = locationDescriptionListServiceResponse17.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities27 = getActivities16.setToStartTime(instant26);
        java.lang.String str28 = getActivities27.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList30 = getObservationsV2_29.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        getObservationsV2_29.ResultGrades = strList42;
        getActivities27.Media = strList42;
        putUserV2_14.AccessGroups = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_50 = putUserV2_14.setUserProfile(userProfile49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType51 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_52 = putUserV2_14.setUserType(userType51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser53 = postUser13.setUserType(userType51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType54 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser55 = postUser53.setUserType(userType54);
        putUser9.UserType = userType54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser58 = putUser9.setId("'.'SSSSSSS");
        java.lang.String str59 = putUser58.Email;
        putUser58.CustomId = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putUser7);
        org.junit.Assert.assertNotNull(putUser9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postUser13);
        org.junit.Assert.assertNull(userType15);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(getActivities27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(putUserV2_50);
        org.junit.Assert.assertTrue("'" + userType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_52);
        org.junit.Assert.assertNotNull(postUser53);
        org.junit.Assert.assertTrue("'" + userType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM + "'", userType54.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM));
        org.junit.Assert.assertNotNull(postUser55);
        org.junit.Assert.assertNotNull(putUser58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test56976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56976");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.util.List<java.lang.String> strList1 = postUser0.Roles;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser3 = postUser0.setEmail("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser5 = postUser0.setId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser7 = postUser5.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList9 = postUserV2_8.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary12.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        dischargeSummary12.MeasurementTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse11.setNextToken(instant16);
        java.time.Instant instant20 = locationDescriptionListServiceResponse11.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities21 = getActivities10.setToStartTime(instant20);
        java.lang.String str22 = getActivities21.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities24 = getActivities21.setLimit((java.lang.Integer) 1);
        getActivities24.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        getObservationsV2_28.SpecimenIds = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        getObservationsV2_28.QualityControlTypes = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest27.setTimeSeriesUniqueIds(strList39);
        getActivities24.CollectionMethodIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_45 = postUserV2_8.setRoles((java.util.List<java.lang.String>) strList39);
        java.util.List<java.lang.String> strList46 = postUserV2_45.getAccessGroups();
        java.lang.String str47 = postUserV2_45.getCustomId();
        postUserV2_45.CustomId = "hi!";
        postUserV2_45.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_53 = postUserV2_45.setId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile();
        java.lang.String str55 = userProfile54.getLastName();
        postUserV2_45.UserProfile = userProfile54;
        java.lang.String str57 = userProfile54.getFirstName();
        postUser5.UserProfile = userProfile54;
        java.lang.String str59 = userProfile54.getProfileImageUrl();
        java.lang.String str60 = userProfile54.ProfileImageUrl;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postUser3);
        org.junit.Assert.assertNotNull(postUser5);
        org.junit.Assert.assertNotNull(postUser7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(getActivities21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(getActivities24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(postUserV2_45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(postUserV2_53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test56977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56977");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = importItemTaxon0.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = importItemTaxon2.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon5 = importItemTaxon2.setInput("MinDuration");
        java.lang.Object obj6 = importItemTaxon5.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType7 = importItemTaxon5.getStatus();
        importItemTaxon5.RowId = "ZZZZZ";
        java.util.List<java.lang.String> strList10 = importItemTaxon5.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon11 = importItemTaxon5.ExistingItem;
        org.junit.Assert.assertNotNull(importItemTaxon2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(importItemTaxon5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(importItemStatusType7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(taxon11);
    }

    @Test
    public void test56978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56978");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        calibrationCheck0.SensorUniqueId = "MinDuration";
        java.lang.String str4 = calibrationCheck0.SubLocationIdentifier;
        java.lang.String str5 = calibrationCheck0.Manufacturer;
        java.lang.String str6 = calibrationCheck0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck0.setManufacturer("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(calibrationCheck8);
    }

    @Test
    public void test56979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56979");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType2 = null;
        controlConditionActivity1.ControlCleaned = controlCleanedType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = locationDescriptionListServiceResponse4.setNextToken(instant5);
        controlConditionActivity1.DateCleaned = instant5;
        timeAlignedDataServiceRequest0.QueryFrom = instant5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.ActivityIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest0.setTimeSeriesOutputUnitIds(strList20);
        java.util.ArrayList<java.lang.String> strList25 = timeAlignedDataServiceRequest0.getTimeSeriesUniqueIds();
        timeAlignedDataServiceRequest0.UtcOffset = 0.0d;
        java.lang.Object obj28 = timeAlignedDataServiceRequest0.getResponseType();
        timeAlignedDataServiceRequest0.ApplyRounding = false;
        java.util.ArrayList<java.lang.String> strList31 = timeAlignedDataServiceRequest0.TimeSeriesOutputUnitIds;
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test56980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56980");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        java.lang.String str1 = roundServiceRequest0.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList6 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList6, doubleArray5);
        ratingModelInputValuesServiceResponse3.InputValues = doubleList6;
        java.util.ArrayList<java.lang.Double> doubleList9 = ratingModelInputValuesServiceResponse3.InputValues;
        ratingModelInputValuesServiceResponse2.InputValues = doubleList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest11 = roundServiceRequest0.setData(doubleList9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest13 = roundServiceRequest11.setValueForNaN("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest14.ApplyShifts = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList22 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList22, doubleArray21);
        ratingModelOutputValuesServiceResponse17.OutputValues = doubleList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest25 = ratingModelOutputValuesServiceRequest14.setInputValues(doubleList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest26 = roundServiceRequest13.setData(doubleList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest28 = roundServiceRequest26.setUnitId("-PT87591240H");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleList9);
        org.junit.Assert.assertNotNull(roundServiceRequest11);
        org.junit.Assert.assertNotNull(roundServiceRequest13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest25);
        org.junit.Assert.assertNotNull(roundServiceRequest26);
        org.junit.Assert.assertNotNull(roundServiceRequest28);
    }

    @Test
    public void test56981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56981");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset();
        putBaseStandardReferenceDatumOffset0.OffsetToBaseReference = 10.0d;
        putBaseStandardReferenceDatumOffset0.LocationUniqueId = "/AQUARIUS/Provisioning/v1";
        java.lang.String str5 = putBaseStandardReferenceDatumOffset0.StandardIdentifier;
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test56982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56982");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        java.lang.String str3 = parameterMetadata0.getUnitGroupIdentifier();
        java.lang.String str4 = parameterMetadata0.InterpolationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata6 = parameterMetadata0.setDisplayName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata8 = parameterMetadata0.setRoundingSpec("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        parameterMetadata8.UnitGroupIdentifier = "****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.String str11 = parameterMetadata8.getRoundingSpec();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(parameterMetadata6);
        org.junit.Assert.assertNotNull(parameterMetadata8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str11, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test56983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56983");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postDetectioncondition0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition10 = postDetectioncondition0.setSystemCode("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition12 = postDetectioncondition0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = postDetectioncondition0.getAuditAttributes();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(postDetectioncondition10);
        org.junit.Assert.assertNotNull(postDetectioncondition12);
        org.junit.Assert.assertNull(auditAttributes13);
    }

    @Test
    public void test56984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56984");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit();
        java.lang.String str1 = postVisitFileToVisit0.getVisitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile2 = null;
        postVisitFileToVisit0.File = iHttpFile2;
        java.lang.Object obj4 = postVisitFileToVisit0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
    }

    @Test
    public void test56985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56985");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34, plannedActivityArray33);
        putFieldVisit32.PlannedActivities = plannedActivityList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str38 = domainObjectAttachment37.getId();
        java.lang.String str39 = domainObjectAttachment37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment37.setAttachment(attachment40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        domainObjectAttachment42.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = domainObjectAttachment42.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str50 = domainObjectAttachment49.getId();
        java.lang.String str51 = domainObjectAttachment49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = domainObjectAttachment49.setAttachment(attachment52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        java.lang.String str58 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = domainObjectAttachment56.setAttachment(attachment59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str62 = domainObjectAttachment61.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment37, domainObjectAttachment42, domainObjectAttachment49, domainObjectAttachment54, domainObjectAttachment56, domainObjectAttachment61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64, domainObjectAttachmentArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit66 = putFieldVisit32.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan67 = putFieldVisit32.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple68 = putFieldVisit32.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule69 = putFieldVisit32.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList70 = putFieldVisit32.Attachments;
        postSamplingLocation0.Attachments = domainObjectAttachmentList70;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList72 = postSamplingLocation0.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address73 = postSamplingLocation0.Address;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation75 = postSamplingLocation0.setName("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str76 = postSamplingLocation0.getDescription();
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(domainObjectAttachment53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(domainObjectAttachment60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putFieldVisit66);
        org.junit.Assert.assertNull(samplingPlan67);
        org.junit.Assert.assertNull(fieldTripSimple68);
        org.junit.Assert.assertNull(schedule69);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList72);
        org.junit.Assert.assertNull(address73);
        org.junit.Assert.assertNotNull(postSamplingLocation75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test56986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56986");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase2 = putOpenIdConnectRelyingPartyConfiguration0.setOptionalIssuerDiscoveryUri("2021.4.62.0");
        java.util.List<java.lang.String> strList3 = putOpenIdConnectRelyingPartyConfiguration0.HostedDomains;
        putOpenIdConnectRelyingPartyConfiguration0.ClientIdentifier = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase2);
        org.junit.Assert.assertNull(strList3);
    }

    @Test
    public void test56987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56987");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType2 = null;
        controlConditionActivity1.ControlCleaned = controlCleanedType2;
        java.lang.String str4 = controlConditionActivity1.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        controlConditionActivity1.DateCleaned = instant8;
        gageHeightReading0.ReadingTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = doubleWithDisplay12.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str15 = doubleWithDisplay14.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading16 = gageHeightReading0.setGageHeight(doubleWithDisplay14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary18.setMeanGageHeightMethod("hi!");
        java.lang.String str21 = dischargeSummary20.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary20.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType25 = calibrationCheck24.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay26 = calibrationCheck24.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        dischargeSummary28.MeasurementTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse27.setNextToken(instant32);
        java.time.Instant instant36 = locationDescriptionListServiceResponse27.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck37 = calibrationCheck24.setTime(instant36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = dischargeSummary20.setMeasurementTime(instant36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_39 = getChartDataV2_17.setStartResultTime(instant36);
        gageHeightReading0.ReadingTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark41.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList45 = fieldVisitDataServiceResponse44.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse47 = fieldVisitDataServiceResponse44.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary48.Reviewer = "";
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary48.MeasurementTime = instant51;
        fieldVisitDataServiceResponse44.ResponseTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark54 = locationRemark41.setCreateTime(instant51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_55.setDataClassifications((java.util.List<java.lang.String>) strList59);
        getObservationsV2_61.DepthUnitCustomId = "hi!";
        java.lang.String str64 = getObservationsV2_61.DepthUnitId;
        java.util.List<java.lang.String> strList65 = null;
        getObservationsV2_61.ProjectIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant68 = qualifier67.DateApplied;
        java.lang.String str69 = qualifier67.User;
        java.lang.String str70 = qualifier67.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj72 = timeAlignedDataServiceRequest71.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse73.setNextToken(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest76 = timeAlignedDataServiceRequest71.setQueryFrom(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier77 = qualifier67.setDateApplied(instant74);
        java.time.Instant instant78 = qualifier77.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_61.setEndModificationTime(instant78);
        locationRemark41.ToTime = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading81 = gageHeightReading0.setReadingTime(instant78);
        gageHeightReading81.IsUsed = false;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(doubleWithDisplay14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(gageHeightReading16);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNull(calibrationCheckType25);
        org.junit.Assert.assertNull(doubleWithDisplay26);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(calibrationCheck37);
        org.junit.Assert.assertNotNull(dischargeSummary38);
        org.junit.Assert.assertNotNull(getChartDataV2_39);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList45);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationRemark54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(instant68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest76);
        org.junit.Assert.assertNotNull(qualifier77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNotNull(gageHeightReading81);
    }

    @Test
    public void test56988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56988");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen4 = specimen2.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity6.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = postActivity6.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity10.setAuditAttributes(auditAttributes11);
        postCollectionMethod5.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen14 = specimen2.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory15.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str18 = laboratory15.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = laboratory15.getAuditAttributes();
        java.lang.String str20 = laboratory15.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen21 = specimen2.setLaboratory(laboratory15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate22.setCustomId("hi!");
        java.lang.String str25 = specimenTemplate24.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen26 = specimen2.setTemplateCreatedFrom(specimenTemplate24);
        java.lang.String str27 = specimenTemplate24.Name;
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNotNull(specimen4);
        org.junit.Assert.assertNotNull(postActivity10);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(specimen14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(specimen21);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(specimen26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test56989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56989");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj1 = timeAlignedDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = locationDescriptionListServiceResponse2.setNextToken(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = timeAlignedDataServiceRequest0.setQueryFrom(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = timeAlignedDataServiceRequest0.setApplyRounding((java.lang.Boolean) true);
        java.lang.Boolean boolean8 = timeAlignedDataServiceRequest7.isApplyRounding();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse4);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
    }

    @Test
    public void test56990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56990");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteCodeTableBase deleteCodeTableBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteCodeTableBase();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteCodeTableBase deleteCodeTableBase2 = deleteCodeTableBase0.setPublicIdentifier("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteCodeTableBase deleteCodeTableBase4 = deleteCodeTableBase2.setPublicIdentifier("MaxDuration");
        org.junit.Assert.assertNotNull(deleteCodeTableBase2);
        org.junit.Assert.assertNotNull(deleteCodeTableBase4);
    }

    @Test
    public void test56991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56991");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.Locale = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest5 = getAuthTokenServiceRequest0.setUsername("https");
        java.lang.String str6 = getAuthTokenServiceRequest5.Username;
        java.lang.String str7 = getAuthTokenServiceRequest5.EncryptedPassword;
        getAuthTokenServiceRequest5.EncryptedPassword = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest11 = getAuthTokenServiceRequest5.setLocale("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        getAuthTokenServiceRequest5.EncryptedPassword = "multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****";
        java.lang.String str14 = getAuthTokenServiceRequest5.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "https" + "'", str6, "https");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "https" + "'", str14, "https");
    }

    @Test
    public void test56992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56992");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj3 = putLocationType2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest4.ReportTitle = "MinDuration";
        java.lang.String str7 = reportListServiceRequest4.getLocationUniqueId();
        java.time.Instant instant8 = null;
        reportListServiceRequest4.CreatedFrom = instant8;
        java.lang.String[] strArray22 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        reportListServiceRequest4.TagValues = strList23;
        putLocationType2.ExtendedAttributeDefinitionIds = strList23;
        getExportObservations0.SpecimenIds = strList23;
        java.lang.Double double28 = getExportObservations0.MinNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType29 = getExportObservations0.Format;
        java.lang.Double double30 = getExportObservations0.getMinNumericResultValue();
        java.time.Instant instant31 = getExportObservations0.getEndModificationTime();
        java.lang.String str32 = getExportObservations0.SpecimenName;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(getExportObservationsFormatType29);
        org.junit.Assert.assertNull(double30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test56993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56993");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        java.lang.Double double27 = getGroupedObservationsV2_0.getDepthValue();
        java.lang.Double double28 = getGroupedObservationsV2_0.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType30 = getExtendedAttributes29.AppliesToType;
        java.util.List<java.lang.String> strList31 = getExtendedAttributes29.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList33 = getExportSpecimens32.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant35 = qualifier34.DateApplied;
        java.lang.String str36 = qualifier34.User;
        java.lang.String str37 = qualifier34.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj39 = timeAlignedDataServiceRequest38.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest38.setQueryFrom(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier44 = qualifier34.setDateApplied(instant41);
        getExportSpecimens32.Before = instant41;
        java.time.Instant instant46 = getExportSpecimens32.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList48 = getSpecimens47.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType50 = putUserV2_49.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary53.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant57 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse56.setNextToken(instant57);
        dischargeSummary53.MeasurementTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse52.setNextToken(instant57);
        java.time.Instant instant61 = locationDescriptionListServiceResponse52.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities62 = getActivities51.setToStartTime(instant61);
        java.lang.String str63 = getActivities62.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList65 = getObservationsV2_64.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        getObservationsV2_66.SpecimenIds = strList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray76 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags72.setTagUniqueIds(strList77);
        getObservationsV2_66.QualityControlTypes = strList77;
        getObservationsV2_64.ResultGrades = strList77;
        getActivities62.Media = strList77;
        putUserV2_49.AccessGroups = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens84 = getSpecimens47.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens85 = getExportSpecimens32.setSamplingLocationIds((java.util.List<java.lang.String>) strList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes86 = getExtendedAttributes29.setSearch((java.util.List<java.lang.String>) strList77);
        getGroupedObservationsV2_0.ResultStatuses = strList77;
        java.util.List<java.lang.String> strList88 = getGroupedObservationsV2_0.ActivityTypes;
        getGroupedObservationsV2_0.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList91 = getGroupedObservationsV2_0.getSpecimenIds();
        java.util.List<java.lang.String> strList92 = getGroupedObservationsV2_0.ActivityIds;
        java.lang.String str93 = getGroupedObservationsV2_0.getImportHistoryEventId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType94 = getGroupedObservationsV2_0.SampleFraction;
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(appliesToType30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(qualifier44);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(userType50);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(getActivities62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(getSpecimens84);
        org.junit.Assert.assertNotNull(getExportSpecimens85);
        org.junit.Assert.assertNotNull(getExtendedAttributes86);
        org.junit.Assert.assertNull(strList88);
        org.junit.Assert.assertNull(strList91);
        org.junit.Assert.assertNull(strList92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(sampleFractionType94);
    }

    @Test
    public void test56994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56994");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK;
        plannedActivity0.ActivityType = plannedActivityActivityType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate5 = activityTemplate3.setMedium(mediumType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate7 = activityTemplate3.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = plannedFieldResult8.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = plannedFieldResult8.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType17 = analyticalGroup16.getType();
        analyticalGroup16.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem21.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = null;
        analyticalGroupItem26.AnalysisMethod = analysisMethod29;
        java.lang.String str31 = analyticalGroupItem26.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = null;
        analyticalGroupItem37.AnalysisMethod = analysisMethod40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem21, analyticalGroupItem23, analyticalGroupItem26, analyticalGroupItem32, analyticalGroupItem35, analyticalGroupItem37 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList43, analyticalGroupItemArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup45 = analyticalGroup20.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList43);
        analyticalGroup16.AnalyticalGroupItems = analyticalGroupItemList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup16.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult49 = plannedFieldResult15.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str51 = putActivityTemplate50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate53 = putActivityTemplate50.setMedium(mediumType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult54 = plannedFieldResult15.setMedium(mediumType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate55 = activityTemplate3.setMedium(mediumType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType56 = activityTemplate55.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity57 = plannedActivity0.setMedium(mediumType56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType58 = plannedActivity0.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod59 = plannedActivity0.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType61 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate62 = activityTemplate60.setMedium(mediumType61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity63 = activityTemplate62.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate66 = postFieldVisitActivityWithTemplate64.setAuditAttributes(auditAttributes65);
        java.lang.String str67 = postFieldVisitActivityWithTemplate66.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate69 = postFieldVisitActivityWithTemplate66.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType70 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER;
        postFieldVisitActivityWithTemplate69.Medium = mediumType70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate72 = activityTemplate62.setMedium(mediumType70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType73 = activityTemplate62.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity74 = plannedActivity0.setActivityTemplate(activityTemplate62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType75 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.TISSUE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity76 = plannedActivity74.setMedium(mediumType75);
        java.lang.String str77 = plannedActivity74.getInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = plannedActivity74.AuditAttributes;
        org.junit.Assert.assertTrue("'" + plannedActivityActivityType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK + "'", plannedActivityActivityType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK));
        org.junit.Assert.assertTrue("'" + mediumType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate5);
        org.junit.Assert.assertNotNull(activityTemplate7);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(plannedFieldResult15);
        org.junit.Assert.assertNull(analyticalGroupType17);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(analyticalGroup45);
        org.junit.Assert.assertNotNull(plannedFieldResult49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + mediumType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate53);
        org.junit.Assert.assertNotNull(plannedFieldResult54);
        org.junit.Assert.assertNotNull(activityTemplate55);
        org.junit.Assert.assertTrue("'" + mediumType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType56.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(plannedActivity57);
        org.junit.Assert.assertTrue("'" + mediumType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNull(collectionMethod59);
        org.junit.Assert.assertTrue("'" + mediumType61 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType61.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate62);
        org.junit.Assert.assertNull(quantity63);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate69);
        org.junit.Assert.assertTrue("'" + mediumType70 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER + "'", mediumType70.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER));
        org.junit.Assert.assertNotNull(activityTemplate72);
        org.junit.Assert.assertTrue("'" + mediumType73 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER + "'", mediumType73.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER));
        org.junit.Assert.assertNotNull(plannedActivity74);
        org.junit.Assert.assertTrue("'" + mediumType75 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.TISSUE + "'", mediumType75.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.TISSUE));
        org.junit.Assert.assertNotNull(plannedActivity76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(auditAttributes78);
    }

    @Test
    public void test56995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56995");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.String str1 = putBulkEditResultGradesV2_0.getDetectionCondition();
        java.util.List<java.lang.String> strList2 = putBulkEditResultGradesV2_0.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_4 = putBulkEditResultGradesV2_0.setLimit((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.Sort;
        java.util.List<java.lang.String> strList7 = deleteFieldVisits5.getSearch();
        java.util.List<java.lang.String> strList8 = deleteFieldVisits5.getScheduleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        deleteFieldVisits5.Ids = strList23;
        putBulkEditResultGradesV2_0.ActivityIds = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setFilterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.Instant instant33 = putBulkEditResultGradesV2_0.getEndModificationTime();
        java.util.List<java.lang.String> strList34 = putBulkEditResultGradesV2_0.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList36 = getObservationsV2_35.SamplingContextTagIds;
        java.time.Instant instant37 = getObservationsV2_35.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary40.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        dischargeSummary40.MeasurementTime = instant44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse39.setNextToken(instant44);
        java.time.Instant instant48 = locationDescriptionListServiceResponse39.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities49 = getActivities38.setToStartTime(instant48);
        java.lang.String str50 = getActivities49.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList52 = getObservationsV2_51.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.QualityControlTypes = strList64;
        getObservationsV2_51.ResultGrades = strList64;
        getActivities49.Media = strList64;
        getObservationsV2_35.AnalysisMethodSimpleIds = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = getObservationsV2_35.setDetectionCondition("MinInstant");
        java.util.List<java.lang.String> strList73 = getObservationsV2_72.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_72.setImportHistoryEventId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_72.setActivityCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj79 = timeAlignedDataServiceRequest78.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant81 = sensor80.getLastModifiedUtc();
        java.time.Instant instant82 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor83 = sensor80.setLastModifiedUtc(instant82);
        java.time.Instant instant84 = sensor80.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest85 = timeAlignedDataServiceRequest78.setQueryTo(instant84);
        getObservationsV2_72.StartResultTime = instant84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_87 = putBulkEditResultGradesV2_0.setEndObservedTime(instant84);
        putBulkEditResultGradesV2_87.Limit = 1;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(instant37);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(getActivities49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(getObservationsV2_72);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(sensor83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest85);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_87);
    }

    @Test
    public void test56996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56996");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType1 = getObservationExportIIV2_0.getFormat();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitId();
        java.util.List<java.lang.String> strList3 = getObservationExportIIV2_0.SamplingLocationIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList20 = getObservationsV2_4.DataClassifications;
        java.util.List<java.lang.String> strList21 = getObservationsV2_4.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj23 = timeAlignedDataServiceRequest22.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = getObservationsV2_24.setDataClassifications((java.util.List<java.lang.String>) strList28);
        getObservationsV2_30.DepthUnitCustomId = "hi!";
        java.lang.String str33 = getObservationsV2_30.CustomId;
        java.util.List<java.lang.String> strList34 = getObservationsV2_30.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        getObservationsV2_35.QualityControlTypes = strList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_30.setMedia((java.util.List<java.lang.String>) strList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str52 = getObservationsV2_51.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        getObservationsV2_51.ProjectIds = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_30.setObservedPropertyIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = timeAlignedDataServiceRequest22.setTimeSeriesOutputUnitIds(strList56);
        getObservationsV2_4.LabReportIds = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_63 = getObservationExportIIV2_0.setMedia((java.util.List<java.lang.String>) strList56);
        java.lang.Double double64 = getObservationExportIIV2_0.getMinNumericResultValue();
        java.lang.Double double65 = getObservationExportIIV2_0.MaxNumericResultValue;
        java.util.List<java.lang.String> strList66 = getObservationExportIIV2_0.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_68 = getObservationExportIIV2_0.setActivityCustomId("http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        org.junit.Assert.assertNull(getObservationExportIIFormatType1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest61);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_63);
        org.junit.Assert.assertNull(double64);
        org.junit.Assert.assertNull(double65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_68);
    }

    @Test
    public void test56997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56997");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putAnalysisMethod0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal4 = observationMinimal2.setSpecimen(specimenNestedInActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = observationMinimal4.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue7 = categoricalResult6.getFixedValue();
        observationMinimal4.CategoricalResult = categoricalResult6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult9.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue12 = categoricalResult9.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult9.NullMeasureQualifier = nullMeasureQualifier13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult15 = categoricalResult6.setNullMeasureQualifier(nullMeasureQualifier13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier16 = categoricalResult6.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup19 = putAnalyticalGroup17.setAnalyticalGroupItems(analyticalGroupItemList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan23.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime26 = samplingPlan23.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit29 = putUnitGroupWithUnit27.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType30 = putUnitGroupWithUnit27.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = samplingPlanPlannedActivity32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = auditAttributes35.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity34.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = samplingPlanPlannedActivity34.AuditAttributes;
        putAccessGroup31.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit41 = putUnitGroupWithUnit27.setAuditAttributes(auditAttributes39);
        samplingPlan23.AuditAttributes = auditAttributes39;
        java.time.OffsetDateTime offsetDateTime43 = null;
        auditAttributes39.ModificationTime = offsetDateTime43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = labResultDetails20.setAuditAttributes(auditAttributes39);
        putAnalyticalGroup19.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier47 = nullMeasureQualifier16.setAuditAttributes(auditAttributes39);
        putAnalysisMethod0.AuditAttributes = auditAttributes39;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList49 = null;
        putAnalysisMethod0.ObservedProperties = observedPropertyList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod52 = putAnalysisMethod0.setId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod54 = putAnalysisMethod52.setContext("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str55 = putAnalysisMethod52.Description;
        java.lang.String str56 = putAnalysisMethod52.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod58 = putAnalysisMethod52.setDescription("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList59 = putAnalysisMethod58.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod61 = putAnalysisMethod58.setContext("PT87591240H");
        java.lang.String str62 = putAnalysisMethod61.getId();
        java.lang.String str63 = putAnalysisMethod61.MethodId;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(observationMinimal4);
        org.junit.Assert.assertNull(observedProperty5);
        org.junit.Assert.assertNull(categoricalValue7);
        org.junit.Assert.assertNull(categoricalValue12);
        org.junit.Assert.assertNotNull(categoricalResult15);
        org.junit.Assert.assertNotNull(nullMeasureQualifier16);
        org.junit.Assert.assertNotNull(putAnalyticalGroup19);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit29);
        org.junit.Assert.assertNull(unitGroupSystemCodeType30);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity34);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit41);
        org.junit.Assert.assertNotNull(labResultDetails45);
        org.junit.Assert.assertNotNull(nullMeasureQualifier47);
        org.junit.Assert.assertNotNull(putAnalysisMethod52);
        org.junit.Assert.assertNotNull(putAnalysisMethod54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "MinInstant" + "'", str56, "MinInstant");
        org.junit.Assert.assertNotNull(putAnalysisMethod58);
        org.junit.Assert.assertNull(importHistoryEventSimpleList59);
        org.junit.Assert.assertNotNull(putAnalysisMethod61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MinInstant" + "'", str62, "MinInstant");
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test56998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56998");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile1 = null;
        postReportPlugin0.File = iHttpFile1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin4 = postReportPlugin0.setFile(iHttpFile3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile5 = postReportPlugin0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin7 = postReportPlugin0.setFolderName("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin9 = postReportPlugin7.setFolderName("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile10 = null;
        postReportPlugin7.File = iHttpFile10;
        org.junit.Assert.assertNotNull(postReportPlugin4);
        org.junit.Assert.assertNull(iHttpFile5);
        org.junit.Assert.assertNotNull(postReportPlugin7);
        org.junit.Assert.assertNotNull(postReportPlugin9);
    }

    @Test
    public void test56999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test56999");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setIdentifier("");
        java.lang.String str3 = openIdConnectUser2.FirstName;
        java.lang.String str4 = openIdConnectUser2.getLoginName();
        java.lang.Boolean boolean5 = openIdConnectUser2.System;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser7 = openIdConnectUser2.setSubjectIdentifier("9999-12-31T23:59:59.9999999Z");
        java.lang.Boolean boolean8 = openIdConnectUser7.isCanConfigureSystem();
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(openIdConnectUser7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test57000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest113.test57000");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        java.lang.String str1 = putSamplingLocation0.Id;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList2 = putSamplingLocation0.SamplingLocationGroups;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        address3.StreetName = "http://MaxDurationhttp/json/reply/ArrayList";
        putSamplingLocation0.Address = address3;
        java.lang.String str7 = address3.CityName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType addressType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address9 = address3.setAddressType(addressType8);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(samplingLocationGroupList2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + addressType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING + "'", addressType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING));
        org.junit.Assert.assertNotNull(address9);
    }
}

