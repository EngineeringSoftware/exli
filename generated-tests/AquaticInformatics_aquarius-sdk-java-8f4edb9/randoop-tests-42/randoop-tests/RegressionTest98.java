import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest98 {

    public static boolean debug = false;

    @Test
    public void test49001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49001");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str4 = getExportObservations3.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = getExportObservations3.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = getExportObservations3.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport9.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant12 = recurringReport9.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit13.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant17 = locationDatumPeriod16.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod19 = locationDatumPeriod16.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription27 = timeSeriesDescription20.setRawStartTime(instant24);
        locationDatumPeriod16.ValidFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription29 = fieldVisit13.setLastMatchedTime(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport30 = recurringReport9.setNextGenerationDate(instant24);
        getExportObservations3.StartModificationTime = instant24;
        java.lang.String str32 = getExportObservations3.ActivityCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj34 = postQualifier33.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean38 = roleFlattened37.CanRemoveFieldVisits;
        roleFlattened37.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str42 = putLocationType41.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        java.util.List<java.lang.String> strList53 = getObservationsV2_49.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray64 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = putLocationTags60.setTagUniqueIds(strList65);
        getObservationsV2_54.QualityControlTypes = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_49.setMedia((java.util.List<java.lang.String>) strList65);
        putLocationType41.ExtendedAttributeDefinitionIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase71 = roleFlattened37.setRoleApprovalTransitions(strList65);
        putBulkEditResultGradesV2_36.ResultGrades = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities73 = getActivities35.setSamplingLocationIds((java.util.List<java.lang.String>) strList65);
        postQualifier33.GroupIdentifiers = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations75 = getExportObservations3.setActivityTypes((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_76 = getObservationExportIIV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList65);
        java.lang.Double double77 = getObservationExportIIV2_76.NumericResultValue;
        java.util.List<java.lang.String> strList78 = getObservationExportIIV2_76.SpecimenIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getExportObservations6);
        org.junit.Assert.assertNotNull(getExportObservations8);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNotNull(locationDatumPeriod19);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(timeSeriesDescription27);
        org.junit.Assert.assertNotNull(fieldVisitDescription29);
        org.junit.Assert.assertNotNull(recurringReport30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putLocationTags67);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(roleFlattenedBase71);
        org.junit.Assert.assertNotNull(getActivities73);
        org.junit.Assert.assertNotNull(getExportObservations75);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_76);
        org.junit.Assert.assertNull(double77);
        org.junit.Assert.assertNull(strList78);
    }

    @Test
    public void test49002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49002");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeStepCount((java.lang.Integer) 0);
        java.lang.String str6 = postStatisticalDerivedTimeSeries5.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries8 = postStatisticalDerivedTimeSeries5.setPublish((java.lang.Boolean) true);
        java.lang.String str9 = postStatisticalDerivedTimeSeries8.UtcOffset;
        java.lang.String str10 = postStatisticalDerivedTimeSeries8.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries12 = postStatisticalDerivedTimeSeries8.setTimeStepCount((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries12);
    }

    @Test
    public void test49003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49003");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant1 = activeMeterCalibration0.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double3 = activeMeterCalibrationEquation2.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double5 = activeMeterCalibrationEquation4.getSlope();
        java.lang.String str6 = activeMeterCalibrationEquation4.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double8 = activeMeterCalibrationEquation7.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation2, activeMeterCalibrationEquation4, activeMeterCalibrationEquation7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList10, activeMeterCalibrationEquationArray9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration12 = activeMeterCalibration0.setEquations(activeMeterCalibrationEquationList10);
        java.time.Instant instant13 = activeMeterCalibration12.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription16 = locationDescription14.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType18 = null;
        controlConditionActivity17.ControlCleaned = controlCleanedType18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        controlConditionActivity17.DateCleaned = instant21;
        locationDescription16.LastModified = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration25 = activeMeterCalibration12.setFirstUsedDate(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant27 = activeMeterCalibration26.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double29 = activeMeterCalibrationEquation28.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double31 = activeMeterCalibrationEquation30.getSlope();
        java.lang.String str32 = activeMeterCalibrationEquation30.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double34 = activeMeterCalibrationEquation33.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation28, activeMeterCalibrationEquation30, activeMeterCalibrationEquation33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList36, activeMeterCalibrationEquationArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration38 = activeMeterCalibration26.setEquations(activeMeterCalibrationEquationList36);
        activeMeterCalibration25.Equations = activeMeterCalibrationEquationList36;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList40 = activeMeterCalibration25.Equations;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList41 = activeMeterCalibration25.getEquations();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration12);
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNotNull(locationDescription16);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(activeMeterCalibration25);
        org.junit.Assert.assertNull(instant27);
        org.junit.Assert.assertNull(double29);
        org.junit.Assert.assertNull(double31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(double34);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration38);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationList40);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationList41);
    }

    @Test
    public void test49004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49004");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType5 = putObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity6 = putObservedProperty0.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation7.setPlannedFieldResult(plannedFieldResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction10 = null;
        observation9.LabInstruction = labInstruction10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setStatistics(observationStatistics12);
        java.time.OffsetDateTime offsetDateTime14 = observation13.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        observation13.Depth = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty19 = putObservedProperty0.setUpperLimit(quantity15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity15.getUnit();
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(analysisType5);
        org.junit.Assert.assertNull(quantity6);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(putObservedProperty19);
        org.junit.Assert.assertNull(unit20);
    }

    @Test
    public void test49005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49005");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = adcpDischargeActivity2.getDischargeCoefficientVariation();
        java.lang.Integer int4 = adcpDischargeActivity2.getNumberOfTransects();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity6 = adcpDischargeActivity2.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = doubleWithDisplay7.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str10 = doubleWithDisplay9.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = doubleWithDisplay9.setDisplay("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity13 = adcpDischargeActivity2.setMagneticVariation(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(adcpDischargeActivity6);
        org.junit.Assert.assertNotNull(doubleWithDisplay9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(doubleWithDisplay12);
        org.junit.Assert.assertNotNull(adcpDischargeActivity13);
    }

    @Test
    public void test49006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49006");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType1 = putUserV2_0.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_3 = putUserV2_0.setEmail("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = putUserV2_0.setUserProfile(userProfile4);
        java.lang.String str6 = putUserV2_5.getEmail();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.lang.String str8 = user7.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList10 = putUserV2_9.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_12 = putUserV2_9.setUserType(userType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user13 = user7.setUserType(userType11);
        java.lang.String str14 = user13.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str16 = postUser15.Id;
        postUser15.Email = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType19 = postUser15.getUserType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str21 = postUser20.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser23 = postUser20.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType25 = putUserV2_24.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        dischargeSummary28.MeasurementTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse27.setNextToken(instant32);
        java.time.Instant instant36 = locationDescriptionListServiceResponse27.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities37 = getActivities26.setToStartTime(instant36);
        java.lang.String str38 = getActivities37.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList40 = getObservationsV2_39.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        getObservationsV2_41.SpecimenIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray51 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = putLocationTags47.setTagUniqueIds(strList52);
        getObservationsV2_41.QualityControlTypes = strList52;
        getObservationsV2_39.ResultGrades = strList52;
        getActivities37.Media = strList52;
        putUserV2_24.AccessGroups = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_60 = putUserV2_24.setUserProfile(userProfile59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType61 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_62 = putUserV2_24.setUserType(userType61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser63 = postUser23.setUserType(userType61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType64 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser65 = postUser63.setUserType(userType64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser66 = postUser15.setUserType(userType64);
        user13.UserType = userType64;
        putUserV2_5.UserType = userType64;
        org.junit.Assert.assertNull(userType1);
        org.junit.Assert.assertNotNull(putUserV2_3);
        org.junit.Assert.assertNotNull(putUserV2_5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxInstant" + "'", str6, "MaxInstant");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertTrue("'" + userType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_12);
        org.junit.Assert.assertNotNull(user13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(userType19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(postUser23);
        org.junit.Assert.assertNull(userType25);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(getActivities37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(putLocationTags54);
        org.junit.Assert.assertNotNull(putUserV2_60);
        org.junit.Assert.assertTrue("'" + userType61 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType61.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_62);
        org.junit.Assert.assertNotNull(postUser63);
        org.junit.Assert.assertTrue("'" + userType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM + "'", userType64.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM));
        org.junit.Assert.assertNotNull(postUser65);
        org.junit.Assert.assertNotNull(postUser66);
    }

    @Test
    public void test49007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49007");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] metadataChangeTransactionArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList2, metadataChangeTransactionArray1);
        metadataChangeTransactionListServiceResponse0.MetadataChangeTransactions = metadataChangeTransactionList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] metadataChangeTransactionArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList7, metadataChangeTransactionArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse9 = metadataChangeTransactionListServiceResponse5.setMetadataChangeTransactions((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList7);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList10 = metadataChangeTransactionListServiceResponse5.MetadataChangeTransactions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse11 = metadataChangeTransactionListServiceResponse0.setMetadataChangeTransactions(metadataChangeTransactionList10);
        org.junit.Assert.assertNotNull(metadataChangeTransactionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(metadataChangeTransactionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceResponse9);
        org.junit.Assert.assertNotNull(metadataChangeTransactionList10);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceResponse11);
    }

    @Test
    public void test49008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49008");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        java.lang.Boolean boolean1 = tag0.AppliesToLocations;
        java.lang.Boolean boolean2 = tag0.AppliesToAttachments;
        java.lang.Boolean boolean3 = tag0.AppliesToLocationNotes;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test49009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49009");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportObservedPropertiesDryRun postImportObservedPropertiesDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportObservedPropertiesDryRun();
        java.lang.Object obj1 = postImportObservedPropertiesDryRun0.getResponseType();
        java.lang.Object obj2 = postImportObservedPropertiesDryRun0.getResponseType();
        java.lang.Object obj3 = postImportObservedPropertiesDryRun0.getResponseType();
        java.lang.Object obj4 = postImportObservedPropertiesDryRun0.getResponseType();
        java.lang.Object obj5 = postImportObservedPropertiesDryRun0.getResponseType();
        java.lang.Object obj6 = postImportObservedPropertiesDryRun0.getResponseType();
        java.lang.Object obj7 = postImportObservedPropertiesDryRun0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedPropertyImportSummary");
    }

    @Test
    public void test49010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49010");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str1 = referencePointPeriod0.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase3 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod0.Uncertainty = 10.0d;
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase7 = referencePointPeriod0.setValidFrom(instant6);
        java.lang.String str8 = referencePointPeriodBase7.StandardIdentifier;
        java.lang.Double double9 = referencePointPeriodBase7.Elevation;
        java.lang.String str10 = referencePointPeriodBase7.Comment;
        java.lang.String str11 = referencePointPeriodBase7.StandardIdentifier;
        referencePointPeriodBase7.IsMeasuredAgainstLocalAssumedDatum = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(referencePointPeriodBase3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(referencePointPeriodBase7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test49011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49011");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList9 = getObservationsV2_2.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType10 = null;
        getObservationsV2_2.FieldResultType = fieldResultType10;
        getObservationsV2_2.MaxNumericResultValue = 100.0d;
        java.lang.String str14 = getObservationsV2_2.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_2.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_2.setAnalysisMethodIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations24 = getExportSamplingLocations0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList20);
        java.lang.String str25 = getExportSamplingLocations0.Sort;
        getExportSamplingLocations0.Cursor = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.Integer int28 = getExportSamplingLocations0.Limit;
        java.util.List<java.lang.String> strList29 = getExportSamplingLocations0.SamplingLocationGroupIds;
        getExportSamplingLocations0.CustomId = "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSamplingLocations24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test49012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49012");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity6.setCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.time.OffsetDateTime offsetDateTime9 = postActivity8.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = postActivity8.SamplingLocation;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(samplingLocation10);
    }

    @Test
    public void test49013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49013");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setSpecimen(specimenNestedInActivity1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = observationMinimal2.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue5 = categoricalResult4.getFixedValue();
        observationMinimal2.CategoricalResult = categoricalResult4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = nullMeasureQualifier7.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult9 = categoricalResult4.setNullMeasureQualifier(nullMeasureQualifier7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier11 = nullMeasureQualifier7.setDescription("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier13 = nullMeasureQualifier7.setName("****b4959745-e712-43bc-98bb-4017f673cd3d****");
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(observedProperty3);
        org.junit.Assert.assertNull(categoricalValue5);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(categoricalResult9);
        org.junit.Assert.assertNotNull(nullMeasureQualifier11);
        org.junit.Assert.assertNotNull(nullMeasureQualifier13);
    }

    @Test
    public void test49014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49014");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        java.lang.String str3 = calibrationCheck0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = calibrationCheck0.Difference;
        java.lang.String str5 = calibrationCheck0.getParameter();
        java.lang.String str6 = calibrationCheck0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = calibrationCheck8.getDifference();
        calibrationCheck8.SerialNumber = "";
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(calibrationCheck8);
        org.junit.Assert.assertNull(doubleWithDisplay9);
    }

    @Test
    public void test49015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49015");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList3 = pointVelocityDischargeActivity0.Verticals;
        java.lang.String str4 = pointVelocityDischargeActivity0.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity6 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = pointVelocityDischargeActivity0.setSerialNumber("http://MaxDurationhttp/json/reply/Float");
        pointVelocityDischargeActivity0.MeterInspectedBefore = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(verticalList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity6);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity8);
    }

    @Test
    public void test49016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49016");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = putActivityTemplate0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation5 = putSamplingLocation3.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup7 = postObservedProperty6.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit9 = null;
        quantity8.Unit = unit9;
        postObservedProperty6.LowerLimit = quantity8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = postObservedProperty6.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit13 = quantity12.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation14 = putSamplingLocation5.setElevation(quantity12);
        putActivityTemplate0.Depth = quantity12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate17 = putActivityTemplate0.setType(activityTemplateType16);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList18 = putActivityTemplate17.SpecimenTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate20 = putActivityTemplate17.setId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType21 = putActivityTemplate17.Type;
        java.lang.Object obj22 = putActivityTemplate17.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = putActivityTemplate17.getAuditAttributes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(putSamplingLocation5);
        org.junit.Assert.assertNull(unitGroup7);
        org.junit.Assert.assertNotNull(quantity12);
        org.junit.Assert.assertNull(unit13);
        org.junit.Assert.assertNotNull(putSamplingLocation14);
        org.junit.Assert.assertTrue("'" + activityTemplateType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY + "'", activityTemplateType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(putActivityTemplate17);
        org.junit.Assert.assertNull(specimenTemplateList18);
        org.junit.Assert.assertNotNull(putActivityTemplate20);
        org.junit.Assert.assertTrue("'" + activityTemplateType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY + "'", activityTemplateType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertNull(auditAttributes23);
    }

    @Test
    public void test49017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49017");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        correction0.Comment = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.util.HashMap<java.lang.String, java.lang.Object> strMap3 = null;
        correction0.Parameters = strMap3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType5 = correction0.Type;
        java.lang.String str6 = correction0.getComment();
        org.junit.Assert.assertNull(correctionType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str6, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test49018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49018");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        java.lang.Double double27 = getGroupedObservationsV2_0.getDepthValue();
        java.lang.Double double28 = getGroupedObservationsV2_0.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        postRecurringReport30.NextGenerationDate = instant34;
        java.time.Instant instant37 = postRecurringReport30.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = statisticalDateTimeOffset29.setDateTimeOffset(instant37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_39 = getGroupedObservationsV2_0.setEndResultTime(instant37);
        java.util.List<java.lang.String> strList40 = getGroupedObservationsV2_39.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_42 = getGroupedObservationsV2_39.setImportHistoryEventId("zZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_44 = getGroupedObservationsV2_42.setCustomId("ZZZZZ");
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset38);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_42);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_44);
    }

    @Test
    public void test49019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49019");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList2 = getExportSpecimens1.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant4 = qualifier3.DateApplied;
        java.lang.String str5 = qualifier3.User;
        java.lang.String str6 = qualifier3.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj8 = timeAlignedDataServiceRequest7.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = timeAlignedDataServiceRequest7.setQueryFrom(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier13 = qualifier3.setDateApplied(instant10);
        getExportSpecimens1.Before = instant10;
        java.util.List<java.lang.String> strList15 = getExportSpecimens1.getLaboratoryIds();
        java.util.List<java.lang.String> strList16 = getExportSpecimens1.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType18 = samplingPlanPlannedActivityRecurrence17.RecurrenceFrequency;
        java.util.List<java.lang.String> strList19 = samplingPlanPlannedActivityRecurrence17.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier22 = putQualifier20.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest39 = timeAlignedDataServiceRequest23.setTimeSeriesUniqueIds(strList35);
        putQualifier20.GroupIdentifiers = strList35;
        java.util.ArrayList<java.lang.String> strList41 = putQualifier20.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence17.MonthsOfYear = strList41;
        getExportSpecimens1.ActivityTypes = strList41;
        qualifierResponse0.GroupIdentifiers = strList41;
        java.lang.Boolean boolean45 = qualifierResponse0.IsSystem;
        qualifierResponse0.IsSystem = false;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest12);
        org.junit.Assert.assertNotNull(qualifier13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(recurrenceFrequencyType18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(putQualifier22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest39);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNull(boolean45);
    }

    @Test
    public void test49020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49020");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.lang.String str1 = locationNote0.LastModifiedByUser;
        java.lang.String str2 = locationNote0.getLastModifiedByUser();
        locationNote0.TimeSeriesUniqueId = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test49021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49021");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList1 = filter0.ObservedProperties;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter3 = filter0.setEndTime(offsetDateTime2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = filter0.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter6 = filter0.setEndTime(offsetDateTime5);
        java.lang.String str7 = filter6.Id;
        org.junit.Assert.assertNull(observedPropertyList1);
        org.junit.Assert.assertNotNull(filter3);
        org.junit.Assert.assertNull(observedPropertyList4);
        org.junit.Assert.assertNotNull(filter6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test49022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49022");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        java.lang.String str84 = locationDataServiceResponse83.getUniqueId();
        java.lang.String str85 = locationDataServiceResponse83.Identifier;
        locationDataServiceResponse83.IsExternalLocation = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse89 = locationDataServiceResponse83.setLocationName("https");
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(locationDataServiceResponse89);
    }

    @Test
    public void test49023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49023");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty0.CasNumber = "MinDuration";
        java.lang.String str3 = observedProperty0.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = putObservedProperty4.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty7 = putObservedProperty4.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType8 = putObservedProperty4.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType9 = putObservedProperty4.getAnalysisType();
        putObservedProperty4.Description = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty13 = putObservedProperty4.setResultType(resultType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = observedProperty0.setResultType(resultType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty14.setDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = unit17.AuditAttributes;
        unit17.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity24 = samplingPlanPlannedActivity22.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = auditAttributes25.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity24.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = samplingPlanPlannedActivity24.AuditAttributes;
        putAccessGroup21.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = unit17.setAuditAttributes(auditAttributes29);
        java.lang.String str32 = unit31.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = unit31.setCustomId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty35 = observedProperty14.setDefaultUnit(unit34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = observedProperty35.setDescription("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty39 = observedProperty35.setCustomId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MinDuration" + "'", str3, "MinDuration");
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNotNull(putObservedProperty7);
        org.junit.Assert.assertNull(analysisType8);
        org.junit.Assert.assertNull(analysisType9);
        org.junit.Assert.assertTrue("'" + resultType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(putObservedProperty13);
        org.junit.Assert.assertNotNull(observedProperty14);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity24);
        org.junit.Assert.assertNotNull(auditAttributes27);
        org.junit.Assert.assertNotNull(auditAttributes29);
        org.junit.Assert.assertNotNull(unit31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(unit34);
        org.junit.Assert.assertNotNull(observedProperty35);
        org.junit.Assert.assertNotNull(observedProperty37);
        org.junit.Assert.assertNotNull(observedProperty39);
    }

    @Test
    public void test49024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49024");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.lang.Object obj2 = putFieldTrip0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip4 = putFieldTrip0.setNotes("MinDuration");
        putFieldTrip0.Participants = "0001-01-01T00:00:00.000Z";
        java.time.OffsetDateTime offsetDateTime7 = putFieldTrip0.EndTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList8 = putFieldTrip0.getAttachments();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldTrip");
        org.junit.Assert.assertNotNull(putFieldTrip4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(domainObjectAttachmentList8);
    }

    @Test
    public void test49025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49025");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str1 = levelSurveyMeasurement0.getReferencePointUniqueId();
        levelSurveyMeasurement0.ReferencePointUniqueId = "";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test49026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49026");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = putProject2.ScopeStatement;
        java.lang.String str4 = putProject2.Description;
        java.lang.String str5 = putProject2.getScopeStatement();
        java.time.OffsetDateTime offsetDateTime6 = null;
        putProject2.EndTime = offsetDateTime6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject9 = putProject2.setAuditAttributes(auditAttributes8);
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(putProject9);
    }

    @Test
    public void test49027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49027");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        getObservationExportIIV2_0.Limit = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_7 = getObservationExportIIV2_0.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        getObservationExportIIV2_7.Cursor = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.String str10 = getObservationExportIIV2_7.ActivityCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType12 = samplingPlanPlannedActivityRecurrence11.RecurrenceFrequency;
        java.util.List<java.lang.String> strList13 = samplingPlanPlannedActivityRecurrence11.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier16 = putQualifier14.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = timeAlignedDataServiceRequest17.setTimeSeriesUniqueIds(strList29);
        putQualifier14.GroupIdentifiers = strList29;
        java.util.ArrayList<java.lang.String> strList35 = putQualifier14.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence11.MonthsOfYear = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH;
        samplingPlanPlannedActivityRecurrence11.TemporalExpression = temporalExpressionType37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType dayOfWeekType39 = samplingPlanPlannedActivityRecurrence11.DayOfWeek;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType40 = samplingPlanPlannedActivityRecurrence11.TemporalExpression;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails43 = ruleValidationDetails41.setDescription("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails45 = ruleValidationDetails43.setDescription("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType dayOfWeekType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails47 = ruleValidationDetails43.setProperties((java.lang.Object) dayOfWeekType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence48 = samplingPlanPlannedActivityRecurrence11.setDayOfWeek(dayOfWeekType46);
        java.util.List<java.lang.String> strList49 = samplingPlanPlannedActivityRecurrence11.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_50 = getObservationExportIIV2_7.setAnalyticalGroupIds(strList49);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(recurrenceFrequencyType12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(putQualifier16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest33);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + temporalExpressionType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH + "'", temporalExpressionType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(dayOfWeekType39);
        org.junit.Assert.assertTrue("'" + temporalExpressionType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH + "'", temporalExpressionType40.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(ruleValidationDetails43);
        org.junit.Assert.assertNotNull(ruleValidationDetails45);
        org.junit.Assert.assertTrue("'" + dayOfWeekType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY + "'", dayOfWeekType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY));
        org.junit.Assert.assertNotNull(ruleValidationDetails47);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_50);
    }

    @Test
    public void test49028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49028");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType2 = mediaType0.setWildcardType((java.lang.Boolean) true);
        java.lang.String str3 = mediaType0.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str5 = labResultDetails4.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails4.setLaboratory(laboratory6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        java.lang.String str11 = laboratory8.PhoneNumber;
        laboratory8.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str14 = laboratory8.PointOfContact;
        laboratory8.Name = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails4.setLaboratory(laboratory8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType18 = mediaType0.setParameters((java.lang.Object) laboratory8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType20 = mediaType0.setSubtype("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str21 = mediaType20.getType();
        org.junit.Assert.assertNotNull(mediaType2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(mediaType18);
        org.junit.Assert.assertNotNull(mediaType20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test49029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49029");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR;
        importProcessorTransactionStatusResponse0.ImportProcessorTransactionStatus = importProcessorTransactionStatusType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse4 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType3);
        java.lang.String str5 = importProcessorTransactionStatusResponse0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse7 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType8 = importProcessorTransactionStatusResponse0.ImportProcessorTransactionStatus;
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS + "'", importProcessorTransactionStatusType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED + "'", importProcessorTransactionStatusType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse7);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED + "'", importProcessorTransactionStatusType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED));
    }

    @Test
    public void test49030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49030");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyHistory getObservedPropertyHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyHistory();
        java.lang.Object obj1 = getObservedPropertyHistory0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyHistory getObservedPropertyHistory3 = getObservedPropertyHistory0.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str4 = getObservedPropertyHistory3.getId();
        java.lang.String str5 = getObservedPropertyHistory3.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getObservedPropertyHistory3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****" + "'", str4, "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****" + "'", str5, "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
    }

    @Test
    public void test49031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49031");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        java.lang.Boolean boolean1 = timeSeriesDataRawServiceRequest0.ApplyRounding;
        timeSeriesDataRawServiceRequest0.ApplyRounding = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest5 = timeSeriesDataRawServiceRequest0.setApplyRounding((java.lang.Boolean) false);
        java.lang.String str6 = timeSeriesDataRawServiceRequest0.getUnit();
        timeSeriesDataRawServiceRequest0.UtcOffset = 10.0d;
        java.lang.String str9 = timeSeriesDataRawServiceRequest0.GetParts;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test49032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49032");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup();
        java.lang.Integer int1 = locationObservationsGroup0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str3 = samplingLocation2.Description;
        java.lang.String str4 = samplingLocation2.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList26, extendedAttributeArray25);
        postActivity24.ExtendedAttributes = extendedAttributeList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation29 = samplingLocation22.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation30 = samplingLocation2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList26);
        locationObservationsGroup0.SamplingLocation = samplingLocation2;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList32 = locationObservationsGroup0.Observations;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNotNull(extendedAttributeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(samplingLocation29);
        org.junit.Assert.assertNotNull(samplingLocation30);
        org.junit.Assert.assertNull(observationList32);
    }

    @Test
    public void test49033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49033");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setApproval(fieldVisitApproval3);
        fieldVisitReading4.GradeCode = 0;
        fieldVisitReading4.SerialNumber = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading4.setModel("****b4959745-e712-43bc-98bb-4017f673cd3d****");
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
    }

    @Test
    public void test49034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49034");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute();
        java.lang.Double double1 = extendedAttribute0.Number;
        java.lang.String str2 = extendedAttribute0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem3 = extendedAttribute0.DropDownListItem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute5 = extendedAttribute0.setText("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute7 = extendedAttribute5.setText("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str10 = extendedAttributeListItem9.Id;
        extendedAttribute8.DropDownListItem = extendedAttributeListItem9;
        extendedAttribute8.Number = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem14 = extendedAttribute8.DropDownListItem;
        extendedAttributeListItem14.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute17 = extendedAttribute5.setDropDownListItem(extendedAttributeListItem14);
        extendedAttributeListItem14.CustomId = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(extendedAttributeListItem3);
        org.junit.Assert.assertNotNull(extendedAttribute5);
        org.junit.Assert.assertNotNull(extendedAttribute7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(extendedAttributeListItem14);
        org.junit.Assert.assertNotNull(extendedAttribute17);
    }

    @Test
    public void test49035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49035");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str10 = pointVelocityDischargeActivity9.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity9.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = pointVelocityDischargeActivity12.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary16.DifferenceDuringVisit = doubleWithDisplay17;
        java.lang.String str19 = doubleWithDisplay17.getDisplay();
        pointVelocityDischargeActivity12.MeanObservationDurationInSeconds = doubleWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement21 = groundWaterMeasurement8.setHold(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str23 = volumetricDischargeReading22.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = dischargeSummary24.getMeanGageHeight();
        java.lang.String str26 = dischargeSummary24.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay29.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary24.DurationInHours = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading33 = volumetricDischargeReading22.setDischarge(doubleWithDisplay31);
        groundWaterMeasurement21.TapeCorrection = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis35 = trendLineAnalysis0.setSlopeStandardError(doubleWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset37 = timeSeriesPoint36.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant39 = statisticalDateTimeOffset38.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint40 = timeSeriesPoint36.setTimestamp(statisticalDateTimeOffset38);
        trendLineAnalysis0.StartPoint = timeSeriesPoint36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck42.setStandardDetails(standardDetails43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = standardDetails43.getTemperature();
        standardDetails43.LotNumber = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = pointVelocityDischargeActivity48.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList50 = pointVelocityDischargeActivity48.Verticals;
        java.lang.String str51 = pointVelocityDischargeActivity48.SerialNumber;
        java.lang.Boolean boolean52 = pointVelocityDischargeActivity48.isMeterInspectedAfter();
        pointVelocityDischargeActivity48.MeterInspectedBefore = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = null;
        pointVelocityDischargeActivity48.Width = quantityWithDisplay55;
        pointVelocityDischargeActivity48.MeterInspectedBefore = true;
        java.lang.String str59 = pointVelocityDischargeActivity48.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = null;
        adcpDischargeActivity60.TransducerDepth = quantityWithDisplay61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary63.Reviewer = "";
        java.time.Instant instant66 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary63.MeasurementTime = instant66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType68 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary63.BaseFlow = baseFlowType68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary63.DischargeUncertainty = dischargeUncertainty70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay73 = dischargeSummary72.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay74 = dischargeSummary72.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay75 = dischargeSummary72.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay78 = doubleWithDisplay76.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary79 = dischargeSummary72.setDurationInHours(doubleWithDisplay76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty80 = dischargeUncertainty70.setQuantitativeUncertainty(doubleWithDisplay76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity81 = adcpDischargeActivity60.setTopEstimateExponent(doubleWithDisplay76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity83 = adcpDischargeActivity60.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay84 = adcpDischargeActivity60.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str86 = datumConvertedQuantityWithDisplay85.TargetDatum;
        adcpDischargeActivity60.Area = datumConvertedQuantityWithDisplay85;
        pointVelocityDischargeActivity48.DistanceToMeter = datumConvertedQuantityWithDisplay85;
        datumConvertedQuantityWithDisplay85.Unit = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        standardDetails43.Temperature = datumConvertedQuantityWithDisplay85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint92 = timeSeriesPoint36.setValue((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay85);
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(groundWaterMeasurement21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(volumetricDischargeReading33);
        org.junit.Assert.assertNotNull(trendLineAnalysis35);
        org.junit.Assert.assertNull(statisticalDateTimeOffset37);
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertNotNull(timeSeriesPoint40);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNull(quantityWithDisplay49);
        org.junit.Assert.assertNull(verticalList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + baseFlowType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType68.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay73);
        org.junit.Assert.assertNull(quantityWithDisplay74);
        org.junit.Assert.assertNull(doubleWithDisplay75);
        org.junit.Assert.assertNotNull(doubleWithDisplay78);
        org.junit.Assert.assertNotNull(dischargeSummary79);
        org.junit.Assert.assertNotNull(dischargeUncertainty80);
        org.junit.Assert.assertNotNull(adcpDischargeActivity81);
        org.junit.Assert.assertNotNull(adcpDischargeActivity83);
        org.junit.Assert.assertNull(doubleWithDisplay84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(timeSeriesPoint92);
    }

    @Test
    public void test49036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49036");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4, observedPropertyArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod2.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod8 = postLabAnalysisMethod2.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = postLabAnalysisMethod8.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList10 = postLabAnalysisMethod8.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = postLabAnalysisMethod8.getAuditAttributes();
        java.lang.String str12 = postLabAnalysisMethod8.getContext();
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observedPropertyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod8);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNotNull(observedPropertyList10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test49037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49037");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        java.lang.String str3 = postDatumConvertedTimeSeries0.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList5 = postCalculatedDerivedTimeSeries4.TimeSeriesUniqueIds;
        java.lang.String str6 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation7.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList11, extendedAttributeValueArray10);
        postLocation7.ExtendedAttributeValues = extendedAttributeValueList11;
        postCalculatedDerivedTimeSeries4.ExtendedAttributeValues = extendedAttributeValueList11;
        java.lang.String str15 = postCalculatedDerivedTimeSeries4.ComputationPeriodIdentifier;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList16 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        postDatumConvertedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries19 = postDatumConvertedTimeSeries0.setPublish((java.lang.Boolean) false);
        java.lang.Boolean boolean20 = postDatumConvertedTimeSeries0.Publish;
        java.lang.Boolean boolean21 = postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries23 = postDatumConvertedTimeSeries0.setLabel("https");
        postDatumConvertedTimeSeries23.ComputationIdentifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries27 = postDatumConvertedTimeSeries23.setSubLocationIdentifier("2021.8.9990");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(extendedAttributeValueList16);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries23);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries27);
    }

    @Test
    public void test49038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49038");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList3 = fieldVisit0.Attachments;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList4 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult7 = datumConversionResult5.setTargetDatum("http");
        java.lang.String str8 = datumConversionResult5.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult10 = datumConversionResult5.setTargetDatum("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit11 = fieldVisit0.setDatumConversionResult(datumConversionResult10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType13 = calibrationCheck12.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = calibrationCheck12.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = dischargeSummary16.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        dischargeSummary16.MeasurementTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse15.setNextToken(instant20);
        java.time.Instant instant24 = locationDescriptionListServiceResponse15.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck25 = calibrationCheck12.setTime(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary27.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary29.DifferenceDuringVisit = doubleWithDisplay30;
        reading26.Value = doubleWithDisplay30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck33 = calibrationCheck25.setValue(doubleWithDisplay30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant35 = ratingCurveListServiceRequest34.QueryTo;
        java.lang.String str36 = ratingCurveListServiceRequest34.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = dischargeSummary38.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        dischargeSummary38.MeasurementTime = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse37.setNextToken(instant42);
        java.time.Instant instant46 = locationDescriptionListServiceResponse37.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType49 = null;
        controlConditionActivity48.ControlCleaned = controlCleanedType49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant52 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = locationDescriptionListServiceResponse51.setNextToken(instant52);
        controlConditionActivity48.DateCleaned = instant52;
        timeAlignedDataServiceRequest47.QueryFrom = instant52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse37.setNextToken(instant52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest57 = ratingCurveListServiceRequest34.setQueryTo(instant52);
        java.time.Instant instant58 = ratingCurveListServiceRequest57.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck59 = calibrationCheck33.setTime(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription60 = fieldVisit0.setLastMatchedTime(instant58);
        fieldVisitDescription60.Party = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(attachmentList3);
        org.junit.Assert.assertNull(attachmentList4);
        org.junit.Assert.assertNotNull(datumConversionResult7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
        org.junit.Assert.assertNotNull(datumConversionResult10);
        org.junit.Assert.assertNotNull(fieldVisit11);
        org.junit.Assert.assertNull(calibrationCheckType13);
        org.junit.Assert.assertNull(doubleWithDisplay14);
        org.junit.Assert.assertNotNull(dischargeSummary18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(calibrationCheck25);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(calibrationCheck33);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(dischargeSummary40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(calibrationCheck59);
        org.junit.Assert.assertNotNull(fieldVisitDescription60);
    }

    @Test
    public void test49039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49039");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        putSpecimen0.Name = "-PT87591240H";
        java.lang.Boolean boolean3 = putSpecimen0.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen7 = putSpecimen5.setNumberOfRequestedObservations((java.lang.Integer) 0);
        java.lang.String str8 = putSpecimen5.Description;
        putSpecimen5.Description = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNotNull(putSpecimen7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test49040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49040");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod2 = postCollectionMethod0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod4 = postCollectionMethod0.setCustomId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod6 = postCollectionMethod0.setIdentifierOrganization("-PT87591240H");
        java.lang.String str7 = postCollectionMethod6.getName();
        org.junit.Assert.assertNotNull(postCollectionMethod2);
        org.junit.Assert.assertNotNull(postCollectionMethod4);
        org.junit.Assert.assertNotNull(postCollectionMethod6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test49041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49041");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        java.time.OffsetDateTime offsetDateTime3 = null;
        postProject0.StartTime = offsetDateTime3;
        java.time.OffsetDateTime offsetDateTime5 = postProject0.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject7 = postProject0.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan8.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan8.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = samplingPlan8.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan15 = samplingPlan8.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject16 = postProject7.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = postProject16.getAuditAttributes();
        java.lang.String str18 = postProject16.Description;
        java.time.OffsetDateTime offsetDateTime19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject20 = postProject16.setStartTime(offsetDateTime19);
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(postProject7);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNotNull(samplingPlan15);
        org.junit.Assert.assertNotNull(postProject16);
        org.junit.Assert.assertNotNull(auditAttributes17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postProject20);
    }

    @Test
    public void test49042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49042");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.time.Instant instant1 = getExportObservations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = getExportObservations0.setDepthUnitCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = getExportObservations3.setDepthUnitCustomId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.Double double6 = getExportObservations5.MinNumericResultValue;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(getExportObservations3);
        org.junit.Assert.assertNotNull(getExportObservations5);
        org.junit.Assert.assertNull(double6);
    }

    @Test
    public void test49043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49043");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteFieldDataPlugin deleteFieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteFieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteFieldDataPlugin deleteFieldDataPlugin2 = deleteFieldDataPlugin0.setUniqueId("2021.4.62.0");
        deleteFieldDataPlugin0.UniqueId = "";
        deleteFieldDataPlugin0.UniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNotNull(deleteFieldDataPlugin2);
    }

    @Test
    public void test49044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49044");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation6 = putSamplingLocation0.setVerticalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation8 = putSamplingLocation6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation10 = putSamplingLocation6.setHorizontalDatum("2021.4.62.0");
        putSamplingLocation6.Name = "hi!";
        java.lang.String str13 = putSamplingLocation6.Id;
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putSamplingLocation6);
        org.junit.Assert.assertNotNull(putSamplingLocation8);
        org.junit.Assert.assertNotNull(putSamplingLocation10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test49045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49045");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setDescription("POST");
        java.lang.Object obj6 = postTag3.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingContextTag");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingContextTag");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingContextTag");
    }

    @Test
    public void test49046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49046");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList5 = postObservationV2_2.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList7 = fieldVisit6.Attachments;
        java.time.OffsetDateTime offsetDateTime8 = null;
        fieldVisit6.EndTime = offsetDateTime8;
        java.lang.String str10 = fieldVisit6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit12 = fieldVisit6.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple13 = fieldVisit6.Project;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList14 = fieldVisit6.getAttachments();
        java.lang.String str15 = fieldVisit6.Notes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_16 = postObservationV2_2.setFieldVisit(fieldVisit6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity17 = postObservationV2_16.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList19 = fieldVisit18.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType20 = fieldVisit18.PlanningStatus;
        java.time.OffsetDateTime offsetDateTime21 = fieldVisit18.StartTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList22 = fieldVisit18.Attachments;
        postObservationV2_16.FieldVisit = fieldVisit18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType24 = fieldVisit18.PlanningStatus;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(importHistoryEventSimpleList5);
        org.junit.Assert.assertNull(domainObjectAttachmentList7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(fieldVisit12);
        org.junit.Assert.assertNull(projectSimple13);
        org.junit.Assert.assertNull(domainObjectAttachmentList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str15, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postObservationV2_16);
        org.junit.Assert.assertNull(activity17);
        org.junit.Assert.assertNull(domainObjectAttachmentList19);
        org.junit.Assert.assertNull(planningStatusType20);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNull(domainObjectAttachmentList22);
        org.junit.Assert.assertNull(planningStatusType24);
    }

    @Test
    public void test49047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49047");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceRequest ratingModelDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceRequest();
        java.lang.Object obj1 = ratingModelDescriptionListServiceRequest0.getResponseType();
        java.lang.String str2 = ratingModelDescriptionListServiceRequest0.LocationIdentifier;
        java.time.Instant instant3 = ratingModelDescriptionListServiceRequest0.getChangesSinceToken();
        java.time.Instant instant4 = ratingModelDescriptionListServiceRequest0.ChangesSinceToken;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceRequest ratingModelDescriptionListServiceRequest6 = ratingModelDescriptionListServiceRequest0.setOutputParameter("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str7 = ratingModelDescriptionListServiceRequest6.getInputParameter();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelDescriptionListServiceResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceRequest6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test49048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49048");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory getSamplinglocationgrouptypeHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory();
        java.lang.Object obj1 = getSamplinglocationgrouptypeHistory0.getResponseType();
        java.lang.String str2 = getSamplinglocationgrouptypeHistory0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplinglocationgrouptypeHistory getSamplinglocationgrouptypeHistory4 = getSamplinglocationgrouptypeHistory0.setId("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        java.lang.String str5 = getSamplinglocationgrouptypeHistory4.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getSamplinglocationgrouptypeHistory4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****" + "'", str5, "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
    }

    @Test
    public void test49049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49049");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceResponse trendLineAnalysisServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis1 = trendLineAnalysisServiceResponse0.TrendLineAnalysis;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis2 = trendLineAnalysisServiceResponse0.TrendLineAnalysis;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = trendLineAnalysis3.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset6 = timeSeriesPoint5.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant8 = statisticalDateTimeOffset7.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint9 = timeSeriesPoint5.setTimestamp(statisticalDateTimeOffset7);
        trendLineAnalysis3.StartPoint = timeSeriesPoint5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str13 = pointVelocityDischargeActivity12.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity15 = pointVelocityDischargeActivity12.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = pointVelocityDischargeActivity15.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary17.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary19.DifferenceDuringVisit = doubleWithDisplay20;
        java.lang.String str22 = doubleWithDisplay20.getDisplay();
        pointVelocityDischargeActivity15.MeanObservationDurationInSeconds = doubleWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement24 = groundWaterMeasurement11.setHold(doubleWithDisplay20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str26 = volumetricDischargeReading25.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay28 = dischargeSummary27.getMeanGageHeight();
        java.lang.String str29 = dischargeSummary27.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary27.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = doubleWithDisplay32.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary27.DurationInHours = doubleWithDisplay34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading36 = volumetricDischargeReading25.setDischarge(doubleWithDisplay34);
        groundWaterMeasurement24.TapeCorrection = doubleWithDisplay34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis38 = trendLineAnalysis3.setSlopeStandardError(doubleWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity41 = pointVelocityDischargeActivity39.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity39.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity39.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity47 = pointVelocityDischargeActivity45.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = null;
        crossSectionPoint48.Distance = quantityWithDisplay49;
        crossSectionPoint48.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay53 = crossSectionPoint48.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint55 = crossSectionPoint48.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint57 = crossSectionPoint55.setElevation(quantityWithDisplay56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = null;
        crossSectionPoint57.Depth = quantityWithDisplay58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint57.Depth = datumConvertedQuantityWithDisplay60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay62 = crossSectionPoint57.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity63 = pointVelocityDischargeActivity45.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis64 = trendLineAnalysis3.setSlopeStandardError((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay62);
        trendLineAnalysisServiceResponse0.TrendLineAnalysis = trendLineAnalysis64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay66 = trendLineAnalysis64.getActualPercentageChange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset68 = timeSeriesPoint67.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay70 = reading69.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading72 = reading69.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading74 = reading72.setModel("MaxInstant");
        reading74.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant77 = reading74.Time;
        java.lang.String str78 = reading74.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading74.Value = doubleWithDisplay79;
        timeSeriesPoint67.Value = doubleWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary84 = dischargeSummary82.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary84.DifferenceDuringVisit = doubleWithDisplay85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay88 = doubleWithDisplay85.setNumeric((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint89 = timeSeriesPoint67.setValue(doubleWithDisplay88);
        trendLineAnalysis64.StartPoint = timeSeriesPoint67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay91 = trendLineAnalysis64.Intercept;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType92 = trendLineAnalysis64.Type;
        org.junit.Assert.assertNull(trendLineAnalysis1);
        org.junit.Assert.assertNull(trendLineAnalysis2);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNull(statisticalDateTimeOffset6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(timeSeriesPoint9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity15);
        org.junit.Assert.assertNull(quantityWithDisplay16);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(groundWaterMeasurement24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(quantityWithDisplay28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNotNull(doubleWithDisplay34);
        org.junit.Assert.assertNotNull(volumetricDischargeReading36);
        org.junit.Assert.assertNotNull(trendLineAnalysis38);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity41);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity47);
        org.junit.Assert.assertNull(quantityWithDisplay53);
        org.junit.Assert.assertNotNull(crossSectionPoint55);
        org.junit.Assert.assertNotNull(crossSectionPoint57);
        org.junit.Assert.assertNotNull(quantityWithDisplay62);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity63);
        org.junit.Assert.assertNotNull(trendLineAnalysis64);
        org.junit.Assert.assertNull(doubleWithDisplay66);
        org.junit.Assert.assertNull(statisticalDateTimeOffset68);
        org.junit.Assert.assertNull(doubleWithDisplay70);
        org.junit.Assert.assertNotNull(reading72);
        org.junit.Assert.assertNotNull(reading74);
        org.junit.Assert.assertNull(instant77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(dischargeSummary84);
        org.junit.Assert.assertNotNull(doubleWithDisplay88);
        org.junit.Assert.assertNotNull(timeSeriesPoint89);
        org.junit.Assert.assertNull(doubleWithDisplay91);
        org.junit.Assert.assertNull(trendLineAnalysisType92);
    }

    @Test
    public void test49050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49050");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest0.Value = "'.'SSSSSSS";
        java.lang.String str3 = applyTagRequest0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest5 = applyTagRequest0.setUniqueId("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "'.'SSSSSSS" + "'", str3, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(applyTagRequest5);
    }

    @Test
    public void test49051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49051");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.DiscreteMeasurementActivity;
        java.lang.String str2 = fieldVisitDataServiceRequest0.FieldVisitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest4 = fieldVisitDataServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) false);
        fieldVisitDataServiceRequest0.FieldVisitIdentifier = "/AQUARIUS/Provisioning/v1";
        java.lang.Boolean boolean7 = fieldVisitDataServiceRequest0.IncludeVerticals;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest4);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test49052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49052");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit postUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase2 = postUnit0.setSymbol("9999-12-31T23:59:59.999Z");
        java.lang.String str3 = postUnit0.SingularName;
        postUnit0.UnitIdentifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase7 = postUnit0.setBaseMultiplier((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase9 = postUnit0.setBaseOffset((java.lang.Double) 100.0d);
        unitBase9.BaseOffset = 10.0d;
        org.junit.Assert.assertNotNull(unitBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(unitBase7);
        org.junit.Assert.assertNotNull(unitBase9);
    }

    @Test
    public void test49053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49053");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.Integer int39 = deleteActivities0.Limit;
        java.util.List<java.lang.String> strList40 = deleteActivities0.getMedia();
        java.lang.String str41 = deleteActivities0.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities43 = deleteActivities0.setSort("multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****");
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(deleteActivities43);
    }

    @Test
    public void test49054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49054");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList3 = getExportSpecimens2.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant5 = qualifier4.DateApplied;
        java.lang.String str6 = qualifier4.User;
        java.lang.String str7 = qualifier4.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = qualifier4.setDateApplied(instant11);
        getExportSpecimens2.Before = instant11;
        java.util.List<java.lang.String> strList16 = getExportSpecimens2.getLaboratoryIds();
        java.util.List<java.lang.String> strList17 = getExportSpecimens2.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType19 = samplingPlanPlannedActivityRecurrence18.RecurrenceFrequency;
        java.util.List<java.lang.String> strList20 = samplingPlanPlannedActivityRecurrence18.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier23 = putQualifier21.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        getObservationsV2_25.SpecimenIds = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray35 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags31.setTagUniqueIds(strList36);
        getObservationsV2_25.QualityControlTypes = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest40 = timeAlignedDataServiceRequest24.setTimeSeriesUniqueIds(strList36);
        putQualifier21.GroupIdentifiers = strList36;
        java.util.ArrayList<java.lang.String> strList42 = putQualifier21.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence18.MonthsOfYear = strList42;
        getExportSpecimens2.ActivityTypes = strList42;
        qualifierResponse1.GroupIdentifiers = strList42;
        getActivities0.CollectionMethodIds = strList42;
        java.util.List<java.lang.String> strList47 = getActivities0.Media;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(qualifier14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(recurrenceFrequencyType19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(putQualifier23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest40);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(strList47);
    }

    @Test
    public void test49055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49055");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        java.lang.Boolean boolean1 = timeSeriesUniqueIds0.IsDeleted;
        timeSeriesUniqueIds0.HasAttributeChange = true;
        java.time.Instant instant4 = timeSeriesUniqueIds0.getLastMatchedTime();
        java.time.Instant instant5 = timeSeriesUniqueIds0.getLastMatchedTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory7 = attachment6.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment9 = attachment6.setFileName("");
        java.lang.String str10 = attachment6.Url;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability();
        java.lang.String str12 = periodOfApplicability11.Remarks;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability14 = periodOfApplicability11.setRemarks("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList16 = ratingModelDescriptionListServiceResponse15.RatingModelDescriptions;
        java.time.Instant instant17 = ratingModelDescriptionListServiceResponse15.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType19 = calibrationCheck18.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = calibrationCheck18.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = dischargeSummary22.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse25.setNextToken(instant26);
        dischargeSummary22.MeasurementTime = instant26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse21.setNextToken(instant26);
        java.time.Instant instant30 = locationDescriptionListServiceResponse21.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = calibrationCheck18.setTime(instant30);
        java.time.Instant instant32 = calibrationCheck31.Time;
        ratingModelDescriptionListServiceResponse15.NextToken = instant32;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList34 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse35 = ratingModelDescriptionListServiceResponse15.setRatingModelDescriptions(ratingModelDescriptionList34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription38 = locationDescription36.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType40 = null;
        controlConditionActivity39.ControlCleaned = controlCleanedType40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        controlConditionActivity39.DateCleaned = instant43;
        locationDescription38.LastModified = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse47 = ratingModelDescriptionListServiceResponse15.setNextToken(instant43);
        java.time.Instant instant48 = ratingModelDescriptionListServiceResponse15.NextToken;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability49 = periodOfApplicability11.setStartTime(instant48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment50 = attachment6.setDateCreated(instant48);
        timeSeriesUniqueIds0.LastMatchedTime = instant48;
        java.time.Instant instant52 = timeSeriesUniqueIds0.getFirstPointChanged();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(attachmentCategory7);
        org.junit.Assert.assertNotNull(attachment9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(periodOfApplicability14);
        org.junit.Assert.assertNull(ratingModelDescriptionList16);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNull(calibrationCheckType19);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertNotNull(dischargeSummary24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(calibrationCheck31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(locationDescription38);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(periodOfApplicability49);
        org.junit.Assert.assertNotNull(attachment50);
        org.junit.Assert.assertNull(instant52);
    }

    @Test
    public void test49056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49056");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.FieldVisitId;
        java.util.List<java.lang.String> strList3 = getExportSpecimens0.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList5 = getSpecimens4.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens7 = getSpecimens4.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str9 = getChartDataV2_8.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_11 = getChartDataV2_8.setFilterId("");
        java.util.List<java.lang.String> strList12 = getChartDataV2_8.ResultGrades;
        getChartDataV2_8.MinNumericResultValue = 100.0d;
        java.lang.Double double15 = getChartDataV2_8.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        postTag16.PickListValues = strList21;
        getChartDataV2_8.SamplingContextTagIds = strList21;
        getSpecimens4.ActivityTypes = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens27 = getExportSpecimens0.setActivityIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = reading28.getValue();
        reading28.ReferencePointUniqueId = "hi!";
        java.lang.String str32 = reading28.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary35.DifferenceDuringVisit = doubleWithDisplay36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = doubleWithDisplay36.setNumeric((java.lang.Double) 100.0d);
        reading28.Value = doubleWithDisplay39;
        java.lang.Boolean boolean41 = reading28.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading43 = reading28.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        getObservationsV2_50.DepthUnitCustomId = "hi!";
        java.lang.String str53 = getObservationsV2_50.CustomId;
        java.util.List<java.lang.String> strList54 = getObservationsV2_50.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_50.setMedia((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str72 = getObservationsV2_71.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        getObservationsV2_71.ProjectIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_50.setObservedPropertyIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading81 = reading28.setReadingQualifiers(strList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens82 = getExportSpecimens27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens84 = getExportSpecimens82.setLimit((java.lang.Integer) 2);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getSpecimens7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(getChartDataV2_11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSpecimens27);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(doubleWithDisplay39);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(reading43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(reading81);
        org.junit.Assert.assertNotNull(getExportSpecimens82);
        org.junit.Assert.assertNotNull(getExportSpecimens84);
    }

    @Test
    public void test49057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49057");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        getChartDataV2_0.MinNumericResultValue = 100.0d;
        java.lang.Double double7 = getChartDataV2_0.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        controlConditionActivity8.DateCleaned = instant12;
        getChartDataV2_0.EndObservedTime = instant12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_17 = getChartDataV2_0.setLimit((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_19 = getChartDataV2_17.setSort("0001-01-01T00:00:00.0000000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList21 = getObservationsV2_20.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.QualityControlTypes = strList33;
        getObservationsV2_20.ResultGrades = strList33;
        java.lang.Double double38 = getObservationsV2_20.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray43 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_40.setDataClassifications((java.util.List<java.lang.String>) strList44);
        postTag39.PickListValues = strList44;
        getObservationsV2_20.SpecimenIds = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_17.setSpecimenIds((java.util.List<java.lang.String>) strList44);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(getChartDataV2_17);
        org.junit.Assert.assertNotNull(getChartDataV2_19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNull(double38);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
    }

    @Test
    public void test49058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49058");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute();
        putExtendedAttribute0.Key = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        putExtendedAttribute0.UniqueId = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        putExtendedAttribute0.Required = false;
        java.lang.String str7 = putExtendedAttribute0.getUniqueId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str7, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
    }

    @Test
    public void test49059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49059");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setSummaryReportText("9999-12-31T23:59:59.9999999Z");
        java.lang.Integer int9 = taxonImportSummary8.ErrorCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList10 = taxonImportSummary8.NonErrorImportItems;
        java.lang.Integer int11 = taxonImportSummary8.SuccessCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary13 = taxonImportSummary8.setImportItems(importItemTaxonList12);
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(importItemTaxonList10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(taxonImportSummary13);
    }

    @Test
    public void test49060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49060");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.lang.String str2 = getChartDataV2_0.DepthUnitId;
        java.util.List<java.lang.String> strList3 = getChartDataV2_0.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_4.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        java.lang.String str11 = controlConditionActivity8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        controlConditionActivity8.DateCleaned = instant15;
        gageHeightReading7.ReadingTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str22 = doubleWithDisplay21.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading23 = gageHeightReading7.setGageHeight(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setMeanGageHeightMethod("hi!");
        java.lang.String str28 = dischargeSummary27.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary27.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType32 = calibrationCheck31.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = calibrationCheck31.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse34.setNextToken(instant39);
        java.time.Instant instant43 = locationDescriptionListServiceResponse34.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck31.setTime(instant43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary27.setMeasurementTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_24.setStartResultTime(instant43);
        gageHeightReading7.ReadingTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = getChartDataV2_4.setStartObservedTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_0.setEndResultTime(instant43);
        java.util.List<java.lang.String> strList50 = getChartDataV2_0.getSamplingLocationGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_52 = getChartDataV2_0.setSort("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(gageHeightReading23);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNull(calibrationCheckType32);
        org.junit.Assert.assertNull(doubleWithDisplay33);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_48);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(getChartDataV2_52);
    }

    @Test
    public void test49061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49061");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList5 = putSamplingLocation0.Standards;
        java.lang.String str6 = putSamplingLocation0.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone7 = putSamplingLocation0.TimeZone;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = putSamplingLocation0.ImportHistoryEventSimples;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList9 = putSamplingLocation0.Attachments;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList10 = putSamplingLocation0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone11 = putSamplingLocation0.TimeZone;
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(standardSimpleList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(timeZone7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNull(domainObjectAttachmentList9);
        org.junit.Assert.assertNull(extendedAttributeList10);
        org.junit.Assert.assertNull(timeZone11);
    }

    @Test
    public void test49062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49062");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType1 = putUserV2_0.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_3 = putUserV2_0.setEmail("MaxInstant");
        java.util.List<java.lang.String> strList4 = putUserV2_3.getAccessGroups();
        java.lang.String str5 = putUserV2_3.Email;
        org.junit.Assert.assertNull(userType1);
        org.junit.Assert.assertNotNull(putUserV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
    }

    @Test
    public void test49063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49063");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile1 = null;
        postReportPlugin0.File = iHttpFile1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin4 = postReportPlugin0.setFile(iHttpFile3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile5 = postReportPlugin0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin7 = postReportPlugin0.setFile(iHttpFile6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin9 = postReportPlugin7.setFolderName("hi!");
        java.lang.String str10 = postReportPlugin9.getFolderName();
        org.junit.Assert.assertNotNull(postReportPlugin4);
        org.junit.Assert.assertNull(iHttpFile5);
        org.junit.Assert.assertNotNull(postReportPlugin7);
        org.junit.Assert.assertNotNull(postReportPlugin9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test49064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49064");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray6 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = putLocationTags2.setTagUniqueIds(strList7);
        java.util.ArrayList<java.lang.String> strList10 = putLocationTags9.TagUniqueIds;
        getFieldVisits0.ScheduleIds = strList10;
        java.lang.Integer int12 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList13 = getFieldVisits0.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        getObservationsV2_14.SpecimenIds = strList17;
        getFieldVisits0.Search = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits22 = getFieldVisits0.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_23.setDataClassifications((java.util.List<java.lang.String>) strList27);
        java.util.List<java.lang.String> strList30 = getObservationsV2_23.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary31.Reviewer = "";
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary31.MeasurementTime = instant34;
        getObservationsV2_23.StartResultTime = instant34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType39 = null;
        controlConditionActivity38.ControlCleaned = controlCleanedType39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        controlConditionActivity38.DateCleaned = instant42;
        timeAlignedDataServiceRequest37.QueryFrom = instant42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.ActivityIds = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = timeAlignedDataServiceRequest37.setTimeSeriesOutputUnitIds(strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_23.setCollectionMethodIds((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits63 = getFieldVisits22.setScheduleIds((java.util.List<java.lang.String>) strList57);
        java.time.Instant instant64 = null;
        getFieldVisits22.EndStartTime = instant64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = dischargeSummary68.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant72 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse71.setNextToken(instant72);
        dischargeSummary68.MeasurementTime = instant72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse67.setNextToken(instant72);
        java.time.Instant instant76 = locationDescriptionListServiceResponse67.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities77 = getActivities66.setToStartTime(instant76);
        java.lang.String str78 = getActivities66.getFieldVisitId();
        java.lang.String str79 = getActivities66.CustomId;
        java.time.Instant instant80 = getActivities66.getToStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits81 = getFieldVisits22.setEndStartTime(instant80);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(putLocationTags9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(getFieldVisits22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest61);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNotNull(getFieldVisits63);
        org.junit.Assert.assertNotNull(dischargeSummary70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(getActivities77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(getFieldVisits81);
    }

    @Test
    public void test49065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49065");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin();
        putReportPlugin0.UniqueId = "hi!";
        java.lang.Boolean boolean3 = putReportPlugin0.getIsEnabled();
        java.lang.Boolean boolean4 = putReportPlugin0.IsEnabled;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin6 = putReportPlugin0.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin8 = putReportPlugin0.setIsEnabled((java.lang.Boolean) true);
        putReportPlugin0.IsEnabled = false;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(putReportPlugin6);
        org.junit.Assert.assertNotNull(putReportPlugin8);
    }

    @Test
    public void test49066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49066");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.lang.String str3 = getObservationExportIIV2_0.getSpecimenName();
        java.time.Instant instant4 = getObservationExportIIV2_0.StartResultTime;
        java.lang.String str5 = getObservationExportIIV2_0.ImportHistoryEventId;
        java.util.List<java.lang.String> strList6 = getObservationExportIIV2_0.getCollectionMethodIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test49067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49067");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        java.util.ArrayList<java.lang.Double> doubleList1 = ratingModelEffectiveShiftsByStageValuesServiceResponse0.EffectiveShiftValues;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str3 = getChartDataV2_2.getActivityCustomId();
        java.util.List<java.lang.String> strList4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_5 = getChartDataV2_2.setSearch(strList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        java.util.List<java.lang.String> strList13 = getObservationsV2_6.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        getObservationsV2_6.StartResultTime = instant17;
        java.lang.String[] strArray29 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_6.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription35 = locationDescription33.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType37 = null;
        controlConditionActivity36.ControlCleaned = controlCleanedType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = locationDescriptionListServiceResponse39.setNextToken(instant40);
        controlConditionActivity36.DateCleaned = instant40;
        locationDescription35.LastModified = instant40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_32.setStartResultTime(instant40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_45 = getChartDataV2_2.setEndObservedTime(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse46 = ratingModelEffectiveShiftsByStageValuesServiceResponse0.setTimestamp(instant40);
        java.time.Instant instant47 = ratingModelEffectiveShiftsByStageValuesServiceResponse46.getTimestamp();
        java.util.ArrayList<java.lang.Double> doubleList48 = ratingModelEffectiveShiftsByStageValuesServiceResponse46.EffectiveShiftValues;
        org.junit.Assert.assertNull(doubleList1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getChartDataV2_5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNotNull(locationDescription35);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse41);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNotNull(getChartDataV2_45);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNull(doubleList48);
    }

    @Test
    public void test49068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49068");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = getExportObservations0.setNumericResultValue((java.lang.Double) (-1.0d));
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double6 = getExportObservations5.NumericResultValue;
        java.util.List<java.lang.String> strList7 = getExportObservations5.getActivityTypes();
        java.util.List<java.lang.String> strList8 = getExportObservations5.ProjectIds;
        java.time.Instant instant9 = null;
        getExportObservations5.EndResultTime = instant9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        getObservationsV2_17.DepthUnitCustomId = "hi!";
        java.lang.String str20 = getObservationsV2_17.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.ActivityIds = strList32;
        getObservationsV2_17.ResultStatuses = strList32;
        getExportObservations5.ActivityTypes = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations38 = getExportObservations0.setQualityControlTypes((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations40 = getExportObservations0.setDepthUnitCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        getExportObservations0.SpecimenName = "hi!";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getExportObservations3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(getExportObservations38);
        org.junit.Assert.assertNotNull(getExportObservations40);
    }

    @Test
    public void test49069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49069");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = postSensor0.setUnitId("");
        java.lang.String str5 = sensorBase4.Name;
        java.lang.String str6 = sensorBase4.getLocationUniqueId();
        sensorBase4.UnitId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase10 = sensorBase4.setUnitId("'.'SSSSSSS");
        java.lang.String str11 = sensorBase4.SerialNumber;
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(sensorBase10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test49070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49070");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = reading22.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading25 = reading22.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading27 = reading25.setModel("MaxInstant");
        java.lang.Integer int28 = reading27.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary30.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary32.DifferenceDuringVisit = doubleWithDisplay33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = doubleWithDisplay33.setNumeric((java.lang.Double) 100.0d);
        gageHeightAtZeroFlowActivity29.ZeroFlowHeight = doubleWithDisplay36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading38 = reading27.setValue(doubleWithDisplay36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity39 = adcpDischargeActivity0.setDischargeCoefficientVariation(doubleWithDisplay36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay41 = null;
        crossSectionPoint40.Distance = quantityWithDisplay41;
        crossSectionPoint40.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = crossSectionPoint40.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint47 = crossSectionPoint40.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint49 = crossSectionPoint47.setElevation(quantityWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = null;
        crossSectionPoint49.Depth = quantityWithDisplay50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str53 = datumConvertedQuantityWithDisplay52.TargetDatum;
        crossSectionPoint49.Distance = datumConvertedQuantityWithDisplay52;
        java.lang.String str55 = crossSectionPoint49.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary56.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        dischargeSummary56.MeasurementTime = instant60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary63.Reviewer = "";
        java.time.Instant instant66 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary63.MeasurementTime = instant66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType68 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary63.BaseFlow = baseFlowType68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary63.DischargeUncertainty = dischargeUncertainty70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType72 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair;
        dischargeUncertainty70.QualitativeUncertainty = qualitativeUncertaintyType72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType74 = dischargeUncertainty70.ActiveUncertaintyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary75 = dischargeSummary56.setDischargeUncertainty(dischargeUncertainty70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay77 = null;
        crossSectionPoint76.Distance = quantityWithDisplay77;
        crossSectionPoint76.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay81 = crossSectionPoint76.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint83 = crossSectionPoint76.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay84 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint85 = crossSectionPoint83.setElevation(quantityWithDisplay84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay86 = null;
        crossSectionPoint85.Depth = quantityWithDisplay86;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay88 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint85.Depth = datumConvertedQuantityWithDisplay88;
        java.lang.String str90 = datumConvertedQuantityWithDisplay88.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary91 = dischargeSummary56.setMeanGageHeight((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay92 = dischargeSummary56.MeanGageHeight;
        crossSectionPoint49.Distance = quantityWithDisplay92;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity94 = adcpDischargeActivity0.setTopEstimateExponent((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay92);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity96 = adcpDischargeActivity0.setTopEstimateMethod("/AQUARIUS");
        java.lang.String str97 = adcpDischargeActivity0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay98 = adcpDischargeActivity0.BottomEstimateExponent;
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNull(doubleWithDisplay23);
        org.junit.Assert.assertNotNull(reading25);
        org.junit.Assert.assertNotNull(reading27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNotNull(doubleWithDisplay36);
        org.junit.Assert.assertNotNull(reading38);
        org.junit.Assert.assertNotNull(adcpDischargeActivity39);
        org.junit.Assert.assertNull(quantityWithDisplay45);
        org.junit.Assert.assertNotNull(crossSectionPoint47);
        org.junit.Assert.assertNotNull(crossSectionPoint49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + baseFlowType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType68.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType72 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair + "'", qualitativeUncertaintyType72.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair));
        org.junit.Assert.assertNull(uncertaintyType74);
        org.junit.Assert.assertNotNull(dischargeSummary75);
        org.junit.Assert.assertNull(quantityWithDisplay81);
        org.junit.Assert.assertNotNull(crossSectionPoint83);
        org.junit.Assert.assertNotNull(crossSectionPoint85);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(dischargeSummary91);
        org.junit.Assert.assertNotNull(quantityWithDisplay92);
        org.junit.Assert.assertNotNull(adcpDischargeActivity94);
        org.junit.Assert.assertNotNull(adcpDischargeActivity96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNull(doubleWithDisplay98);
    }

    @Test
    public void test49071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49071");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = pointVelocityDischargeActivity0.Width;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = pointVelocityDischargeActivity0.setModel("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str10 = pointVelocityDischargeActivity9.getVelocityObservationMethod();
        java.lang.Boolean boolean11 = pointVelocityDischargeActivity9.isMeterInspectedBefore();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = pointVelocityDischargeActivity9.getWidth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str14 = crossSectionSurveyActivity13.Channel;
        java.lang.String str15 = crossSectionSurveyActivity13.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity18 = adcpDischargeActivity16.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = adcpDischargeActivity18.getDischargeCoefficientVariation();
        adcpDischargeActivity18.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = dischargeSummary22.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = dischargeSummary22.Discharge;
        java.lang.Integer int25 = dischargeSummary22.getGradeCode();
        java.lang.String str26 = dischargeSummary22.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary22.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        adcpDischargeActivity18.Area = datumConvertedQuantityWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity30 = crossSectionSurveyActivity13.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        crossSectionSurveyActivity13.RelativeLocation = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        crossSectionSurveyActivity13.StartingPoint = startPointType33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity35 = pointVelocityDischargeActivity9.setStartPoint(startPointType33);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(quantityWithDisplay7);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(quantityWithDisplay12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(adcpDischargeActivity18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNull(quantityWithDisplay23);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity30);
        org.junit.Assert.assertTrue("'" + startPointType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity35);
    }

    @Test
    public void test49072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49072");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.getApprovalName8();
        timeAlignedPoint0.ApprovalLevel10 = 0L;
        java.lang.String str13 = timeAlignedPoint0.Method2;
        timeAlignedPoint0.GradeName3 = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.Double double16 = timeAlignedPoint0.NumericValue2;
        java.lang.String str17 = timeAlignedPoint0.getApprovalName10();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test49073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49073");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList9 = ratingCurve0.getOffsets();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str11 = ratingCurve10.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType13 = expandedRatingCurve12.Type;
        expandedRatingCurve12.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve17 = expandedRatingCurve12.setOutputParameter(parameterWithUnit16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve18 = ratingCurve10.setInputParameter(parameterWithUnit16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit19 = ratingCurve10.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve20 = ratingCurve0.setInputParameter(parameterWithUnit19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType22 = expandedRatingCurve21.Type;
        expandedRatingCurve21.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve26 = expandedRatingCurve21.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList27 = expandedRatingCurve26.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType28 = expandedRatingCurve26.Type;
        java.lang.Boolean boolean29 = expandedRatingCurve26.getIsBlended();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType.LinearRegressionModel;
        expandedRatingCurve26.Type = ratingCurveType30;
        ratingCurve20.Type = ratingCurveType30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str34 = ratingCurve33.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType36 = expandedRatingCurve35.Type;
        expandedRatingCurve35.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve40 = expandedRatingCurve35.setOutputParameter(parameterWithUnit39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve41 = ratingCurve33.setInputParameter(parameterWithUnit39);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList42 = ratingCurve33.getOffsets();
        ratingCurve33.Id = "https";
        java.lang.String str45 = ratingCurve33.Remarks;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve47 = ratingCurve33.setEquation("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit48 = ratingCurve47.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve49 = ratingCurve20.setInputParameter(parameterWithUnit48);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList50 = ratingCurve49.PeriodsOfApplicability;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(offsetPointList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(ratingCurveType13);
        org.junit.Assert.assertNotNull(expandedRatingCurve17);
        org.junit.Assert.assertNotNull(ratingCurve18);
        org.junit.Assert.assertNotNull(parameterWithUnit19);
        org.junit.Assert.assertNotNull(ratingCurve20);
        org.junit.Assert.assertNull(ratingCurveType22);
        org.junit.Assert.assertNotNull(expandedRatingCurve26);
        org.junit.Assert.assertNull(ratingShiftList27);
        org.junit.Assert.assertNull(ratingCurveType28);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + true + "'", boolean29, true);
        org.junit.Assert.assertTrue("'" + ratingCurveType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType.LinearRegressionModel + "'", ratingCurveType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType.LinearRegressionModel));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(ratingCurveType36);
        org.junit.Assert.assertNotNull(expandedRatingCurve40);
        org.junit.Assert.assertNotNull(ratingCurve41);
        org.junit.Assert.assertNull(offsetPointList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(ratingCurve47);
        org.junit.Assert.assertNotNull(parameterWithUnit48);
        org.junit.Assert.assertNotNull(ratingCurve49);
        org.junit.Assert.assertNull(periodOfApplicabilityList50);
    }

    @Test
    public void test49074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49074");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str1 = timeSeriesApprovalsTransactionListServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        controlConditionActivity2.DateCleaned = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest9 = timeSeriesApprovalsTransactionListServiceRequest0.setQueryTo(instant6);
        java.lang.String str10 = timeSeriesApprovalsTransactionListServiceRequest9.getTimeSeriesUniqueId();
        java.time.Instant instant11 = timeSeriesApprovalsTransactionListServiceRequest9.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest13 = timeSeriesApprovalsTransactionListServiceRequest9.setTimeSeriesUniqueId("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest13);
    }

    @Test
    public void test49075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49075");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod2 = importItemAnalysisMethod0.setInput("POST");
        java.lang.String str3 = importItemAnalysisMethod0.RowId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str5 = analysisMethod4.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = analysisMethod4.ImportHistoryEventSimples;
        java.lang.String str7 = analysisMethod4.Name;
        analysisMethod4.Description = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod10 = importItemAnalysisMethod0.setExistingItem(analysisMethod4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analysisMethod4.setDescription("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        org.junit.Assert.assertNotNull(importItemAnalysisMethod2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(importHistoryEventSimpleList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod10);
        org.junit.Assert.assertNotNull(analysisMethod12);
    }

    @Test
    public void test49076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49076");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums getStandardReferenceDatums0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums();
        getStandardReferenceDatums0.LocationUniqueId = "MinInstant";
        java.lang.Object obj3 = getStandardReferenceDatums0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums getStandardReferenceDatums5 = getStandardReferenceDatums0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums getStandardReferenceDatums7 = getStandardReferenceDatums0.setLocationUniqueId("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str8 = getStandardReferenceDatums7.getLocationUniqueId();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatumsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatumsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatumsResponse");
        org.junit.Assert.assertNotNull(getStandardReferenceDatums5);
        org.junit.Assert.assertNotNull(getStandardReferenceDatums7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str8, "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test49077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49077");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        java.lang.String str3 = putObservationV2_2.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setMediumSubdivision("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.time.OffsetDateTime offsetDateTime6 = putObservationV2_5.getObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str9 = metricConfiguration8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty10.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration13 = metricConfiguration8.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType14 = observedProperty10.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = postObservedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = null;
        quantity17.Unit = unit18;
        postObservedProperty15.LowerLimit = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = postObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = quantity21.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = observedProperty10.setUpperLimit(quantity21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation7.setElevation(quantity21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = samplingLocation24.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList28, plannedActivityArray27);
        putFieldVisit26.PlannedActivities = plannedActivityList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        java.lang.String str33 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment31.setAttachment(attachment34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        java.lang.String str38 = domainObjectAttachment36.getId();
        domainObjectAttachment36.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment36.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment43.setAttachment(attachment46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment31, domainObjectAttachment36, domainObjectAttachment43, domainObjectAttachment48, domainObjectAttachment50, domainObjectAttachment55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList58, domainObjectAttachmentArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = putFieldVisit26.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList58);
        samplingLocation24.Attachments = domainObjectAttachmentList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = samplingLocation24.setAddress(address62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone64 = null;
        samplingLocation63.TimeZone = timeZone64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity67 = putObservedProperty66.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty69 = putObservedProperty66.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType70 = putObservedProperty66.AnalysisType;
        putObservedProperty66.Name = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit74 = null;
        quantity73.Unit = unit74;
        java.lang.Double double76 = quantity73.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity78 = quantity73.setValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty79 = putObservedProperty66.setUpperLimit(quantity78);
        samplingLocation63.Elevation = quantity78;
        java.lang.String str81 = samplingLocation63.VerticalDatum;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_82 = putObservationV2_5.setSamplingLocation(samplingLocation63);
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(metricConfiguration13);
        org.junit.Assert.assertNull(resultType14);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNotNull(quantity21);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNotNull(observedProperty23);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNotNull(plannedActivityArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putFieldVisit60);
        org.junit.Assert.assertNotNull(samplingLocation63);
        org.junit.Assert.assertNull(quantity67);
        org.junit.Assert.assertNotNull(putObservedProperty69);
        org.junit.Assert.assertNull(analysisType70);
        org.junit.Assert.assertNull(double76);
        org.junit.Assert.assertNotNull(quantity78);
        org.junit.Assert.assertNotNull(putObservedProperty79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(putObservationV2_82);
    }

    @Test
    public void test49078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49078");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_5 = deleteObservationsV2_0.setFieldVisitId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.time.Instant instant7 = getExportObservations6.getStartModificationTime();
        getExportObservations6.FieldVisitId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setMeanGageHeightMethod("hi!");
        java.lang.String str14 = dischargeSummary13.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary13.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType18 = calibrationCheck17.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = calibrationCheck17.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck30 = calibrationCheck17.setTime(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary13.setMeasurementTime(instant29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_32 = getChartDataV2_10.setStartResultTime(instant29);
        java.time.Instant instant33 = getChartDataV2_32.StartObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS;
        getChartDataV2_32.FieldResultType = fieldResultType34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations36 = getExportObservations6.setFieldResultType(fieldResultType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_37 = deleteObservationsV2_0.setFieldResultType(fieldResultType34);
        java.util.List<java.lang.String> strList38 = deleteObservationsV2_0.DataClassifications;
        java.util.List<java.lang.String> strList39 = deleteObservationsV2_0.getCollectionMethodIds();
        java.lang.Integer int40 = deleteObservationsV2_0.Limit;
        deleteObservationsV2_0.NumericResultValue = 10.0d;
        java.util.List<java.lang.String> strList43 = deleteObservationsV2_0.ActivityTypes;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(deleteObservationsV2_5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNull(calibrationCheckType18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(calibrationCheck30);
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNotNull(getChartDataV2_32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertTrue("'" + fieldResultType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS + "'", fieldResultType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS));
        org.junit.Assert.assertNotNull(getExportObservations36);
        org.junit.Assert.assertNotNull(deleteObservationsV2_37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(strList43);
    }

    @Test
    public void test49079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49079");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem configurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem();
        java.lang.String str1 = configurableDropDownListItem0.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem configurableDropDownListItem3 = configurableDropDownListItem0.setDisplayOrder((java.lang.Integer) 100);
        configurableDropDownListItem0.DisplayOrder = 0;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem configurableDropDownListItem7 = configurableDropDownListItem0.setDisplayOrder((java.lang.Integer) 10);
        java.lang.String str8 = configurableDropDownListItem7.DisplayName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(configurableDropDownListItem3);
        org.junit.Assert.assertNotNull(configurableDropDownListItem7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test49080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49080");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory getUnitGroupWithUnitHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory();
        java.lang.Object obj1 = getUnitGroupWithUnitHistory0.getResponseType();
        java.lang.String str2 = getUnitGroupWithUnitHistory0.getId();
        java.lang.String str3 = getUnitGroupWithUnitHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory getUnitGroupWithUnitHistory5 = getUnitGroupWithUnitHistory0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str6 = getUnitGroupWithUnitHistory5.Id;
        java.lang.Object obj7 = getUnitGroupWithUnitHistory5.getResponseType();
        java.lang.Object obj8 = getUnitGroupWithUnitHistory5.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getUnitGroupWithUnitHistory5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test49081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49081");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        putFilter0.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str3 = putFilter0.getId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str3, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test49082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49082");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str1 = postCalculatedDerivedTimeSeries0.LocationUniqueId;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = postCalculatedDerivedTimeSeries0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean7 = roleFlattened6.CanRemoveFieldVisits;
        roleFlattened6.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str11 = putLocationType10.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = getObservationsV2_12.setDataClassifications((java.util.List<java.lang.String>) strList16);
        getObservationsV2_18.DepthUnitCustomId = "hi!";
        java.lang.String str21 = getObservationsV2_18.CustomId;
        java.util.List<java.lang.String> strList22 = getObservationsV2_18.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_18.setMedia((java.util.List<java.lang.String>) strList34);
        putLocationType10.ExtendedAttributeDefinitionIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase40 = roleFlattened6.setRoleApprovalTransitions(strList34);
        putBulkEditResultGradesV2_5.ResultGrades = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList43 = getObservationsV2_42.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        getObservationsV2_42.ResultGrades = strList55;
        java.lang.Double double60 = getObservationsV2_42.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str62 = deleteFieldVisits61.Sort;
        deleteFieldVisits61.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_65.setDataClassifications((java.util.List<java.lang.String>) strList69);
        java.util.List<java.lang.String> strList72 = getObservationsV2_65.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary73.Reviewer = "";
        java.time.Instant instant76 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary73.MeasurementTime = instant76;
        getObservationsV2_65.StartResultTime = instant76;
        java.lang.String[] strArray88 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_65.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList89);
        deleteFieldVisits61.PlanningStatuses = strList89;
        getObservationsV2_42.Media = strList89;
        putBulkEditResultGradesV2_5.CollectionMethodIds = strList89;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries95 = postCalculatedDerivedTimeSeries4.setTimeSeriesUniqueIds(strList89);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList96 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries97 = postCalculatedDerivedTimeSeries95.setExtendedAttributeValues(extendedAttributeValueList96);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNotNull(roleFlattenedBase40);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNull(double60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries95);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries97);
    }

    @Test
    public void test49083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49083");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        java.lang.String str3 = monitoringMethod2.getParameterUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod5 = monitoringMethod2.setParameterId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod7 = monitoringMethod5.setMethodCode("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod9 = monitoringMethod5.setDisplayName("MaxInstant");
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS" + "'", str3, "/AQUARIUS");
        org.junit.Assert.assertNotNull(monitoringMethod5);
        org.junit.Assert.assertNotNull(monitoringMethod7);
        org.junit.Assert.assertNotNull(monitoringMethod9);
    }

    @Test
    public void test49084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49084");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse2 = postVisitFileResponse0.setHandledByPlugin(fieldDataPlugin1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int4 = getFieldVisits3.Limit;
        java.util.List<java.lang.String> strList5 = getFieldVisits3.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType8 = putUserV2_7.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities20 = getActivities9.setToStartTime(instant19);
        java.lang.String str21 = getActivities20.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList23 = getObservationsV2_22.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        getObservationsV2_22.ResultGrades = strList35;
        getActivities20.Media = strList35;
        putUserV2_7.AccessGroups = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens42 = getSpecimens6.setSamplingLocationIds((java.util.List<java.lang.String>) strList35);
        getFieldVisits3.PlanningStatuses = strList35;
        java.util.List<java.lang.String> strList44 = getFieldVisits3.Ids;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase47 = roleFlattened45.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean48 = roleFlattened45.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str50 = deleteFieldVisits49.Sort;
        deleteFieldVisits49.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_53.setDataClassifications((java.util.List<java.lang.String>) strList57);
        java.util.List<java.lang.String> strList60 = getObservationsV2_53.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary61.Reviewer = "";
        java.time.Instant instant64 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary61.MeasurementTime = instant64;
        getObservationsV2_53.StartResultTime = instant64;
        java.lang.String[] strArray76 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_53.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList77);
        deleteFieldVisits49.PlanningStatuses = strList77;
        roleFlattened45.RoleApprovalTransitions = strList77;
        getFieldVisits3.Search = strList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse83 = postVisitFileResponse2.setVisitIdentifiers(strList77);
        java.util.ArrayList<java.lang.String> strList84 = postVisitFileResponse83.VisitIdentifiers;
        java.util.ArrayList<java.lang.String> strList85 = postVisitFileResponse83.getVisitUris();
        org.junit.Assert.assertNotNull(postVisitFileResponse2);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(userType8);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(getActivities20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(getSpecimens42);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(roleFlattenedBase47);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNotNull(postVisitFileResponse83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNull(strList85);
    }

    @Test
    public void test49085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49085");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPluginsResponse fieldDataPluginsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPluginsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList1 = fieldDataPluginsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList2 = fieldDataPluginsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList3 = fieldDataPluginsResponse0.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList4 = fieldDataPluginsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin> fieldDataPluginList5 = fieldDataPluginsResponse0.Results;
        org.junit.Assert.assertNull(fieldDataPluginList1);
        org.junit.Assert.assertNull(fieldDataPluginList2);
        org.junit.Assert.assertNull(fieldDataPluginList3);
        org.junit.Assert.assertNull(fieldDataPluginList4);
        org.junit.Assert.assertNull(fieldDataPluginList5);
    }

    @Test
    public void test49086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49086");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        pointVelocityDischargeActivity0.Manufacturer = "'.'SSSSSSS";
        java.lang.String str4 = pointVelocityDischargeActivity0.getVelocityObservationMethod();
        java.lang.String str5 = pointVelocityDischargeActivity0.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = pointVelocityDischargeActivity0.getMeanObservationDurationInSeconds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = dischargeSummary7.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        dischargeSummary7.MeasurementTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary7.getGageHeightAdjustmentAmount();
        java.time.Instant instant15 = dischargeSummary7.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading18 = fieldVisitReading16.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading18.Manufacturer = "https";
        java.lang.String str21 = fieldVisitReading18.getControlCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck24 = calibrationCheck22.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = doubleWithDisplay25.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str28 = doubleWithDisplay27.getDisplay();
        calibrationCheck24.Difference = doubleWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = pointVelocityDischargeActivity30.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity30.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity36 = pointVelocityDischargeActivity30.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList37 = pointVelocityDischargeActivity36.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity36.DistanceToMeter = datumConvertedQuantityWithDisplay38;
        calibrationCheck24.Standard = datumConvertedQuantityWithDisplay38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading41 = fieldVisitReading18.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary7.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity43 = pointVelocityDischargeActivity0.setDistanceToMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay38);
        java.lang.Boolean boolean44 = pointVelocityDischargeActivity0.isMethodCoefficientUsed();
        java.lang.String str45 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement46 = pointVelocityDischargeActivity0.DischargeChannelMeasurement;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertNotNull(dischargeSummary9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNotNull(fieldVisitReading18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(calibrationCheck24);
        org.junit.Assert.assertNotNull(doubleWithDisplay27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity32);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity36);
        org.junit.Assert.assertNull(verticalList37);
        org.junit.Assert.assertNotNull(fieldVisitReading41);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(dischargeChannelMeasurement46);
    }

    @Test
    public void test49087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49087");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter2 = postFilter0.setCustomId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList3 = postFilter2.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime4 = postFilter2.StartTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList5 = postFilter2.ObservedProperties;
        java.time.OffsetDateTime offsetDateTime6 = postFilter2.getEndTime();
        org.junit.Assert.assertNotNull(postFilter2);
        org.junit.Assert.assertNull(observedPropertyList3);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNull(observedPropertyList5);
        org.junit.Assert.assertNull(offsetDateTime6);
    }

    @Test
    public void test49088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49088");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest2 = fieldVisitDataByLocationServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = fieldVisitDataByLocationServiceRequest0.isApplyRounding();
        java.lang.Boolean boolean4 = fieldVisitDataByLocationServiceRequest0.isIncludeCrossSectionSurveyProfile();
        java.lang.String str5 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean6 = fieldVisitDataByLocationServiceRequest0.isConvertToLocalAssumedDatum();
        java.lang.String str7 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest9 = fieldVisitDataByLocationServiceRequest0.setIncludeVerticals((java.lang.Boolean) true);
        java.lang.String str10 = fieldVisitDataByLocationServiceRequest9.ConvertToStandardReferenceDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest13 = fieldVisitDataByLocationServiceRequest11.setIncludeNodeDetails((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList14 = fieldVisitDataByLocationServiceRequest13.getActivities();
        java.lang.Boolean boolean15 = fieldVisitDataByLocationServiceRequest13.isConvertToLocalAssumedDatum();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType> inspectionTypeList16 = fieldVisitDataByLocationServiceRequest13.InspectionTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] activityTypeArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] { activityType18, activityType19, activityType20, activityType21, activityType22, activityType23, activityType24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>) activityTypeList26, activityTypeArray25);
        fieldVisitDataByLocationServiceRequest17.Activities = activityTypeList26;
        fieldVisitDataByLocationServiceRequest13.Activities = activityTypeList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest30 = fieldVisitDataByLocationServiceRequest9.setActivities(activityTypeList26);
        fieldVisitDataByLocationServiceRequest9.IncludeCrossSectionSurveyProfile = true;
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest13);
        org.junit.Assert.assertNull(activityTypeList14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(inspectionTypeList16);
        org.junit.Assert.assertTrue("'" + activityType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod + "'", activityType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod));
        org.junit.Assert.assertTrue("'" + activityType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment + "'", activityType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment));
        org.junit.Assert.assertTrue("'" + activityType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure + "'", activityType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure));
        org.junit.Assert.assertTrue("'" + activityType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow + "'", activityType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow));
        org.junit.Assert.assertTrue("'" + activityType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertNotNull(activityTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest30);
    }

    @Test
    public void test49089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49089");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = specimenTemplate0.setId("hi!");
        java.lang.Boolean boolean5 = specimenTemplate4.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate4.setFiltrationComment("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate9 = specimenTemplate4.setFiltrationComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = postSpecimen10.AuditAttributes;
        java.lang.String str12 = postSpecimen10.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory18.Id = "MaxInstant";
        java.lang.String str21 = laboratory18.PhoneNumber;
        java.lang.String str22 = laboratory18.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = labResultDetails15.setLaboratory(laboratory18);
        java.lang.String str24 = laboratory18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen25 = postSpecimen10.setLaboratory(laboratory18);
        java.lang.String str26 = postSpecimen10.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen28 = postSpecimen10.setStatus(specimenViewStatusType27);
        postSpecimen10.Name = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.HYDROCHLORIC_ACID;
        postSpecimen10.Preservative = preservativeType31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = specimenTemplate4.setPreservative(preservativeType31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = specimenTemplate4.setDescription("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        org.junit.Assert.assertNotNull(specimenTemplate4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertNotNull(specimenTemplate9);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(labResultDetails23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MaxInstant" + "'", str24, "MaxInstant");
        org.junit.Assert.assertNotNull(postSpecimen25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED + "'", specimenViewStatusType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED));
        org.junit.Assert.assertNotNull(postSpecimen28);
        org.junit.Assert.assertTrue("'" + preservativeType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.HYDROCHLORIC_ACID + "'", preservativeType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.HYDROCHLORIC_ACID));
        org.junit.Assert.assertNotNull(specimenTemplate33);
        org.junit.Assert.assertNotNull(specimenTemplate35);
    }

    @Test
    public void test49090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49090");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        java.lang.Double double61 = locationDatumPeriod0.getOffsetToStandard();
        java.lang.String str62 = locationDatumPeriod0.UnitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        java.time.Instant instant64 = noteOperation63.getDateAppliedUtc();
        java.time.Instant instant65 = noteOperation63.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note note67 = noteOperation63.setNoteText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.time.Instant instant68 = noteOperation63.getDateAppliedUtc();
        locationDatumPeriod0.TimeRange = noteOperation63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection70 = locationDatumPeriod0.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod72 = locationDatumPeriod0.setOffsetToStandard((java.lang.Double) 1.0d);
        java.lang.String str73 = locationDatumPeriod0.User;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(double61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(instant64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(note67);
        org.junit.Assert.assertNull(instant68);
        org.junit.Assert.assertNull(measurementDirection70);
        org.junit.Assert.assertNotNull(locationDatumPeriod72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test49091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49091");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        reading0.ReadingQualifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading4 = reading0.setGroundWaterMeasurement(groundWaterMeasurement3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = reading5.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading5.ReadingType = readingType7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = reading4.setReadingType(readingType7);
        java.lang.String str10 = reading4.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = reading4.setUnit("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = reading4.setParameterId("multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****");
        org.junit.Assert.assertNotNull(reading4);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertTrue("'" + readingType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNotNull(reading9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(reading12);
        org.junit.Assert.assertNotNull(reading14);
    }

    @Test
    public void test49092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49092");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        putUser0.CustomId = "POST";
        putUser0.CustomId = "zZZZZ";
    }

    @Test
    public void test49093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49093");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList1 = postUserV2_0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = getActivities2.setToStartTime(instant12);
        java.lang.String str14 = getActivities13.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities16 = getActivities13.setLimit((java.lang.Integer) 1);
        getActivities16.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = timeAlignedDataServiceRequest19.setTimeSeriesUniqueIds(strList31);
        getActivities16.CollectionMethodIds = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_37 = postUserV2_0.setRoles((java.util.List<java.lang.String>) strList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        getObservationsV2_38.SpecimenIds = strList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray48 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = putLocationTags44.setTagUniqueIds(strList49);
        getObservationsV2_38.QualityControlTypes = strList49;
        java.util.List<java.lang.String> strList53 = getObservationsV2_38.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList54 = getObservationsV2_38.DataClassifications;
        java.util.List<java.lang.String> strList55 = getObservationsV2_38.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj57 = timeAlignedDataServiceRequest56.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_58.setDataClassifications((java.util.List<java.lang.String>) strList62);
        getObservationsV2_64.DepthUnitCustomId = "hi!";
        java.lang.String str67 = getObservationsV2_64.CustomId;
        java.util.List<java.lang.String> strList68 = getObservationsV2_64.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        getObservationsV2_69.SpecimenIds = strList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray79 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = putLocationTags75.setTagUniqueIds(strList80);
        getObservationsV2_69.QualityControlTypes = strList80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_84 = getObservationsV2_64.setMedia((java.util.List<java.lang.String>) strList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str86 = getObservationsV2_85.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        getObservationsV2_87.SpecimenIds = strList90;
        getObservationsV2_85.ProjectIds = strList90;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_94 = getObservationsV2_64.setObservedPropertyIds((java.util.List<java.lang.String>) strList90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest95 = timeAlignedDataServiceRequest56.setTimeSeriesOutputUnitIds(strList90);
        getObservationsV2_38.LabReportIds = strList90;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_97 = postUserV2_0.setAccessGroups((java.util.List<java.lang.String>) strList90);
        java.util.List<java.lang.String> strList98 = postUserV2_0.getAccessGroups();
        java.util.List<java.lang.String> strList99 = postUserV2_0.getAccessGroups();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(getActivities13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getActivities16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest35);
        org.junit.Assert.assertNotNull(postUserV2_37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putLocationTags51);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(putLocationTags82);
        org.junit.Assert.assertNotNull(getObservationsV2_84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_94);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest95);
        org.junit.Assert.assertNotNull(postUserV2_97);
        org.junit.Assert.assertNotNull(strList98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test49094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49094");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup2 = samplingLocationGroup0.setDescription("POST");
        samplingLocationGroup0.Description = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        org.junit.Assert.assertNotNull(samplingLocationGroup2);
    }

    @Test
    public void test49095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49095");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        java.lang.Object obj5 = postObservationV2_2.getResponseType();
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_7 = postObservationV2_2.setResultTime(offsetDateTime6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit8 = postObservationV2_7.getFieldVisit();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Observation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Observation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Observation");
        org.junit.Assert.assertNotNull(postObservationV2_7);
        org.junit.Assert.assertNull(fieldVisit8);
    }

    @Test
    public void test49096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49096");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeSummary0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = dischargeSummary0.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = doubleWithDisplay4.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary0.setDurationInHours(doubleWithDisplay4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType gageHeightCalculationType8 = dischargeSummary7.GageHeightCalculation;
        dischargeSummary7.QualityAssuranceComments = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = dischargeSummary7.Discharge;
        java.lang.String str12 = dischargeSummary7.GageHeightComments;
        dischargeSummary7.IsValid = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType16 = fieldVisitReading15.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval17 = fieldVisitReading15.Approval;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = null;
        fieldVisitReading15.AdjustmentAmount = quantityWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading21 = fieldVisitReading15.setControlCondition("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = null;
        adcpDischargeActivity22.TransducerDepth = quantityWithDisplay23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary25.Reviewer = "";
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary25.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary25.BaseFlow = baseFlowType30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary25.DischargeUncertainty = dischargeUncertainty32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay35 = dischargeSummary34.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = dischargeSummary34.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = dischargeSummary34.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay40 = doubleWithDisplay38.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary34.setDurationInHours(doubleWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty42 = dischargeUncertainty32.setQuantitativeUncertainty(doubleWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity43 = adcpDischargeActivity22.setTopEstimateExponent(doubleWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity45 = adcpDischargeActivity22.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = adcpDischargeActivity22.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str48 = datumConvertedQuantityWithDisplay47.TargetDatum;
        adcpDischargeActivity22.Area = datumConvertedQuantityWithDisplay47;
        fieldVisitReading15.Value = datumConvertedQuantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary7.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType52 = dischargeSummary51.getBaseFlow();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNotNull(doubleWithDisplay6);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNull(gageHeightCalculationType8);
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(fieldVisitReadingType16);
        org.junit.Assert.assertNull(fieldVisitApproval17);
        org.junit.Assert.assertNotNull(fieldVisitReading21);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + baseFlowType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay35);
        org.junit.Assert.assertNull(quantityWithDisplay36);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNotNull(doubleWithDisplay40);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(dischargeUncertainty42);
        org.junit.Assert.assertNotNull(adcpDischargeActivity43);
        org.junit.Assert.assertNotNull(adcpDischargeActivity45);
        org.junit.Assert.assertNull(doubleWithDisplay46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNull(baseFlowType52);
    }

    @Test
    public void test49097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49097");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag();
        java.lang.Integer int1 = searchResultSamplingContextTag0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag3 = searchResultSamplingContextTag0.setTotalCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag5 = searchResultSamplingContextTag0.setTotalCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = null;
        putActivity6.Depth = quantity7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList10, metricResultArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = putActivity6.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity14 = putActivity12.setSamplingLocation(samplingLocation13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = indexConfiguration15.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = indexConfiguration15.AuditAttributes;
        indexConfiguration15.Description = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity20 = putActivity14.setIndexConfiguration(indexConfiguration15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity22 = null;
        putActivity21.PlannedActivity = plannedActivity22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity25 = null;
        putActivity24.PlannedActivity = plannedActivity25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity27.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity31 = postActivity27.setPlannedActivity(plannedActivity30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str33 = samplingContextTag32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag32.setAuditAttributes(auditAttributes34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag37 = samplingContextTag35.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str39 = samplingContextTag38.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str41 = samplingContextTag40.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        samplingContextTag40.AuditAttributes = auditAttributes42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str45 = samplingContextTag44.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag47 = samplingContextTag44.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag37, samplingContextTag38, samplingContextTag40, samplingContextTag47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList49, samplingContextTagArray48);
        postActivity27.SamplingContextTags = samplingContextTagList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity52 = putActivity24.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList49);
        putActivity21.SamplingContextTags = samplingContextTagList49;
        putActivity20.SamplingContextTags = samplingContextTagList49;
        searchResultSamplingContextTag0.DomainObjects = samplingContextTagList49;
        java.lang.String str56 = searchResultSamplingContextTag0.getCursor();
        searchResultSamplingContextTag0.TotalCount = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag60 = searchResultSamplingContextTag0.setCursor("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag62 = searchResultSamplingContextTag60.setDomainObjects(samplingContextTagList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingContextTag searchResultSamplingContextTag64 = searchResultSamplingContextTag60.setTotalCount((java.lang.Integer) 100);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag3);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag5);
        org.junit.Assert.assertNotNull(metricResultArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(putActivity12);
        org.junit.Assert.assertNotNull(putActivity14);
        org.junit.Assert.assertNull(unit16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(putActivity20);
        org.junit.Assert.assertNotNull(postActivity31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNotNull(samplingContextTag37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(samplingContextTag47);
        org.junit.Assert.assertNotNull(samplingContextTagArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putActivity52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag60);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag62);
        org.junit.Assert.assertNotNull(searchResultSamplingContextTag64);
    }

    @Test
    public void test49098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49098");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = getExportObservations0.setFieldVisitId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSpecimenIds();
        getExportObservations0.FieldVisitId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations0.setDepthUnitId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations9 = getExportObservations7.setCustomId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations11 = getExportObservations7.setDepthValue((java.lang.Double) 100.0d);
        java.util.List<java.lang.String> strList12 = getExportObservations7.ResultStatuses;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList14 = putUserV2_13.getAccessGroups();
        putUserV2_13.CustomId = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        putUser17.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = dischargeSummary22.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse25.setNextToken(instant26);
        dischargeSummary22.MeasurementTime = instant26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse21.setNextToken(instant26);
        java.time.Instant instant30 = locationDescriptionListServiceResponse21.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities31 = getActivities20.setToStartTime(instant30);
        java.lang.String str32 = getActivities31.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities34 = getActivities31.setLimit((java.lang.Integer) 1);
        getActivities34.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList44 = getObservationsV2_37.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary45.Reviewer = "";
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary45.MeasurementTime = instant48;
        getObservationsV2_37.StartResultTime = instant48;
        java.lang.String[] strArray60 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_37.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList61);
        getActivities34.ActivityTypes = strList61;
        putUser17.AccessGroups = strList61;
        putUserV2_13.AccessGroups = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations67 = getExportObservations7.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList61);
        org.junit.Assert.assertNotNull(getExportObservations2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(getExportObservations7);
        org.junit.Assert.assertNotNull(getExportObservations9);
        org.junit.Assert.assertNotNull(getExportObservations11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(dischargeSummary24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(getActivities31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(getActivities34);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNotNull(getExportObservations67);
    }

    @Test
    public void test49099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49099");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Comment = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str3 = postReflectedTimeSeries0.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries5 = postReflectedTimeSeries0.setComment("multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries5);
    }

    @Test
    public void test49100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49100");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = engineeredStructureDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        java.lang.String str8 = engineeredStructureDischargeActivity7.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = engineeredStructureDischargeActivity7.MeanHead;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = null;
        crossSectionPoint10.Distance = quantityWithDisplay11;
        crossSectionPoint10.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = crossSectionPoint10.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint17 = crossSectionPoint10.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint19 = crossSectionPoint17.setElevation(quantityWithDisplay18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint19.Depth = quantityWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint19.Depth = datumConvertedQuantityWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity26 = pointVelocityDischargeActivity24.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity24.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = pointVelocityDischargeActivity24.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList31 = pointVelocityDischargeActivity30.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity30.DistanceToMeter = datumConvertedQuantityWithDisplay32;
        crossSectionPoint19.Elevation = datumConvertedQuantityWithDisplay32;
        engineeredStructureDischargeActivity7.MeanHead = datumConvertedQuantityWithDisplay32;
        java.lang.Boolean boolean36 = engineeredStructureDischargeActivity7.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType38 = dischargeChannelMeasurement37.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement40 = dischargeChannelMeasurement37.setChannel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.time.Instant instant41 = null;
        dischargeChannelMeasurement40.EndTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType channelStabilityType43 = dischargeChannelMeasurement40.getChannelStability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = null;
        adcpDischargeActivity44.TransducerDepth = quantityWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary47.Reviewer = "";
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary47.MeasurementTime = instant50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType52 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary47.BaseFlow = baseFlowType52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary47.DischargeUncertainty = dischargeUncertainty54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = dischargeSummary56.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = dischargeSummary56.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay59 = dischargeSummary56.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay62 = doubleWithDisplay60.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = dischargeSummary56.setDurationInHours(doubleWithDisplay60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty64 = dischargeUncertainty54.setQuantitativeUncertainty(doubleWithDisplay60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity65 = adcpDischargeActivity44.setTopEstimateExponent(doubleWithDisplay60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity67 = adcpDischargeActivity44.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = adcpDischargeActivity44.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str70 = datumConvertedQuantityWithDisplay69.TargetDatum;
        adcpDischargeActivity44.Area = datumConvertedQuantityWithDisplay69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement72 = dischargeChannelMeasurement40.setDistanceToGage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay69);
        engineeredStructureDischargeActivity7.DischargeChannelMeasurement = dischargeChannelMeasurement40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType74 = dischargeChannelMeasurement40.VelocityVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str76 = crossSectionSurveyActivity75.Channel;
        java.lang.String str77 = crossSectionSurveyActivity75.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity80 = adcpDischargeActivity78.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay81 = adcpDischargeActivity80.getDischargeCoefficientVariation();
        adcpDischargeActivity80.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay85 = dischargeSummary84.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay86 = dischargeSummary84.Discharge;
        java.lang.Integer int87 = dischargeSummary84.getGradeCode();
        java.lang.String str88 = dischargeSummary84.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary90 = dischargeSummary84.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay89);
        adcpDischargeActivity80.Area = datumConvertedQuantityWithDisplay89;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity92 = crossSectionSurveyActivity75.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement93 = dischargeChannelMeasurement40.setDistanceToGage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType94 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown;
        dischargeChannelMeasurement93.MeasurementLocationToGage = measurementLocationToGageType94;
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(quantityWithDisplay15);
        org.junit.Assert.assertNotNull(crossSectionPoint17);
        org.junit.Assert.assertNotNull(crossSectionPoint19);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity26);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity30);
        org.junit.Assert.assertNull(verticalList31);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNull(channelMaterialType38);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement40);
        org.junit.Assert.assertNull(channelStabilityType43);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + baseFlowType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType52.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay57);
        org.junit.Assert.assertNull(quantityWithDisplay58);
        org.junit.Assert.assertNull(doubleWithDisplay59);
        org.junit.Assert.assertNotNull(doubleWithDisplay62);
        org.junit.Assert.assertNotNull(dischargeSummary63);
        org.junit.Assert.assertNotNull(dischargeUncertainty64);
        org.junit.Assert.assertNotNull(adcpDischargeActivity65);
        org.junit.Assert.assertNotNull(adcpDischargeActivity67);
        org.junit.Assert.assertNull(doubleWithDisplay68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement72);
        org.junit.Assert.assertNull(velocityVariationType74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(adcpDischargeActivity80);
        org.junit.Assert.assertNull(doubleWithDisplay81);
        org.junit.Assert.assertNull(quantityWithDisplay85);
        org.junit.Assert.assertNull(quantityWithDisplay86);
        org.junit.Assert.assertNull(int87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(dischargeSummary90);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity92);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement93);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType94 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown + "'", measurementLocationToGageType94.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown));
    }

    @Test
    public void test49101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49101");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putSpreadsheetTemplate0.AuditAttributes;
        putSpreadsheetTemplate0.CustomId = "2021.4.62.0";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList4 = putSpreadsheetTemplate0.getAttachments();
        java.lang.String str5 = putSpreadsheetTemplate0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSpreadsheetTemplate0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime8 = fieldTripBasic7.getEndTime();
        java.lang.String str9 = fieldTripBasic7.CustomId;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic11 = fieldTripBasic7.setStartTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = fieldTripBasic11.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple14.setApplicabilityRange(interval15);
        java.lang.String str17 = standardSimple14.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = standardSimple18.setApplicabilityRange(interval19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = standardSimple18.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = standardSimple24.setApplicabilityRange(interval25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple24.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple31 = standardSimple29.setApplicabilityRange(interval30);
        java.lang.String str32 = standardSimple31.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple37 = standardSimple35.setApplicabilityRange(interval36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple40 = standardSimple38.setApplicabilityRange(interval39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple14, standardSimple18, standardSimple23, standardSimple24, standardSimple31, standardSimple33, standardSimple34, standardSimple37, standardSimple38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList42, standardSimpleArray41);
        postSamplingLocation13.Standards = standardSimpleList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList47, plannedActivityArray46);
        putFieldVisit45.PlannedActivities = plannedActivityList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        java.lang.String str57 = domainObjectAttachment55.getId();
        domainObjectAttachment55.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment55.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        java.lang.String str64 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment66 = domainObjectAttachment62.setAttachment(attachment65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str68 = domainObjectAttachment67.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str70 = domainObjectAttachment69.getId();
        java.lang.String str71 = domainObjectAttachment69.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment73 = domainObjectAttachment69.setAttachment(attachment72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str75 = domainObjectAttachment74.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment62, domainObjectAttachment67, domainObjectAttachment69, domainObjectAttachment74 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList77 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList77, domainObjectAttachmentArray76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit79 = putFieldVisit45.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan80 = putFieldVisit45.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple81 = putFieldVisit45.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule82 = putFieldVisit45.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList83 = putFieldVisit45.Attachments;
        postSamplingLocation13.Attachments = domainObjectAttachmentList83;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList85 = postSamplingLocation13.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic86 = fieldTripBasic11.setAttachments(domainObjectAttachmentList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate87 = putSpreadsheetTemplate0.setAttachments(domainObjectAttachmentList85);
        putSpreadsheetTemplate0.CustomId = "/AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(domainObjectAttachmentList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2021.4.62.0" + "'", str5, "2021.4.62.0");
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(fieldTripBasic11);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(standardSimple20);
        org.junit.Assert.assertNotNull(standardSimple22);
        org.junit.Assert.assertNotNull(standardSimple26);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimple31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(standardSimple37);
        org.junit.Assert.assertNotNull(standardSimple40);
        org.junit.Assert.assertNotNull(standardSimpleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(domainObjectAttachment66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(domainObjectAttachment73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putFieldVisit79);
        org.junit.Assert.assertNull(samplingPlan80);
        org.junit.Assert.assertNull(fieldTripSimple81);
        org.junit.Assert.assertNull(schedule82);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList83);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList85);
        org.junit.Assert.assertNotNull(fieldTripBasic86);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate87);
    }

    @Test
    public void test49102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49102");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = getExportObservations0.setFieldVisitId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList6 = getObservationsV2_5.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        getObservationsV2_7.SpecimenIds = strList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray17 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = putLocationTags13.setTagUniqueIds(strList18);
        getObservationsV2_7.QualityControlTypes = strList18;
        getObservationsV2_5.ResultGrades = strList18;
        getExtendedAttributeDropdownlistitems4.Search = strList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult24 = metricResult3.setMatchedObservations((java.util.List<java.lang.String>) strList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult26 = metricResult24.setOverriddenByUser((java.lang.Boolean) false);
        java.util.List<java.lang.String> strList27 = metricResult24.MatchedObservations;
        java.util.List<java.lang.String> strList28 = metricResult24.MatchedObservations;
        getExportObservations0.SamplingLocationIds = strList28;
        java.lang.Double double30 = getExportObservations0.MaxNumericResultValue;
        java.util.List<java.lang.String> strList31 = getExportObservations0.getResultGrades();
        org.junit.Assert.assertNotNull(getExportObservations2);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(putLocationTags20);
        org.junit.Assert.assertNotNull(metricResult24);
        org.junit.Assert.assertNotNull(metricResult26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(double30);
        org.junit.Assert.assertNull(strList31);
    }

    @Test
    public void test49103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49103");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.GetTimeSeriesAppendStatus getTimeSeriesAppendStatus0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.GetTimeSeriesAppendStatus();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.GetTimeSeriesAppendStatus getTimeSeriesAppendStatus2 = getTimeSeriesAppendStatus0.setAppendRequestIdentifier("9999-12-31T23:59:59.999Z");
        java.lang.String str3 = getTimeSeriesAppendStatus2.getAppendRequestIdentifier();
        getTimeSeriesAppendStatus2.AppendRequestIdentifier = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        org.junit.Assert.assertNotNull(getTimeSeriesAppendStatus2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str3, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test49104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49104");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = plannedFieldResult3.AuditAttributes;
        plannedFieldResult3.Id = "'.'SSSSSSS";
        java.lang.String str7 = plannedFieldResult3.DeviceType;
        java.lang.String str8 = plannedFieldResult3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str10 = metricConfiguration9.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty11.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = metricConfiguration9.setObservedProperty(observedProperty11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType15 = observedProperty11.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup17 = postObservedProperty16.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit19 = null;
        quantity18.Unit = unit19;
        postObservedProperty16.LowerLimit = quantity18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity22 = postObservedProperty16.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit23 = quantity22.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = observedProperty11.setUpperLimit(quantity22);
        plannedFieldResult3.ObservedProperty = observedProperty24;
        plannedFieldResult3.Id = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_28 = postObservationV2_0.setPlannedFieldResult(plannedFieldResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics29.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        observationStatistics29.P50 = 1.0d;
        observationStatistics29.P75 = (-1.0d);
        java.lang.Double double36 = observationStatistics29.getP5();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics38 = observationStatistics29.setSamplingLocationId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_39 = postObservationV2_0.setStatistics(observationStatistics38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen40 = postObservationV2_39.Specimen;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "'.'SSSSSSS" + "'", str8, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(metricConfiguration14);
        org.junit.Assert.assertNull(resultType15);
        org.junit.Assert.assertNull(unitGroup17);
        org.junit.Assert.assertNotNull(quantity22);
        org.junit.Assert.assertNull(unit23);
        org.junit.Assert.assertNotNull(observedProperty24);
        org.junit.Assert.assertNotNull(postObservationV2_28);
        org.junit.Assert.assertNull(double36);
        org.junit.Assert.assertNotNull(observationStatistics38);
        org.junit.Assert.assertNotNull(postObservationV2_39);
        org.junit.Assert.assertNull(specimen40);
    }

    @Test
    public void test49105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49105");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.getApprovalName8();
        timeAlignedPoint0.ApprovalLevel10 = 0L;
        java.lang.String str13 = timeAlignedPoint0.Method2;
        java.lang.String str14 = timeAlignedPoint0.getQualifiers7();
        java.lang.String str15 = timeAlignedPoint0.getApprovalName5();
        java.lang.String str16 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint18 = timeAlignedPoint0.setDisplayValue3("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint20 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint22 = timeAlignedPoint20.setApprovalLevel4((java.lang.Long) 1L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeAlignedPoint18);
        org.junit.Assert.assertNotNull(timeAlignedPoint20);
        org.junit.Assert.assertNotNull(timeAlignedPoint22);
    }

    @Test
    public void test49106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49106");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate3 = putActivityTemplate0.setMedium(mediumType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.REPLICATE;
        putActivityTemplate0.Type = activityTemplateType4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod6 = putActivityTemplate0.CollectionMethod;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + mediumType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate3);
        org.junit.Assert.assertTrue("'" + activityTemplateType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.REPLICATE + "'", activityTemplateType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.REPLICATE));
        org.junit.Assert.assertNull(collectionMethod6);
    }

    @Test
    public void test49107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49107");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor13 = processor11.setDescription("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor15 = processor13.setProcessorType("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor17 = processor13.setInputRatingModelIdentifier("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor19 = processor17.setProcessorType("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        processor19.ProcessorType = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor23 = processor19.setOutputTimeSeriesUniqueId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNotNull(processor13);
        org.junit.Assert.assertNotNull(processor15);
        org.junit.Assert.assertNotNull(processor17);
        org.junit.Assert.assertNotNull(processor19);
        org.junit.Assert.assertNotNull(processor23);
    }

    @Test
    public void test49108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49108");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = unit0.AuditAttributes;
        unit0.Name = "2021.4.62.0";
        java.lang.String str4 = unit0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = unit0.setName("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj8 = postObservedProperty7.getResponseType();
        java.lang.String str9 = postObservedProperty7.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = null;
        putActivity10.Depth = quantity11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity14 = putActivity13.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity16 = putActivity13.setEndTime(offsetDateTime15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = null;
        putActivity16.SamplingLocation = samplingLocation17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = null;
        quantity21.Unit = unit22;
        postObservedProperty19.LowerLimit = quantity21;
        putActivity16.Depth = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity26 = putActivity10.setDepth(quantity21);
        postObservedProperty7.UpperLimit = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = unit28.AuditAttributes;
        unit28.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity35 = samplingPlanPlannedActivity33.setAuditAttributes(auditAttributes34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = auditAttributes36.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity35.AuditAttributes = auditAttributes36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = samplingPlanPlannedActivity35.AuditAttributes;
        putAccessGroup32.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit42 = unit28.setAuditAttributes(auditAttributes40);
        quantity21.Unit = unit28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit46 = putUnit44.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup47.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup51 = unitGroup47.setSystemCode(unitGroupSystemCodeType50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit52 = putUnit46.setUnitGroup(unitGroup51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType53 = null;
        unitGroup51.SystemCode = unitGroupSystemCodeType53;
        unit28.UnitGroup = unitGroup51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup57 = unitGroup51.setSupportsConversion((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit58 = unit0.setUnitGroup(unitGroup57);
        java.lang.Double double59 = unit0.BaseOffset;
        unit0.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate64 = specimenTemplate62.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType65 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate64.Preservative = preservativeType65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails69 = labResultDetails67.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails71 = labResultDetails69.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate72 = specimenTemplate64.setAuditAttributes(auditAttributes70);
        unit0.AuditAttributes = auditAttributes70;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(unit6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(plannedActivity14);
        org.junit.Assert.assertNotNull(putActivity16);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(putActivity26);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity35);
        org.junit.Assert.assertNotNull(auditAttributes38);
        org.junit.Assert.assertNotNull(auditAttributes40);
        org.junit.Assert.assertNotNull(unit42);
        org.junit.Assert.assertNotNull(putUnit46);
        org.junit.Assert.assertNotNull(unitGroup51);
        org.junit.Assert.assertNotNull(putUnit52);
        org.junit.Assert.assertNotNull(unitGroup57);
        org.junit.Assert.assertNotNull(unit58);
        org.junit.Assert.assertNull(double59);
        org.junit.Assert.assertNotNull(specimenTemplate64);
        org.junit.Assert.assertTrue("'" + preservativeType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType65.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails69);
        org.junit.Assert.assertNotNull(labResultDetails71);
        org.junit.Assert.assertNotNull(specimenTemplate72);
    }

    @Test
    public void test49109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49109");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod();
        monitoringMethod0.Parameter = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod4 = monitoringMethod0.setDescription("");
        java.lang.String str5 = monitoringMethod0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod7 = monitoringMethod0.setDescription("http");
        java.lang.String str8 = monitoringMethod0.MethodCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod10 = monitoringMethod0.setDisplayName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str11 = monitoringMethod0.DisplayName;
        java.lang.String str12 = monitoringMethod0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod14 = monitoringMethod0.setRoundingSpec("multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNotNull(monitoringMethod4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(monitoringMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(monitoringMethod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str11, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str12, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNotNull(monitoringMethod14);
    }

    @Test
    public void test49110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49110");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity6.setCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity9.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = postActivity9.setPlannedActivity(plannedActivity12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity15 = postActivity9.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation16.setPlannedFieldResult(plannedFieldResult17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction19 = null;
        observation18.LabInstruction = labInstruction19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation18.setStatistics(observationStatistics21);
        java.time.OffsetDateTime offsetDateTime23 = observation22.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList24 = observation22.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = observation22.setObservedProperty(observedProperty25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList28, ruleValidationDetailsArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation22.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList33, extendedAttributeArray32);
        postActivity31.ExtendedAttributes = extendedAttributeList33;
        observation30.ExtendedAttributes = extendedAttributeList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity37 = postActivity9.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList33);
        postActivity8.ExtendedAttributes = extendedAttributeList33;
        java.lang.String str39 = postActivity8.Id;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNotNull(postActivity13);
        org.junit.Assert.assertNotNull(postActivity15);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNull(offsetDateTime23);
        org.junit.Assert.assertNull(importHistoryEventSimpleList24);
        org.junit.Assert.assertNotNull(observation26);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNotNull(extendedAttributeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(postActivity37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test49111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49111");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType1 = expandedRatingCurve0.Type;
        expandedRatingCurve0.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve5 = expandedRatingCurve0.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList6 = expandedRatingCurve5.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType7 = expandedRatingCurve5.Type;
        java.lang.Boolean boolean8 = expandedRatingCurve5.getIsBlended();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit9 = expandedRatingCurve5.OutputParameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType11 = expandedRatingCurve10.Type;
        expandedRatingCurve10.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve15 = expandedRatingCurve10.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList16 = expandedRatingCurve15.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList17 = expandedRatingCurve15.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType19 = expandedRatingCurve18.Type;
        expandedRatingCurve18.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve23 = expandedRatingCurve18.setOutputParameter(parameterWithUnit22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit24 = expandedRatingCurve23.getOutputParameter();
        expandedRatingCurve15.OutputParameter = parameterWithUnit24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit27 = parameterWithUnit24.setParameterName("https");
        expandedRatingCurve5.OutputParameter = parameterWithUnit27;
        java.lang.Boolean boolean29 = expandedRatingCurve5.IsBlended;
        org.junit.Assert.assertNull(ratingCurveType1);
        org.junit.Assert.assertNotNull(expandedRatingCurve5);
        org.junit.Assert.assertNull(ratingShiftList6);
        org.junit.Assert.assertNull(ratingCurveType7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNull(parameterWithUnit9);
        org.junit.Assert.assertNull(ratingCurveType11);
        org.junit.Assert.assertNotNull(expandedRatingCurve15);
        org.junit.Assert.assertNull(ratingShiftList16);
        org.junit.Assert.assertNull(ratingShiftList17);
        org.junit.Assert.assertNull(ratingCurveType19);
        org.junit.Assert.assertNotNull(expandedRatingCurve23);
        org.junit.Assert.assertNotNull(parameterWithUnit24);
        org.junit.Assert.assertNotNull(parameterWithUnit27);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + true + "'", boolean29, true);
    }

    @Test
    public void test49112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49112");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity();
        schedulePlannedActivity0.Instruction = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate5 = activityTemplate3.setMedium(mediumType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity6 = schedulePlannedActivity0.setActivityTemplate(activityTemplate5);
        java.lang.String str7 = schedulePlannedActivity6.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType8 = schedulePlannedActivity6.getActivityType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity10 = schedulePlannedActivity6.setActivityType(activityType9);
        java.lang.String str11 = schedulePlannedActivity6.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity();
        schedulePlannedActivity12.Instruction = "-PT87591240H";
        java.lang.String str15 = schedulePlannedActivity12.Instruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE;
        schedulePlannedActivity12.ActivityType = activityType16;
        schedulePlannedActivity6.ActivityType = activityType16;
        java.lang.String str19 = schedulePlannedActivity6.getId();
        org.junit.Assert.assertTrue("'" + mediumType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate5);
        org.junit.Assert.assertNotNull(schedulePlannedActivity6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(activityType8);
        org.junit.Assert.assertTrue("'" + activityType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE + "'", activityType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE));
        org.junit.Assert.assertNotNull(schedulePlannedActivity10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-PT87591240H" + "'", str15, "-PT87591240H");
        org.junit.Assert.assertTrue("'" + activityType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE + "'", activityType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE));
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test49113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49113");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean4 = metricConfiguration0.getUseScoreRanges();
        java.lang.String str5 = metricConfiguration0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = metricConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus8 = observationNestedInSpecimen7.ResultStatus;
        java.lang.String str9 = observationNestedInSpecimen7.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen11 = observationNestedInSpecimen7.setId("hi!");
        observationNestedInSpecimen7.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        taxonomicResult14.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        taxonomicResult14.Id = "/AQUARIUS/Provisioning/v1";
        observationNestedInSpecimen7.TaxonomicResult = taxonomicResult14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = putDetectioncondition20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition23 = putDetectioncondition20.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity26 = samplingPlanPlannedActivity24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = auditAttributes27.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity26.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = samplingPlanPlannedActivity26.AuditAttributes;
        putDetectioncondition20.AuditAttributes = auditAttributes31;
        java.lang.String str33 = putDetectioncondition20.CustomId;
        java.lang.String str34 = putDetectioncondition20.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition36 = putDetectioncondition20.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = putDetectioncondition36.AuditAttributes;
        taxonomicResult14.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration39 = metricConfiguration0.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration41 = metricConfiguration0.setCustomId("multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(unit6);
        org.junit.Assert.assertNull(resultStatus8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen11);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(putDetectioncondition23);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity26);
        org.junit.Assert.assertNotNull(auditAttributes29);
        org.junit.Assert.assertNotNull(auditAttributes31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http" + "'", str33, "http");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(putDetectioncondition36);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(metricConfiguration39);
        org.junit.Assert.assertNotNull(metricConfiguration41);
    }

    @Test
    public void test49114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49114");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata();
        java.lang.String str1 = gradeMetadata0.getIdentifier();
        java.lang.String str2 = gradeMetadata0.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata4 = gradeMetadata0.setDescription("http://MaxDurationhttp/json/reply/Double");
        java.lang.String str5 = gradeMetadata0.getIdentifier();
        java.lang.String str6 = gradeMetadata0.Description;
        java.lang.String str7 = gradeMetadata0.Identifier;
        java.lang.String str8 = gradeMetadata0.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(gradeMetadata4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://MaxDurationhttp/json/reply/Double" + "'", str6, "http://MaxDurationhttp/json/reply/Double");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://MaxDurationhttp/json/reply/Double" + "'", str8, "http://MaxDurationhttp/json/reply/Double");
    }

    @Test
    public void test49115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49115");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        java.lang.Object obj1 = timeSeriesUniqueIdListServiceRequest0.getResponseType();
        timeSeriesUniqueIdListServiceRequest0.LocationIdentifier = "MinDuration";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList4 = timeSeriesUniqueIdListServiceRequest0.getExtendedFilters();
        timeSeriesUniqueIdListServiceRequest0.ComputationIdentifier = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        timeSeriesUniqueIdListServiceRequest0.Parameter = "MaxDuration";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertNull(extendedAttributeFilterList4);
    }

    @Test
    public void test49116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49116");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod2 = timeSeriesThresholdPeriod0.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod0.AppliedTime = instant3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        timeSeriesThresholdPeriod0.AppliedTime = instant13;
        timeSeriesThresholdPeriod0.ReferenceValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod20 = timeSeriesThresholdPeriod0.setComments("hi!");
        java.time.Instant instant21 = timeSeriesThresholdPeriod0.getAppliedTime();
        java.time.Instant instant22 = timeSeriesThresholdPeriod0.getEndTime();
        java.lang.Double double23 = timeSeriesThresholdPeriod0.getSecondaryReferenceValue();
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(double23);
    }

    @Test
    public void test49117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49117");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFilter deleteFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFilter();
        java.lang.String str1 = deleteFilter0.getId();
        java.lang.String str2 = deleteFilter0.Id;
        java.lang.String str3 = deleteFilter0.getId();
        deleteFilter0.Id = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        java.lang.String str6 = deleteFilter0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFilter deleteFilter8 = deleteFilter0.setId("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****" + "'", str6, "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNotNull(deleteFilter8);
    }

    @Test
    public void test49118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49118");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit0.setEndTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str39 = metricConfiguration38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty40.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration43 = metricConfiguration38.setObservedProperty(observedProperty40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType44 = observedProperty40.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup46 = postObservedProperty45.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = null;
        quantity47.Unit = unit48;
        postObservedProperty45.LowerLimit = quantity47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = postObservedProperty45.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = quantity51.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = observedProperty40.setUpperLimit(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = samplingLocation37.setElevation(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit55 = putFieldVisit36.setSamplingLocation(samplingLocation37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple56 = putFieldVisit36.getFieldTrip();
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit58 = putFieldVisit36.setEndTime(offsetDateTime57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple61 = fieldTripSimple59.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit62 = putFieldVisit36.setFieldTrip(fieldTripSimple59);
        fieldTripSimple59.Id = "9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(metricConfiguration43);
        org.junit.Assert.assertNull(resultType44);
        org.junit.Assert.assertNull(unitGroup46);
        org.junit.Assert.assertNotNull(quantity51);
        org.junit.Assert.assertNull(unit52);
        org.junit.Assert.assertNotNull(observedProperty53);
        org.junit.Assert.assertNotNull(samplingLocation54);
        org.junit.Assert.assertNotNull(putFieldVisit55);
        org.junit.Assert.assertNull(fieldTripSimple56);
        org.junit.Assert.assertNotNull(putFieldVisit58);
        org.junit.Assert.assertNotNull(fieldTripSimple61);
        org.junit.Assert.assertNotNull(putFieldVisit62);
    }

    @Test
    public void test49119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49119");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = putProject2.ScopeStatement;
        putProject2.ScopeStatement = "9999-12-31T23:59:59.999Z";
        java.lang.Boolean boolean6 = putProject2.getApproved();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str8 = putLabReport7.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute11 = extendedAttribute9.setNumber((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute13 = extendedAttribute9.setNumber((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute15 = extendedAttribute9.setAttributeId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str18 = postFieldVisitActivityWithTemplate17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate20 = postFieldVisitActivityWithTemplate17.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = plannedFieldResult21.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails23.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult28 = plannedFieldResult21.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType30 = analyticalGroup29.getType();
        analyticalGroup29.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = null;
        analyticalGroupItem39.AnalysisMethod = analysisMethod42;
        java.lang.String str44 = analyticalGroupItem39.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = null;
        analyticalGroupItem50.AnalysisMethod = analysisMethod53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem34, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem45, analyticalGroupItem48, analyticalGroupItem50 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList56, analyticalGroupItemArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup58 = analyticalGroup33.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList56);
        analyticalGroup29.AnalyticalGroupItems = analyticalGroupItemList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup29.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult62 = plannedFieldResult28.setAuditAttributes(auditAttributes60);
        postFieldVisitActivityWithTemplate20.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport64 = postLabReport16.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = putDetectioncondition65.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition68 = putDetectioncondition65.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity71 = samplingPlanPlannedActivity69.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = auditAttributes72.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity71.AuditAttributes = auditAttributes72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = samplingPlanPlannedActivity71.AuditAttributes;
        putDetectioncondition65.AuditAttributes = auditAttributes76;
        postLabReport16.AuditAttributes = auditAttributes76;
        extendedAttribute15.AuditAttributes = auditAttributes76;
        java.time.OffsetDateTime offsetDateTime80 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = auditAttributes76.setModificationTime(offsetDateTime80);
        putLabReport7.AuditAttributes = auditAttributes81;
        putProject2.AuditAttributes = auditAttributes81;
        java.lang.String str84 = putProject2.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject86 = putProject2.setCustomId("http://MaxDurationhttp");
        java.time.OffsetDateTime offsetDateTime87 = putProject86.getStartTime();
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(extendedAttribute11);
        org.junit.Assert.assertNotNull(extendedAttribute13);
        org.junit.Assert.assertNotNull(extendedAttribute15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate20);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(plannedFieldResult28);
        org.junit.Assert.assertNull(analyticalGroupType30);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(analyticalGroup58);
        org.junit.Assert.assertNotNull(plannedFieldResult62);
        org.junit.Assert.assertNotNull(postLabReport64);
        org.junit.Assert.assertNull(auditAttributes66);
        org.junit.Assert.assertNotNull(putDetectioncondition68);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity71);
        org.junit.Assert.assertNotNull(auditAttributes74);
        org.junit.Assert.assertNotNull(auditAttributes76);
        org.junit.Assert.assertNotNull(auditAttributes81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(putProject86);
        org.junit.Assert.assertNull(offsetDateTime87);
    }

    @Test
    public void test49120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49120");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        postCalculatedDerivedTimeSeries0.Parameter = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = postCalculatedDerivedTimeSeries0.setUtcOffset("'.'SSSSSSS");
        postCalculatedDerivedTimeSeries0.Label = "9999-12-31T23:59:59.999Z";
        java.lang.Boolean boolean7 = postCalculatedDerivedTimeSeries0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries9 = postCalculatedDerivedTimeSeries0.setComputationIdentifier("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries11 = postCalculatedDerivedTimeSeries9.setLabel("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = postCalculatedDerivedTimeSeries9.setDescription("http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries9);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries11);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries13);
    }

    @Test
    public void test49121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49121");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPhoneNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory4 = putLaboratory2.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory6 = putLaboratory4.setId("MinDuration");
        java.lang.String str7 = putLaboratory4.getAddress();
        putLaboratory4.PointOfContact = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = putLaboratory4.AuditAttributes;
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNotNull(putLaboratory4);
        org.junit.Assert.assertNotNull(putLaboratory6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(auditAttributes10);
    }

    @Test
    public void test49122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49122");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData();
        java.lang.String str1 = iceCoveredData0.IceAssemblyType;
        iceCoveredData0.UnderIceCoefficient = 1.0d;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test49123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49123");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport2 = searchResultLabReport0.setCursor("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport5 = labReport3.setDateReceived(offsetDateTime4);
        java.lang.String str6 = labReport5.CaseNarrative;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory12 = laboratory8.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport13 = labReport7.setLaboratory(laboratory12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport16 = labReport14.setDateReceived(offsetDateTime15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory18.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory22 = laboratory18.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport23 = labReport17.setLaboratory(laboratory22);
        java.lang.String str24 = labReport23.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory26.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory30 = laboratory26.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport31 = labReport25.setLaboratory(laboratory30);
        java.lang.String str32 = labReport31.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails35 = labResultDetails33.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails37 = labResultDetails33.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails39 = labResultDetails33.setAuditAttributes(auditAttributes38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime41 = null;
        labReport40.DateReceived = offsetDateTime41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = labResultDetails39.setLabReport(labReport40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory46.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory50 = laboratory46.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport51 = labReport45.setLaboratory(laboratory50);
        java.lang.String str52 = labReport51.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport54 = labReport51.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory56.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory60 = laboratory56.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport61 = labReport55.setLaboratory(laboratory60);
        java.lang.String str62 = labReport61.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport64 = labReport61.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport[] labReportArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport[] { labReport5, labReport7, labReport16, labReport23, labReport31, labReport40, labReport44, labReport54, labReport61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport> labReportList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport>) labReportList66, labReportArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport68 = searchResultLabReport0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport>) labReportList66);
        java.lang.Integer int69 = searchResultLabReport0.TotalCount;
        java.lang.String str70 = searchResultLabReport0.Cursor;
        java.lang.String str71 = searchResultLabReport0.getCursor();
        org.junit.Assert.assertNotNull(searchResultLabReport2);
        org.junit.Assert.assertNotNull(labReport5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(laboratory12);
        org.junit.Assert.assertNotNull(labReport13);
        org.junit.Assert.assertNotNull(labReport16);
        org.junit.Assert.assertNotNull(laboratory22);
        org.junit.Assert.assertNotNull(labReport23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(laboratory30);
        org.junit.Assert.assertNotNull(labReport31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(labResultDetails35);
        org.junit.Assert.assertNotNull(labResultDetails37);
        org.junit.Assert.assertNotNull(labResultDetails39);
        org.junit.Assert.assertNotNull(labResultDetails43);
        org.junit.Assert.assertNotNull(laboratory50);
        org.junit.Assert.assertNotNull(labReport51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(labReport54);
        org.junit.Assert.assertNotNull(laboratory60);
        org.junit.Assert.assertNotNull(labReport61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(labReport64);
        org.junit.Assert.assertNotNull(labReportArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(searchResultLabReport68);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "POST" + "'", str70, "POST");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "POST" + "'", str71, "POST");
    }

    @Test
    public void test49124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49124");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        java.util.List<java.lang.String> strList4 = user0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user6 = user0.setCustomId("/AQUARIUS/Provisioning/v1");
        user0.Id = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.String str9 = user0.getCustomId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(user6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str9, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test49125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49125");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        velocityDepthObservation0.Weighting = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = vertical4.setSegmentVelocity(quantityWithDisplay5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType pointVelocityObservationType7 = vertical4.VelocityObservationMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = vertical4.setFlowDirection(flowDirectionType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        vertical9.FlowDirection = flowDirectionType10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition12 = vertical9.MeasurementCondition;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading15 = fieldVisitReading13.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading17 = fieldVisitReading15.setApproval(fieldVisitApproval16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading19 = fieldVisitReading15.setGradeCode((java.lang.Integer) (-1));
        java.lang.String str20 = fieldVisitReading19.getFieldVisitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = reading21.getValue();
        reading21.ReferencePointUniqueId = "hi!";
        java.lang.String str25 = reading21.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary26.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary28.DifferenceDuringVisit = doubleWithDisplay29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = doubleWithDisplay29.setNumeric((java.lang.Double) 100.0d);
        reading21.Value = doubleWithDisplay32;
        java.lang.Boolean boolean34 = reading21.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading36 = reading21.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity39 = adcpDischargeActivity37.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay40 = adcpDischargeActivity39.getDischargeCoefficientVariation();
        adcpDischargeActivity39.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = dischargeSummary43.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = dischargeSummary43.Discharge;
        java.lang.Integer int46 = dischargeSummary43.getGradeCode();
        java.lang.String str47 = dischargeSummary43.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary43.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay48);
        adcpDischargeActivity39.Area = datumConvertedQuantityWithDisplay48;
        reading36.Uncertainty = datumConvertedQuantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading52 = fieldVisitReading19.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay48);
        vertical9.MeanVelocity = datumConvertedQuantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation54 = velocityDepthObservation0.setVelocity((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay55 = velocityDepthObservation0.ObservationIntervalInSeconds;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical6);
        org.junit.Assert.assertNull(pointVelocityObservationType7);
        org.junit.Assert.assertTrue("'" + flowDirectionType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal + "'", flowDirectionType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal));
        org.junit.Assert.assertNotNull(vertical9);
        org.junit.Assert.assertTrue("'" + flowDirectionType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNull(measurementCondition12);
        org.junit.Assert.assertNotNull(fieldVisitReading15);
        org.junit.Assert.assertNotNull(fieldVisitReading17);
        org.junit.Assert.assertNotNull(fieldVisitReading19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(doubleWithDisplay22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(doubleWithDisplay32);
        org.junit.Assert.assertNull(boolean34);
        org.junit.Assert.assertNotNull(reading36);
        org.junit.Assert.assertNotNull(adcpDischargeActivity39);
        org.junit.Assert.assertNull(doubleWithDisplay40);
        org.junit.Assert.assertNull(quantityWithDisplay44);
        org.junit.Assert.assertNull(quantityWithDisplay45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(fieldVisitReading52);
        org.junit.Assert.assertNotNull(velocityDepthObservation54);
        org.junit.Assert.assertNull(doubleWithDisplay55);
    }

    @Test
    public void test49126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49126");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork2 = completedWork0.setGroundWaterLevelPerformed((java.lang.Boolean) false);
        completedWork0.SafetyInspectionPerformed = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork6 = completedWork0.setSafetyInspectionPerformed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork8 = completedWork6.setSedimentSampleTaken((java.lang.Boolean) true);
        java.lang.Boolean boolean9 = completedWork8.LevelsPerformed;
        org.junit.Assert.assertNotNull(completedWork2);
        org.junit.Assert.assertNotNull(completedWork6);
        org.junit.Assert.assertNotNull(completedWork8);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test49127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49127");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod2 = importItemAnalysisMethod0.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod4 = importItemAnalysisMethod2.setInput("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str6 = labInstructionTemplate5.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = labInstructionTemplate5.getObservedProperty();
        java.lang.String str8 = labInstructionTemplate5.getId();
        java.lang.String str9 = labInstructionTemplate5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = analyticalGroupItem10.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem10.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = null;
        analyticalGroupItem10.AnalysisMethod = analysisMethod13;
        java.lang.String str15 = analyticalGroupItem10.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str17 = analysisMethod16.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList18 = analysisMethod16.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = analyticalGroupItem10.setAnalysisMethod(analysisMethod16);
        java.lang.String str20 = analysisMethod16.Description;
        java.lang.String str21 = analysisMethod16.Context;
        labInstructionTemplate5.AnalysisMethod = analysisMethod16;
        analysisMethod16.MethodId = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList25 = analysisMethod16.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod26 = importItemAnalysisMethod4.setItem(analysisMethod16);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod2);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(observedProperty7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(analysisMethod11);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(importHistoryEventSimpleList18);
        org.junit.Assert.assertNotNull(analyticalGroupItem19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(importHistoryEventSimpleList25);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod26);
    }

    @Test
    public void test49128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49128");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str2 = postLaboratory1.Address;
        java.lang.String str3 = postLaboratory1.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = samplingPlanPlannedActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = auditAttributes7.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity6.AuditAttributes = auditAttributes7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = samplingPlanPlannedActivity6.AuditAttributes;
        postLaboratory1.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory14 = postLaboratory1.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon16 = taxonomicResult15.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = taxonomicResult15.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan19.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan19.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = samplingPlan19.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan26 = samplingPlan19.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag27 = putTag18.setAuditAttributes(auditAttributes25);
        taxonomicResult15.AuditAttributes = auditAttributes25;
        postLaboratory14.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_30 = putObservationV2_0.setAuditAttributes(auditAttributes25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList31 = putObservationV2_30.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade34 = resultGrade32.setId("/AQUARIUS/Provisioning/v1");
        putObservationV2_30.ResultGrade = resultGrade34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_38 = postObservationV2_36.setLabInstruction(labInstruction37);
        java.lang.String str39 = postObservationV2_38.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod40 = postObservationV2_38.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation41.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation45 = observation41.setCategoricalResult(categoricalResult44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation41.DataClassification = dataClassificationType46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_48 = postObservationV2_38.setDataClassification(dataClassificationType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_49 = putObservationV2_30.setDataClassification(dataClassificationType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade50 = putObservationV2_49.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade53 = resultGrade51.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade55 = resultGrade51.setSystemCode(resultGradeSystemCodeType54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType56 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType.UNKNOWN;
        resultGrade51.SystemCode = resultGradeSystemCodeType56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation60 = observation58.setPlannedFieldResult(plannedFieldResult59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction61 = null;
        observation60.LabInstruction = labInstruction61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation64 = observation60.setStatistics(observationStatistics63);
        java.time.OffsetDateTime offsetDateTime65 = observation64.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList66 = observation64.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty67 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation68 = observation64.setObservedProperty(observedProperty67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics69 = observation64.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade72 = resultGrade70.setId("/AQUARIUS/Provisioning/v1");
        resultGrade70.CustomId = "/AQUARIUS/Provisioning/v1";
        observation64.ResultGrade = resultGrade70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade78 = resultGrade76.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType79 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade80 = resultGrade76.setSystemCode(resultGradeSystemCodeType79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType81 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType.UNKNOWN;
        resultGrade76.SystemCode = resultGradeSystemCodeType81;
        resultGrade70.SystemCode = resultGradeSystemCodeType81;
        resultGrade51.SystemCode = resultGradeSystemCodeType81;
        resultGrade50.SystemCode = resultGradeSystemCodeType81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes86 = resultGrade50.AuditAttributes;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity6);
        org.junit.Assert.assertNotNull(auditAttributes9);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(postLaboratory14);
        org.junit.Assert.assertNull(taxon16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup24);
        org.junit.Assert.assertNotNull(samplingPlan26);
        org.junit.Assert.assertNotNull(putTag27);
        org.junit.Assert.assertNotNull(putObservationV2_30);
        org.junit.Assert.assertNull(ruleValidationDetailsList31);
        org.junit.Assert.assertNotNull(resultGrade34);
        org.junit.Assert.assertNotNull(postObservationV2_38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(collectionMethod40);
        org.junit.Assert.assertNotNull(observation45);
        org.junit.Assert.assertTrue("'" + dataClassificationType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_48);
        org.junit.Assert.assertNotNull(putObservationV2_49);
        org.junit.Assert.assertNotNull(resultGrade50);
        org.junit.Assert.assertNotNull(resultGrade53);
        org.junit.Assert.assertNotNull(resultGrade55);
        org.junit.Assert.assertTrue("'" + resultGradeSystemCodeType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType.UNKNOWN + "'", resultGradeSystemCodeType56.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType.UNKNOWN));
        org.junit.Assert.assertNotNull(observation60);
        org.junit.Assert.assertNotNull(observation64);
        org.junit.Assert.assertNull(offsetDateTime65);
        org.junit.Assert.assertNull(importHistoryEventSimpleList66);
        org.junit.Assert.assertNotNull(observation68);
        org.junit.Assert.assertNull(observationStatistics69);
        org.junit.Assert.assertNotNull(resultGrade72);
        org.junit.Assert.assertNotNull(resultGrade78);
        org.junit.Assert.assertNotNull(resultGrade80);
        org.junit.Assert.assertTrue("'" + resultGradeSystemCodeType81 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType.UNKNOWN + "'", resultGradeSystemCodeType81.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType.UNKNOWN));
        org.junit.Assert.assertNull(auditAttributes86);
    }

    @Test
    public void test49129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49129");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        deleteObservationsV2_62.MinNumericResultValue = 0.0d;
        deleteObservationsV2_62.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_68 = deleteObservationsV2_62.setMinNumericResultValue((java.lang.Double) 100.0d);
        java.lang.String str69 = deleteObservationsV2_68.SpecimenName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_71 = deleteObservationsV2_68.setFieldVisitId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.time.Instant instant72 = deleteObservationsV2_71.StartObservedTime;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(deleteObservationsV2_71);
        org.junit.Assert.assertNull(instant72);
    }

    @Test
    public void test49130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49130");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryAuth putActiveDirectoryAuth0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryAuth();
        java.lang.Object obj1 = putActiveDirectoryAuth0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryAuth putActiveDirectoryAuth3 = putActiveDirectoryAuth0.setUserPrincipalName("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        putActiveDirectoryAuth3.UniqueId = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNotNull(putActiveDirectoryAuth3);
    }

    @Test
    public void test49131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49131");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList1 = specimenWithObservations0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations3 = specimenWithObservations0.setStatus(specimenViewStatusType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations5 = specimenWithObservations0.setFiltrationComment("hi!");
        specimenWithObservations0.Description = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        org.junit.Assert.assertNull(extendedAttributeList1);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations3);
        org.junit.Assert.assertNotNull(specimenWithObservations5);
    }

    @Test
    public void test49132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49132");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str2 = postFieldVisitActivityWithTemplate1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = plannedFieldResult5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult12.setAuditAttributes(auditAttributes44);
        postFieldVisitActivityWithTemplate4.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport48 = postLabReport0.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = putDetectioncondition49.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition52 = putDetectioncondition49.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = samplingPlanPlannedActivity53.setAuditAttributes(auditAttributes54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = auditAttributes56.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity55.AuditAttributes = auditAttributes56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = samplingPlanPlannedActivity55.AuditAttributes;
        putDetectioncondition49.AuditAttributes = auditAttributes60;
        postLabReport0.AuditAttributes = auditAttributes60;
        java.lang.String str63 = postLabReport0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport65 = postLabReport0.setCaseNarrative("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = postLabReport65.getAuditAttributes();
        postLabReport65.CustomId = "MaxDuration";
        postLabReport65.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        java.lang.String str72 = laboratory71.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory74 = laboratory71.setPointOfContact("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport75 = postLabReport65.setLaboratory(laboratory71);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(plannedFieldResult12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(postLabReport48);
        org.junit.Assert.assertNull(auditAttributes50);
        org.junit.Assert.assertNotNull(putDetectioncondition52);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity55);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(postLabReport65);
        org.junit.Assert.assertNotNull(auditAttributes66);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(laboratory74);
        org.junit.Assert.assertNotNull(postLabReport75);
    }

    @Test
    public void test49133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49133");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = labInstruction0.setAnalysisMethod(analysisMethod1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = labInstruction2.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = labInstruction2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = labInstruction2.getAnalysisMethod();
        org.junit.Assert.assertNotNull(labInstruction2);
        org.junit.Assert.assertNull(analysisMethod3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(analysisMethod5);
    }

    @Test
    public void test49134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49134");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location3.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.lang.String str6 = location5.getIdentifier();
        java.lang.String str7 = location5.getLocationType();
        java.lang.Boolean boolean8 = location5.IsExternalLocation;
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test49135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49135");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_5 = getChartDataV2_3.setMinNumericResultValue((java.lang.Double) 1.0d);
        java.util.List<java.lang.String> strList6 = getChartDataV2_5.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_5.setImportHistoryEventId("http://MaxDurationhttp/json/reply/Double");
        java.util.List<java.lang.String> strList9 = getChartDataV2_5.ResultGrades;
        java.lang.String str10 = getChartDataV2_5.getDepthUnitId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNotNull(getChartDataV2_5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test49136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49136");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        java.lang.String str38 = putObservationV2_37.CustomId;
        java.lang.String str39 = putObservationV2_37.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier40 = putObservationV2_37.getNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_42 = putObservationV2_37.setCustomId("****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str45 = postLaboratory44.Address;
        java.lang.String str46 = postLaboratory44.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity49 = samplingPlanPlannedActivity47.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = auditAttributes50.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity49.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = samplingPlanPlannedActivity49.AuditAttributes;
        postLaboratory44.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory57 = postLaboratory44.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon59 = taxonomicResult58.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = taxonomicResult58.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan62.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType65 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan62.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup67 = samplingPlan62.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan69 = samplingPlan62.setAuditAttributes(auditAttributes68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag70 = putTag61.setAuditAttributes(auditAttributes68);
        taxonomicResult58.AuditAttributes = auditAttributes68;
        postLaboratory57.AuditAttributes = auditAttributes68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_73 = putObservationV2_43.setAuditAttributes(auditAttributes68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction74 = putObservationV2_73.LabInstruction;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList75 = putObservationV2_73.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType77 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus76.SystemCode = resultStatusSystemCodeType77;
        resultStatus76.CustomId = "-PT87591240H";
        resultStatus76.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_83 = putObservationV2_73.setResultStatus(resultStatus76);
        putObservationV2_37.ResultStatus = resultStatus76;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(nullMeasureQualifier40);
        org.junit.Assert.assertNotNull(putObservationV2_42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity49);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(auditAttributes54);
        org.junit.Assert.assertNotNull(postLaboratory57);
        org.junit.Assert.assertNull(taxon59);
        org.junit.Assert.assertNull(auditAttributes60);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType65.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup67);
        org.junit.Assert.assertNotNull(samplingPlan69);
        org.junit.Assert.assertNotNull(putTag70);
        org.junit.Assert.assertNotNull(putObservationV2_73);
        org.junit.Assert.assertNull(labInstruction74);
        org.junit.Assert.assertNull(ruleValidationDetailsList75);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType77 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType77.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(putObservationV2_83);
    }

    @Test
    public void test49137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49137");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 0.0d);
        vertical0.PercentageOfTotalDischarge = 100.0d;
        java.lang.String str6 = vertical0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = vertical0.getSegmentVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType8 = vertical0.getFlowDirection();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(quantityWithDisplay7);
        org.junit.Assert.assertNull(flowDirectionType8);
    }

    @Test
    public void test49138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49138");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails6.setDilutionFactor("multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****");
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertNotNull(labResultDetails8);
    }

    @Test
    public void test49139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49139");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        java.lang.String str3 = postDatumConvertedTimeSeries0.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList5 = postCalculatedDerivedTimeSeries4.TimeSeriesUniqueIds;
        java.lang.String str6 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation7.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList11, extendedAttributeValueArray10);
        postLocation7.ExtendedAttributeValues = extendedAttributeValueList11;
        postCalculatedDerivedTimeSeries4.ExtendedAttributeValues = extendedAttributeValueList11;
        java.lang.String str15 = postCalculatedDerivedTimeSeries4.ComputationPeriodIdentifier;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList16 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        postDatumConvertedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries19 = postDatumConvertedTimeSeries0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries21 = postDatumConvertedTimeSeries0.setSourceReferencePointUniqueId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str22 = postDatumConvertedTimeSeries0.getParameter();
        postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum = true;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(extendedAttributeValueList16);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries19);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test49140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49140");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant1 = qualifier0.DateApplied;
        java.lang.String str2 = qualifier0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier4 = qualifier0.setIdentifier("hi!");
        java.time.Instant instant5 = qualifier4.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier7 = qualifier4.setIdentifier("-PT87591240H");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(qualifier4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(qualifier7);
    }

    @Test
    public void test49141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49141");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = sensorBase2.setManufacturer("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase6 = sensorBase2.setParameterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList7 = sensorBase2.getTags();
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(sensorBase6);
        org.junit.Assert.assertNull(applyTagRequestList7);
    }

    @Test
    public void test49142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49142");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetQualityCode getQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetQualityCode();
        java.lang.Integer int1 = getQualityCode0.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetQualityCode getQualityCode3 = getQualityCode0.setGradeCode((java.lang.Integer) 7);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(getQualityCode3);
    }

    @Test
    public void test49143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49143");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList2, qualifierGroupResponseArray1);
        qualifierGroupsResponse0.Results = qualifierGroupResponseList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList8, qualifierGroupResponseArray7);
        qualifierGroupsResponse6.Results = qualifierGroupResponseList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse11 = qualifierGroupsResponse5.setResults(qualifierGroupResponseList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse12 = qualifierGroupsResponse0.setResults(qualifierGroupResponseList8);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList13 = qualifierGroupsResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList17, qualifierGroupResponseArray16);
        qualifierGroupsResponse15.Results = qualifierGroupResponseList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse20 = qualifierGroupsResponse14.setResults(qualifierGroupResponseList17);
        qualifierGroupsResponse0.Results = qualifierGroupResponseList17;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList22 = qualifierGroupsResponse0.Results;
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse11);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse12);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList13);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse20);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList22);
    }

    @Test
    public void test49144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49144");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan0.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime3 = samplingPlan0.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = samplingPlan0.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan6 = samplingPlan0.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime8 = putSchedule7.StartDate;
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule10 = putSchedule7.setEndDate(offsetDateTime9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup11 = putSchedule10.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule14 = schedule12.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList16, schedulePlannedActivityArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule18 = schedule14.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList16);
        putSchedule10.SchedulePlannedActivities = schedulePlannedActivityList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = putSchedule10.setSamplingLocationGroup(samplingLocationGroup20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = samplingLocationGroup22.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType25 = samplingLocationGroup24.LocationGroupType;
        putSchedule10.SamplingLocationGroup = samplingLocationGroup24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType27 = samplingLocationGroup24.LocationGroupType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = locationGroupType28.AuditAttributes;
        java.lang.String str30 = locationGroupType28.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup31 = samplingLocationGroup24.setLocationGroupType(locationGroupType28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = samplingLocationGroup31.AuditAttributes;
        samplingLocationGroup31.Name = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan35 = samplingPlan0.setSamplingLocationGroup(samplingLocationGroup31);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(samplingPlan6);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(putSchedule10);
        org.junit.Assert.assertNull(samplingLocationGroup11);
        org.junit.Assert.assertNotNull(schedule14);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(schedule18);
        org.junit.Assert.assertNotNull(putSchedule21);
        org.junit.Assert.assertNotNull(samplingLocationGroup24);
        org.junit.Assert.assertNull(locationGroupType25);
        org.junit.Assert.assertNull(locationGroupType27);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(samplingLocationGroup31);
        org.junit.Assert.assertNull(auditAttributes32);
        org.junit.Assert.assertNotNull(samplingPlan35);
    }

    @Test
    public void test49145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49145");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode();
        java.lang.String str1 = postQualityCode0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode3 = postQualityCode0.setColor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode5 = postQualityCode3.setDescription("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str6 = postQualityCode3.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode8 = postQualityCode3.setGradeCode((java.lang.Integer) 2);
        java.lang.String str9 = postQualityCode8.getColor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode11 = postQualityCode8.setGradeCode((java.lang.Integer) 2);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postQualityCode3);
        org.junit.Assert.assertNotNull(postQualityCode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str6, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNotNull(postQualityCode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****" + "'", str9, "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        org.junit.Assert.assertNotNull(postQualityCode11);
    }

    @Test
    public void test49146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49146");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint9 = timeAlignedPoint0.setGradeCode10((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint9.setMethod5("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint9.setDisplayValue7("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint13.setGradeName5("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(timeAlignedPoint9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
    }

    @Test
    public void test49147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49147");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit deleteVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit();
        deleteVisit0.VisitIdentifier = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        deleteVisit0.VisitIdentifier = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        deleteVisit0.VisitIdentifier = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        java.lang.String str7 = deleteVisit0.VisitIdentifier;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****" + "'", str7, "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
    }

    @Test
    public void test49148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49148");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata2 = parameterMetadata0.setUnitGroupIdentifier("2021.4.62.0");
        java.lang.String str3 = parameterMetadata0.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata5 = parameterMetadata0.setInterpolationType("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str6 = parameterMetadata0.getRoundingSpec();
        org.junit.Assert.assertNotNull(parameterMetadata2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(parameterMetadata5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test49149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49149");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        java.util.List<java.lang.String> strList28 = getGroupedObservationsV2_26.ActivityIds;
        java.time.Instant instant29 = getGroupedObservationsV2_26.getEndObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setNumericResultValue((java.lang.Double) 0.0d);
        java.time.Instant instant32 = getGroupedObservationsV2_31.getStartModificationTime();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(instant32);
    }

    @Test
    public void test49150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49150");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod0.Uncertainty = 100.0d;
        referencePointPeriod0.Method = "multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****";
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test49151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49151");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        java.lang.Integer int1 = getLabReports0.Limit;
        org.junit.Assert.assertNull(int1);
    }

    @Test
    public void test49152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49152");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList5 = importItemObject4.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        java.lang.String str7 = getAnalysisMethods6.Context;
        java.util.List<java.lang.String> strList8 = getAnalysisMethods6.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        java.util.ArrayList<java.lang.String> strList17 = putLocationTags16.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods18 = getAnalysisMethods6.setObservedPropertyIds((java.util.List<java.lang.String>) strList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = reading20.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading23 = reading20.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading25 = reading23.setModel("MaxInstant");
        java.lang.Integer int26 = reading25.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField30 = extendedAttributeField28.setDisplayName("");
        java.lang.Boolean boolean31 = extendedAttributeField30.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj33 = timeAlignedDataServiceRequest32.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_34.setDataClassifications((java.util.List<java.lang.String>) strList38);
        getObservationsV2_40.DepthUnitCustomId = "hi!";
        java.lang.String str43 = getObservationsV2_40.CustomId;
        java.util.List<java.lang.String> strList44 = getObservationsV2_40.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_40.setMedia((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str62 = getObservationsV2_61.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        getObservationsV2_61.ProjectIds = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_40.setObservedPropertyIds((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest71 = timeAlignedDataServiceRequest32.setTimeSeriesOutputUnitIds(strList66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField72 = extendedAttributeField30.setValueOptions((java.util.List<java.lang.String>) strList66);
        putBulkEditResultGradesV2_27.AnalysisMethodSimpleIds = strList66;
        reading25.ReadingQualifiers = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty75 = importItemObservedProperty19.setFields((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods76 = getAnalysisMethods6.setObservedPropertyIds((java.util.List<java.lang.String>) strList66);
        importItemObject4.WarningMessages = strList66;
        getObservationExportIIV2_0.LabResultLaboratoryIds = strList66;
        java.lang.String str79 = getObservationExportIIV2_0.ImportHistoryEventId;
        java.util.List<java.lang.String> strList80 = getObservationExportIIV2_0.Ids;
        java.util.List<java.lang.String> strList81 = getObservationExportIIV2_0.getResultGrades();
        getObservationExportIIV2_0.DetectionCondition = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(getAnalysisMethods18);
        org.junit.Assert.assertNull(doubleWithDisplay21);
        org.junit.Assert.assertNotNull(reading23);
        org.junit.Assert.assertNotNull(reading25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(extendedAttributeField30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest71);
        org.junit.Assert.assertNotNull(extendedAttributeField72);
        org.junit.Assert.assertNotNull(importItemObservedProperty75);
        org.junit.Assert.assertNotNull(getAnalysisMethods76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNull(strList81);
    }

    @Test
    public void test49153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49153");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.SurfaceCoefficient;
        java.lang.String str2 = openWaterData0.getSuspensionWeight();
        openWaterData0.DryLineAngle = 0.0d;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test49154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49154");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant3 = qualifier2.DateApplied;
        java.lang.String str4 = qualifier2.User;
        java.lang.String str5 = qualifier2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj7 = timeAlignedDataServiceRequest6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = timeAlignedDataServiceRequest6.setQueryFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier12 = qualifier2.setDateApplied(instant9);
        getExportSpecimens0.Before = instant9;
        java.util.List<java.lang.String> strList14 = getExportSpecimens0.getLaboratoryIds();
        java.util.List<java.lang.String> strList15 = getExportSpecimens0.SamplingLocationIds;
        java.lang.Integer int16 = getExportSpecimens0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str18 = getChartDataV2_17.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = getChartDataV2_17.setFilterId("");
        java.util.List<java.lang.String> strList21 = getChartDataV2_17.ResultGrades;
        getChartDataV2_17.MinNumericResultValue = 100.0d;
        java.lang.Double double24 = getChartDataV2_17.MaxNumericResultValue;
        java.util.List<java.lang.String> strList25 = getChartDataV2_17.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str27 = inspection26.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection29 = inspection26.setSubLocationIdentifier("");
        inspection26.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str32 = inspection26.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str34 = timeSeriesDescription33.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark37 = locationRemark35.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList39 = fieldVisitDataServiceResponse38.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse41 = fieldVisitDataServiceResponse38.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary42.Reviewer = "";
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary42.MeasurementTime = instant45;
        fieldVisitDataServiceResponse38.ResponseTime = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark48 = locationRemark35.setCreateTime(instant45);
        timeSeriesDescription33.LastModified = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection50 = inspection26.setTime(instant45);
        getChartDataV2_17.EndObservedTime = instant45;
        getExportSpecimens0.EndModificationTime = instant45;
        java.time.Instant instant53 = getExportSpecimens0.getBefore();
        java.util.List<java.lang.String> strList54 = getExportSpecimens0.SpecimenStatuses;
        java.util.List<java.lang.String> strList55 = getExportSpecimens0.FieldTripIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest11);
        org.junit.Assert.assertNotNull(qualifier12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(getChartDataV2_20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(double24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(inspection29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locationRemark37);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList39);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(locationRemark48);
        org.junit.Assert.assertNotNull(inspection50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(strList55);
    }

    @Test
    public void test49155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49155");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport2 = putLabReport0.setDateReceived(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory4.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = laboratory4.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport9 = labReport3.setLaboratory(laboratory8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory10.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory14 = laboratory10.setName("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str15 = laboratory14.EmailAddress;
        laboratory14.Name = "http://MaxDurationhttp/json/reply/Integer";
        labReport9.Laboratory = laboratory14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport19 = putLabReport2.setLaboratory(laboratory14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport21 = putLabReport19.setCaseNarrative("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport23 = putLabReport21.setQcSummary("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNotNull(putLabReport2);
        org.junit.Assert.assertNotNull(laboratory8);
        org.junit.Assert.assertNotNull(labReport9);
        org.junit.Assert.assertNotNull(laboratory14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(putLabReport19);
        org.junit.Assert.assertNotNull(putLabReport21);
        org.junit.Assert.assertNotNull(putLabReport23);
    }

    @Test
    public void test49156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49156");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading2.Manufacturer = "https";
        java.lang.String str5 = fieldVisitReading2.getControlCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck6.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay9.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str12 = doubleWithDisplay11.getDisplay();
        calibrationCheck8.Difference = doubleWithDisplay11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = pointVelocityDischargeActivity14.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity14.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity20 = pointVelocityDischargeActivity14.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList21 = pointVelocityDischargeActivity20.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity20.DistanceToMeter = datumConvertedQuantityWithDisplay22;
        calibrationCheck8.Standard = datumConvertedQuantityWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading25 = fieldVisitReading2.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay22);
        java.lang.String str26 = fieldVisitReading2.getFieldVisitIdentifier();
        java.lang.String str27 = fieldVisitReading2.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant29 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity30 = gageHeightAtZeroFlowActivity28.setApplicableSince(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity32 = gageHeightAtZeroFlowActivity30.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails gageHeightAtZeroFlowCalculatedDetails33 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity34 = gageHeightAtZeroFlowActivity32.setCalculatedDetails(gageHeightAtZeroFlowCalculatedDetails33);
        java.lang.String str35 = gageHeightAtZeroFlowActivity32.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType38 = dischargeChannelMeasurement37.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay39 = dischargeChannelMeasurement37.Discharge;
        java.time.Instant instant40 = dischargeChannelMeasurement37.EndTime;
        dischargeChannelMeasurement37.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity43 = engineeredStructureDischargeActivity36.setDischargeChannelMeasurement(dischargeChannelMeasurement37);
        java.lang.String str44 = engineeredStructureDischargeActivity43.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = engineeredStructureDischargeActivity43.MeanHead;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = null;
        crossSectionPoint46.Distance = quantityWithDisplay47;
        crossSectionPoint46.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = crossSectionPoint46.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint53 = crossSectionPoint46.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint55 = crossSectionPoint53.setElevation(quantityWithDisplay54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = null;
        crossSectionPoint55.Depth = quantityWithDisplay56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint55.Depth = datumConvertedQuantityWithDisplay58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity62 = pointVelocityDischargeActivity60.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity60.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity66 = pointVelocityDischargeActivity60.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList67 = pointVelocityDischargeActivity66.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity66.DistanceToMeter = datumConvertedQuantityWithDisplay68;
        crossSectionPoint55.Elevation = datumConvertedQuantityWithDisplay68;
        engineeredStructureDischargeActivity43.MeanHead = datumConvertedQuantityWithDisplay68;
        gageHeightAtZeroFlowActivity32.ZeroFlowHeight = datumConvertedQuantityWithDisplay68;
        fieldVisitReading2.Value = datumConvertedQuantityWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading75 = fieldVisitReading2.setSubLocationIdentifier("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading77 = fieldVisitReading75.setControlCondition("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(calibrationCheck8);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity16);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity20);
        org.junit.Assert.assertNull(verticalList21);
        org.junit.Assert.assertNotNull(fieldVisitReading25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity30);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity32);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(channelMaterialType38);
        org.junit.Assert.assertNull(quantityWithDisplay39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(quantityWithDisplay45);
        org.junit.Assert.assertNull(quantityWithDisplay51);
        org.junit.Assert.assertNotNull(crossSectionPoint53);
        org.junit.Assert.assertNotNull(crossSectionPoint55);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity62);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity66);
        org.junit.Assert.assertNull(verticalList67);
        org.junit.Assert.assertNotNull(fieldVisitReading75);
        org.junit.Assert.assertNotNull(fieldVisitReading77);
    }

    @Test
    public void test49157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49157");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity2 = samplingPlanPlannedActivity0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType3 = samplingPlanPlannedActivity2.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str5 = metricConfiguration4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = postObservedProperty6.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType9 = postObservedProperty6.getAnalysisType();
        postObservedProperty6.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = postObservedProperty6.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = postLabAnalysisMethod13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList17, observedPropertyArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = postLabAnalysisMethod15.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType21 = analyticalGroup20.getType();
        analyticalGroup20.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = null;
        analyticalGroupItem30.AnalysisMethod = analysisMethod33;
        java.lang.String str35 = analyticalGroupItem30.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem25, analyticalGroupItem27, analyticalGroupItem30, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47, analyticalGroupItemArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup49 = analyticalGroup24.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47);
        analyticalGroup20.AnalyticalGroupItems = analyticalGroupItemList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup20.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod53 = postLabAnalysisMethod19.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty54 = postObservedProperty6.setAuditAttributes(auditAttributes51);
        metricConfiguration4.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity56 = samplingPlanPlannedActivity2.setAuditAttributes(auditAttributes51);
        java.lang.String str57 = samplingPlanPlannedActivity2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType59 = samplingPlanPlannedActivityRecurrence58.RecurrenceFrequency;
        java.util.List<java.lang.String> strList60 = samplingPlanPlannedActivityRecurrence58.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier63 = putQualifier61.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray75 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = putLocationTags71.setTagUniqueIds(strList76);
        getObservationsV2_65.QualityControlTypes = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest80 = timeAlignedDataServiceRequest64.setTimeSeriesUniqueIds(strList76);
        putQualifier61.GroupIdentifiers = strList76;
        java.util.ArrayList<java.lang.String> strList82 = putQualifier61.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence58.MonthsOfYear = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType84 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH;
        samplingPlanPlannedActivityRecurrence58.TemporalExpression = temporalExpressionType84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType86 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.THIRD_WEEK_OF_MONTH;
        samplingPlanPlannedActivityRecurrence58.TemporalExpression = temporalExpressionType86;
        java.util.List<java.lang.String> strList88 = samplingPlanPlannedActivityRecurrence58.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType89 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.WEEKLY;
        samplingPlanPlannedActivityRecurrence58.RecurrenceFrequency = recurrenceFrequencyType89;
        samplingPlanPlannedActivity2.Recurrence = samplingPlanPlannedActivityRecurrence58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType92 = samplingPlanPlannedActivity2.getActivityType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity94 = samplingPlanPlannedActivity2.setId("multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity2);
        org.junit.Assert.assertNull(activityType3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postObservedProperty8);
        org.junit.Assert.assertNull(analysisType9);
        org.junit.Assert.assertNull(quantity12);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod15);
        org.junit.Assert.assertNotNull(observedPropertyArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod19);
        org.junit.Assert.assertNull(analyticalGroupType21);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(analyticalGroup49);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod53);
        org.junit.Assert.assertNotNull(postObservedProperty54);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(recurrenceFrequencyType59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(putQualifier63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(putLocationTags78);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest80);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + temporalExpressionType84 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH + "'", temporalExpressionType84.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalExpressionType86 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.THIRD_WEEK_OF_MONTH + "'", temporalExpressionType86.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.THIRD_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + recurrenceFrequencyType89 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.WEEKLY + "'", recurrenceFrequencyType89.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType.WEEKLY));
        org.junit.Assert.assertNull(activityType92);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity94);
    }

    @Test
    public void test49158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49158");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        java.lang.Double double9 = timeAlignedPoint8.NumericValue8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setGradeCode4((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint8.setQualifiers6("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str14 = timeAlignedPoint13.getGradeName7();
        timeAlignedPoint13.Qualifiers2 = "";
        timeAlignedPoint13.NumericValue1 = 100.0d;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test49159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49159");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary3.UpdateCount = (-1);
        java.lang.Integer int6 = observationImportSummary3.ExpectedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary7.UpdateCount = (-1);
        java.lang.Integer int10 = observationImportSummary7.ExpectedCount;
        java.lang.String str11 = observationImportSummary7.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList13, importItemObservationArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary15 = observationImportSummary7.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary16 = observationImportSummary3.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList13);
        importSummaryObservation0.ImportItems = importItemObservationList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple18 = importSummaryObservation0.ImportHistoryEventSimple;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList19 = importSummaryObservation0.getImportItems();
        java.lang.Integer int20 = importSummaryObservation0.getNewCount();
        java.lang.String str21 = importSummaryObservation0.SummaryReportText;
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(importItemObservationArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(observationImportSummary15);
        org.junit.Assert.assertNotNull(observationImportSummary16);
        org.junit.Assert.assertNull(importHistoryEventSimple18);
        org.junit.Assert.assertNotNull(importItemObservationList19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str21, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test49160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49160");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = labInstruction0.getAnalysisMethod();
        java.lang.String str2 = labInstruction0.PreparationMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = labInstruction0.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = labInstruction0.getAnalysisMethod();
        java.lang.String str5 = labInstruction0.getAnalysisComment();
        java.lang.String str6 = labInstruction0.PreparationMethod;
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(analysisMethod3);
        org.junit.Assert.assertNull(analysisMethod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test49161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49161");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        vertical0.EffectiveDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        java.lang.Double double5 = vertical0.getCosineOfUniqueFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation6 = vertical0.VelocityObservation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical8 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        org.junit.Assert.assertNotNull(vertical4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(velocityObservation6);
        org.junit.Assert.assertNotNull(vertical8);
    }

    @Test
    public void test49162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49162");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment0.ContentType = "'.'SSSSSSS";
        java.lang.String str3 = attachment0.Longitude;
        java.lang.Integer int4 = attachment0.FileSize;
        attachment0.FileName = "zZZZZ";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test49163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49163");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory getFieldTripHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory();
        java.lang.Object obj1 = getFieldTripHistory0.getResponseType();
        java.lang.String str2 = getFieldTripHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory getFieldTripHistory4 = getFieldTripHistory0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        getFieldTripHistory4.Id = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getFieldTripHistory4);
    }

    @Test
    public void test49164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49164");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition6 = standardDefinition4.setApplicabilityRange(interval5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition8 = standardDefinition6.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition9.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition13 = standardDefinition9.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList14 = standardDefinition13.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval15 = standardDefinition13.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList17, observationStandardArray16);
        standardDefinition13.ObservationStandards = observationStandardList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str21 = samplingLocationSimple20.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str23 = samplingLocationSimple22.Name;
        java.lang.String str24 = samplingLocationSimple22.Name;
        java.lang.String str25 = samplingLocationSimple22.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str27 = samplingLocationSimple26.Name;
        java.lang.String str28 = samplingLocationSimple26.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str30 = samplingLocationSimple29.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str32 = samplingLocationSimple31.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple[] samplingLocationSimpleArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple[] { samplingLocationSimple20, samplingLocationSimple22, samplingLocationSimple26, samplingLocationSimple29, samplingLocationSimple31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList34, samplingLocationSimpleArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition36 = standardDefinition13.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition37 = standardDefinition6.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple>) samplingLocationSimpleList34);
        java.lang.String str38 = standardDefinition6.IssuingOrganization;
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNotNull(standardDefinition6);
        org.junit.Assert.assertNotNull(standardDefinition8);
        org.junit.Assert.assertNotNull(standardDefinition13);
        org.junit.Assert.assertNull(samplingLocationSimpleList14);
        org.junit.Assert.assertNull(interval15);
        org.junit.Assert.assertNotNull(observationStandardArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(samplingLocationSimpleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(standardDefinition36);
        org.junit.Assert.assertNotNull(standardDefinition37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test49165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49165");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity();
        java.lang.Boolean boolean1 = volumetricDischargeActivity0.getIsValid();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading> volumetricDischargeReadingList2 = volumetricDischargeActivity0.getVolumetricDischargeReadings();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType5 = dischargeChannelMeasurement4.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = dischargeChannelMeasurement4.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType7 = dischargeChannelMeasurement4.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement9 = dischargeChannelMeasurement4.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement9.setVelocityVariation(velocityVariationType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType12 = dischargeChannelMeasurement11.ChannelEvenness;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement14 = dischargeChannelMeasurement11.setMeterSuspension(meterSuspensionType13);
        otherMethodDischargeActivity3.DischargeChannelMeasurement = dischargeChannelMeasurement14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant17 = locationDatumPeriod16.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod19 = locationDatumPeriod16.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod22 = timeSeriesThresholdPeriod20.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod20.AppliedTime = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        postRecurringReport26.NextGenerationDate = instant30;
        java.time.Instant instant33 = postRecurringReport26.getNextGenerationDate();
        java.lang.String str34 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant33);
        metadataChangeTransactionListServiceRequest25.QueryFrom = instant33;
        timeSeriesThresholdPeriod20.AppliedTime = instant33;
        locationDatumPeriod19.AppliedTimeUtc = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement38 = dischargeChannelMeasurement14.setEndTime(instant33);
        volumetricDischargeActivity0.DischargeChannelMeasurement = dischargeChannelMeasurement38;
        volumetricDischargeActivity0.IsObserved = true;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(volumetricDischargeReadingList2);
        org.junit.Assert.assertNull(channelMaterialType5);
        org.junit.Assert.assertNull(quantityWithDisplay6);
        org.junit.Assert.assertNull(horizontalFlowType7);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement9);
        org.junit.Assert.assertTrue("'" + velocityVariationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady + "'", velocityVariationType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNull(channelEvennessType12);
        org.junit.Assert.assertTrue("'" + meterSuspensionType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown + "'", meterSuspensionType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement14);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNotNull(locationDatumPeriod19);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str34, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement38);
    }

    @Test
    public void test49166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49166");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType3 = fieldVisitSimple0.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple5 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str7 = projectSimple6.Name;
        java.lang.String str8 = projectSimple6.getCustomId();
        java.lang.String str9 = projectSimple6.getCustomId();
        projectSimple6.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple12 = fieldVisitSimple5.setProject(projectSimple6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple14 = fieldVisitSimple12.setNotes("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.lang.String str15 = fieldVisitSimple14.Participants;
        org.junit.Assert.assertNull(planningStatusType3);
        org.junit.Assert.assertNotNull(fieldVisitSimple5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(fieldVisitSimple12);
        org.junit.Assert.assertNotNull(fieldVisitSimple14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "'.'SSSSSSS" + "'", str15, "'.'SSSSSSS");
    }

    @Test
    public void test49167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49167");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroupHistory getAnalyticalGroupHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroupHistory();
        java.lang.String str1 = getAnalyticalGroupHistory0.Id;
        java.lang.String str2 = getAnalyticalGroupHistory0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test49168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49168");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = vertical3.setVerticalNumber((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = null;
        crossSectionPoint6.Distance = quantityWithDisplay7;
        crossSectionPoint6.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = crossSectionPoint6.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint13 = crossSectionPoint6.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint15 = crossSectionPoint13.setElevation(quantityWithDisplay14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = null;
        crossSectionPoint15.Depth = quantityWithDisplay16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint15.Depth = datumConvertedQuantityWithDisplay18;
        vertical3.SegmentWidth = datumConvertedQuantityWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData21 = vertical3.IceCoveredData;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay22 = vertical3.SegmentVelocity;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNotNull(vertical5);
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertNotNull(crossSectionPoint13);
        org.junit.Assert.assertNotNull(crossSectionPoint15);
        org.junit.Assert.assertNull(iceCoveredData21);
        org.junit.Assert.assertNull(quantityWithDisplay22);
    }

    @Test
    public void test49169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49169");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedPropertyCategoricalValues putObservedPropertyCategoricalValues0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedPropertyCategoricalValues();
        java.lang.String str1 = putObservedPropertyCategoricalValues0.getId();
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test49170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49170");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = importItemTaxon0.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj3 = importItemTaxon0.Errors;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj5 = putLocationType4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon6 = importItemTaxon0.setErrors((java.lang.Object) putLocationType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon8 = importItemTaxon0.setInput("'.'SSSSSSS");
        java.util.List<java.lang.String> strList9 = importItemTaxon0.getWarningMessages();
        importItemTaxon0.RowId = "****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNotNull(importItemTaxon2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(importItemTaxon6);
        org.junit.Assert.assertNotNull(importItemTaxon8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test49171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49171");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = putSchedule5.getEndDate();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = putSchedule5.setStartDate(offsetDateTime8);
        java.lang.Integer int10 = putSchedule5.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule5.RecurrenceDayMonthly = recurrenceDayMonthlyType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setRecurrenceDayMonthly(recurrenceDayMonthlyType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = postSchedule0.getAuditAttributes();
        postSchedule0.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule19 = schedule17.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType20 = schedule19.getSamplingLocationGroupSelectionType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        schedule19.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule23 = postSchedule0.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = postSchedule0.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType25 = postSchedule0.SamplingLocationGroupSelectionType;
        java.lang.String str26 = postSchedule0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType27 = postSchedule0.getSamplingLocationGroupSelectionType();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putSchedule9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(schedule19);
        org.junit.Assert.assertNull(samplingLocationGroupSelectionType20);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNotNull(postSchedule23);
        org.junit.Assert.assertNull(samplingLocationGroup24);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
    }

    @Test
    public void test49172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49172");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str1 = appliedTag0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag3 = appliedTag0.setName("hi!");
        appliedTag0.Name = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag7 = appliedTag0.setValue("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str8 = appliedTag0.getKey();
        java.lang.String str9 = appliedTag0.Key;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(appliedTag3);
        org.junit.Assert.assertNotNull(appliedTag7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test49173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49173");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        putFilter0.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str3 = putFilter0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter5 = putFilter0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime6 = null;
        putFilter5.EndTime = offsetDateTime6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime9 = postFilter8.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = postFilter8.getAuditAttributes();
        postFilter8.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime13 = postFilter8.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter14.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList18, samplingLocationArray17);
        postFilter14.SamplingLocations = samplingLocationList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter21 = postFilter8.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList18);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList22 = postFilter8.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter23 = putFilter5.setSamplingLocations(samplingLocationList22);
        java.time.OffsetDateTime offsetDateTime24 = putFilter5.StartTime;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putFilter5);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(samplingLocationArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postFilter21);
        org.junit.Assert.assertNotNull(samplingLocationList22);
        org.junit.Assert.assertNotNull(putFilter23);
        org.junit.Assert.assertNull(offsetDateTime24);
    }

    @Test
    public void test49174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49174");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule6 = schedule4.setRecurrenceType(recurrenceType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule8 = schedule6.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 4);
        java.time.OffsetDateTime offsetDateTime9 = null;
        schedule6.LastGenerationDate = offsetDateTime9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule13 = schedule11.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType14 = schedule11.getRecurrenceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule16 = schedule11.setRecurrenceDayWeekly(recurrenceDayWeeklyType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule17 = schedule6.setRecurrenceDayWeekly(recurrenceDayWeeklyType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = schedule17.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation19.setPlannedFieldResult(plannedFieldResult20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction22 = null;
        observation21.LabInstruction = labInstruction22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = fieldVisit24.Attachments;
        observation21.FieldVisit = fieldVisit24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule29 = schedule27.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList31, schedulePlannedActivityArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule33 = schedule29.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule35 = schedule33.setSamplingLocationGroup(samplingLocationGroup34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType36 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule37 = schedule35.setRecurrenceDayWeekly(recurrenceDayWeeklyType36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule39 = schedule35.setCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        fieldVisit24.Schedule = schedule39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType41 = schedule39.RecurrenceDayWeekly;
        schedule17.RecurrenceDayWeekly = recurrenceDayWeeklyType41;
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertTrue("'" + recurrenceType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule6);
        org.junit.Assert.assertNotNull(schedule8);
        org.junit.Assert.assertNotNull(schedule13);
        org.junit.Assert.assertNull(recurrenceType14);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY + "'", recurrenceDayWeeklyType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.MONDAY));
        org.junit.Assert.assertNotNull(schedule16);
        org.junit.Assert.assertNotNull(schedule17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNotNull(schedule29);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(schedule33);
        org.junit.Assert.assertNotNull(schedule35);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY + "'", recurrenceDayWeeklyType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY));
        org.junit.Assert.assertNotNull(schedule37);
        org.junit.Assert.assertNotNull(schedule39);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY + "'", recurrenceDayWeeklyType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY));
    }

    @Test
    public void test49175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49175");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty2.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType6 = observedProperty2.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup8 = postObservedProperty7.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit10 = null;
        quantity9.Unit = unit10;
        postObservedProperty7.LowerLimit = quantity9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = postObservedProperty7.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = quantity13.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty15 = observedProperty2.setUpperLimit(quantity13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = observedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType17 = observedProperty15.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup18 = observedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = observedProperty15.getUnitGroup();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNull(resultType6);
        org.junit.Assert.assertNull(unitGroup8);
        org.junit.Assert.assertNotNull(quantity13);
        org.junit.Assert.assertNull(unit14);
        org.junit.Assert.assertNotNull(observedProperty15);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNull(analysisType17);
        org.junit.Assert.assertNull(unitGroup18);
        org.junit.Assert.assertNull(unitGroup19);
    }

    @Test
    public void test49176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49176");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setStartTime(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip5 = putFieldTrip0.setEndTime(offsetDateTime4);
        putFieldTrip0.CustomId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip9 = putFieldTrip0.setNotes("2021.4.62.0");
        putFieldTrip9.Id = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip13 = putFieldTrip9.setParticipants("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList14 = putFieldTrip9.getAttachments();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNotNull(putFieldTrip5);
        org.junit.Assert.assertNotNull(putFieldTrip9);
        org.junit.Assert.assertNotNull(putFieldTrip13);
        org.junit.Assert.assertNull(domainObjectAttachmentList14);
    }

    @Test
    public void test49177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49177");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethodHistory getLabAnalysisMethodHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethodHistory();
        java.lang.String str1 = getLabAnalysisMethodHistory0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethodHistory getLabAnalysisMethodHistory3 = getLabAnalysisMethodHistory0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.lang.Object obj4 = getLabAnalysisMethodHistory0.getResponseType();
        getLabAnalysisMethodHistory0.Id = "2021.8.9990";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getLabAnalysisMethodHistory3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test49178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49178");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setNumber((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute4 = extendedAttribute0.setNumber((java.lang.Double) 1.0d);
        extendedAttribute4.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute8 = extendedAttribute4.setNumber((java.lang.Double) 0.0d);
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(extendedAttribute4);
        org.junit.Assert.assertNotNull(extendedAttribute8);
    }

    @Test
    public void test49179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49179");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        getObservationsV2_0.SpecimenIds = strList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_0.setSort("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.util.List<java.lang.String> strList8 = getObservationsV2_7.getCollectionMethodIds();
        java.util.List<java.lang.String> strList9 = getObservationsV2_7.getLabResultLaboratoryIds();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test49180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49180");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.TagNames;
        java.time.Instant instant3 = locationDescriptionListServiceRequest0.getChangesSinceToken();
        java.util.ArrayList<java.lang.String> strList4 = locationDescriptionListServiceRequest0.TagNames;
        java.lang.String str5 = locationDescriptionListServiceRequest0.LocationIdentifier;
        java.time.Instant instant6 = locationDescriptionListServiceRequest0.ChangesSinceToken;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
    }

    @Test
    public void test49181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49181");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription0.UtcOffset = 100.0d;
        timeSeriesDescription0.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription6 = timeSeriesDescription0.setLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription8 = timeSeriesDescription0.setUtcOffset((java.lang.Double) 100.0d);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList9 = timeSeriesDescription8.getExtendedAttributes();
        timeSeriesDescription8.ComputationPeriodIdentifier = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNotNull(timeSeriesDescription6);
        org.junit.Assert.assertNotNull(timeSeriesDescription8);
        org.junit.Assert.assertNull(extendedAttributeList9);
    }

    @Test
    public void test49182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49182");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj3 = putLocationType2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest4.ReportTitle = "MinDuration";
        java.lang.String str7 = reportListServiceRequest4.getLocationUniqueId();
        java.time.Instant instant8 = null;
        reportListServiceRequest4.CreatedFrom = instant8;
        java.lang.String[] strArray22 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        reportListServiceRequest4.TagValues = strList23;
        putLocationType2.ExtendedAttributeDefinitionIds = strList23;
        getExportObservations0.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations29 = getExportObservations0.setCustomId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str31 = getChartDataV2_30.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_33 = getChartDataV2_30.setFilterId("");
        java.util.List<java.lang.String> strList34 = getChartDataV2_30.ResultGrades;
        java.util.List<java.lang.String> strList35 = getChartDataV2_30.CollectionMethodIds;
        getChartDataV2_30.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        getObservationsV2_39.QualityControlTypes = strList50;
        java.util.List<java.lang.String> strList54 = getObservationsV2_39.getLabReportIds();
        importItem38.Errors = getObservationsV2_39;
        java.lang.Object obj56 = importItem38.getExistingItem();
        importItem38.Input = "hi!";
        java.lang.Object obj59 = importItem38.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType60 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem61 = importItem38.setStatus(importItemStatusType60);
        importItem61.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate64.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate68 = specimenTemplate64.setId("hi!");
        java.lang.Boolean boolean69 = specimenTemplate68.getFiltered();
        importItem61.Item = specimenTemplate68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray76 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_73.setDataClassifications((java.util.List<java.lang.String>) strList77);
        postTag72.PickListValues = strList77;
        java.util.ArrayList<java.lang.String> strList81 = postTag72.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor82 = processor71.setInputTimeSeriesUniqueIds(strList81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem83 = importItem61.setWarningMessages((java.util.List<java.lang.String>) strList81);
        java.util.List<java.lang.String> strList84 = importItem61.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_85 = getChartDataV2_30.setSpecimenIds(strList84);
        getExportObservations29.LabResultLaboratoryIds = strList84;
        getExportObservations29.SpecimenName = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.util.List<java.lang.String> strList89 = getExportObservations29.getAnalyticalGroupIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(getExportObservations29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(getChartDataV2_33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + importItemStatusType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType60.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem61);
        org.junit.Assert.assertNotNull(specimenTemplate68);
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(processor82);
        org.junit.Assert.assertNotNull(importItem83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(getChartDataV2_85);
        org.junit.Assert.assertNull(strList89);
    }

    @Test
    public void test49183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49183");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant1 = locationDatumPeriod0.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod3 = locationDatumPeriod0.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection4 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase5 = locationDatumPeriod0.setMeasurementDirection(measurementDirection4);
        java.lang.String str6 = locationDatumPeriod0.getAppliedByUser();
        java.time.Instant instant7 = locationDatumPeriod0.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum();
        java.lang.Double double9 = standardReferenceDatum8.getOffsetToBaseReference();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum11 = standardReferenceDatum8.setMethod("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.lang.String str12 = standardReferenceDatum8.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum14 = standardReferenceDatum8.setMethod("****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****");
        locationDatumPeriod0.ReferenceStandard = standardReferenceDatum14;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(locationDatumPeriod3);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str6, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNotNull(standardReferenceDatum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****" + "'", str12, "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        org.junit.Assert.assertNotNull(standardReferenceDatum14);
    }

    @Test
    public void test49184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49184");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setTemplateCreatedFrom(specimenTemplate4);
        putSpecimen0.Filtered = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity14 = null;
        putActivity13.PlannedActivity = plannedActivity14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity16.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity20 = postActivity16.setPlannedActivity(plannedActivity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag24 = samplingContextTag21.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag26 = samplingContextTag24.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str28 = samplingContextTag27.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str30 = samplingContextTag29.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        samplingContextTag29.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str34 = samplingContextTag33.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = samplingContextTag33.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag26, samplingContextTag27, samplingContextTag29, samplingContextTag36 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList38, samplingContextTagArray37);
        postActivity16.SamplingContextTags = samplingContextTagList38;
        putActivity13.SamplingContextTags = samplingContextTagList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = postActivity12.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList45, extendedAttributeArray44);
        postActivity43.ExtendedAttributes = extendedAttributeList45;
        postActivity42.ExtendedAttributes = extendedAttributeList45;
        putSpecimen0.ExtendedAttributes = extendedAttributeList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList51 = specimenWithObservations50.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations53 = specimenWithObservations50.setStatus(specimenViewStatusType52);
        specimenWithObservations50.Id = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime57 = activity56.getStartTime();
        java.time.OffsetDateTime offsetDateTime58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity59 = activity56.setStartTime(offsetDateTime58);
        specimenWithObservations50.Activity = activity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium61 = activity59.Medium;
        putSpecimen0.Activity = activity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen64 = putSpecimen0.setPreservative(preservativeType63);
        putSpecimen0.Id = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(samplingContextTag24);
        org.junit.Assert.assertNotNull(samplingContextTag26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(samplingContextTag36);
        org.junit.Assert.assertNotNull(samplingContextTagArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(postActivity42);
        org.junit.Assert.assertNotNull(extendedAttributeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(extendedAttributeList51);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations53);
        org.junit.Assert.assertNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(activity59);
        org.junit.Assert.assertNull(medium61);
        org.junit.Assert.assertNotNull(putSpecimen64);
    }

    @Test
    public void test49185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49185");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList3 = getObservationsV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        getObservationsV2_2.ResultGrades = strList15;
        getExtendedAttributeDropdownlistitems1.Search = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult21 = metricResult0.setMatchedObservations((java.util.List<java.lang.String>) strList15);
        metricResult21.OverriddenByUser = false;
        java.lang.Boolean boolean24 = metricResult21.getOverriddenByUser();
        java.lang.Double double25 = metricResult21.getScore();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = metricConfiguration26.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult28 = metricResult21.setMetricConfiguration(metricConfiguration26);
        metricResult21.OverriddenByUser = true;
        java.lang.Double double31 = metricResult21.getScore();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = metricConfiguration32.AuditAttributes;
        metricResult21.MetricConfiguration = metricConfiguration32;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(metricResult21);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
        org.junit.Assert.assertNull(double25);
        org.junit.Assert.assertNull(auditAttributes27);
        org.junit.Assert.assertNotNull(metricResult28);
        org.junit.Assert.assertNull(double31);
        org.junit.Assert.assertNull(auditAttributes33);
    }

    @Test
    public void test49186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49186");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectRelyingPartyConfiguration postOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectRelyingPartyConfiguration();
        postOpenIdConnectRelyingPartyConfiguration0.IssuerIdentifier = "/AQUARIUS/Provisioning/v1";
        java.lang.String str3 = postOpenIdConnectRelyingPartyConfiguration0.IssuerIdentifier;
        java.lang.String str4 = postOpenIdConnectRelyingPartyConfiguration0.getIdentifierClaim();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectRelyingPartyConfiguration postOpenIdConnectRelyingPartyConfiguration6 = postOpenIdConnectRelyingPartyConfiguration0.setIssuerIdentifier("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        postOpenIdConnectRelyingPartyConfiguration0.IssuerIdentifier = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str3, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postOpenIdConnectRelyingPartyConfiguration6);
    }

    @Test
    public void test49187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49187");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        getChartDataV2_0.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_9 = getChartDataV2_0.setDepthUnitId("/AQUARIUS/Provisioning/v1");
        getChartDataV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity14 = gageHeightAtZeroFlowActivity12.setApplicableSince(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity16 = gageHeightAtZeroFlowActivity14.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant18 = sensor17.getLastModifiedUtc();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor20 = sensor17.setLastModifiedUtc(instant19);
        java.time.Instant instant21 = sensor17.LastModifiedUtc;
        gageHeightAtZeroFlowActivity16.ApplicableSince = instant21;
        java.time.Instant instant23 = gageHeightAtZeroFlowActivity16.getApplicableSince();
        getChartDataV2_0.EndModificationTime = instant23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_27 = putUserV2_25.setCustomId("2021.4.62.0");
        java.lang.String str28 = putUserV2_25.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription32 = locationDescription30.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription34 = locationDescription32.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = reading35.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading38 = reading35.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading40 = reading38.setModel("MaxInstant");
        java.lang.Integer int41 = reading40.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField43.setDisplayName("");
        java.lang.Boolean boolean46 = extendedAttributeField45.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj48 = timeAlignedDataServiceRequest47.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = getObservationsV2_49.setDataClassifications((java.util.List<java.lang.String>) strList53);
        getObservationsV2_55.DepthUnitCustomId = "hi!";
        java.lang.String str58 = getObservationsV2_55.CustomId;
        java.util.List<java.lang.String> strList59 = getObservationsV2_55.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray70 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags66.setTagUniqueIds(strList71);
        getObservationsV2_60.QualityControlTypes = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_55.setMedia((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str77 = getObservationsV2_76.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        getObservationsV2_78.SpecimenIds = strList81;
        getObservationsV2_76.ProjectIds = strList81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = getObservationsV2_55.setObservedPropertyIds((java.util.List<java.lang.String>) strList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest86 = timeAlignedDataServiceRequest47.setTimeSeriesOutputUnitIds(strList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField87 = extendedAttributeField45.setValueOptions((java.util.List<java.lang.String>) strList81);
        putBulkEditResultGradesV2_42.AnalysisMethodSimpleIds = strList81;
        reading40.ReadingQualifiers = strList81;
        locationDescription34.SecondaryFolders = strList81;
        sensorsAndGaugesServiceRequest29.TagKeys = strList81;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest93 = sensorsAndGaugesServiceRequest29.setLocationIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.util.ArrayList<java.lang.String> strList94 = sensorsAndGaugesServiceRequest93.getLocationUniqueIds();
        java.util.ArrayList<java.lang.String> strList95 = sensorsAndGaugesServiceRequest93.getTagKeys();
        putUserV2_25.Roles = strList95;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_97 = getChartDataV2_0.setMedia((java.util.List<java.lang.String>) strList95);
        getChartDataV2_97.DetectionCondition = "http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getChartDataV2_9);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity14);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(sensor20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(putUserV2_27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2021.4.62.0" + "'", str28, "2021.4.62.0");
        org.junit.Assert.assertNotNull(locationDescription32);
        org.junit.Assert.assertNotNull(locationDescription34);
        org.junit.Assert.assertNull(doubleWithDisplay36);
        org.junit.Assert.assertNotNull(reading38);
        org.junit.Assert.assertNotNull(reading40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_85);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest86);
        org.junit.Assert.assertNotNull(extendedAttributeField87);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest93);
        org.junit.Assert.assertNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(getChartDataV2_97);
    }

    @Test
    public void test49188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49188");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty2.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration7 = metricConfiguration0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = metricConfiguration7.ObservedProperty;
        metricConfiguration7.UseScoreRanges = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation12.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation12.setCategoricalResult(categoricalResult15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList18, importHistoryEventSimpleArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation12.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList18);
        observedProperty11.ImportHistoryEventSimples = importHistoryEventSimpleList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = observedProperty11.getDefaultUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType23 = observedProperty11.AnalysisType;
        metricConfiguration7.ObservedProperty = observedProperty11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        unit25.CustomId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration28 = metricConfiguration7.setUnit(unit25);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNotNull(metricConfiguration7);
        org.junit.Assert.assertNotNull(observedProperty8);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNull(analysisType23);
        org.junit.Assert.assertNotNull(metricConfiguration28);
    }

    @Test
    public void test49189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49189");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str8 = postDetectioncondition0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = postDetectioncondition0.getAuditAttributes();
        postDetectioncondition0.CustomId = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.String str12 = postDetectioncondition0.CustomId;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues" + "'", str12, "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
    }

    @Test
    public void test49190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49190");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] activeMeterDetailsArray2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>) activeMeterDetailsList3, activeMeterDetailsArray2);
        activeMetersAndCalibrationsServiceResponse1.ActiveMeterDetails = activeMeterDetailsList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse6 = activeMetersAndCalibrationsServiceResponse0.setActiveMeterDetails(activeMeterDetailsList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList7 = activeMetersAndCalibrationsServiceResponse6.getActiveMeterDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] activeMeterDetailsArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>) activeMeterDetailsList10, activeMeterDetailsArray9);
        activeMetersAndCalibrationsServiceResponse8.ActiveMeterDetails = activeMeterDetailsList10;
        activeMetersAndCalibrationsServiceResponse6.ActiveMeterDetails = activeMeterDetailsList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList14 = activeMetersAndCalibrationsServiceResponse6.getActiveMeterDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] activeMeterDetailsArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>) activeMeterDetailsList18, activeMeterDetailsArray17);
        activeMetersAndCalibrationsServiceResponse16.ActiveMeterDetails = activeMeterDetailsList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse21 = activeMetersAndCalibrationsServiceResponse15.setActiveMeterDetails(activeMeterDetailsList18);
        activeMetersAndCalibrationsServiceResponse6.ActiveMeterDetails = activeMeterDetailsList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] activeMeterDetailsArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails> activeMeterDetailsList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails>) activeMeterDetailsList26, activeMeterDetailsArray25);
        activeMetersAndCalibrationsServiceResponse24.ActiveMeterDetails = activeMeterDetailsList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse29 = activeMetersAndCalibrationsServiceResponse23.setActiveMeterDetails(activeMeterDetailsList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMetersAndCalibrationsServiceResponse activeMetersAndCalibrationsServiceResponse30 = activeMetersAndCalibrationsServiceResponse6.setActiveMeterDetails(activeMeterDetailsList26);
        org.junit.Assert.assertNotNull(activeMeterDetailsArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(activeMetersAndCalibrationsServiceResponse6);
        org.junit.Assert.assertNotNull(activeMeterDetailsList7);
        org.junit.Assert.assertNotNull(activeMeterDetailsArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(activeMeterDetailsList14);
        org.junit.Assert.assertNotNull(activeMeterDetailsArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(activeMetersAndCalibrationsServiceResponse21);
        org.junit.Assert.assertNotNull(activeMeterDetailsArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(activeMetersAndCalibrationsServiceResponse29);
        org.junit.Assert.assertNotNull(activeMetersAndCalibrationsServiceResponse30);
    }

    @Test
    public void test49191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49191");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteApprovalLevel deleteApprovalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteApprovalLevel deleteApprovalLevel2 = deleteApprovalLevel0.setApprovalLevel((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteApprovalLevel deleteApprovalLevel4 = deleteApprovalLevel2.setApprovalLevel((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(deleteApprovalLevel2);
        org.junit.Assert.assertNotNull(deleteApprovalLevel4);
    }

    @Test
    public void test49192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49192");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip2 = postFieldTrip0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip4 = postFieldTrip0.setStartTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList7, plannedActivityArray6);
        putFieldVisit5.PlannedActivities = plannedActivityList7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment14 = domainObjectAttachment10.setAttachment(attachment13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str16 = domainObjectAttachment15.getId();
        java.lang.String str17 = domainObjectAttachment15.getId();
        domainObjectAttachment15.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment15.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        java.lang.String str24 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment26 = domainObjectAttachment22.setAttachment(attachment25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str28 = domainObjectAttachment27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        java.lang.String str31 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = domainObjectAttachment29.setAttachment(attachment32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str35 = domainObjectAttachment34.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment10, domainObjectAttachment15, domainObjectAttachment22, domainObjectAttachment27, domainObjectAttachment29, domainObjectAttachment34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList37, domainObjectAttachmentArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit39 = putFieldVisit5.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan40 = putFieldVisit5.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        domainObjectAttachment42.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = domainObjectAttachment42.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment41, domainObjectAttachment42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList50, domainObjectAttachmentArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit52 = putFieldVisit5.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList50);
        postFieldTrip4.Attachments = domainObjectAttachmentList50;
        java.time.OffsetDateTime offsetDateTime54 = postFieldTrip4.getStartTime();
        java.time.OffsetDateTime offsetDateTime55 = null;
        postFieldTrip4.StartTime = offsetDateTime55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip58 = postFieldTrip4.setParticipants("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str59 = postFieldTrip58.getParticipants();
        java.lang.String str60 = postFieldTrip58.getId();
        org.junit.Assert.assertNotNull(postFieldTrip2);
        org.junit.Assert.assertNotNull(postFieldTrip4);
        org.junit.Assert.assertNotNull(plannedActivityArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(domainObjectAttachment26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachment33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putFieldVisit39);
        org.junit.Assert.assertNull(samplingPlan40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment48);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putFieldVisit52);
        org.junit.Assert.assertNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(postFieldTrip58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str59, "****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str60, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test49193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49193");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.Boolean boolean2 = role0.CanAddData;
        java.lang.Boolean boolean3 = role0.CanEditAppendConfigurations;
        role0.CanRemoveFieldVisits = true;
        java.lang.Boolean boolean6 = role0.isCanReadData();
        java.lang.String str7 = role0.UniqueId;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test49194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49194");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        postActivity0.ExtendedAttributes = extendedAttributeList5;
        java.time.OffsetDateTime offsetDateTime7 = postActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit8 = postActivity0.getFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = postActivity0.Device;
        java.lang.String str10 = postActivity0.Comment;
        java.lang.String str11 = postActivity0.Comment;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(fieldVisit8);
        org.junit.Assert.assertNull(device9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test49195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49195");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = correctionOperation0.setType(correctionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap;
        correctionOperation2.Type = correctionType3;
        java.lang.Integer int5 = correctionOperation2.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType6 = correctionOperation2.getOperationType();
        correctionOperation2.User = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertTrue("'" + correctionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation2);
        org.junit.Assert.assertTrue("'" + correctionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap + "'", correctionType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap));
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(metadataChangeOperationType6);
    }

    @Test
    public void test49196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49196");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon19 = putTaxon0.setItisComment("multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNotNull(putTaxon19);
    }

    @Test
    public void test49197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49197");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest2 = trendLineAnalysisServiceRequest0.setType(trendLineAnalysisType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType3 = trendLineAnalysisServiceRequest2.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest6 = trendLineAnalysisServiceRequest4.setType(trendLineAnalysisType5);
        java.time.Instant instant7 = trendLineAnalysisServiceRequest6.QueryFrom;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList9 = timeSeriesDataServiceResponse8.getInterpolationTypes();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance> gapToleranceList10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse11 = timeSeriesDataServiceResponse8.setGapTolerances(gapToleranceList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str13 = approval12.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str15 = approval14.User;
        approval14.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval19 = approval14.setApprovalLevel((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str21 = approval20.User;
        java.lang.String str22 = approval20.Comment;
        java.lang.String str23 = approval20.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str26 = approval25.User;
        approval25.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval30 = approval25.setApprovalLevel((java.lang.Integer) 4);
        java.lang.String str31 = approval25.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction approvalsTransaction32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str34 = approval33.User;
        approval33.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] approvalArray37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] { approval12, approval14, approval20, approval24, approval25, approvalsTransaction32, approval33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>) approvalList38, approvalArray37);
        timeSeriesDataServiceResponse8.Approvals = approvalList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset42 = timeSeriesPoint41.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = reading43.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading46 = reading43.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading48 = reading46.setModel("MaxInstant");
        reading48.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant51 = reading48.Time;
        java.lang.String str52 = reading48.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading48.Value = doubleWithDisplay53;
        timeSeriesPoint41.Value = doubleWithDisplay53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset57 = timeSeriesPoint56.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay59 = reading58.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading61 = reading58.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading63 = reading61.setModel("MaxInstant");
        reading63.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant66 = reading63.Time;
        java.lang.String str67 = reading63.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading63.Value = doubleWithDisplay68;
        timeSeriesPoint56.Value = doubleWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset72 = null;
        timeSeriesPoint71.Timestamp = statisticalDateTimeOffset72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint75 = timeSeriesPoint71.setTimestamp(statisticalDateTimeOffset74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset77 = null;
        timeSeriesPoint76.Timestamp = statisticalDateTimeOffset77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint80 = timeSeriesPoint76.setTimestamp(statisticalDateTimeOffset79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset82 = null;
        timeSeriesPoint81.Timestamp = statisticalDateTimeOffset82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint85 = timeSeriesPoint81.setTimestamp(statisticalDateTimeOffset84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] timeSeriesPointArray86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] { timeSeriesPoint41, timeSeriesPoint56, timeSeriesPoint75, timeSeriesPoint80, timeSeriesPoint85 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList87 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>) timeSeriesPointList87, timeSeriesPointArray86);
        timeSeriesDataServiceResponse8.Points = timeSeriesPointList87;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest90 = trendLineAnalysisServiceRequest6.setPoints(timeSeriesPointList87);
        trendLineAnalysisServiceRequest2.Points = timeSeriesPointList87;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList92 = trendLineAnalysisServiceRequest2.Points;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList93 = trendLineAnalysisServiceRequest2.Points;
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest2);
        org.junit.Assert.assertNull(trendLineAnalysisType3);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(interpolationTypeList9);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(approval19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(approval30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(approvalArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(statisticalDateTimeOffset42);
        org.junit.Assert.assertNull(doubleWithDisplay44);
        org.junit.Assert.assertNotNull(reading46);
        org.junit.Assert.assertNotNull(reading48);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(statisticalDateTimeOffset57);
        org.junit.Assert.assertNull(doubleWithDisplay59);
        org.junit.Assert.assertNotNull(reading61);
        org.junit.Assert.assertNotNull(reading63);
        org.junit.Assert.assertNull(instant66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(timeSeriesPoint75);
        org.junit.Assert.assertNotNull(timeSeriesPoint80);
        org.junit.Assert.assertNotNull(timeSeriesPoint85);
        org.junit.Assert.assertNotNull(timeSeriesPointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest90);
        org.junit.Assert.assertNotNull(timeSeriesPointList92);
        org.junit.Assert.assertNotNull(timeSeriesPointList93);
    }

    @Test
    public void test49198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49198");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList1 = postUserV2_0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_3 = postUserV2_0.setEmail("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        postUserV2_0.CustomId = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postUserV2_3);
    }

    @Test
    public void test49199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49199");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor13 = processor11.setDescription("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange14 = processor13.ProcessorPeriod;
        java.util.HashMap<java.lang.String, java.lang.String> strMap15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor16 = processor13.setSettings(strMap15);
        processor16.ProcessorType = "MinInstant";
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNotNull(processor13);
        org.junit.Assert.assertNull(timeRange14);
        org.junit.Assert.assertNotNull(processor16);
    }

    @Test
    public void test49200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49200");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.time.Instant instant1 = deleteObservationsV2_0.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str3 = deleteFieldVisits2.Sort;
        java.util.List<java.lang.String> strList4 = deleteFieldVisits2.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.ActivityIds = strList17;
        getExportSamplingLocations5.SamplingLocationGroupIds = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits22 = deleteFieldVisits2.setPlanningStatuses((java.util.List<java.lang.String>) strList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_23.setDataClassifications((java.util.List<java.lang.String>) strList27);
        getObservationsV2_29.DepthUnitCustomId = "hi!";
        java.lang.String str32 = getObservationsV2_29.DepthUnitId;
        java.util.List<java.lang.String> strList33 = getObservationsV2_29.LabResultLaboratoryIds;
        getObservationsV2_29.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int36 = getObservationsV2_29.Limit;
        java.time.Instant instant37 = getObservationsV2_29.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField40 = extendedAttributeField38.setDisplayName("");
        java.lang.Boolean boolean41 = extendedAttributeField40.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj43 = timeAlignedDataServiceRequest42.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        getObservationsV2_50.DepthUnitCustomId = "hi!";
        java.lang.String str53 = getObservationsV2_50.CustomId;
        java.util.List<java.lang.String> strList54 = getObservationsV2_50.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_50.setMedia((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str72 = getObservationsV2_71.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        getObservationsV2_71.ProjectIds = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_50.setObservedPropertyIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest81 = timeAlignedDataServiceRequest42.setTimeSeriesOutputUnitIds(strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField82 = extendedAttributeField40.setValueOptions((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField84 = extendedAttributeField82.setIsReadOnly((java.lang.Boolean) false);
        java.util.List<java.lang.String> strList85 = extendedAttributeField84.ValueOptions;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_86 = getObservationsV2_29.setAnalyticalGroupIds(strList85);
        deleteFieldVisits22.ScheduleIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_88 = deleteObservationsV2_0.setActivityTypes(strList85);
        java.time.Instant instant89 = deleteObservationsV2_88.getStartObservedTime();
        java.lang.String str90 = deleteObservationsV2_88.Cursor;
        java.lang.String str91 = deleteObservationsV2_88.getFieldVisitId();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(deleteFieldVisits22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(instant37);
        org.junit.Assert.assertNotNull(extendedAttributeField40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest81);
        org.junit.Assert.assertNotNull(extendedAttributeField82);
        org.junit.Assert.assertNotNull(extendedAttributeField84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(getObservationsV2_86);
        org.junit.Assert.assertNotNull(deleteObservationsV2_88);
        org.junit.Assert.assertNull(instant89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test49201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49201");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit9 = ratingCurve0.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve11 = ratingCurve0.setInputParameter(parameterWithUnit10);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList12 = ratingCurve0.getPeriodsOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType13 = ratingCurve0.Type;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNotNull(parameterWithUnit9);
        org.junit.Assert.assertNotNull(ratingCurve11);
        org.junit.Assert.assertNull(periodOfApplicabilityList12);
        org.junit.Assert.assertNull(ratingCurveType13);
    }

    @Test
    public void test49202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49202");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int1 = samplingLocationImportSummary0.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList2 = samplingLocationImportSummary0.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = samplingLocationImportSummary0.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = samplingLocationImportSummary0.getImportHistoryEventSimple();
        samplingLocationImportSummary0.InvalidRowsCsvUrl = "";
        samplingLocationImportSummary0.NewCount = 4;
        java.lang.Integer int9 = samplingLocationImportSummary0.getSuccessCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary11 = samplingLocationImportSummary0.setSkippedCount((java.lang.Integer) 0);
        java.lang.String str12 = samplingLocationImportSummary11.InvalidRowsCsvUrl;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(importItemSamplingLocationList2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(importHistoryEventSimple4);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test49203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49203");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setComments("");
        java.lang.String str8 = sensor0.getParameterId();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test49204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49204");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip2 = postFieldTrip0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip4 = postFieldTrip0.setStartTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip6 = postFieldTrip4.setId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postFieldTrip6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip9 = postFieldTrip6.setParticipants("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime11 = fieldTripBasic10.getEndTime();
        java.lang.String str12 = fieldTripBasic10.Participants;
        fieldTripBasic10.Notes = "'.'SSSSSSS";
        java.lang.String str15 = fieldTripBasic10.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str17 = domainObjectAttachment16.getId();
        java.lang.String str18 = domainObjectAttachment16.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment19 = null;
        domainObjectAttachment16.Attachment = attachment19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str22 = domainObjectAttachment21.getId();
        domainObjectAttachment21.Id = "2021.4.62.0";
        java.lang.String str25 = domainObjectAttachment21.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str27 = domainObjectAttachment26.getId();
        java.lang.String str28 = domainObjectAttachment26.getId();
        domainObjectAttachment26.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = domainObjectAttachment26.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = domainObjectAttachment32.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str36 = domainObjectAttachment35.getId();
        java.lang.String str37 = domainObjectAttachment35.getId();
        domainObjectAttachment35.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment35.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = domainObjectAttachment41.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str46 = domainObjectAttachment45.getId();
        java.lang.String str47 = domainObjectAttachment45.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment48 = null;
        domainObjectAttachment45.Attachment = attachment48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment16, domainObjectAttachment21, domainObjectAttachment32, domainObjectAttachment41, domainObjectAttachment44, domainObjectAttachment45, domainObjectAttachment50 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList54, domainObjectAttachmentArray53);
        fieldTripBasic10.Attachments = domainObjectAttachmentList54;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList57 = fieldTripBasic10.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip58 = postFieldTrip6.setAttachments(domainObjectAttachmentList57);
        java.lang.String str59 = postFieldTrip6.Participants;
        org.junit.Assert.assertNotNull(postFieldTrip2);
        org.junit.Assert.assertNotNull(postFieldTrip4);
        org.junit.Assert.assertNotNull(postFieldTrip6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(postFieldTrip9);
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2021.4.62.0" + "'", str25, "2021.4.62.0");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(domainObjectAttachment32);
        org.junit.Assert.assertNotNull(domainObjectAttachment34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNotNull(domainObjectAttachment43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList57);
        org.junit.Assert.assertNotNull(postFieldTrip58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****" + "'", str59, "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
    }

    @Test
    public void test49205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49205");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str2 = getObservationsV2_1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        getObservationsV2_1.ProjectIds = strList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_10 = putBulkEditResultGradesV2_0.setTaxonIds((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList11 = putBulkEditResultGradesV2_0.getResultStatuses();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase14 = roleFlattened12.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean15 = roleFlattened12.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str17 = deleteFieldVisits16.Sort;
        deleteFieldVisits16.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        java.util.List<java.lang.String> strList27 = getObservationsV2_20.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary28.Reviewer = "";
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary28.MeasurementTime = instant31;
        getObservationsV2_20.StartResultTime = instant31;
        java.lang.String[] strArray43 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_20.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList44);
        deleteFieldVisits16.PlanningStatuses = strList44;
        roleFlattened12.RoleApprovalTransitions = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean51 = roleFlattened50.CanRemoveFieldVisits;
        roleFlattened50.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str55 = putLocationType54.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_56.setDataClassifications((java.util.List<java.lang.String>) strList60);
        getObservationsV2_62.DepthUnitCustomId = "hi!";
        java.lang.String str65 = getObservationsV2_62.CustomId;
        java.util.List<java.lang.String> strList66 = getObservationsV2_62.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        getObservationsV2_67.QualityControlTypes = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = getObservationsV2_62.setMedia((java.util.List<java.lang.String>) strList78);
        putLocationType54.ExtendedAttributeDefinitionIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase84 = roleFlattened50.setRoleApprovalTransitions(strList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits85 = deleteFieldVisits49.setIds((java.util.List<java.lang.String>) strList78);
        roleFlattened12.RoleApprovalTransitions = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_87 = putBulkEditResultGradesV2_0.setSamplingContextTagIds((java.util.List<java.lang.String>) strList78);
        java.util.List<java.lang.String> strList88 = putBulkEditResultGradesV2_87.CollectionMethodIds;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(roleFlattenedBase14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(getObservationsV2_82);
        org.junit.Assert.assertNotNull(roleFlattenedBase84);
        org.junit.Assert.assertNotNull(deleteFieldVisits85);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_87);
        org.junit.Assert.assertNull(strList88);
    }

    @Test
    public void test49206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49206");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = taxonImportSummary0.getImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary5 = taxonImportSummary0.setUpdateCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary7 = taxonImportSummary0.setSummaryReportText("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Integer int8 = taxonImportSummary7.ErrorCount;
        org.junit.Assert.assertNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(taxonImportSummary5);
        org.junit.Assert.assertNotNull(taxonImportSummary7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test49207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49207");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = observationNestedInSpecimen0.getLabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observationNestedInSpecimen0.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = observationNestedInSpecimen0.getObservedProperty();
        java.lang.String str6 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus7.SystemCode = resultStatusSystemCodeType8;
        resultStatus7.CustomId = "-PT87591240H";
        observationNestedInSpecimen0.ResultStatus = resultStatus7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = observationNestedInSpecimen0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str16 = postLaboratory15.Address;
        java.lang.String str17 = postLaboratory15.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity20 = samplingPlanPlannedActivity18.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = auditAttributes21.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity20.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = samplingPlanPlannedActivity20.AuditAttributes;
        postLaboratory15.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory28 = postLaboratory15.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon30 = taxonomicResult29.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = taxonomicResult29.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan33.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType36 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan33.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup38 = samplingPlan33.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan40 = samplingPlan33.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag41 = putTag32.setAuditAttributes(auditAttributes39);
        taxonomicResult29.AuditAttributes = auditAttributes39;
        postLaboratory28.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_44 = putObservationV2_14.setAuditAttributes(auditAttributes39);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList45 = putObservationV2_44.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade48 = resultGrade46.setId("/AQUARIUS/Provisioning/v1");
        putObservationV2_44.ResultGrade = resultGrade48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_52 = postObservationV2_50.setLabInstruction(labInstruction51);
        java.lang.String str53 = postObservationV2_52.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod54 = postObservationV2_52.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation55.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = observation55.setCategoricalResult(categoricalResult58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType60 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation55.DataClassification = dataClassificationType60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_62 = postObservationV2_52.setDataClassification(dataClassificationType60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_63 = putObservationV2_44.setDataClassification(dataClassificationType60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult64 = putObservationV2_44.getTaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList66 = fieldVisit65.Attachments;
        java.time.OffsetDateTime offsetDateTime67 = null;
        fieldVisit65.EndTime = offsetDateTime67;
        java.lang.String str69 = fieldVisit65.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit71 = fieldVisit65.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan72.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType75 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan72.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup77 = samplingPlan72.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = samplingPlan72.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup79 = samplingPlan72.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan81 = samplingPlan72.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit82 = fieldVisit71.setSamplingPlan(samplingPlan72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_83 = putObservationV2_44.setFieldVisit(fieldVisit82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation84 = putObservationV2_83.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus86 = observationNestedInSpecimen85.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus87 = observationNestedInSpecimen85.getResultStatus();
        java.time.OffsetDateTime offsetDateTime88 = null;
        observationNestedInSpecimen85.ObservedTime = offsetDateTime88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty90 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen91 = observationNestedInSpecimen85.setObservedProperty(observedProperty90);
        putObservationV2_83.ObservedProperty = observedProperty90;
        observationNestedInSpecimen0.ObservedProperty = observedProperty90;
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(labInstruction2);
        org.junit.Assert.assertNull(observedProperty5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(observedProperty13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity20);
        org.junit.Assert.assertNotNull(auditAttributes23);
        org.junit.Assert.assertNotNull(auditAttributes25);
        org.junit.Assert.assertNotNull(postLaboratory28);
        org.junit.Assert.assertNull(taxon30);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup38);
        org.junit.Assert.assertNotNull(samplingPlan40);
        org.junit.Assert.assertNotNull(putTag41);
        org.junit.Assert.assertNotNull(putObservationV2_44);
        org.junit.Assert.assertNull(ruleValidationDetailsList45);
        org.junit.Assert.assertNotNull(resultGrade48);
        org.junit.Assert.assertNotNull(postObservationV2_52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(collectionMethod54);
        org.junit.Assert.assertNotNull(observation59);
        org.junit.Assert.assertTrue("'" + dataClassificationType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType60.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_62);
        org.junit.Assert.assertNotNull(putObservationV2_63);
        org.junit.Assert.assertNull(taxonomicResult64);
        org.junit.Assert.assertNull(domainObjectAttachmentList66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(fieldVisit71);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType75 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType75.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup77);
        org.junit.Assert.assertNull(auditAttributes78);
        org.junit.Assert.assertNull(samplingLocationGroup79);
        org.junit.Assert.assertNotNull(samplingPlan81);
        org.junit.Assert.assertNotNull(fieldVisit82);
        org.junit.Assert.assertNotNull(putObservationV2_83);
        org.junit.Assert.assertNull(samplingLocation84);
        org.junit.Assert.assertNull(resultStatus86);
        org.junit.Assert.assertNull(resultStatus87);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen91);
    }

    @Test
    public void test49208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49208");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType3 = fieldVisitSimple0.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple5 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple6 = fieldVisitSimple5.FieldTrip;
        fieldVisitSimple5.Participants = "****b4959745-e712-43bc-98bb-4017f673cd3d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList11, plannedActivityArray10);
        putFieldVisit9.PlannedActivities = plannedActivityList11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str15 = domainObjectAttachment14.getId();
        java.lang.String str16 = domainObjectAttachment14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = domainObjectAttachment14.setAttachment(attachment17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str20 = domainObjectAttachment19.getId();
        java.lang.String str21 = domainObjectAttachment19.getId();
        domainObjectAttachment19.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = domainObjectAttachment19.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str27 = domainObjectAttachment26.getId();
        java.lang.String str28 = domainObjectAttachment26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = domainObjectAttachment26.setAttachment(attachment29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str34 = domainObjectAttachment33.getId();
        java.lang.String str35 = domainObjectAttachment33.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = domainObjectAttachment33.setAttachment(attachment36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment14, domainObjectAttachment19, domainObjectAttachment26, domainObjectAttachment31, domainObjectAttachment33, domainObjectAttachment38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList41, domainObjectAttachmentArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit43 = putFieldVisit9.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan44 = putFieldVisit9.getSamplingPlan();
        java.time.OffsetDateTime offsetDateTime45 = null;
        putFieldVisit9.EndTime = offsetDateTime45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = putFieldVisit9.setId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple49 = putFieldVisit9.getFieldTrip();
        java.time.OffsetDateTime offsetDateTime50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit51 = putFieldVisit9.setEndTime(offsetDateTime50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str53 = projectSimple52.Name;
        putFieldVisit9.Project = projectSimple52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit58 = fieldVisit56.setFieldTrip(fieldTripSimple57);
        java.lang.String str59 = fieldVisit58.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit60.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit64 = putFieldVisit60.setProject(projectSimple63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType65 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit66 = putFieldVisit60.setPlanningStatus(planningStatusType65);
        fieldVisit58.PlanningStatus = planningStatusType65;
        fieldVisitSimple55.PlanningStatus = planningStatusType65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit69 = putFieldVisit9.setPlanningStatus(planningStatusType65);
        fieldVisitSimple5.PlanningStatus = planningStatusType65;
        org.junit.Assert.assertNull(planningStatusType3);
        org.junit.Assert.assertNotNull(fieldVisitSimple5);
        org.junit.Assert.assertNull(fieldTripSimple6);
        org.junit.Assert.assertNotNull(plannedActivityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(domainObjectAttachment18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(domainObjectAttachment25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(domainObjectAttachment30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(domainObjectAttachment37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(putFieldVisit43);
        org.junit.Assert.assertNull(samplingPlan44);
        org.junit.Assert.assertNotNull(putFieldVisit48);
        org.junit.Assert.assertNull(fieldTripSimple49);
        org.junit.Assert.assertNotNull(putFieldVisit51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(fieldVisit58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(putFieldVisit64);
        org.junit.Assert.assertTrue("'" + planningStatusType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED + "'", planningStatusType65.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED));
        org.junit.Assert.assertNotNull(putFieldVisit66);
        org.junit.Assert.assertNotNull(putFieldVisit69);
    }

    @Test
    public void test49209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49209");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = locationGroupType2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType5 = locationGroupType2.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup0.LocationGroupType = locationGroupType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup8 = postSamplingLocationGroup0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity12 = samplingPlanPlannedActivity10.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = auditAttributes13.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity12.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = samplingPlanPlannedActivity12.AuditAttributes;
        putAccessGroup9.AuditAttributes = auditAttributes17;
        postSamplingLocationGroup0.AuditAttributes = auditAttributes17;
        java.lang.String str20 = postSamplingLocationGroup0.Description;
        java.lang.String str21 = postSamplingLocationGroup0.getName();
        java.lang.String str22 = postSamplingLocationGroup0.getDescription();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(locationGroupType5);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup8);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity12);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNotNull(auditAttributes17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test49210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49210");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser2 = postUser0.setUserProfile(userProfile1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile3 = postUser0.UserProfile;
        java.util.List<java.lang.String> strList4 = postUser0.getRoles();
        postUser0.CustomId = "";
        java.util.List<java.lang.String> strList7 = postUser0.AccessGroups;
        org.junit.Assert.assertNotNull(postUser2);
        org.junit.Assert.assertNull(userProfile3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test49211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49211");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate3 = specimenTemplate1.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate3.Preservative = preservativeType4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails6.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails8.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = specimenTemplate3.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition12 = postDetectioncondition0.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition14 = postDetectioncondition0.setDescription("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition16 = postDetectioncondition14.setName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str17 = postDetectioncondition14.Description;
        org.junit.Assert.assertNotNull(specimenTemplate3);
        org.junit.Assert.assertTrue("'" + preservativeType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails8);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertNotNull(specimenTemplate11);
        org.junit.Assert.assertNotNull(postDetectioncondition12);
        org.junit.Assert.assertNotNull(postDetectioncondition14);
        org.junit.Assert.assertNotNull(postDetectioncondition16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****" + "'", str17, "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
    }

    @Test
    public void test49212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49212");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        getObservationsV2_0.SpecimenIds = strList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        getObservationsV2_0.ActivityIds = strList11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_0.setActivityCustomId("/AQUARIUS/Acquisition/v2");
        getObservationsV2_0.Sort = "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****";
        java.util.List<java.lang.String> strList19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_0.setActivityTypes(strList19);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
    }

    @Test
    public void test49213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49213");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_0.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType5 = null;
        controlConditionActivity4.ControlCleaned = controlCleanedType5;
        java.lang.String str7 = controlConditionActivity4.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        controlConditionActivity4.DateCleaned = instant11;
        gageHeightReading3.ReadingTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = doubleWithDisplay15.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str18 = doubleWithDisplay17.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading19 = gageHeightReading3.setGageHeight(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setMeanGageHeightMethod("hi!");
        java.lang.String str24 = dischargeSummary23.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary23.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType28 = calibrationCheck27.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = calibrationCheck27.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse34.setNextToken(instant35);
        dischargeSummary31.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse30.setNextToken(instant35);
        java.time.Instant instant39 = locationDescriptionListServiceResponse30.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck27.setTime(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary23.setMeasurementTime(instant39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_42 = getChartDataV2_20.setStartResultTime(instant39);
        gageHeightReading3.ReadingTime = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_44 = getChartDataV2_0.setStartObservedTime(instant39);
        getChartDataV2_0.CustomId = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType47 = getChartDataV2_0.FieldResultType;
        java.lang.String str48 = getChartDataV2_0.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_50 = getChartDataV2_0.setImportHistoryEventId("9999-12-31T23:59:59.999Z");
        java.lang.String str51 = getChartDataV2_0.Sort;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(doubleWithDisplay17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(gageHeightReading19);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(calibrationCheckType28);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(getChartDataV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_44);
        org.junit.Assert.assertNull(fieldResultType47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(getChartDataV2_50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test49214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49214");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceResponse effectiveRatingCurveServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType2 = expandedRatingCurve1.Type;
        expandedRatingCurve1.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve6 = expandedRatingCurve1.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList7 = expandedRatingCurve6.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList8 = expandedRatingCurve6.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve10 = expandedRatingCurve6.setId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit11 = expandedRatingCurve6.getInputParameter();
        effectiveRatingCurveServiceResponse0.ExpandedRatingCurve = expandedRatingCurve6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType13 = expandedRatingCurve6.Type;
        expandedRatingCurve6.Remarks = "MinInstant";
        org.junit.Assert.assertNull(ratingCurveType2);
        org.junit.Assert.assertNotNull(expandedRatingCurve6);
        org.junit.Assert.assertNull(ratingShiftList7);
        org.junit.Assert.assertNull(ratingShiftList8);
        org.junit.Assert.assertNotNull(expandedRatingCurve10);
        org.junit.Assert.assertNull(parameterWithUnit11);
        org.junit.Assert.assertNull(ratingCurveType13);
    }

    @Test
    public void test49215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49215");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties();
        java.lang.String str1 = getObservedProperties0.CustomId;
        java.util.List<java.lang.String> strList2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties3 = getObservedProperties0.setSearch(strList2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        getChartDataV2_4.ObservedPropertyIds = strList23;
        getChartDataV2_4.SpecimenName = "MinDuration";
        java.lang.Integer int32 = getChartDataV2_4.Limit;
        java.util.List<java.lang.String> strList33 = getChartDataV2_4.AnalysisMethodSimpleIds;
        java.util.List<java.lang.String> strList34 = getChartDataV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_36 = getChartDataV2_4.setNumericResultValue((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_38 = getChartDataV2_4.setDetectionCondition("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList40 = getSpecimens39.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens42 = getSpecimens39.setSort("MinDuration");
        java.lang.Integer int43 = getSpecimens42.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList45 = getObservationsV2_44.SamplingContextTagIds;
        java.time.Instant instant46 = getObservationsV2_44.getEndModificationTime();
        java.util.List<java.lang.String> strList47 = getObservationsV2_44.Media;
        java.util.List<java.lang.String> strList48 = getObservationsV2_44.ActivityTypes;
        java.util.List<java.lang.String> strList49 = getObservationsV2_44.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_50.setDataClassifications((java.util.List<java.lang.String>) strList54);
        getObservationsV2_56.DepthUnitCustomId = "hi!";
        java.lang.String str59 = getObservationsV2_56.DepthUnitId;
        java.util.List<java.lang.String> strList60 = getObservationsV2_56.getDataClassifications();
        getObservationsV2_44.AnalyticalGroupIds = strList60;
        getSpecimens42.FieldTripIds = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_63 = getChartDataV2_38.setLabReportIds(strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties64 = getObservedProperties3.setSearch(strList60);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getObservedProperties3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(getChartDataV2_36);
        org.junit.Assert.assertNotNull(getChartDataV2_38);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(getSpecimens42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(getChartDataV2_63);
        org.junit.Assert.assertNotNull(getObservedProperties64);
    }

    @Test
    public void test49216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49216");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str1 = postExtendedAttribute0.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute3 = postExtendedAttribute0.setVisibleInDatasetList((java.lang.Boolean) true);
        java.lang.Boolean boolean4 = editableExtendedAttribute3.isRequired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability6 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList8, extendedAttributeApplicabilityArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes10 = getExtendedAttributes5.setApplicability(extendedAttributeApplicabilityList8);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList11 = null;
        getExtendedAttributes10.Applicability = extendedAttributeApplicabilityList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability14 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList16, extendedAttributeApplicabilityArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes18 = getExtendedAttributes13.setApplicability(extendedAttributeApplicabilityList16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes19 = getExtendedAttributes10.setApplicability(extendedAttributeApplicabilityList16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute20 = editableExtendedAttribute3.setApplicability(extendedAttributeApplicabilityList16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList24, extendedAttributeApplicabilityArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes26 = getExtendedAttributes21.setApplicability(extendedAttributeApplicabilityList24);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList27 = null;
        getExtendedAttributes26.Applicability = extendedAttributeApplicabilityList27;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList29 = getExtendedAttributes26.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList33, extendedAttributeApplicabilityArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes35 = getExtendedAttributes30.setApplicability(extendedAttributeApplicabilityList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability37 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList39, extendedAttributeApplicabilityArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes41 = getExtendedAttributes36.setApplicability(extendedAttributeApplicabilityList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes42 = getExtendedAttributes35.setApplicability(extendedAttributeApplicabilityList39);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList43 = getExtendedAttributes35.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes44 = getExtendedAttributes26.setApplicability(extendedAttributeApplicabilityList43);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList45 = getExtendedAttributes26.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute46 = editableExtendedAttribute3.setApplicability(extendedAttributeApplicabilityList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute48 = editableExtendedAttribute3.setVisibleInDatasetList((java.lang.Boolean) true);
        editableExtendedAttribute48.VisibleInDatasetList = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(editableExtendedAttribute3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes10);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes18);
        org.junit.Assert.assertNotNull(getExtendedAttributes19);
        org.junit.Assert.assertNotNull(editableExtendedAttribute20);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes26);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList29);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes35);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes41);
        org.junit.Assert.assertNotNull(getExtendedAttributes42);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList43);
        org.junit.Assert.assertNotNull(getExtendedAttributes44);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList45);
        org.junit.Assert.assertNotNull(editableExtendedAttribute46);
        org.junit.Assert.assertNotNull(editableExtendedAttribute48);
    }

    @Test
    public void test49217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49217");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        labInstructionMinimal0.AnalysisMethod = analysisMethodMinimal1;
        java.lang.String str3 = analysisMethodMinimal1.Name;
        analysisMethodMinimal1.Id = "/AQUARIUS/Acquisition/v2";
        java.lang.String str6 = analysisMethodMinimal1.getName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test49218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49218");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit0.setEndTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str39 = metricConfiguration38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty40.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration43 = metricConfiguration38.setObservedProperty(observedProperty40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType44 = observedProperty40.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup46 = postObservedProperty45.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = null;
        quantity47.Unit = unit48;
        postObservedProperty45.LowerLimit = quantity47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = postObservedProperty45.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = quantity51.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = observedProperty40.setUpperLimit(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = samplingLocation37.setElevation(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit55 = putFieldVisit36.setSamplingLocation(samplingLocation37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple56 = putFieldVisit36.getFieldTrip();
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit58 = putFieldVisit36.setEndTime(offsetDateTime57);
        putFieldVisit58.Id = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(metricConfiguration43);
        org.junit.Assert.assertNull(resultType44);
        org.junit.Assert.assertNull(unitGroup46);
        org.junit.Assert.assertNotNull(quantity51);
        org.junit.Assert.assertNull(unit52);
        org.junit.Assert.assertNotNull(observedProperty53);
        org.junit.Assert.assertNotNull(samplingLocation54);
        org.junit.Assert.assertNotNull(putFieldVisit55);
        org.junit.Assert.assertNull(fieldTripSimple56);
        org.junit.Assert.assertNotNull(putFieldVisit58);
    }

    @Test
    public void test49219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49219");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        java.lang.String str16 = timeSeries0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str18 = timeSeries17.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary21.Reviewer = "";
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary21.MeasurementTime = instant24;
        postRecurringReport20.NextGenerationDate = instant24;
        java.time.Instant instant27 = postRecurringReport20.getNextGenerationDate();
        java.lang.String str28 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant27);
        metadataChangeTransactionListServiceRequest19.QueryFrom = instant27;
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest31 = metadataChangeTransactionListServiceRequest19.setQueryFrom(instant30);
        timeSeries17.LastModifiedTime = instant30;
        timeSeries17.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries36 = timeSeries17.setUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries38 = timeSeries36.setLocationName("hi!");
        java.lang.String str39 = timeSeries38.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType timeSeriesType40 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived;
        timeSeries38.TimeSeriesType = timeSeriesType40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries42 = timeSeries0.setTimeSeriesType(timeSeriesType40);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList43 = timeSeries0.ExtendedAttributeValues;
        timeSeries0.LocationIdentifier = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        timeSeries0.Identifier = "MinInstant";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str28, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest31);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(timeSeries38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2021.4.62.0" + "'", str39, "2021.4.62.0");
        org.junit.Assert.assertTrue("'" + timeSeriesType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived + "'", timeSeriesType40.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.ProcessorDerived));
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertNull(extendedAttributeValueList43);
    }

    @Test
    public void test49220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49220");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.Qualifiers4 = "https";
        java.lang.String str10 = timeAlignedPoint0.Method3;
        java.lang.String str11 = timeAlignedPoint0.getMethod8();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test49221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49221");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setPlannedActivity(plannedActivity4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType6 = postActivity1.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList13 = specimenTemplate12.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList19 = specimenTemplate18.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate8, specimenTemplate11, specimenTemplate12, specimenTemplate16, specimenTemplate17, specimenTemplate18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21, specimenTemplateArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = postFieldVisitActivityWithTemplate7.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate23.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity1.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity1.Medium = medium27;
        medium27.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType32 = analyticalGroup31.getType();
        analyticalGroup31.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        java.lang.String str46 = analyticalGroupItem41.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem36, analyticalGroupItem38, analyticalGroupItem41, analyticalGroupItem47, analyticalGroupItem50, analyticalGroupItem52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58, analyticalGroupItemArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup60 = analyticalGroup35.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58);
        analyticalGroup31.AnalyticalGroupItems = analyticalGroupItemList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup31.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium64 = medium27.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute65 = putExtendedAttribute0.setAuditAttributes(auditAttributes62);
        putExtendedAttribute65.Mandatory = true;
        java.lang.String str68 = putExtendedAttribute65.getCustomId();
        putExtendedAttribute65.Mandatory = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute72 = putExtendedAttribute65.setMandatory((java.lang.Boolean) false);
        java.lang.Boolean boolean73 = putExtendedAttribute72.getMandatory();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList74 = putExtendedAttribute72.DropDownListItems;
        putExtendedAttribute72.Description = "9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNull(activityType6);
        org.junit.Assert.assertNull(labInstructionTemplateList13);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNull(labInstructionTemplateList19);
        org.junit.Assert.assertNotNull(specimenTemplateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(analyticalGroupType32);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(analyticalGroup60);
        org.junit.Assert.assertNotNull(medium64);
        org.junit.Assert.assertNotNull(putExtendedAttribute65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(putExtendedAttribute72);
        org.junit.Assert.assertEquals("'" + boolean73 + "' != '" + false + "'", boolean73, false);
        org.junit.Assert.assertNull(extendedAttributeListItemList74);
    }

    @Test
    public void test49222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49222");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser();
        java.lang.String str1 = activeDirectoryUser0.UserPrincipalName;
        java.lang.String str2 = activeDirectoryUser0.UserPrincipalName;
        java.lang.String str3 = activeDirectoryUser0.ActiveDirectorySid;
        java.lang.String str4 = activeDirectoryUser0.ActiveDirectorySid;
        java.lang.String str5 = activeDirectoryUser0.getEmail();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user7 = activeDirectoryUser0.setAuthenticationType("2021.8.9990");
        activeDirectoryUser0.CanLaunchRatingDevelopmentToolbox = true;
        activeDirectoryUser0.ActiveDirectorySid = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(user7);
    }

    @Test
    public void test49223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49223");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit1 = indexConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = indexConfiguration0.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList3 = indexConfiguration0.getIndexRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration5 = indexConfiguration0.setIssuingOrganization("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = indexConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = indexConfiguration0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = postSamplingLocationGroup9.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = locationGroupType11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType14 = locationGroupType11.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup9.LocationGroupType = locationGroupType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup17 = postSamplingLocationGroup9.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity21 = samplingPlanPlannedActivity19.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = auditAttributes22.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity21.AuditAttributes = auditAttributes22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = samplingPlanPlannedActivity21.AuditAttributes;
        putAccessGroup18.AuditAttributes = auditAttributes26;
        postSamplingLocationGroup9.AuditAttributes = auditAttributes26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup29 = unitGroup8.setAuditAttributes(auditAttributes26);
        indexConfiguration0.AuditAttributes = auditAttributes26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = indexConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration33 = indexConfiguration0.setIssuingOrganization("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        indexConfiguration0.Description = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.lang.String str36 = indexConfiguration0.Id;
        org.junit.Assert.assertNull(unit1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(indexRangeList3);
        org.junit.Assert.assertNotNull(indexConfiguration5);
        org.junit.Assert.assertNull(unit6);
        org.junit.Assert.assertNull(observedProperty7);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(locationGroupType14);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup17);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity21);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(auditAttributes26);
        org.junit.Assert.assertNotNull(unitGroup29);
        org.junit.Assert.assertNull(unit31);
        org.junit.Assert.assertNotNull(indexConfiguration33);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test49224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49224");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend2 = postTimeSeriesOverwriteAppend0.setTimeRange(interval1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend4 = postTimeSeriesOverwriteAppend0.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend7 = postTimeSeriesOverwriteAppend5.setTimeRange(interval6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval8 = postTimeSeriesOverwriteAppend7.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] timeSeriesPointArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] { timeSeriesPoint9 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>) timeSeriesPointList11, timeSeriesPointArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend13 = postTimeSeriesOverwriteAppend7.setPoints(timeSeriesPointList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend14 = postTimeSeriesOverwriteAppend0.setPoints(timeSeriesPointList11);
        java.lang.String str15 = postTimeSeriesOverwriteAppend14.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend18 = postTimeSeriesOverwriteAppend16.setTimeRange(interval17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend20 = postTimeSeriesOverwriteAppend16.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval21 = postTimeSeriesOverwriteAppend20.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend23 = postTimeSeriesOverwriteAppend20.setTimeRange(interval22);
        postTimeSeriesOverwriteAppend14.TimeRange = interval22;
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend2);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend4);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend7);
        org.junit.Assert.assertNull(interval8);
        org.junit.Assert.assertNotNull(timeSeriesPointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend13);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend18);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend20);
        org.junit.Assert.assertNull(interval21);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend23);
    }

    @Test
    public void test49225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49225");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity();
        getActivity0.Id = "https";
        java.lang.String str3 = getActivity0.Id;
        java.lang.Boolean boolean4 = getActivity0.Detail;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity6 = getActivity0.setDetail((java.lang.Boolean) true);
        java.lang.Boolean boolean7 = getActivity0.getDetail();
        getActivity0.Detail = false;
        java.lang.String str10 = getActivity0.getId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "https" + "'", str3, "https");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(getActivity6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "https" + "'", str10, "https");
    }

    @Test
    public void test49226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49226");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits2 = getUnits0.setCustomId("");
        getUnits2.CustomId = "/AQUARIUS";
        java.lang.String str5 = getUnits2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits7 = getUnits2.setUnitgroup("http://MaxDurationhttp");
        getUnits7.Unitgroup = "/AQUARIUS/Publish/v2";
        java.lang.String str10 = getUnits7.Unitgroup;
        org.junit.Assert.assertNotNull(getUnits2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS" + "'", str5, "/AQUARIUS");
        org.junit.Assert.assertNotNull(getUnits7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Publish/v2" + "'", str10, "/AQUARIUS/Publish/v2");
    }

    @Test
    public void test49227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49227");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.RoundingSpec;
        putParameter0.UniqueId = "PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase8 = putParameter0.setIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase10 = parameterBase8.setUnitIdentifier("http");
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(parameterBase8);
        org.junit.Assert.assertNotNull(parameterBase10);
    }

    @Test
    public void test49228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49228");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup2 = putAnalyticalGroup0.setAnalyticalGroupItems(analyticalGroupItemList1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup4 = putAnalyticalGroup2.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup6 = putAnalyticalGroup4.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        putAnalyticalGroup6.Type = analyticalGroupType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus9.SystemCode = resultStatusSystemCodeType10;
        resultStatus9.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str15 = categoricalValue14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = specimenTemplate17.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate19.Preservative = preservativeType20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = labResultDetails22.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate27 = specimenTemplate19.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition28 = postDetectioncondition16.setAuditAttributes(auditAttributes25);
        categoricalValue14.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus30 = resultStatus9.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup31 = putAnalyticalGroup6.setAuditAttributes(auditAttributes25);
        putAnalyticalGroup6.Description = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        java.lang.String str34 = putAnalyticalGroup6.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup36 = putAnalyticalGroup6.setName("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str37 = putAnalyticalGroup36.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject40 = postProject38.setAuditAttributes(auditAttributes39);
        java.time.OffsetDateTime offsetDateTime41 = null;
        postProject38.StartTime = offsetDateTime41;
        java.time.OffsetDateTime offsetDateTime43 = postProject38.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject45 = postProject38.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan46.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType49 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan46.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup51 = samplingPlan46.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan53 = samplingPlan46.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject54 = postProject45.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = postProject45.AuditAttributes;
        java.lang.Boolean boolean56 = postProject45.getApproved();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = postProject45.AuditAttributes;
        java.lang.String str58 = postProject45.getId();
        java.time.OffsetDateTime offsetDateTime59 = postProject45.getEndTime();
        java.lang.String str60 = postProject45.getScopeStatement();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = postProject45.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup62 = putAnalyticalGroup36.setAuditAttributes(auditAttributes61);
        auditAttributes61.CreationUserProfileId = "hi!:///AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNotNull(putAnalyticalGroup2);
        org.junit.Assert.assertNotNull(putAnalyticalGroup4);
        org.junit.Assert.assertNotNull(putAnalyticalGroup6);
        org.junit.Assert.assertTrue("'" + analyticalGroupType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(specimenTemplate19);
        org.junit.Assert.assertTrue("'" + preservativeType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails24);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(specimenTemplate27);
        org.junit.Assert.assertNotNull(postDetectioncondition28);
        org.junit.Assert.assertNotNull(resultStatus30);
        org.junit.Assert.assertNotNull(putAnalyticalGroup31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str34, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(putAnalyticalGroup36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str37, "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNotNull(postProject40);
        org.junit.Assert.assertNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(postProject45);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType49.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup51);
        org.junit.Assert.assertNotNull(samplingPlan53);
        org.junit.Assert.assertNotNull(postProject54);
        org.junit.Assert.assertNotNull(auditAttributes55);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNotNull(auditAttributes57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(offsetDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(auditAttributes61);
        org.junit.Assert.assertNotNull(putAnalyticalGroup62);
    }

    @Test
    public void test49229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49229");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str3 = timeAlignedTimeSeriesInfo2.LocationIdentifier;
        java.lang.String str4 = timeAlignedTimeSeriesInfo2.LocationIdentifier;
        timeAlignedTimeSeriesInfo2.LocationIdentifier = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        timeAlignedTimeSeriesInfo2.InterpolationType = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test49230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49230");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = null;
        locationMonitoringMethod0.Tags = tagMetadataList2;
        java.lang.String str4 = locationMonitoringMethod0.getParameterId();
        locationMonitoringMethod0.Method = "/AQUARIUS/Acquisition/v2";
        java.lang.String str7 = locationMonitoringMethod0.getParameter();
        java.time.Instant instant8 = locationMonitoringMethod0.getLastModifiedUtc();
        java.lang.String str9 = locationMonitoringMethod0.Name;
        java.lang.String str10 = locationMonitoringMethod0.Method;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str10, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test49231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49231");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getLabReportIds();
        importItem3.Errors = getObservationsV2_4;
        java.lang.Object obj21 = importItem3.getExistingItem();
        importItem3.Input = "hi!";
        java.lang.Object obj24 = importItem3.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = importItem3.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation27 = importItemSamplingLocation2.setStatus(importItemStatusType25);
        importItemSamplingLocation2.RowId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.lang.String str31 = fieldTripBasic30.getId();
        importItemSamplingLocation2.Errors = fieldTripBasic30;
        java.util.List<java.lang.String> strList33 = importItemSamplingLocation2.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation35 = importItemSamplingLocation2.setRowId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType36 = importItemSamplingLocation35.getStatus();
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + importItemStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem26);
        org.junit.Assert.assertNotNull(importItemSamplingLocation27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(importItemSamplingLocation35);
        org.junit.Assert.assertTrue("'" + importItemStatusType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
    }

    @Test
    public void test49232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49232");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult3 = datumConversionResult1.setFailureReason("MinInstant");
        fieldVisit0.DatumConversionResult = datumConversionResult3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = fieldVisit0.GageHeightAtZeroFlowActivity;
        java.lang.String str6 = fieldVisit0.getRemarks();
        org.junit.Assert.assertNotNull(datumConversionResult3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test49233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49233");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        getGroupedObservationsV2_26.DepthValue = 0.0d;
        java.util.List<java.lang.String> strList38 = getGroupedObservationsV2_26.getAnalyticalGroupIds();
        getGroupedObservationsV2_26.ImportHistoryEventId = "/AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(strList38);
    }

    @Test
    public void test49234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49234");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = plannedFieldResult0.AuditAttributes;
        plannedFieldResult0.Id = "'.'SSSSSSS";
        java.lang.String str4 = plannedFieldResult0.DeviceType;
        java.lang.String str5 = plannedFieldResult0.getDeviceType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult7 = plannedFieldResult0.setDeviceType("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        metricResult8.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult12 = metricResult8.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult13 = plannedFieldResult0.setAuditAttributes(auditAttributes11);
        plannedFieldResult0.Id = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType16 = plannedFieldResult0.Medium;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(plannedFieldResult7);
        org.junit.Assert.assertNotNull(metricResult12);
        org.junit.Assert.assertNotNull(plannedFieldResult13);
        org.junit.Assert.assertNull(mediumType16);
    }

    @Test
    public void test49235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49235");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType7 = observedProperty3.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = postObservedProperty8.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        quantity10.Unit = unit11;
        postObservedProperty8.LowerLimit = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservedProperty8.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = quantity14.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty3.setUpperLimit(quantity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = samplingLocation0.setElevation(quantity14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = samplingLocation17.getAttachments();
        java.lang.String str19 = samplingLocation17.getLongitude();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(resultType7);
        org.junit.Assert.assertNull(unitGroup9);
        org.junit.Assert.assertNotNull(quantity14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNotNull(samplingLocation17);
        org.junit.Assert.assertNull(domainObjectAttachmentList18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test49236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49236");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal2 = labInstructionMinimal0.setAnalysisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal4 = labInstructionMinimal0.setAnalysisMethod(analysisMethodMinimal3);
        labInstructionMinimal4.HoldingTime = "";
        java.lang.String str7 = labInstructionMinimal4.AnalysisComment;
        java.lang.String str8 = labInstructionMinimal4.getPreparationMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal10 = labInstructionMinimal4.setPreparationMethod("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.lang.String str11 = labInstructionMinimal10.AnalysisComment;
        org.junit.Assert.assertNotNull(labInstructionMinimal2);
        org.junit.Assert.assertNotNull(labInstructionMinimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str7, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(labInstructionMinimal10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test49237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49237");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        java.lang.Double double1 = timeSeriesDataCorrectedServiceRequest0.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList3 = getExportObservations2.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj5 = putLocationType4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest6.ReportTitle = "MinDuration";
        java.lang.String str9 = reportListServiceRequest6.getLocationUniqueId();
        java.time.Instant instant10 = null;
        reportListServiceRequest6.CreatedFrom = instant10;
        java.lang.String[] strArray24 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        reportListServiceRequest6.TagValues = strList25;
        putLocationType4.ExtendedAttributeDefinitionIds = strList25;
        getExportObservations2.SpecimenIds = strList25;
        java.lang.Double double30 = getExportObservations2.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations34 = getExportObservations2.setStartModificationTime(instant32);
        timeSeriesDataCorrectedServiceRequest0.QueryFrom = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest37 = timeSeriesDataCorrectedServiceRequest0.setTimeSeriesUniqueId("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        timeSeriesDataCorrectedServiceRequest0.Unit = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        java.time.Instant instant40 = timeSeriesDataCorrectedServiceRequest0.QueryFrom;
        java.lang.Boolean boolean41 = timeSeriesDataCorrectedServiceRequest0.isReturnFullCoverage();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(double30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(getExportObservations34);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNull(boolean41);
    }

    @Test
    public void test49238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49238");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange();
        java.lang.String str1 = metricRange0.getId();
        java.lang.Integer int2 = metricRange0.ResultingScore;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange4 = metricRange0.setDescription("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange6 = metricRange0.setId("MinInstant");
        metricRange6.UpperLimitValue = 7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange10 = metricRange6.setLowerLimitValue((java.lang.Integer) 2);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(metricRange4);
        org.junit.Assert.assertNotNull(metricRange6);
        org.junit.Assert.assertNotNull(metricRange10);
    }

    @Test
    public void test49239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49239");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        java.lang.String str2 = postAnalysisMethod0.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList4 = postAnalysisMethod3.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = postAnalysisMethod5.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod7.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList11, observedPropertyArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod9.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList11);
        postAnalysisMethod5.ObservedProperties = observedPropertyList11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod15 = postAnalysisMethod3.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod16 = postAnalysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList11);
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(importHistoryEventSimpleList4);
        org.junit.Assert.assertNull(importHistoryEventSimpleList6);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNotNull(observedPropertyArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(postAnalysisMethod15);
        org.junit.Assert.assertNotNull(postAnalysisMethod16);
    }

    @Test
    public void test49240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49240");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long5 = roleApprovalTransition4.getToApprovalLevel();
        java.lang.Long long6 = roleApprovalTransition4.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long8 = roleApprovalTransition7.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long18 = roleApprovalTransition17.getToApprovalLevel();
        java.lang.Long long19 = roleApprovalTransition17.ToApprovalLevel;
        java.lang.Long long20 = roleApprovalTransition17.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long22 = roleApprovalTransition21.getToApprovalLevel();
        java.lang.Long long23 = roleApprovalTransition21.ToApprovalLevel;
        java.lang.Long long24 = roleApprovalTransition21.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition4, roleApprovalTransition7, roleApprovalTransition11, roleApprovalTransition12, roleApprovalTransition17, roleApprovalTransition21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList26, roleApprovalTransitionArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase28 = postRole3.setRoleApprovalTransitions(roleApprovalTransitionList26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList29 = postRole3.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase30 = roleBase2.setRoleApprovalTransitions(roleApprovalTransitionList29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase32 = roleBase2.setCanEditLocationDetails((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList33 = roleBase2.getRoleApprovalTransitions();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase35 = roleBase2.setName("2021.4.62.0");
        roleBase2.CanAssignUserRoles = true;
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(long8);
        org.junit.Assert.assertNotNull(roleApprovalTransition11);
        org.junit.Assert.assertNotNull(roleApprovalTransition14);
        org.junit.Assert.assertNotNull(roleApprovalTransition16);
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long22);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(roleBase28);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList29);
        org.junit.Assert.assertNotNull(roleBase30);
        org.junit.Assert.assertNotNull(roleBase32);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList33);
        org.junit.Assert.assertNotNull(roleBase35);
    }

    @Test
    public void test49241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49241");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = schedule5.getLastGenerationDate();
        putFieldVisit0.Schedule = schedule5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = putFieldVisit0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple11 = null;
        putFieldVisit0.FieldTrip = fieldTripSimple11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = putFieldVisit0.setFieldTrip(fieldTripSimple13);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList15 = putFieldVisit14.PlannedFieldResults;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList16 = putFieldVisit14.ExtendedAttributes;
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(samplingLocation10);
        org.junit.Assert.assertNotNull(putFieldVisit14);
        org.junit.Assert.assertNull(plannedFieldResultList15);
        org.junit.Assert.assertNull(extendedAttributeList16);
    }

    @Test
    public void test49242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49242");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.IsValid = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading0.setMonitoringMethod("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double7 = openWaterData6.getDryLineCorrection();
        java.lang.String str8 = openWaterData6.getSuspensionWeight();
        java.lang.String str9 = openWaterData6.SuspensionWeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary10.BaseFlow = baseFlowType15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType17 = dischargeSummary10.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = dischargeSummary10.getDurationInHours();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = dischargeSummary10.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant21 = crossSectionSurveyActivity20.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str23 = pointVelocityDischargeActivity22.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity25 = pointVelocityDischargeActivity22.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = pointVelocityDischargeActivity22.setSoftwareVersion("");
        java.lang.String str28 = pointVelocityDischargeActivity27.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity27.StartPoint = startPointType29;
        crossSectionSurveyActivity20.StartingPoint = startPointType29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant33 = crossSectionSurveyActivity32.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str35 = pointVelocityDischargeActivity34.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity34.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity39 = pointVelocityDischargeActivity34.setSoftwareVersion("");
        java.lang.String str40 = pointVelocityDischargeActivity39.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType41 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity39.StartPoint = startPointType41;
        crossSectionSurveyActivity32.StartingPoint = startPointType41;
        crossSectionSurveyActivity20.StartingPoint = startPointType41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity20.Stage = datumConvertedQuantityWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = dischargeSummary10.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData48 = openWaterData6.setDistanceToWaterSurface((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading49 = reading0.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay45);
        java.lang.Boolean boolean50 = reading49.UseLocationDatumAsReference;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + baseFlowType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNull(quantityWithDisplay19);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity25);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + startPointType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + startPointType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType41.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(dischargeSummary47);
        org.junit.Assert.assertNotNull(openWaterData48);
        org.junit.Assert.assertNotNull(reading49);
        org.junit.Assert.assertNull(boolean50);
    }

    @Test
    public void test49243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49243");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList1 = filter0.ObservedProperties;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter3 = filter0.setEndTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        filter0.AuditAttributes = auditAttributes4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter7 = filter0.setId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.time.OffsetDateTime offsetDateTime8 = filter7.getEndTime();
        org.junit.Assert.assertNull(observedPropertyList1);
        org.junit.Assert.assertNotNull(filter3);
        org.junit.Assert.assertNotNull(filter7);
        org.junit.Assert.assertNull(offsetDateTime8);
    }

    @Test
    public void test49244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49244");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        java.lang.Double double3 = vertical2.getCosineOfUniqueFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = vertical2.TaglinePosition;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str6 = activeMeterDetails5.SoftwareVersion;
        java.lang.String str7 = activeMeterDetails5.Manufacturer;
        java.lang.String str8 = activeMeterDetails5.getFirmwareVersion();
        java.lang.String str9 = activeMeterDetails5.SerialNumber;
        java.lang.String str10 = activeMeterDetails5.getFirmwareVersion();
        java.lang.String str11 = activeMeterDetails5.getConfiguration();
        activeMeterDetails5.FirmwareVersion = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str15 = activeMeterDetails14.SoftwareVersion;
        java.lang.String str16 = activeMeterDetails14.Manufacturer;
        activeMeterDetails14.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList20, activeMeterCalibrationArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails22 = activeMeterDetails14.setMeterCalibrations(activeMeterCalibrationList20);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList23 = activeMeterDetails22.MeterCalibrations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str25 = activeMeterDetails24.SoftwareVersion;
        java.lang.String str26 = activeMeterDetails24.Manufacturer;
        activeMeterDetails24.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList30, activeMeterCalibrationArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails32 = activeMeterDetails24.setMeterCalibrations(activeMeterCalibrationList30);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList33 = activeMeterDetails32.MeterCalibrations;
        activeMeterDetails22.MeterCalibrations = activeMeterCalibrationList33;
        java.lang.String str35 = activeMeterDetails22.Manufacturer;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList36 = activeMeterDetails22.MeterCalibrations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails37 = activeMeterDetails5.setMeterCalibrations(activeMeterCalibrationList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical38 = vertical2.setCurrentMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter) activeMeterDetails37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        dischargeSummary39.MeasurementTime = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary46.Reviewer = "";
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary46.MeasurementTime = instant49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType51 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary46.BaseFlow = baseFlowType51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary46.DischargeUncertainty = dischargeUncertainty53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType55 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair;
        dischargeUncertainty53.QualitativeUncertainty = qualitativeUncertaintyType55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType57 = dischargeUncertainty53.ActiveUncertaintyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary39.setDischargeUncertainty(dischargeUncertainty53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay60 = null;
        crossSectionPoint59.Distance = quantityWithDisplay60;
        crossSectionPoint59.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay64 = crossSectionPoint59.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint66 = crossSectionPoint59.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay67 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint68 = crossSectionPoint66.setElevation(quantityWithDisplay67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay69 = null;
        crossSectionPoint68.Depth = quantityWithDisplay69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint68.Depth = datumConvertedQuantityWithDisplay71;
        java.lang.String str73 = datumConvertedQuantityWithDisplay71.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = dischargeSummary39.setMeanGageHeight((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay75 = dischargeSummary39.MeanGageHeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical76 = vertical38.setMeanVelocity(quantityWithDisplay75);
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails22);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails32);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList36);
        org.junit.Assert.assertNotNull(activeMeterDetails37);
        org.junit.Assert.assertNotNull(vertical38);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + baseFlowType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType51.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType55 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair + "'", qualitativeUncertaintyType55.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair));
        org.junit.Assert.assertNull(uncertaintyType57);
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNull(quantityWithDisplay64);
        org.junit.Assert.assertNotNull(crossSectionPoint66);
        org.junit.Assert.assertNotNull(crossSectionPoint68);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(dischargeSummary74);
        org.junit.Assert.assertNotNull(quantityWithDisplay75);
        org.junit.Assert.assertNotNull(vertical76);
    }

    @Test
    public void test49245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49245");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList1 = postReferencePoint0.getReferencePointPeriods();
        java.lang.Double double2 = postReferencePoint0.Latitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList4 = postReferencePoint3.getReferencePointPeriods();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod postReferencePointPeriod5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] postReferencePointPeriodArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] { postReferencePointPeriod5 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>) postReferencePointPeriodList7, postReferencePointPeriodArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint9 = postReferencePoint3.setReferencePointPeriods(postReferencePointPeriodList7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint10 = postReferencePoint0.setReferencePointPeriods(postReferencePointPeriodList7);
        java.lang.Double double11 = postReferencePoint0.getLongitude();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList12 = postReferencePoint0.ReferencePointPeriods;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList13 = postReferencePoint0.getReferencePointPeriods();
        org.junit.Assert.assertNull(postReferencePointPeriodList1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(postReferencePointPeriodList4);
        org.junit.Assert.assertNotNull(postReferencePointPeriodArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(postReferencePoint9);
        org.junit.Assert.assertNotNull(postReferencePoint10);
        org.junit.Assert.assertNull(double11);
        org.junit.Assert.assertNotNull(postReferencePointPeriodList12);
        org.junit.Assert.assertNotNull(postReferencePointPeriodList13);
    }

    @Test
    public void test49246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49246");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.getSerialNumber();
        java.lang.String str5 = sensor0.getParameterId();
        java.lang.String str6 = sensor0.getMethodCode();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test49247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49247");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        java.lang.String str7 = postDatumConvertedTimeSeries0.Parameter;
        java.lang.String str8 = postDatumConvertedTimeSeries0.getSubLocationIdentifier();
        java.lang.String str9 = postDatumConvertedTimeSeries0.SourceReferencePointUniqueId;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test49248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49248");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProjects getProjects0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProjects();
        java.lang.Object obj1 = getProjects0.getResponseType();
        java.lang.Object obj2 = getProjects0.getResponseType();
        java.lang.Object obj3 = getProjects0.getResponseType();
        java.lang.Object obj4 = getProjects0.getResponseType();
        java.lang.Object obj5 = getProjects0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultProject");
    }

    @Test
    public void test49249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49249");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRole putRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRole();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList1 = putRole0.getRoleApprovalTransitions();
        java.lang.String str2 = putRole0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRole putRole4 = putRole0.setUniqueId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRole putRole6 = putRole0.setUniqueId("zZZZZ");
        org.junit.Assert.assertNull(roleApprovalTransitionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putRole4);
        org.junit.Assert.assertNotNull(putRole6);
    }

    @Test
    public void test49250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49250");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata2 = parameterMetadata0.setUnitGroupIdentifier("2021.4.62.0");
        parameterMetadata0.InterpolationType = "-PT87591240H";
        java.lang.String str5 = parameterMetadata0.UnitGroupIdentifier;
        parameterMetadata0.Identifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertNotNull(parameterMetadata2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2021.4.62.0" + "'", str5, "2021.4.62.0");
    }

    @Test
    public void test49251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49251");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        java.lang.String str3 = calibrationCheck0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = calibrationCheck0.Difference;
        calibrationCheck0.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails7 = calibrationCheck0.StandardDetails;
        java.lang.String str8 = calibrationCheck0.getMonitoringMethod();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNull(standardDetails7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test49252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49252");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project2 = project0.setScopeStatement("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = project2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project5 = project2.setApproved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType6 = project2.Type;
        java.lang.String str7 = project2.CustomId;
        java.time.OffsetDateTime offsetDateTime8 = project2.getStartTime();
        java.time.OffsetDateTime offsetDateTime9 = project2.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project11 = project2.setName("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project13 = project2.setId("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        org.junit.Assert.assertNotNull(project2);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(project5);
        org.junit.Assert.assertNull(projectType6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(project11);
        org.junit.Assert.assertNotNull(project13);
    }

    @Test
    public void test49253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49253");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeChannelMeasurement0.Discharge;
        java.time.Instant instant3 = dischargeChannelMeasurement0.EndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType channelStabilityType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType.Soft;
        dischargeChannelMeasurement0.ChannelStability = channelStabilityType4;
        java.time.Instant instant6 = null;
        dischargeChannelMeasurement0.StartTime = instant6;
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertTrue("'" + channelStabilityType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType.Soft + "'", channelStabilityType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType.Soft));
    }

    @Test
    public void test49254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49254");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation3.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setCategoricalResult(categoricalResult6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList9, importHistoryEventSimpleArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation3.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon12 = observation3.RelatedTaxon;
        java.time.OffsetDateTime offsetDateTime13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation3.setResultTime(offsetDateTime13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity15.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = postActivity15.setPlannedActivity(plannedActivity18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType20 = postActivity15.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate22.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList27 = specimenTemplate26.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = specimenTemplate28.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList33 = specimenTemplate32.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate22, specimenTemplate25, specimenTemplate26, specimenTemplate30, specimenTemplate31, specimenTemplate32 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList35, specimenTemplateArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate37 = postFieldVisitActivityWithTemplate21.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate39 = postFieldVisitActivityWithTemplate37.setCollectionMethod(collectionMethod38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity40 = postActivity15.setCollectionMethod(collectionMethod38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity15.Medium = medium41;
        medium41.CustomId = "-PT87591240H";
        observation14.Medium = medium41;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList46 = observation14.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod47 = postLabAnalysisMethod2.setImportHistoryEventSimples(importHistoryEventSimpleList46);
        java.lang.String str48 = postLabAnalysisMethod47.getName();
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(taxon12);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNotNull(postActivity19);
        org.junit.Assert.assertNull(activityType20);
        org.junit.Assert.assertNull(labInstructionTemplateList27);
        org.junit.Assert.assertNotNull(specimenTemplate30);
        org.junit.Assert.assertNull(labInstructionTemplateList33);
        org.junit.Assert.assertNotNull(specimenTemplateArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate37);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate39);
        org.junit.Assert.assertNotNull(postActivity40);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList46);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test49255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49255");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability1 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList3, extendedAttributeApplicabilityArray2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes5 = getExtendedAttributes0.setApplicability(extendedAttributeApplicabilityList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList6 = null;
        getExtendedAttributes5.Applicability = extendedAttributeApplicabilityList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability9 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList11, extendedAttributeApplicabilityArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes13 = getExtendedAttributes8.setApplicability(extendedAttributeApplicabilityList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes14 = getExtendedAttributes5.setApplicability(extendedAttributeApplicabilityList11);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList15 = getExtendedAttributes5.Applicability;
        java.lang.Object obj16 = getExtendedAttributes5.getResponseType();
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes5);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes13);
        org.junit.Assert.assertNotNull(getExtendedAttributes14);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ExtendedAttributesResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ExtendedAttributesResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ExtendedAttributesResponse");
    }

    @Test
    public void test49256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49256");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.Double double1 = locationDataServiceResponse0.Srid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse3 = locationDataServiceResponse0.setLocationName("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList4 = locationDataServiceResponse3.getTags();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse6 = locationDataServiceResponse3.setUtcOffset((java.lang.Double) 0.0d);
        java.lang.Double double7 = locationDataServiceResponse3.getSrid();
        java.lang.Double double8 = locationDataServiceResponse3.Latitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse10 = locationDataServiceResponse3.setUniqueId("MinInstant");
        locationDataServiceResponse10.LocationName = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.String str14 = locationDataServiceResponse13.Description;
        java.lang.Double double15 = locationDataServiceResponse13.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse17 = locationDataServiceResponse13.setLongitude((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse19 = locationDataServiceResponse17.setElevation((java.lang.Double) 10.0d);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList20 = locationDataServiceResponse17.ExtendedAttributes;
        java.lang.Boolean boolean21 = locationDataServiceResponse17.getIsExternalLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum locationDatum22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod> locationDatumPeriodList23 = locationDatum22.DatumPeriods;
        locationDataServiceResponse17.LocationDatum = locationDatum22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList27, referenceStandardOffsetArray26);
        locationReferenceStandard25.ReferenceStandardOffsets = referenceStandardOffsetList27;
        locationReferenceStandard25.ReferenceStandard = "2021.4.62.0";
        java.lang.String str32 = locationReferenceStandard25.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard34 = locationReferenceStandard25.setReferenceStandard("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList35 = locationReferenceStandard34.getReferenceStandardOffsets();
        java.lang.String str36 = locationReferenceStandard34.ReferenceStandard;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard38 = locationReferenceStandard34.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum locationDatum39 = locationDatum22.setReferenceStandard(locationReferenceStandard38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard40 = locationDatum22.getReferenceStandard();
        locationDataServiceResponse10.LocationDatum = locationDatum22;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(locationDataServiceResponse3);
        org.junit.Assert.assertNull(tagMetadataList4);
        org.junit.Assert.assertNotNull(locationDataServiceResponse6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(locationDataServiceResponse10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNotNull(locationDataServiceResponse17);
        org.junit.Assert.assertNotNull(locationDataServiceResponse19);
        org.junit.Assert.assertNull(extendedAttributeList20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(locationDatumPeriodList23);
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locationReferenceStandard34);
        org.junit.Assert.assertNotNull(referenceStandardOffsetList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "https" + "'", str36, "https");
        org.junit.Assert.assertNotNull(locationReferenceStandard38);
        org.junit.Assert.assertNotNull(locationDatum39);
        org.junit.Assert.assertNotNull(locationReferenceStandard40);
    }

    @Test
    public void test49257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49257");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        getLabReports0.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports4 = getLabReports0.setLimit((java.lang.Integer) 0);
        java.lang.String str5 = getLabReports4.getCustomId();
        java.lang.String str6 = getLabReports4.getCustomId();
        getLabReports4.Limit = 100;
        org.junit.Assert.assertNotNull(getLabReports4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test49258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49258");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary0.Reviewer = "";
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary0.MeasurementTime = instant3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary0.BaseFlow = baseFlowType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary0.DischargeUncertainty = dischargeUncertainty7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = dischargeUncertainty7.QuantitativeUncertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = dischargeUncertainty7.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType11 = dischargeUncertainty7.QualitativeUncertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty12.QualitativeUncertainty = qualitativeUncertaintyType13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType15 = uncertainty12.QualitativeUncertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty16 = dischargeUncertainty7.setQualitativeUncertainty(qualitativeUncertaintyType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType18 = null;
        uncertainty17.UncertaintyType = uncertaintyType18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = uncertainty17.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty21.QualitativeUncertainty = qualitativeUncertaintyType22;
        uncertainty17.QualitativeUncertainty = qualitativeUncertaintyType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty26 = uncertainty17.setQualitativeUncertainty(qualitativeUncertaintyType25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType28 = null;
        uncertainty27.UncertaintyType = uncertaintyType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = uncertainty27.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType32 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty31.QualitativeUncertainty = qualitativeUncertaintyType32;
        uncertainty27.QualitativeUncertainty = qualitativeUncertaintyType32;
        uncertainty26.QualitativeUncertainty = qualitativeUncertaintyType32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty36 = dischargeUncertainty16.setQualitativeUncertainty(qualitativeUncertaintyType32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType37 = dischargeUncertainty36.ActiveUncertaintyType;
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + baseFlowType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNull(qualitativeUncertaintyType11);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(dischargeUncertainty16);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty26);
        org.junit.Assert.assertNull(doubleWithDisplay30);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType32.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(dischargeUncertainty36);
        org.junit.Assert.assertNull(uncertaintyType37);
    }

    @Test
    public void test49259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49259");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = getExportObservations0.setLimit((java.lang.Integer) 2);
        java.util.List<java.lang.String> strList3 = getExportObservations2.getResultGrades();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.lang.String str5 = user4.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList7 = putUserV2_6.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_9 = putUserV2_6.setUserType(userType8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user10 = user4.setUserType(userType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean12 = getFieldVisitReadingsByLocationServiceRequest11.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest11.ApplyDatumConversion = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest16 = getFieldVisitReadingsByLocationServiceRequest11.setLocationUniqueId("2021.4.62.0");
        getFieldVisitReadingsByLocationServiceRequest16.Publish = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList20 = getExportObservations19.getLabReportIds();
        java.lang.String str21 = getExportObservations19.DepthUnitCustomId;
        java.util.List<java.lang.String> strList22 = getExportObservations19.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str24 = getChartDataV2_23.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_26 = getChartDataV2_23.setFilterId("");
        java.util.List<java.lang.String> strList27 = getChartDataV2_23.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList30 = getObservationsV2_29.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        getObservationsV2_29.ResultGrades = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems47 = getExtendedAttributeDropdownlistitems28.setSearch((java.util.List<java.lang.String>) strList42);
        getChartDataV2_23.ObservedPropertyIds = strList42;
        getChartDataV2_23.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList52 = getExportObservations51.getLabReportIds();
        java.lang.String str53 = getExportObservations51.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj55 = getActivityTemplates54.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        getActivityTemplates54.Type = strList67;
        getExportObservations51.AnalyticalGroupIds = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_73 = getChartDataV2_23.setAnalysisMethodIds((java.util.List<java.lang.String>) strList67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations74 = getExportObservations19.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest75 = getFieldVisitReadingsByLocationServiceRequest16.setParameters(strList67);
        user4.Roles = strList67;
        getExportObservations2.TaxonIds = strList67;
        java.util.List<java.lang.String> strList78 = getExportObservations2.getActivityTypes();
        org.junit.Assert.assertNotNull(getExportObservations2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertTrue("'" + userType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_9);
        org.junit.Assert.assertNotNull(user10);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest16);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(getChartDataV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems47);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNotNull(getChartDataV2_73);
        org.junit.Assert.assertNotNull(getExportObservations74);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest75);
        org.junit.Assert.assertNull(strList78);
    }

    @Test
    public void test49260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49260");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        java.lang.String str3 = observation0.CustomId;
        java.lang.String str4 = observation0.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation0.setObservedProperty(observedProperty5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple7 = observation0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult8 = observation0.getTaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_SURVEY;
        observation0.DataClassification = dataClassificationType9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation11.setPlannedFieldResult(plannedFieldResult12);
        observation13.CustomId = "";
        observation13.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str20 = metricConfiguration19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty21.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration24 = metricConfiguration19.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType25 = observedProperty21.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup27 = postObservedProperty26.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit29 = null;
        quantity28.Unit = unit29;
        postObservedProperty26.LowerLimit = quantity28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = postObservedProperty26.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = quantity32.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = observedProperty21.setUpperLimit(quantity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation35 = samplingLocation18.setElevation(quantity32);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList36 = samplingLocation35.getAttachments();
        java.lang.String str37 = samplingLocation35.getHorizontalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = observation13.setSamplingLocation(samplingLocation35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str40 = labInstructionTemplate39.HoldingTime;
        labInstructionTemplate39.PreparationMethod = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = plannedFieldResult43.AuditAttributes;
        plannedFieldResult43.Id = "'.'SSSSSSS";
        java.lang.String str47 = plannedFieldResult43.DeviceType;
        java.lang.String str48 = plannedFieldResult43.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str50 = metricConfiguration49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty51.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration54 = metricConfiguration49.setObservedProperty(observedProperty51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType55 = observedProperty51.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup57 = postObservedProperty56.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit59 = null;
        quantity58.Unit = unit59;
        postObservedProperty56.LowerLimit = quantity58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity62 = postObservedProperty56.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit63 = quantity62.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty64 = observedProperty51.setUpperLimit(quantity62);
        plannedFieldResult43.ObservedProperty = observedProperty64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate66 = labInstructionTemplate39.setObservedProperty(observedProperty64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup67.CustomId = "https";
        observedProperty64.UnitGroup = unitGroup67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str73 = metricConfiguration72.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty74.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration77 = metricConfiguration72.setObservedProperty(observedProperty74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType78 = observedProperty74.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup80 = postObservedProperty79.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit82 = null;
        quantity81.Unit = unit82;
        postObservedProperty79.LowerLimit = quantity81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity85 = postObservedProperty79.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit86 = quantity85.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty87 = observedProperty74.setUpperLimit(quantity85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation88 = samplingLocation71.setElevation(quantity85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity89 = samplingLocation88.Elevation;
        observedProperty64.LowerLimit = quantity89;
        observation13.Depth = quantity89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType92 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation93 = observation13.setDataClassification(dataClassificationType92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation94 = observation0.setDataClassification(dataClassificationType92);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(analysisMethodSimple7);
        org.junit.Assert.assertNull(taxonomicResult8);
        org.junit.Assert.assertTrue("'" + dataClassificationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_SURVEY + "'", dataClassificationType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(metricConfiguration24);
        org.junit.Assert.assertNull(resultType25);
        org.junit.Assert.assertNull(unitGroup27);
        org.junit.Assert.assertNotNull(quantity32);
        org.junit.Assert.assertNull(unit33);
        org.junit.Assert.assertNotNull(observedProperty34);
        org.junit.Assert.assertNotNull(samplingLocation35);
        org.junit.Assert.assertNull(domainObjectAttachmentList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(observation38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(auditAttributes44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "'.'SSSSSSS" + "'", str48, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(metricConfiguration54);
        org.junit.Assert.assertNull(resultType55);
        org.junit.Assert.assertNull(unitGroup57);
        org.junit.Assert.assertNotNull(quantity62);
        org.junit.Assert.assertNull(unit63);
        org.junit.Assert.assertNotNull(observedProperty64);
        org.junit.Assert.assertNotNull(labInstructionTemplate66);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(metricConfiguration77);
        org.junit.Assert.assertNull(resultType78);
        org.junit.Assert.assertNull(unitGroup80);
        org.junit.Assert.assertNotNull(quantity85);
        org.junit.Assert.assertNull(unit86);
        org.junit.Assert.assertNotNull(observedProperty87);
        org.junit.Assert.assertNotNull(samplingLocation88);
        org.junit.Assert.assertNotNull(quantity89);
        org.junit.Assert.assertTrue("'" + dataClassificationType92 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType92.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(observation93);
        org.junit.Assert.assertNotNull(observation94);
    }

    @Test
    public void test49261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49261");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeSummary0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = dischargeSummary0.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary0.setAdjustment(adjustment4);
        dischargeSummary5.MeasurementId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = dischargeSummary5.setGageHeightComments("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary5.setMeasurementId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        dischargeSummary11.QualityAssuranceComments = "multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****";
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(dischargeSummary9);
        org.junit.Assert.assertNotNull(dischargeSummary11);
    }

    @Test
    public void test49262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49262");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        java.lang.Object obj1 = getLabAnalysisMethods0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties();
        getObservedProperties2.Limit = 4;
        java.util.List<java.lang.String> strList5 = getObservedProperties2.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.DepthUnitId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = getObservationsV2_12.setSpecimenName("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_18.getFieldResultType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        getObservationsV2_26.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse29.setNextToken(instant30);
        getObservationsV2_26.EndObservedTime = instant30;
        java.time.Instant instant33 = getObservationsV2_26.StartResultTime;
        java.util.List<java.lang.String> strList34 = getObservationsV2_26.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList36 = importItemObject35.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList38, importChangeItemArray37);
        importItemObject35.ItemComparison = importChangeItemList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject49 = importItemObject35.setExistingItem((java.lang.Object) putLocationTags41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        importItemObject49.WarningMessages = strList53;
        getObservationsV2_26.LabResultLabAnalysisMethodIds = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = getObservationsV2_18.setObservedPropertyIds((java.util.List<java.lang.String>) strList53);
        getObservedProperties2.ResultTypes = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties61 = getObservedProperties2.setCustomId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties63 = getObservedProperties2.setLimit((java.lang.Integer) 1);
        java.util.List<java.lang.String> strList64 = getObservedProperties2.getAnalysisTypes();
        getObservedProperties2.Limit = 2;
        java.util.List<java.lang.String> strList67 = getObservedProperties2.ResultTypes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods68 = getLabAnalysisMethods0.setObservedPropertyIds(strList67);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalysisMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalysisMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalysisMethod");
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(getObservationsV2_18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(importChangeItemArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNotNull(importItemObject49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_58);
        org.junit.Assert.assertNotNull(getObservedProperties61);
        org.junit.Assert.assertNotNull(getObservedProperties63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods68);
    }

    @Test
    public void test49263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49263");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser();
        postOpenIdConnectUser0.SubjectIdentifier = "POST";
        java.lang.String str3 = postOpenIdConnectUser0.SubjectIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser5 = postOpenIdConnectUser0.setIdentifier("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser7 = postOpenIdConnectUser0.setIdentifier("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser9 = postOpenIdConnectUser0.setIdentifier("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str10 = postOpenIdConnectUser0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser12 = postOpenIdConnectUser0.setIdentifier("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser14 = postOpenIdConnectUser0.setSubjectIdentifier("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(postOpenIdConnectUser5);
        org.junit.Assert.assertNotNull(postOpenIdConnectUser7);
        org.junit.Assert.assertNotNull(postOpenIdConnectUser9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****" + "'", str10, "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNotNull(postOpenIdConnectUser12);
        org.junit.Assert.assertNotNull(postOpenIdConnectUser14);
    }

    @Test
    public void test49264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49264");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType1 = analyticalGroup0.getType();
        java.lang.String str2 = analyticalGroup0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = analyticalGroup0.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup6 = analyticalGroup4.setType(analyticalGroupType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup9 = postAnalyticalGroup7.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup12 = putAnalyticalGroup10.setAnalyticalGroupItems(analyticalGroupItemList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup15 = putAnalyticalGroup13.setAnalyticalGroupItems(analyticalGroupItemList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup17 = putAnalyticalGroup15.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup19 = putAnalyticalGroup17.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        putAnalyticalGroup19.Type = analyticalGroupType20;
        putAnalyticalGroup10.Type = analyticalGroupType20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup23 = postAnalyticalGroup7.setType(analyticalGroupType20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup26 = postAnalyticalGroup24.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup28 = postAnalyticalGroup24.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup30 = postAnalyticalGroup24.setType(analyticalGroupType29);
        postAnalyticalGroup23.Type = analyticalGroupType29;
        analyticalGroup6.Type = analyticalGroupType29;
        java.lang.Integer int33 = analyticalGroup6.getNumberOfAnalysisMethodsInGroupItems();
        org.junit.Assert.assertNull(analyticalGroupType1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(analyticalGroup4);
        org.junit.Assert.assertTrue("'" + analyticalGroupType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup6);
        org.junit.Assert.assertNotNull(postAnalyticalGroup9);
        org.junit.Assert.assertNotNull(putAnalyticalGroup12);
        org.junit.Assert.assertNotNull(putAnalyticalGroup15);
        org.junit.Assert.assertNotNull(putAnalyticalGroup17);
        org.junit.Assert.assertNotNull(putAnalyticalGroup19);
        org.junit.Assert.assertTrue("'" + analyticalGroupType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(postAnalyticalGroup23);
        org.junit.Assert.assertNotNull(postAnalyticalGroup26);
        org.junit.Assert.assertNotNull(postAnalyticalGroup28);
        org.junit.Assert.assertTrue("'" + analyticalGroupType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(postAnalyticalGroup30);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test49265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49265");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        putFilter0.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str3 = putFilter0.getCustomId();
        putFilter0.Description = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList6 = putFilter0.getObservedProperties();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(observedPropertyList6);
    }

    @Test
    public void test49266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49266");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen4 = specimen2.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity6.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = postActivity6.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity10.setAuditAttributes(auditAttributes11);
        postCollectionMethod5.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen14 = specimen2.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen16 = specimen14.setFiltered((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen18 = specimen16.setShippingContainer(shippingContainer17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType19 = specimen16.getPreservative();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory20 = specimen16.getLaboratory();
        java.lang.String str21 = specimen16.getFiltrationComment();
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNotNull(specimen4);
        org.junit.Assert.assertNotNull(postActivity10);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(specimen14);
        org.junit.Assert.assertNotNull(specimen16);
        org.junit.Assert.assertNotNull(specimen18);
        org.junit.Assert.assertNull(preservativeType19);
        org.junit.Assert.assertNull(laboratory20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str21, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
    }

    @Test
    public void test49267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49267");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase35 = locationDatumPeriod33.setComment("'.'SSSSSSS");
        java.lang.Double double36 = locationDatumPeriodBase35.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant38 = qualifier37.DateApplied;
        java.lang.String str39 = qualifier37.User;
        java.lang.String str40 = qualifier37.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj42 = timeAlignedDataServiceRequest41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = timeAlignedDataServiceRequest41.setQueryFrom(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = qualifier37.setDateApplied(instant44);
        java.time.Instant instant48 = qualifier47.getDateApplied();
        locationDatumPeriodBase35.ValidFrom = instant48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = putBulkEditResultGradesV2_32.setStartModificationTime(instant48);
        java.lang.String str51 = putBulkEditResultGradesV2_50.getTargetResultGrade();
        java.lang.String str52 = putBulkEditResultGradesV2_50.FieldVisitId;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase35);
        org.junit.Assert.assertNull(double36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest46);
        org.junit.Assert.assertNotNull(qualifier47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test49268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49268");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend2 = postTimeSeriesOverwriteAppend0.setTimeRange(interval1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend4 = postTimeSeriesOverwriteAppend0.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval5 = postTimeSeriesOverwriteAppend4.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend7 = postTimeSeriesOverwriteAppend4.setTimeRange(interval6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval9 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend10 = postTimeSeriesOverwriteAppend8.setTimeRange(interval9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval11 = postTimeSeriesOverwriteAppend10.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] timeSeriesPointArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] { timeSeriesPoint12 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>) timeSeriesPointList14, timeSeriesPointArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend16 = postTimeSeriesOverwriteAppend10.setPoints(timeSeriesPointList14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend19 = postTimeSeriesOverwriteAppend17.setTimeRange(interval18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend21 = postTimeSeriesOverwriteAppend17.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend24 = postTimeSeriesOverwriteAppend22.setTimeRange(interval23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval25 = postTimeSeriesOverwriteAppend24.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] timeSeriesPointArray27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] { timeSeriesPoint26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>) timeSeriesPointList28, timeSeriesPointArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend30 = postTimeSeriesOverwriteAppend24.setPoints(timeSeriesPointList28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend31 = postTimeSeriesOverwriteAppend17.setPoints(timeSeriesPointList28);
        java.lang.String str32 = postTimeSeriesOverwriteAppend31.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend34 = postTimeSeriesOverwriteAppend31.setUniqueId("POST");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList35 = postTimeSeriesOverwriteAppend34.getPoints();
        postTimeSeriesOverwriteAppend16.Points = timeSeriesPointList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend37 = postTimeSeriesOverwriteAppend4.setPoints(timeSeriesPointList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend39 = postTimeSeriesOverwriteAppend4.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval40 = postTimeSeriesOverwriteAppend4.getTimeRange();
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend2);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend4);
        org.junit.Assert.assertNull(interval5);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend7);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend10);
        org.junit.Assert.assertNull(interval11);
        org.junit.Assert.assertNotNull(timeSeriesPointArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend16);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend19);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend21);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend24);
        org.junit.Assert.assertNull(interval25);
        org.junit.Assert.assertNotNull(timeSeriesPointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend30);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend34);
        org.junit.Assert.assertNotNull(timeSeriesPointList35);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend37);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend39);
        org.junit.Assert.assertNotNull(interval40);
    }

    @Test
    public void test49269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49269");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setObservedProperty(observedProperty1);
        java.time.OffsetDateTime offsetDateTime3 = observationMinimal2.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult4 = observationMinimal2.TaxonomicResult;
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(taxonomicResult4);
    }

    @Test
    public void test49270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49270");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity3.setMeterEquation("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str6 = pointVelocityDischargeActivity3.SuspensionWeight;
        java.lang.String str7 = pointVelocityDischargeActivity3.getMeterEquation();
        pointVelocityDischargeActivity3.VelocityObservationMethod = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setMeanGageHeightMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary10.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType15 = calibrationCheck14.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = calibrationCheck14.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary18.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        dischargeSummary18.MeasurementTime = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse17.setNextToken(instant22);
        java.time.Instant instant26 = locationDescriptionListServiceResponse17.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = calibrationCheck14.setTime(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary30.DifferenceDuringVisit = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = doubleWithDisplay31.setNumeric((java.lang.Double) 100.0d);
        calibrationCheck14.Value = doubleWithDisplay34;
        dischargeSummary10.DifferenceDuringVisit = doubleWithDisplay34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity3.setMeanObservationDurationInSeconds(doubleWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary38.Reviewer = "";
        dischargeSummary38.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType43 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary38.MeasurementGrade = measurementGradeType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        crossSectionPoint45.Distance = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        crossSectionPoint45.Distance = quantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = null;
        crossSectionPoint45.Depth = quantityWithDisplay50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint45.Distance = datumConvertedQuantityWithDisplay52;
        dischargeSummary38.Discharge = datumConvertedQuantityWithDisplay52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity55 = pointVelocityDischargeActivity3.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay57 = datumConvertedQuantityWithDisplay52.setTargetDatum("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str58 = datumConvertedQuantityWithDisplay57.getTargetDatum();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(calibrationCheckType15);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(calibrationCheck27);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(doubleWithDisplay34);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertTrue("'" + measurementGradeType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity55);
        org.junit.Assert.assertNotNull(datumConvertedQuantityWithDisplay57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str58, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test49271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49271");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList6, importItemObservedPropertyArray5);
        observedPropertyImportSummary0.ErrorImportItems = importItemObservedPropertyList6;
        java.lang.String str9 = observedPropertyImportSummary0.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary11 = observedPropertyImportSummary0.setSuccessCount((java.lang.Integer) 4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList12 = observedPropertyImportSummary11.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary14 = observedPropertyImportSummary11.setSuccessCount((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList15 = observedPropertyImportSummary11.getNonErrorImportItems();
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(observedPropertyImportSummary11);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList12);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary14);
        org.junit.Assert.assertNull(importItemObservedPropertyList15);
    }

    @Test
    public void test49272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49272");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType7 = observedProperty3.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = postObservedProperty8.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        quantity10.Unit = unit11;
        postObservedProperty8.LowerLimit = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservedProperty8.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = quantity14.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty3.setUpperLimit(quantity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = samplingLocation0.setElevation(quantity14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = samplingLocation17.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList21, plannedActivityArray20);
        putFieldVisit19.PlannedActivities = plannedActivityList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        java.lang.String str31 = domainObjectAttachment29.getId();
        domainObjectAttachment29.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment29.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        java.lang.String str38 = domainObjectAttachment36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = domainObjectAttachment36.setAttachment(attachment39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment43.setAttachment(attachment46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment24, domainObjectAttachment29, domainObjectAttachment36, domainObjectAttachment41, domainObjectAttachment43, domainObjectAttachment48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51, domainObjectAttachmentArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit53 = putFieldVisit19.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51);
        samplingLocation17.Attachments = domainObjectAttachmentList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation56 = samplingLocation17.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation58 = samplingLocation56.setId("http://MaxDurationhttp/json/reply/Integer");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList59 = samplingLocation56.getStandards();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType60 = samplingLocation56.Type;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(resultType7);
        org.junit.Assert.assertNull(unitGroup9);
        org.junit.Assert.assertNotNull(quantity14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNotNull(samplingLocation17);
        org.junit.Assert.assertNull(domainObjectAttachmentList18);
        org.junit.Assert.assertNotNull(plannedActivityArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(domainObjectAttachment40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putFieldVisit53);
        org.junit.Assert.assertNotNull(samplingLocation56);
        org.junit.Assert.assertNotNull(samplingLocation58);
        org.junit.Assert.assertNull(standardSimpleList59);
        org.junit.Assert.assertNull(locationType60);
    }

    @Test
    public void test49273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49273");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTag putTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTag putTag2 = putTag0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = putTag2.UniqueId;
        java.lang.Object obj4 = putTag2.getResponseType();
        java.lang.Object obj5 = putTag2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        postTag6.PickListValues = strList11;
        java.util.ArrayList<java.lang.String> strList15 = postTag6.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability16 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList18, tagApplicabilityArray17);
        postTag6.Applicability = tagApplicabilityList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase22 = postTag6.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase24 = postTag6.setValueType(tagValueType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase25 = putTag2.setValueType(tagValueType23);
        java.lang.String str26 = putTag2.getKey();
        java.lang.String str27 = putTag2.getUniqueId();
        org.junit.Assert.assertNotNull(putTag2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Tag");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + tagApplicability16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(tagRequestBase22);
        org.junit.Assert.assertTrue("'" + tagValueType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase24);
        org.junit.Assert.assertNotNull(tagRequestBase25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str27, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
    }

    @Test
    public void test49274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49274");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent4 = importHistoryEvent0.setImportedBy(userProfile3);
        java.time.OffsetDateTime offsetDateTime5 = null;
        importHistoryEvent0.ImportTime = offsetDateTime5;
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertNotNull(importHistoryEvent4);
    }

    @Test
    public void test49275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49275");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = analyticalGroup4.getType();
        analyticalGroup4.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = null;
        analyticalGroupItem14.AnalysisMethod = analysisMethod17;
        java.lang.String str19 = analyticalGroupItem14.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = null;
        analyticalGroupItem25.AnalysisMethod = analysisMethod28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem9, analyticalGroupItem11, analyticalGroupItem14, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31, analyticalGroupItemArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = analyticalGroup8.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList31);
        analyticalGroup4.AnalyticalGroupItems = analyticalGroupItemList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup4.AuditAttributes = auditAttributes35;
        java.lang.String str37 = analyticalGroup4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType38 = analyticalGroup4.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType40 = analyticalGroup39.getType();
        java.lang.String str41 = analyticalGroup39.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = analyticalGroup39.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup45 = analyticalGroup43.setType(analyticalGroupType44);
        analyticalGroup4.Type = analyticalGroupType44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup47 = postAnalyticalGroup0.setType(analyticalGroupType44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.lang.Object obj49 = putAnalyticalGroup48.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem51.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = analyticalGroupItem56.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem56.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = null;
        analyticalGroupItem56.AnalysisMethod = analysisMethod59;
        java.lang.String str61 = analyticalGroupItem56.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod68 = analyticalGroupItem67.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod69 = analyticalGroupItem67.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod70 = null;
        analyticalGroupItem67.AnalysisMethod = analysisMethod70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem51, analyticalGroupItem53, analyticalGroupItem56, analyticalGroupItem62, analyticalGroupItem65, analyticalGroupItem67 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList73, analyticalGroupItemArray72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup75 = analyticalGroup50.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup76 = putAnalyticalGroup48.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup77 = postAnalyticalGroup47.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList73);
        java.lang.String str78 = postAnalyticalGroup47.getName();
        java.lang.String str79 = postAnalyticalGroup47.Id;
        java.lang.String str80 = postAnalyticalGroup47.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup83 = postAnalyticalGroup81.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList85 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup86 = putAnalyticalGroup84.setAnalyticalGroupItems(analyticalGroupItemList85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList88 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup89 = putAnalyticalGroup87.setAnalyticalGroupItems(analyticalGroupItemList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup91 = putAnalyticalGroup89.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup93 = putAnalyticalGroup91.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType94 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        putAnalyticalGroup93.Type = analyticalGroupType94;
        putAnalyticalGroup84.Type = analyticalGroupType94;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup97 = postAnalyticalGroup81.setType(analyticalGroupType94);
        postAnalyticalGroup47.Type = analyticalGroupType94;
        java.lang.String str99 = postAnalyticalGroup47.getId();
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNull(analyticalGroupType5);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(analyticalGroup33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(analyticalGroupType38);
        org.junit.Assert.assertNull(analyticalGroupType40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(analyticalGroup43);
        org.junit.Assert.assertTrue("'" + analyticalGroupType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup45);
        org.junit.Assert.assertNotNull(postAnalyticalGroup47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod57);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(analysisMethod63);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNull(analysisMethod68);
        org.junit.Assert.assertNull(analysisMethod69);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(analyticalGroup75);
        org.junit.Assert.assertNotNull(putAnalyticalGroup76);
        org.junit.Assert.assertNotNull(postAnalyticalGroup77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "/AQUARIUS" + "'", str79, "/AQUARIUS");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(postAnalyticalGroup83);
        org.junit.Assert.assertNotNull(putAnalyticalGroup86);
        org.junit.Assert.assertNotNull(putAnalyticalGroup89);
        org.junit.Assert.assertNotNull(putAnalyticalGroup91);
        org.junit.Assert.assertNotNull(putAnalyticalGroup93);
        org.junit.Assert.assertTrue("'" + analyticalGroupType94 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType94.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(postAnalyticalGroup97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "/AQUARIUS" + "'", str99, "/AQUARIUS");
    }

    @Test
    public void test49276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49276");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities0.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities4 = getActivities0.setCustomId("/AQUARIUS/Provisioning/v1");
        java.lang.String str5 = getActivities4.Sort;
        java.util.List<java.lang.String> strList6 = getActivities4.ActivityTemplateId;
        org.junit.Assert.assertNotNull(getActivities4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test49277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49277");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = labInstruction0.setAnalysisMethod(analysisMethod1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = labInstruction2.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = labInstruction2.AuditAttributes;
        java.lang.String str5 = labInstruction2.PreparationMethod;
        org.junit.Assert.assertNotNull(labInstruction2);
        org.junit.Assert.assertNull(analysisMethod3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test49278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49278");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = postObservedProperty3.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = null;
        quantity5.Unit = unit6;
        postObservedProperty3.LowerLimit = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postObservedProperty3.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit10 = quantity9.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation2.setElevation(quantity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation13 = putSamplingLocation11.setHorizontalCollectionMethod("");
        java.lang.String str14 = putSamplingLocation11.HorizontalCollectionMethod;
        java.lang.String str15 = putSamplingLocation11.VerticalDatum;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = putSamplingLocation11.Elevation;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList17 = putSamplingLocation11.ImportHistoryEventSimples;
        putSamplingLocation11.Id = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(unitGroup4);
        org.junit.Assert.assertNotNull(quantity9);
        org.junit.Assert.assertNull(unit10);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNotNull(putSamplingLocation13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(quantity16);
        org.junit.Assert.assertNull(importHistoryEventSimpleList17);
    }

    @Test
    public void test49279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49279");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        postRecurringReport1.NextGenerationDate = instant5;
        java.time.Instant instant8 = postRecurringReport1.getNextGenerationDate();
        java.lang.String str9 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant8);
        metadataChangeTransactionListServiceRequest0.QueryFrom = instant8;
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest12 = metadataChangeTransactionListServiceRequest0.setQueryFrom(instant11);
        java.time.Instant instant13 = null;
        metadataChangeTransactionListServiceRequest12.QueryFrom = instant13;
        java.lang.Object obj15 = metadataChangeTransactionListServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest17 = metadataChangeTransactionListServiceRequest12.setTimeSeriesUniqueId("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest19 = metadataChangeTransactionListServiceRequest12.setTimeSeriesUniqueId("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str9, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest12);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest17);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest19);
    }

    @Test
    public void test49280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49280");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser deleteUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser();
        deleteUser0.Id = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser deleteUser4 = deleteUser0.setId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        deleteUser0.Id = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser deleteUser8 = deleteUser0.setId("multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****");
        org.junit.Assert.assertNotNull(deleteUser4);
        org.junit.Assert.assertNotNull(deleteUser8);
    }

    @Test
    public void test49281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49281");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        java.lang.String str3 = parameterMetadata0.getUnitGroupIdentifier();
        parameterMetadata0.RoundingSpec = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata7 = parameterMetadata0.setIdentifier("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata9 = parameterMetadata0.setRoundingSpec("zZZZZ");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(parameterMetadata7);
        org.junit.Assert.assertNotNull(parameterMetadata9);
    }

    @Test
    public void test49282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49282");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean2 = getFieldVisitReadingsByLocationServiceRequest1.ApplyRounding;
        java.lang.String str3 = getFieldVisitReadingsByLocationServiceRequest1.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest5 = getFieldVisitReadingsByLocationServiceRequest1.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        getObservationsV2_7.SpecimenIds = strList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray17 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = putLocationTags13.setTagUniqueIds(strList18);
        getObservationsV2_7.QualityControlTypes = strList18;
        java.util.List<java.lang.String> strList22 = getObservationsV2_7.getLabReportIds();
        importItem6.Errors = getObservationsV2_7;
        java.lang.Object obj24 = importItem6.getExistingItem();
        importItem6.Input = "hi!";
        java.lang.Object obj27 = importItem6.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType28 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem29 = importItem6.setStatus(importItemStatusType28);
        importItem29.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate32.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = specimenTemplate32.setId("hi!");
        java.lang.Boolean boolean37 = specimenTemplate36.getFiltered();
        importItem29.Item = specimenTemplate36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_41.setDataClassifications((java.util.List<java.lang.String>) strList45);
        postTag40.PickListValues = strList45;
        java.util.ArrayList<java.lang.String> strList49 = postTag40.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor50 = processor39.setInputTimeSeriesUniqueIds(strList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem51 = importItem29.setWarningMessages((java.util.List<java.lang.String>) strList49);
        getFieldVisitReadingsByLocationServiceRequest1.Parameters = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest54 = getFieldVisitReadingsByLocationServiceRequest1.setApplyDatumConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest56 = getFieldVisitReadingsByLocationServiceRequest1.setLocationIdentifier("2021.8.9990");
        java.util.ArrayList<java.lang.String> strList57 = getFieldVisitReadingsByLocationServiceRequest56.getParameters();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_58 = deleteObservationsV2_0.setProjectIds((java.util.List<java.lang.String>) strList57);
        java.util.List<java.lang.String> strList59 = deleteObservationsV2_58.getSamplingLocationGroupIds();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(putLocationTags20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + importItemStatusType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem29);
        org.junit.Assert.assertNotNull(specimenTemplate36);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(processor50);
        org.junit.Assert.assertNotNull(importItem51);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest54);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(deleteObservationsV2_58);
        org.junit.Assert.assertNull(strList59);
    }

    @Test
    public void test49283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49283");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_10 = postObservationV2_8.setRelatedTaxon(taxon9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = postObservationV2_8.CategoricalResult;
        java.time.OffsetDateTime offsetDateTime12 = postObservationV2_8.ObservedTime;
        java.time.OffsetDateTime offsetDateTime13 = postObservationV2_8.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = postObservationV2_8.getCategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod20 = observation17.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier21 = null;
        observation17.NullMeasureQualifier = nullMeasureQualifier21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen23 = observation17.getSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation17.setDevice(device24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation25.setQualityControlType(qualityControlType26);
        postObservationV2_8.QualityControlType = qualityControlType26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult29 = postObservationV2_8.getCategoricalResult();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNotNull(postObservationV2_10);
        org.junit.Assert.assertNull(categoricalResult11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNull(categoricalResult14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(collectionMethod20);
        org.junit.Assert.assertNull(specimen23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertTrue("'" + qualityControlType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNull(categoricalResult29);
    }

    @Test
    public void test49284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49284");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setBaseOffset((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit4 = unit2.setGroupIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit6 = unit2.setUniqueId("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit8 = unit6.setUniqueId("'.'SSSSSSS");
        java.lang.String str9 = unit8.getSymbol();
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNotNull(unit4);
        org.junit.Assert.assertNotNull(unit6);
        org.junit.Assert.assertNotNull(unit8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test49285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49285");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        putAttachment0.Latitude = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Object obj3 = putAttachment0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment5 = putAttachment0.setFileName("hi!:///AQUARIUS/Provisioning/v1");
        putAttachment5.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str8 = putAttachment5.getFileName();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertNotNull(putAttachment5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str8, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test49286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49286");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str9 = samplingContextTag8.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag11 = samplingContextTag8.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = samplingContextTag11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str15 = samplingContextTag14.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        samplingContextTag16.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str21 = samplingContextTag20.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = samplingContextTag20.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag13, samplingContextTag14, samplingContextTag16, samplingContextTag23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25, samplingContextTagArray24);
        postActivity3.SamplingContextTags = samplingContextTagList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity30 = putActivity28.setCustomId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList31 = putActivity30.getExtendedAttributes();
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(samplingContextTag11);
        org.junit.Assert.assertNotNull(samplingContextTag13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(samplingContextTag23);
        org.junit.Assert.assertNotNull(samplingContextTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putActivity28);
        org.junit.Assert.assertNotNull(putActivity30);
        org.junit.Assert.assertNull(extendedAttributeList31);
    }

    @Test
    public void test49287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49287");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.getApprovalName8();
        timeAlignedPoint0.ApprovalLevel10 = 0L;
        timeAlignedPoint0.NumericValue3 = (-1.0d);
        java.lang.String str15 = timeAlignedPoint0.DisplayValue3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint0.setQualifiers5("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        timeAlignedPoint17.ApprovalName6 = "http://MaxDurationhttp/json/reply/String";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint21 = timeAlignedPoint17.setMethod5("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        timeAlignedPoint21.ApprovalName5 = "2021.8.9990";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
        org.junit.Assert.assertNotNull(timeAlignedPoint21);
    }

    @Test
    public void test49288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49288");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getAssemblyQualifiedTypeName();
        java.lang.Integer int2 = fieldDataPlugin0.getPluginPriority();
        java.lang.String str3 = fieldDataPlugin0.AssemblyQualifiedTypeName;
        fieldDataPlugin0.UniqueId = "/AQUARIUS/Provisioning/v1";
        java.lang.String str6 = fieldDataPlugin0.UniqueId;
        java.lang.Integer int7 = fieldDataPlugin0.PluginPriority;
        java.lang.String str8 = fieldDataPlugin0.AssemblyQualifiedTypeName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin10 = fieldDataPlugin0.setAssemblyQualifiedTypeName("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin12 = fieldDataPlugin0.setPluginFolderName("http://MaxDurationhttp/json/reply/Double");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin14 = fieldDataPlugin12.setAssemblyQualifiedTypeName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str6, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(fieldDataPlugin10);
        org.junit.Assert.assertNotNull(fieldDataPlugin12);
        org.junit.Assert.assertNotNull(fieldDataPlugin14);
    }

    @Test
    public void test49289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49289");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = putUnitGroupWithUnit2.getId();
        java.lang.Object obj4 = putUnitGroupWithUnit2.getResponseType();
        java.lang.String str5 = putUnitGroupWithUnit2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit7 = putUnitGroupWithUnit2.setCustomId("'.'SSSSSSS");
        java.lang.String str8 = putUnitGroupWithUnit2.getId();
        java.lang.Boolean boolean9 = putUnitGroupWithUnit2.SupportsConversion;
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test49290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49290");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList3 = extendedAttributeDefinition2.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = extendedAttributeDefinition2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition2.DataType = dataType5;
        putExtendedAttribute0.DataType = dataType5;
        java.lang.Object obj8 = putExtendedAttribute0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute10 = putExtendedAttribute0.setMandatory((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType12 = postExtendedAttribute11.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType13 = postExtendedAttribute11.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str15 = postExtendedAttribute14.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType16 = postExtendedAttribute14.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = auditAttributes20.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = samplingPlanPlannedActivity19.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute25 = postExtendedAttribute14.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str27 = extendedAttributeListItem26.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem29 = extendedAttributeListItem26.setId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str32 = extendedAttributeListItem31.getId();
        java.lang.String str33 = extendedAttributeListItem31.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str35 = extendedAttributeListItem34.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str37 = extendedAttributeListItem36.CustomId;
        extendedAttributeListItem36.Id = "POST";
        java.lang.String str40 = extendedAttributeListItem36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str42 = extendedAttributeListItem41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str44 = extendedAttributeListItem43.CustomId;
        extendedAttributeListItem43.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str48 = extendedAttributeListItem47.getId();
        java.lang.String str49 = extendedAttributeListItem47.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem26, extendedAttributeListItem30, extendedAttributeListItem31, extendedAttributeListItem34, extendedAttributeListItem36, extendedAttributeListItem41, extendedAttributeListItem43, extendedAttributeListItem47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList51, extendedAttributeListItemArray50);
        postExtendedAttribute25.DropDownListItems = extendedAttributeListItemList51;
        postExtendedAttribute11.DropDownListItems = extendedAttributeListItemList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute55 = putExtendedAttribute0.setDropDownListItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList51);
        putExtendedAttribute0.Id = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeListItemList3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertTrue("'" + dataType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNotNull(putExtendedAttribute10);
        org.junit.Assert.assertNull(dataType12);
        org.junit.Assert.assertNull(appliesToType13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(dataType16);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(postExtendedAttribute25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(extendedAttributeListItem29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "POST" + "'", str40, "POST");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putExtendedAttribute55);
    }

    @Test
    public void test49291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49291");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList3 = activity1.SamplingContextTags;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit6 = fieldVisit4.setFieldTrip(fieldTripSimple5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList9, plannedActivityArray8);
        putFieldVisit7.PlannedActivities = plannedActivityList9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str13 = domainObjectAttachment12.getId();
        java.lang.String str14 = domainObjectAttachment12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment12.setAttachment(attachment15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        domainObjectAttachment17.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = domainObjectAttachment17.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        java.lang.String str33 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment31.setAttachment(attachment34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment12, domainObjectAttachment17, domainObjectAttachment24, domainObjectAttachment29, domainObjectAttachment31, domainObjectAttachment36 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList39, domainObjectAttachmentArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit41 = putFieldVisit7.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan42 = putFieldVisit7.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple43 = putFieldVisit7.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule44 = putFieldVisit7.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str46 = samplingLocation45.Description;
        java.lang.String str47 = samplingLocation45.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation49 = samplingLocation45.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit50 = putFieldVisit7.setSamplingLocation(samplingLocation45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation52 = samplingLocation45.setAddress(address51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit53 = fieldVisit6.setSamplingLocation(samplingLocation52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan54 = fieldVisit6.getSamplingPlan();
        activity1.FieldVisit = fieldVisit6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation56 = fieldVisit6.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple59 = fieldTripSimple57.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        fieldVisit6.FieldTrip = fieldTripSimple57;
        java.time.OffsetDateTime offsetDateTime61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit62 = fieldVisit6.setEndTime(offsetDateTime61);
        org.junit.Assert.assertNull(samplingContextTagList3);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNotNull(plannedActivityArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putFieldVisit41);
        org.junit.Assert.assertNull(samplingPlan42);
        org.junit.Assert.assertNull(fieldTripSimple43);
        org.junit.Assert.assertNull(schedule44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(samplingLocation49);
        org.junit.Assert.assertNotNull(putFieldVisit50);
        org.junit.Assert.assertNotNull(samplingLocation52);
        org.junit.Assert.assertNotNull(fieldVisit53);
        org.junit.Assert.assertNull(samplingPlan54);
        org.junit.Assert.assertNotNull(samplingLocation56);
        org.junit.Assert.assertNotNull(fieldTripSimple59);
        org.junit.Assert.assertNotNull(fieldVisit62);
    }

    @Test
    public void test49292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49292");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        timeAlignedPoint0.NumericValue4 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setApprovalName7("'.'SSSSSSS");
        timeAlignedPoint12.Method1 = "'.'SSSSSSS";
        java.lang.String str15 = timeAlignedPoint12.getQualifiers8();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint12.setGradeCode6((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint19 = timeAlignedPoint17.setMethod3("'.'SSSSSSS");
        java.lang.Double double20 = timeAlignedPoint17.NumericValue10;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
        org.junit.Assert.assertNotNull(timeAlignedPoint19);
        org.junit.Assert.assertNull(double20);
    }

    @Test
    public void test49293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49293");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse qualifierResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList3 = getExportSpecimens2.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant5 = qualifier4.DateApplied;
        java.lang.String str6 = qualifier4.User;
        java.lang.String str7 = qualifier4.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = qualifier4.setDateApplied(instant11);
        getExportSpecimens2.Before = instant11;
        java.util.List<java.lang.String> strList16 = getExportSpecimens2.getLaboratoryIds();
        java.util.List<java.lang.String> strList17 = getExportSpecimens2.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType19 = samplingPlanPlannedActivityRecurrence18.RecurrenceFrequency;
        java.util.List<java.lang.String> strList20 = samplingPlanPlannedActivityRecurrence18.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier23 = putQualifier21.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        getObservationsV2_25.SpecimenIds = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray35 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags31.setTagUniqueIds(strList36);
        getObservationsV2_25.QualityControlTypes = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest40 = timeAlignedDataServiceRequest24.setTimeSeriesUniqueIds(strList36);
        putQualifier21.GroupIdentifiers = strList36;
        java.util.ArrayList<java.lang.String> strList42 = putQualifier21.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence18.MonthsOfYear = strList42;
        getExportSpecimens2.ActivityTypes = strList42;
        qualifierResponse1.GroupIdentifiers = strList42;
        qualifierResponse1.PublicIdentifier = "hi!:///AQUARIUS/Provisioning/v1";
        java.util.ArrayList<java.lang.String> strList48 = qualifierResponse1.GroupIdentifiers;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList50 = getObservationExportIIV2_49.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon53 = importItemTaxon51.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj54 = importItemTaxon51.Errors;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj56 = putLocationType55.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon57 = importItemTaxon51.setErrors((java.lang.Object) putLocationType55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        getObservationsV2_58.SpecimenIds = strList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        getObservationsV2_58.ActivityIds = strList69;
        importItemTaxon57.WarningMessages = strList69;
        getObservationExportIIV2_49.ProjectIds = strList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierBase qualifierBase75 = qualifierResponse1.setGroupIdentifiers(strList69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse76 = postVisitFileResponse0.setVisitUris(strList69);
        java.util.ArrayList<java.lang.String> strList77 = postVisitFileResponse0.VisitUris;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(qualifier14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(recurrenceFrequencyType19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(putQualifier23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest40);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(importItemTaxon53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(importItemTaxon57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(qualifierBase75);
        org.junit.Assert.assertNotNull(postVisitFileResponse76);
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test49294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49294");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium searchResultMedium0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium();
        java.lang.String str1 = searchResultMedium0.Cursor;
        java.lang.String str2 = searchResultMedium0.Cursor;
        java.lang.String str3 = searchResultMedium0.Cursor;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test49295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49295");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        timeAlignedPoint0.NumericValue8 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setDisplayValue4("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str12 = timeAlignedPoint11.getMethod1();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint11.setGradeCode3((java.lang.Long) 0L);
        java.lang.String str15 = timeAlignedPoint11.getQualifiers6();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test49296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49296");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType.Unspecified;
        dischargeChannelMeasurement0.ChannelEvenness = channelEvennessType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupPygmyMeter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement5 = dischargeChannelMeasurement0.setCurrentMeter(currentMeterType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double18 = putBulkEditResultGradesV2_17.DepthValue;
        java.util.List<java.lang.String> strList19 = putBulkEditResultGradesV2_17.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_25 = putBulkEditResultGradesV2_17.setStartModificationTime(instant23);
        qualifier16.DateApplied = instant23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_12.setStartResultTime(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement28 = dischargeChannelMeasurement5.setStartTime(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType29 = dischargeChannelMeasurement28.MeterSuspension;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType verticalVelocityDistributionType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement31 = dischargeChannelMeasurement28.setVerticalVelocityDistribution(verticalVelocityDistributionType30);
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertTrue("'" + channelEvennessType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType.Unspecified + "'", channelEvennessType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType.Unspecified));
        org.junit.Assert.assertTrue("'" + currentMeterType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupPygmyMeter + "'", currentMeterType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupPygmyMeter));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_25);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement28);
        org.junit.Assert.assertNull(meterSuspensionType29);
        org.junit.Assert.assertTrue("'" + verticalVelocityDistributionType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType.Unknown + "'", verticalVelocityDistributionType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement31);
    }

    @Test
    public void test49297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49297");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResult searchResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResult();
        java.lang.Integer int1 = searchResult0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResult searchResult3 = searchResult0.setTotalCount((java.lang.Integer) 100);
        java.util.List<java.lang.Object> objList4 = searchResult0.getDomainObjects();
        java.lang.String str5 = searchResult0.Cursor;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResult3);
        org.junit.Assert.assertNull(objList4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test49298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49298");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.Double double1 = locationDataServiceResponse0.Srid;
        java.lang.String str2 = locationDataServiceResponse0.getUniqueId();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList3 = locationDataServiceResponse0.ExtendedAttributes;
        java.lang.String str4 = locationDataServiceResponse0.UniqueId;
        locationDataServiceResponse0.Latitude = 0.0d;
        locationDataServiceResponse0.Description = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList9 = locationDataServiceResponse0.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant12 = timeSeriesDescription11.getCorrectedStartTime();
        java.lang.String str13 = timeSeriesDescription11.getComputationIdentifier();
        timeSeriesDescription11.TimeSeriesType = "-PT87591240H";
        java.lang.String str16 = timeSeriesDescription11.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        java.util.List<java.lang.String> strList24 = getObservationsV2_17.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary25.Reviewer = "";
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary25.MeasurementTime = instant28;
        getObservationsV2_17.StartResultTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription31 = timeSeriesDescription11.setCorrectedStartTime(instant28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities32.Limit = 10;
        java.util.List<java.lang.String> strList35 = getActivities32.ActivityTemplateId;
        java.lang.String str36 = getActivities32.Sort;
        java.util.List<java.lang.String> strList37 = getActivities32.CollectionMethodIds;
        java.lang.String str38 = getActivities32.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList40 = fieldVisitDescriptionListServiceResponse39.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList41 = fieldVisitDescriptionListServiceResponse39.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary42.Reviewer = "";
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary42.MeasurementTime = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary42.BaseFlow = baseFlowType47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType49 = dischargeSummary42.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList51 = ratingModelDescriptionListServiceResponse50.RatingModelDescriptions;
        java.time.Instant instant52 = ratingModelDescriptionListServiceResponse50.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType54 = calibrationCheck53.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay55 = calibrationCheck53.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary57.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse60.setNextToken(instant61);
        dischargeSummary57.MeasurementTime = instant61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse64 = locationDescriptionListServiceResponse56.setNextToken(instant61);
        java.time.Instant instant65 = locationDescriptionListServiceResponse56.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck66 = calibrationCheck53.setTime(instant65);
        java.time.Instant instant67 = calibrationCheck66.Time;
        ratingModelDescriptionListServiceResponse50.NextToken = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary42.setMeasurementEndTime(instant67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse70 = fieldVisitDescriptionListServiceResponse39.setResponseTime(instant67);
        getActivities32.FromStartTime = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription72 = timeSeriesDescription31.setRawStartTime(instant67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription74 = timeSeriesDescription31.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant75 = timeSeriesDescription31.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj78 = timeAlignedDataServiceRequest77.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant80 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse81 = locationDescriptionListServiceResponse79.setNextToken(instant80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest82 = timeAlignedDataServiceRequest77.setQueryFrom(instant80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription83 = timeSeriesDescription76.setRawStartTime(instant80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription85 = timeSeriesDescription83.setSubLocationIdentifier("");
        java.time.Instant instant86 = timeSeriesDescription83.LastModified;
        java.lang.Boolean boolean87 = timeSeriesDescription83.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray88 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList89 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList89, extendedAttributeArray88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription91 = timeSeriesDescription83.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription92 = timeSeriesDescription31.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse93 = locationDataServiceResponse10.setExtendedAttributes(extendedAttributeList89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse95 = locationDataServiceResponse10.setUniqueId("'.'SSSSSSS");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList96 = locationDataServiceResponse95.Tags;
        java.lang.String str97 = locationDataServiceResponse95.getDescription();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList98 = locationDataServiceResponse95.getExtendedAttributes();
        locationDataServiceResponse0.ExtendedAttributes = extendedAttributeList98;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(attachmentList9);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(timeSeriesDescription31);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(fieldVisitDescriptionList40);
        org.junit.Assert.assertNull(fieldVisitDescriptionList41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + baseFlowType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType49.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList51);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNull(calibrationCheckType54);
        org.junit.Assert.assertNull(doubleWithDisplay55);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(calibrationCheck66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(publishServiceResponse70);
        org.junit.Assert.assertNotNull(timeSeriesDescription72);
        org.junit.Assert.assertNotNull(timeSeriesDescription74);
        org.junit.Assert.assertNull(instant75);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse81);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest82);
        org.junit.Assert.assertNotNull(timeSeriesDescription83);
        org.junit.Assert.assertNotNull(timeSeriesDescription85);
        org.junit.Assert.assertNull(instant86);
        org.junit.Assert.assertNull(boolean87);
        org.junit.Assert.assertNotNull(extendedAttributeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription91);
        org.junit.Assert.assertNotNull(timeSeriesDescription92);
        org.junit.Assert.assertNotNull(locationDataServiceResponse93);
        org.junit.Assert.assertNotNull(locationDataServiceResponse95);
        org.junit.Assert.assertNull(tagMetadataList96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(extendedAttributeList98);
    }

    @Test
    public void test49299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49299");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        java.lang.String str8 = timeAlignedPoint0.Qualifiers9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setGradeName10("");
        java.lang.String str11 = timeAlignedPoint10.getApprovalName9();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint10.setApprovalLevel7((java.lang.Long) 10L);
        java.lang.String str14 = timeAlignedPoint13.GradeName3;
        java.lang.Long long15 = timeAlignedPoint13.getGradeCode8();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(long15);
    }

    @Test
    public void test49300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49300");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest1.ReportTitle = "MinDuration";
        reportListServiceRequest1.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList7 = getExportSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        getExportSpecimens6.Before = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark20.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList24 = fieldVisitDataServiceResponse23.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse26 = fieldVisitDataServiceResponse23.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        fieldVisitDataServiceResponse23.ResponseTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark20.setCreateTime(instant30);
        getExportSpecimens6.EndModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest35 = reportListServiceRequest1.setCreatedFrom(instant30);
        getSamplingLocations0.StartModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        getObservationsV2_43.DepthUnitCustomId = "hi!";
        java.lang.String str46 = getObservationsV2_43.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        java.util.List<java.lang.String> strList62 = getObservationsV2_47.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList63 = getObservationsV2_47.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType64 = getObservationsV2_47.FieldResultType;
        java.time.Instant instant65 = getObservationsV2_47.getEndObservedTime();
        java.lang.String str66 = getObservationsV2_47.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray71 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = putLocationTags67.setTagUniqueIds(strList72);
        java.util.ArrayList<java.lang.String> strList75 = putLocationTags74.TagUniqueIds;
        getObservationsV2_47.ProjectIds = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_43.setQualityControlTypes((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations78 = getSamplingLocations0.setLocationTypeIds((java.util.List<java.lang.String>) strList75);
        java.time.Instant instant79 = getSamplingLocations0.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations81 = getSamplingLocations0.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations83 = getSamplingLocations81.setLimit((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations85 = getSamplingLocations83.setCursor("hi!");
        java.util.List<java.lang.String> strList86 = getSamplingLocations85.getLocationGroupTypeIds();
        java.time.Instant instant87 = getSamplingLocations85.StartModificationTime;
        java.lang.Object obj88 = getSamplingLocations85.getResponseType();
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList24);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNotNull(reportListServiceRequest35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(fieldResultType64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putLocationTags74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(getSamplingLocations78);
        org.junit.Assert.assertNull(instant79);
        org.junit.Assert.assertNotNull(getSamplingLocations81);
        org.junit.Assert.assertNotNull(getSamplingLocations83);
        org.junit.Assert.assertNotNull(getSamplingLocations85);
        org.junit.Assert.assertNull(strList86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSamplingLocation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSamplingLocation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSamplingLocation");
    }

    @Test
    public void test49301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49301");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationAttachments getSamplingLocationAttachments0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationAttachments getSamplingLocationAttachments2 = getSamplingLocationAttachments0.setId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationAttachments getSamplingLocationAttachments4 = getSamplingLocationAttachments2.setId("http");
        java.lang.Object obj5 = getSamplingLocationAttachments2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationAttachments getSamplingLocationAttachments7 = getSamplingLocationAttachments2.setId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.lang.String str8 = getSamplingLocationAttachments2.Id;
        org.junit.Assert.assertNotNull(getSamplingLocationAttachments2);
        org.junit.Assert.assertNotNull(getSamplingLocationAttachments4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertNotNull(getSamplingLocationAttachments7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****" + "'", str8, "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
    }

    @Test
    public void test49302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49302");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList1 = postReflectedTimeSeries0.Points;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend4 = postTimeSeriesOverwriteAppend2.setTimeRange(interval3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval5 = postTimeSeriesOverwriteAppend4.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] timeSeriesPointArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] { timeSeriesPoint6 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>) timeSeriesPointList8, timeSeriesPointArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend10 = postTimeSeriesOverwriteAppend4.setPoints(timeSeriesPointList8);
        java.lang.String str11 = postTimeSeriesOverwriteAppend4.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend14 = postTimeSeriesOverwriteAppend12.setTimeRange(interval13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend16 = postTimeSeriesOverwriteAppend12.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend19 = postTimeSeriesOverwriteAppend17.setTimeRange(interval18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval20 = postTimeSeriesOverwriteAppend19.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] timeSeriesPointArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint[] { timeSeriesPoint21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint>) timeSeriesPointList23, timeSeriesPointArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend25 = postTimeSeriesOverwriteAppend19.setPoints(timeSeriesPointList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend26 = postTimeSeriesOverwriteAppend12.setPoints(timeSeriesPointList23);
        postTimeSeriesOverwriteAppend4.Points = timeSeriesPointList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries postReflectedTimeSeries28 = postReflectedTimeSeries0.setPoints(timeSeriesPointList23);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList29 = postReflectedTimeSeries0.getPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval30 = postReflectedTimeSeries0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries postReflectedTimeSeries32 = postReflectedTimeSeries0.setUniqueId("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNull(timeSeriesPointList1);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend4);
        org.junit.Assert.assertNull(interval5);
        org.junit.Assert.assertNotNull(timeSeriesPointArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend14);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend16);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend19);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(timeSeriesPointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend25);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend26);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries28);
        org.junit.Assert.assertNotNull(timeSeriesPointList29);
        org.junit.Assert.assertNull(interval30);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries32);
    }

    @Test
    public void test49303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49303");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        java.lang.String str1 = reportListServiceRequest0.getReportTitle();
        java.lang.Integer int2 = reportListServiceRequest0.MaxResults;
        java.util.ArrayList<java.lang.String> strList3 = reportListServiceRequest0.getReportUniqueIds();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(strList3);
    }

    @Test
    public void test49304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49304");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UniqueId = "/AQUARIUS/Acquisition/v2";
        java.lang.String str5 = locationDescription2.getIdentifier();
        java.lang.String str6 = locationDescription2.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription8 = locationDescription2.setUtcOffset((java.lang.Double) 100.0d);
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str6, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(locationDescription8);
    }

    @Test
    public void test49305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49305");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        postRecurringReport19.NextGenerationDate = instant23;
        java.time.Instant instant26 = postRecurringReport19.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset27 = statisticalDateTimeOffset18.setDateTimeOffset(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription35 = timeSeriesDescription28.setRawStartTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset36 = statisticalDateTimeOffset18.setDateTimeOffset(instant32);
        timeSeries0.LastModifiedTime = instant32;
        timeSeries0.ComputationIdentifier = "https";
        java.lang.Boolean boolean40 = timeSeries0.isPublish();
        java.lang.String str41 = timeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries43 = timeSeries0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str44 = timeSeries43.UtcOffset;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(timeSeriesDescription35);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset36);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + false + "'", boolean40, false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(timeSeries43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test49306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49306");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        java.util.List<java.lang.String> strList16 = getObservationsV2_1.getLabReportIds();
        importItem0.Errors = getObservationsV2_1;
        java.lang.Object obj18 = importItem0.getExistingItem();
        importItem0.Input = "hi!";
        java.lang.Object obj21 = importItem0.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem23 = importItem0.setStatus(importItemStatusType22);
        importItem23.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate26.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = specimenTemplate26.setId("hi!");
        java.lang.Boolean boolean31 = specimenTemplate30.getFiltered();
        importItem23.Item = specimenTemplate30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = getObservationsV2_35.setDataClassifications((java.util.List<java.lang.String>) strList39);
        postTag34.PickListValues = strList39;
        java.util.ArrayList<java.lang.String> strList43 = postTag34.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor44 = processor33.setInputTimeSeriesUniqueIds(strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem45 = importItem23.setWarningMessages((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem47 = importItem23.setStatus(importItemStatusType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem49 = importItem23.setInput("2021.8.9990");
        java.lang.String str50 = importItem49.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem52 = importItem49.setStatus(importItemStatusType51);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + importItemStatusType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem23);
        org.junit.Assert.assertNotNull(specimenTemplate30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_41);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(processor44);
        org.junit.Assert.assertNotNull(importItem45);
        org.junit.Assert.assertNotNull(importItem47);
        org.junit.Assert.assertNotNull(importItem49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2021.8.9990" + "'", str50, "2021.8.9990");
        org.junit.Assert.assertNotNull(importItem52);
    }

    @Test
    public void test49307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49307");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRoles locationFolderUserRoles0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRoles();
        java.lang.String str1 = locationFolderUserRoles0.LocationFolderUniqueId;
        java.lang.String str2 = locationFolderUserRoles0.getLocationFolderUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test49308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49308");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase();
        java.lang.String str1 = monitoringMethodWriteBase0.getMethodCode();
        monitoringMethodWriteBase0.ParameterUniqueId = "http://MaxDurationhttp/json/reply/ArrayList";
        monitoringMethodWriteBase0.ParameterUniqueId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str6 = monitoringMethodWriteBase0.ParameterUniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str6, "****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test49309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49309");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        java.lang.String str3 = calibrationCheck0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = calibrationCheck0.Difference;
        java.lang.String str5 = calibrationCheck0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck7 = calibrationCheck0.setSensorUniqueId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType8 = calibrationCheck7.CalibrationCheckType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck10 = calibrationCheck7.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = calibrationCheck10.getValue();
        java.lang.String str12 = calibrationCheck10.getSubLocationIdentifier();
        java.lang.Boolean boolean13 = calibrationCheck10.IsValid;
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(calibrationCheck7);
        org.junit.Assert.assertNull(calibrationCheckType8);
        org.junit.Assert.assertNotNull(calibrationCheck10);
        org.junit.Assert.assertNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
    }

    @Test
    public void test49310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49310");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.lang.String str1 = locationNote0.LastModifiedByUser;
        java.lang.String str2 = locationNote0.getLastModifiedByUser();
        java.lang.String str3 = locationNote0.getLastModifiedByUser();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList4 = locationNote0.getTags();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList5 = locationNote0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark8 = locationRemark6.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList10 = fieldVisitDataServiceResponse9.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse12 = fieldVisitDataServiceResponse9.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary13.Reviewer = "";
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary13.MeasurementTime = instant16;
        fieldVisitDataServiceResponse9.ResponseTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark19 = locationRemark6.setCreateTime(instant16);
        java.time.Instant instant20 = locationRemark19.getFromTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark19.setRemark("/AQUARIUS");
        java.time.Instant instant23 = locationRemark22.CreateTime;
        java.time.Instant instant24 = locationRemark22.getCreateTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote25 = locationNote0.setCreateTimeUtc(instant24);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(tagMetadataList4);
        org.junit.Assert.assertNull(tagMetadataList5);
        org.junit.Assert.assertNotNull(locationRemark8);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList10);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationRemark19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationNote25);
    }

    @Test
    public void test49311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49311");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = null;
        analyticalGroupItem0.AnalysisMethod = analysisMethod3;
        java.lang.String str5 = analyticalGroupItem0.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem0.AnalysisMethod;
        java.lang.String str8 = analyticalGroupItem0.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem10 = analyticalGroupItem0.setHoldingTime("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem11.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod14 = null;
        analyticalGroupItem11.AnalysisMethod = analysisMethod14;
        java.lang.String str16 = analyticalGroupItem11.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str18 = analysisMethod17.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList19 = analysisMethod17.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = analyticalGroupItem11.setAnalysisMethod(analysisMethod17);
        java.lang.String str21 = analysisMethod17.Description;
        java.lang.String str22 = analysisMethod17.Context;
        analyticalGroupItem0.AnalysisMethod = analysisMethod17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analysisMethod17.setId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNull(analysisMethod2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(analysisMethod6);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(analyticalGroupItem10);
        org.junit.Assert.assertNull(analysisMethod12);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(importHistoryEventSimpleList19);
        org.junit.Assert.assertNotNull(analyticalGroupItem20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(analysisMethod25);
    }

    @Test
    public void test49312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49312");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        java.lang.String str2 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observationNestedInSpecimen0.LabInstruction = labInstruction3;
        java.lang.String str5 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult6 = observationNestedInSpecimen0.getCategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal9 = observationMinimal7.setSpecimen(specimenNestedInActivity8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = observationMinimal9.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue12 = categoricalResult11.getFixedValue();
        observationMinimal9.CategoricalResult = categoricalResult11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult14.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue17 = categoricalResult14.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult14.NullMeasureQualifier = nullMeasureQualifier18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult20 = categoricalResult11.setNullMeasureQualifier(nullMeasureQualifier18);
        observationNestedInSpecimen0.CategoricalResult = categoricalResult20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal24 = observationMinimal22.setSpecimen(specimenNestedInActivity23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = observationMinimal24.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue27 = categoricalResult26.getFixedValue();
        observationMinimal24.CategoricalResult = categoricalResult26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = nullMeasureQualifier29.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult31 = categoricalResult26.setNullMeasureQualifier(nullMeasureQualifier29);
        java.lang.String str32 = nullMeasureQualifier29.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult33 = categoricalResult20.setNullMeasureQualifier(nullMeasureQualifier29);
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(categoricalResult6);
        org.junit.Assert.assertNotNull(observationMinimal9);
        org.junit.Assert.assertNull(observedProperty10);
        org.junit.Assert.assertNull(categoricalValue12);
        org.junit.Assert.assertNull(categoricalValue17);
        org.junit.Assert.assertNotNull(categoricalResult20);
        org.junit.Assert.assertNotNull(observationMinimal24);
        org.junit.Assert.assertNull(observedProperty25);
        org.junit.Assert.assertNull(categoricalValue27);
        org.junit.Assert.assertNull(auditAttributes30);
        org.junit.Assert.assertNotNull(categoricalResult31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(categoricalResult33);
    }

    @Test
    public void test49313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49313");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade2 = searchResultResultGrade0.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade4 = searchResultResultGrade0.setCursor("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.lang.String str5 = searchResultResultGrade0.getCursor();
        org.junit.Assert.assertNotNull(searchResultResultGrade2);
        org.junit.Assert.assertNotNull(searchResultResultGrade4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****" + "'", str5, "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
    }

    @Test
    public void test49314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49314");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        correctionOperation0.User = "/AQUARIUS/Provisioning/v1";
        java.lang.String str3 = correctionOperation0.User;
        java.time.Instant instant4 = correctionOperation0.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder5 = correctionOperation0.getProcessingOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation7 = correctionOperation0.setStackPosition((java.lang.Integer) 0);
        java.time.Instant instant8 = correctionOperation0.getDateAppliedUtc();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str3, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(correctionProcessingOrder5);
        org.junit.Assert.assertNotNull(correctionOperation7);
        org.junit.Assert.assertNull(instant8);
    }

    @Test
    public void test49315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49315");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList1 = putSchedule0.SchedulePlannedActivities;
        java.time.OffsetDateTime offsetDateTime2 = putSchedule0.EndDate;
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule4 = putSchedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule6 = putSchedule0.setId("");
        java.time.OffsetDateTime offsetDateTime7 = putSchedule0.getStartDate();
        org.junit.Assert.assertNull(schedulePlannedActivityList1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(putSchedule4);
        org.junit.Assert.assertNotNull(putSchedule6);
        org.junit.Assert.assertNull(offsetDateTime7);
    }

    @Test
    public void test49316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49316");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = pointVelocityDischargeActivity0.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList2 = pointVelocityDischargeActivity0.Verticals;
        java.lang.String str3 = pointVelocityDischargeActivity0.SerialNumber;
        java.lang.Boolean boolean4 = pointVelocityDischargeActivity0.isMeterInspectedAfter();
        pointVelocityDischargeActivity0.MeterInspectedBefore = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay7;
        pointVelocityDischargeActivity0.Manufacturer = "http";
        java.lang.String str11 = pointVelocityDischargeActivity0.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity13 = pointVelocityDischargeActivity0.setNumberOfPanels((java.lang.Integer) 100);
        java.lang.String str14 = pointVelocityDischargeActivity13.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = pointVelocityDischargeActivity13.setSuspensionWeight("0001-01-01T00:00:00.0000000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity18 = pointVelocityDischargeActivity16.setNumberOfPanels((java.lang.Integer) 10);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(verticalList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity16);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity18);
    }

    @Test
    public void test49317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49317");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setMaxNumericResultValue((java.lang.Double) 100.0d);
        java.util.List<java.lang.String> strList4 = getChartDataV2_3.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
    }

    @Test
    public void test49318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49318");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str10 = pointVelocityDischargeActivity9.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity9.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = pointVelocityDischargeActivity12.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary16.DifferenceDuringVisit = doubleWithDisplay17;
        java.lang.String str19 = doubleWithDisplay17.getDisplay();
        pointVelocityDischargeActivity12.MeanObservationDurationInSeconds = doubleWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement21 = groundWaterMeasurement8.setHold(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str23 = volumetricDischargeReading22.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = dischargeSummary24.getMeanGageHeight();
        java.lang.String str26 = dischargeSummary24.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay29.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary24.DurationInHours = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading33 = volumetricDischargeReading22.setDischarge(doubleWithDisplay31);
        groundWaterMeasurement21.TapeCorrection = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis35 = trendLineAnalysis0.setSlopeStandardError(doubleWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset37 = timeSeriesPoint36.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant39 = statisticalDateTimeOffset38.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint40 = timeSeriesPoint36.setTimestamp(statisticalDateTimeOffset38);
        trendLineAnalysis0.StartPoint = timeSeriesPoint36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str43 = pointVelocityDischargeActivity42.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity42.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity47 = pointVelocityDischargeActivity42.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = vertical48.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType50 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical48.VerticalType = verticalType50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType53 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation54 = velocityObservation52.setDeploymentMethod(deploymentMethodType53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType56 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation57 = velocityObservation55.setDeploymentMethod(deploymentMethodType56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList59, velocityDepthObservationArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation61 = velocityObservation57.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation62 = velocityObservation52.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical63 = vertical48.setVelocityObservation(velocityObservation52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical65 = vertical63.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay64);
        pointVelocityDischargeActivity42.Width = datumConvertedQuantityWithDisplay64;
        trendLineAnalysis0.Slope = datumConvertedQuantityWithDisplay64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = trendLineAnalysis0.getIntercept();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay69 = trendLineAnalysis0.Slope;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(groundWaterMeasurement21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(volumetricDischargeReading33);
        org.junit.Assert.assertNotNull(trendLineAnalysis35);
        org.junit.Assert.assertNull(statisticalDateTimeOffset37);
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertNotNull(timeSeriesPoint40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity47);
        org.junit.Assert.assertNull(quantityWithDisplay49);
        org.junit.Assert.assertTrue("'" + verticalType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType50.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType53.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation54);
        org.junit.Assert.assertTrue("'" + deploymentMethodType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType56.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation57);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(velocityObservation61);
        org.junit.Assert.assertNotNull(velocityObservation62);
        org.junit.Assert.assertNotNull(vertical63);
        org.junit.Assert.assertNotNull(vertical65);
        org.junit.Assert.assertNull(doubleWithDisplay68);
        org.junit.Assert.assertNotNull(doubleWithDisplay69);
    }

    @Test
    public void test49319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49319");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str2 = postBasicTimeSeries1.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase5 = putParameter3.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str6 = putParameter3.getRoundingSpec();
        java.lang.String str7 = putParameter3.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList9 = postCalculatedDerivedTimeSeries8.TimeSeriesUniqueIds;
        java.lang.String str10 = postCalculatedDerivedTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries12 = postCalculatedDerivedTimeSeries8.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str13 = postCalculatedDerivedTimeSeries12.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart16 = inputPart14.setHeaders((java.lang.Object) interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries12.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase18 = putParameter3.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase20 = parameterBase18.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase18.InterpolationType = interpolationType21;
        postBasicTimeSeries1.InterpolationType = interpolationType21;
        parameter0.InterpolationType = interpolationType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter26 = parameter0.setUniqueId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        parameter0.UnitGroupIdentifier = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        java.lang.Boolean boolean29 = parameter0.isSystem();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(parameterBase5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str13, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart16);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(parameterBase18);
        org.junit.Assert.assertNotNull(parameterBase20);
        org.junit.Assert.assertTrue("'" + interpolationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(parameter26);
        org.junit.Assert.assertNull(boolean29);
    }

    @Test
    public void test49320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49320");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        java.time.Instant instant2 = calibrationCheck0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck4 = calibrationCheck0.setModel("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck0.setModel("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = dischargeSummary7.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary9.DifferenceDuringVisit = doubleWithDisplay10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = doubleWithDisplay10.setNumeric((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck14 = calibrationCheck6.setStandard(doubleWithDisplay10);
        java.lang.String str15 = calibrationCheck14.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = calibrationCheck14.Value;
        java.lang.String str17 = calibrationCheck14.Model;
        calibrationCheck14.SensorUniqueId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        calibrationCheck14.Parameter = "****b4959745-e712-43bc-98bb-4017f673cd3d****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = calibrationCheck14.getDifference();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(calibrationCheck4);
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertNotNull(dischargeSummary9);
        org.junit.Assert.assertNotNull(doubleWithDisplay13);
        org.junit.Assert.assertNotNull(calibrationCheck14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str17, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(doubleWithDisplay22);
    }

    @Test
    public void test49321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49321");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Boolean boolean3 = extendedAttribute2.isAppliesToLocations();
        java.lang.String str4 = extendedAttribute2.DefaultValue;
        java.lang.String str5 = extendedAttribute2.getUniqueId();
        extendedAttribute2.AppliesToTimeSeries = false;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str4, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test49322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49322");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup3 = postAccessGroup0.setDescription("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup5 = postAccessGroup0.setName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup7 = postAccessGroup0.setId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList8 = postAccessGroup0.getSamplingLocationGroups();
        java.lang.String str9 = postAccessGroup0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postAccessGroup3);
        org.junit.Assert.assertNotNull(postAccessGroup5);
        org.junit.Assert.assertNotNull(postAccessGroup7);
        org.junit.Assert.assertNull(samplingLocationGroupList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str9, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test49323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49323");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType0.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = thresholdType0.ReferenceValueCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Warning;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType5 = thresholdType0.setSeverity(thresholdTypeSeverity4);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + thresholdTypeSeverity4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Warning + "'", thresholdTypeSeverity4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Warning));
        org.junit.Assert.assertNotNull(thresholdType5);
    }

    @Test
    public void test49324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49324");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        getObservationsV2_0.StartResultTime = instant11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_0.setCustomId("http://MaxDurationhttp");
        java.util.List<java.lang.String> strList16 = getObservationsV2_0.QualityControlTypes;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(strList16);
    }

    @Test
    public void test49325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49325");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum();
        java.lang.Double double1 = putBaseStandardReferenceDatum0.getUncertainty();
        putBaseStandardReferenceDatum0.Comments = "";
        java.lang.String str4 = putBaseStandardReferenceDatum0.getMethod();
        putBaseStandardReferenceDatum0.Uncertainty = 10.0d;
        putBaseStandardReferenceDatum0.StandardIdentifier = "****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum10 = putBaseStandardReferenceDatum0.setComments("http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatum10);
    }

    @Test
    public void test49326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49326");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int1 = samplingLocationImportSummary0.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList2 = samplingLocationImportSummary0.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = samplingLocationImportSummary0.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = samplingLocationImportSummary0.getImportHistoryEventSimple();
        samplingLocationImportSummary0.SuccessCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary8 = samplingLocationImportSummary0.setInvalidRowsCsvUrl("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary10 = samplingLocationImportSummary0.setSummaryReportText("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.Integer int11 = samplingLocationImportSummary0.UpdateCount;
        java.lang.String str12 = samplingLocationImportSummary0.SummaryReportText;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(importItemSamplingLocationList2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(importHistoryEventSimple4);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary8);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str12, "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
    }

    @Test
    public void test49327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49327");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType1 = expandedRatingCurve0.Type;
        expandedRatingCurve0.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve5 = expandedRatingCurve0.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList6 = expandedRatingCurve5.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList7 = expandedRatingCurve5.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve9 = expandedRatingCurve5.setId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit10 = expandedRatingCurve5.InputParameter;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList11 = expandedRatingCurve5.Shifts;
        org.junit.Assert.assertNull(ratingCurveType1);
        org.junit.Assert.assertNotNull(expandedRatingCurve5);
        org.junit.Assert.assertNull(ratingShiftList6);
        org.junit.Assert.assertNull(ratingShiftList7);
        org.junit.Assert.assertNotNull(expandedRatingCurve9);
        org.junit.Assert.assertNull(parameterWithUnit10);
        org.junit.Assert.assertNull(ratingShiftList11);
    }

    @Test
    public void test49328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49328");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData2 = postImportVerticalProfileData0.setActivityId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData4 = postImportVerticalProfileData0.setSamplingLocationIds("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData6 = postImportVerticalProfileData0.setSamplingLocationIds("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData8 = postImportVerticalProfileData6.setSamplingLocationIds("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = postImportVerticalProfileData6.getActivityId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData11 = postImportVerticalProfileData6.setSamplingLocationIds("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNotNull(postImportVerticalProfileData2);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData4);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData6);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
        org.junit.Assert.assertNotNull(postImportVerticalProfileData11);
    }

    @Test
    public void test49329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49329");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList6, importItemObservedPropertyArray5);
        observedPropertyImportSummary0.ErrorImportItems = importItemObservedPropertyList6;
        java.lang.String str9 = observedPropertyImportSummary0.SummaryReportText;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList10 = observedPropertyImportSummary0.ImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList11 = observedPropertyImportSummary0.ImportJobErrors;
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(importItemObservedPropertyList10);
        org.junit.Assert.assertNull(importErrorList11);
    }

    @Test
    public void test49330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49330");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str34 = getObservationsV2_33.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        getObservationsV2_33.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_12.setObservedPropertyIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest4.setTimeSeriesOutputUnitIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField44 = extendedAttributeField2.setValueOptions((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField46 = extendedAttributeField44.setIsReadOnly((java.lang.Boolean) true);
        extendedAttributeField46.NumericType = "2021.4.62.0";
        java.lang.Integer int49 = extendedAttributeField46.NumericScale;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField51 = extendedAttributeField46.setCanBeEmpty((java.lang.Boolean) true);
        extendedAttributeField51.NumericScale = 100;
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(extendedAttributeField44);
        org.junit.Assert.assertNotNull(extendedAttributeField46);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(extendedAttributeField51);
    }

    @Test
    public void test49331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49331");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getLabReportIds();
        importItem3.Errors = getObservationsV2_4;
        java.lang.Object obj21 = importItem3.getExistingItem();
        importItem3.Input = "hi!";
        java.lang.Object obj24 = importItem3.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = importItem3.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation27 = importItemSamplingLocation2.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType28 = importItemSamplingLocation2.getStatus();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList29 = importItemSamplingLocation2.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation30 = importItemSamplingLocation2.ExistingItem;
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + importItemStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem26);
        org.junit.Assert.assertNotNull(importItemSamplingLocation27);
        org.junit.Assert.assertTrue("'" + importItemStatusType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNull(importChangeItemList29);
        org.junit.Assert.assertNull(samplingLocation30);
    }

    @Test
    public void test49332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49332");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse85 = locationDataServiceResponse83.setIsExternalLocation((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum locationDatum86 = locationDataServiceResponse85.LocationDatum;
        java.lang.Double double87 = locationDataServiceResponse85.getUtcOffset();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark> locationRemarkList88 = locationDataServiceResponse85.LocationRemarks;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList89 = locationDataServiceResponse85.getTags();
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNotNull(locationDataServiceResponse85);
        org.junit.Assert.assertNull(locationDatum86);
        org.junit.Assert.assertNull(double87);
        org.junit.Assert.assertNull(locationRemarkList88);
        org.junit.Assert.assertNull(tagMetadataList89);
    }

    @Test
    public void test49333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49333");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = importItemSamplingLocation0.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = timeAlignedDataServiceRequest5.setQueryFrom(instant8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray15 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags11.setTagUniqueIds(strList16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest5.setTimeSeriesOutputUnitIds(strList16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation20 = importItemObservation4.setFields((java.util.List<java.lang.String>) strList16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        java.util.List<java.lang.String> strList38 = getObservationsV2_23.getLabReportIds();
        importItem22.Errors = getObservationsV2_23;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList40 = importItem22.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation43 = importItemSamplingLocation41.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        java.util.List<java.lang.String> strList60 = getObservationsV2_45.getLabReportIds();
        importItem44.Errors = getObservationsV2_45;
        java.lang.Object obj62 = importItem44.getExistingItem();
        importItem44.Input = "hi!";
        java.lang.Object obj65 = importItem44.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType66 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem67 = importItem44.setStatus(importItemStatusType66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation68 = importItemSamplingLocation43.setStatus(importItemStatusType66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList70 = importItemObject69.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList72 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList72, importChangeItemArray71);
        importItemObject69.ItemComparison = importChangeItemList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray79 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = putLocationTags75.setTagUniqueIds(strList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject83 = importItemObject69.setExistingItem((java.lang.Object) putLocationTags75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser86 = openIdConnectUser84.setIdentifier("");
        java.lang.Boolean boolean87 = openIdConnectUser86.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject88 = importItemObject69.setErrors((java.lang.Object) openIdConnectUser86);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList89 = importItemObject88.ItemComparison;
        importItemSamplingLocation68.ItemComparison = importChangeItemList89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem91 = importItem22.setItemComparison(importChangeItemList89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty92 = importItemObservedProperty21.setItemComparison(importChangeItemList89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation93 = importItemObservation4.setItemComparison(importChangeItemList89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation94 = importItemSamplingLocation0.setItemComparison(importChangeItemList89);
        java.lang.String str95 = net.servicestack.client.JsonServiceClient.GetSendMethod((java.lang.Object) importItemSamplingLocation94);
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNull(importChangeItemList3);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest10);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(importItemObservation20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(importChangeItemList40);
        org.junit.Assert.assertNotNull(importItemSamplingLocation43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + importItemStatusType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem67);
        org.junit.Assert.assertNotNull(importItemSamplingLocation68);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(importChangeItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(putLocationTags82);
        org.junit.Assert.assertNotNull(importItemObject83);
        org.junit.Assert.assertNotNull(openIdConnectUser86);
        org.junit.Assert.assertNull(boolean87);
        org.junit.Assert.assertNotNull(importItemObject88);
        org.junit.Assert.assertNotNull(importChangeItemList89);
        org.junit.Assert.assertNotNull(importItem91);
        org.junit.Assert.assertNotNull(importItemObservedProperty92);
        org.junit.Assert.assertNotNull(importItemObservation93);
        org.junit.Assert.assertNotNull(importItemSamplingLocation94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "POST" + "'", str95, "POST");
    }

    @Test
    public void test49334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49334");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "MinDuration";
        approval0.ApprovalLevel = 10;
        java.lang.String str6 = approval0.getLevelDescription();
        java.lang.String str7 = approval0.getLevelDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MinDuration" + "'", str6, "MinDuration");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinDuration" + "'", str7, "MinDuration");
    }

    @Test
    public void test49335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49335");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.Name;
        postAccessGroup0.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation6 = postSamplingLocation4.setCustomId("hi!");
        java.lang.String str7 = postSamplingLocation6.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation10 = postSamplingLocation8.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation12 = postSamplingLocation8.setAddress(address11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = postSamplingLocation12.getElevation();
        postSamplingLocation12.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = postSamplingLocation12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList19, samplingLocationGroupArray18);
        postAccessGroup17.SamplingLocationGroups = samplingLocationGroupList19;
        postSamplingLocation12.SamplingLocationGroups = samplingLocationGroupList19;
        postSamplingLocation6.SamplingLocationGroups = samplingLocationGroupList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup24 = postAccessGroup0.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList19);
        java.lang.String str25 = postAccessGroup0.getId();
        postAccessGroup0.Name = "http://MaxDurationhttp/json/reply/String";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSamplingLocation6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postSamplingLocation10);
        org.junit.Assert.assertNotNull(postSamplingLocation12);
        org.junit.Assert.assertNull(quantity13);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(postAccessGroup24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test49336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49336");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setComments("");
        java.lang.String str8 = sensor0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor10 = sensor0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str11 = sensor10.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor13 = sensor10.setSubLocationIdentifier("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor15 = sensor13.setName("http://MaxDurationhttp/json/reply/Double");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(sensor10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(sensor13);
        org.junit.Assert.assertNotNull(sensor15);
    }

    @Test
    public void test49337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49337");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        java.lang.String str1 = postImportLabReportData0.TimeZoneOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData3 = postImportLabReportData0.setCreateMissingObjects((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData5 = postImportLabReportData0.setTimeZoneOffset("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Boolean boolean6 = postImportLabReportData0.UpdateExistingResults;
        postImportLabReportData0.CreateMissingObjects = true;
        postImportLabReportData0.CreateMissingObjects = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData12 = postImportLabReportData0.setCreateMissingObjects((java.lang.Boolean) true);
        postImportLabReportData0.FileType = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData16 = postImportLabReportData0.setFileType("multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postImportLabReportData3);
        org.junit.Assert.assertNotNull(postImportLabReportData5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(postImportLabReportData12);
        org.junit.Assert.assertNotNull(postImportLabReportData16);
    }

    @Test
    public void test49338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49338");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        putObservedProperty0.Name = "MinInstant";
        putObservedProperty0.CasNumber = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType5 = putObservedProperty0.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit8 = putUnit6.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup9.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup13 = unitGroup9.setSystemCode(unitGroupSystemCodeType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit14 = putUnit8.setUnitGroup(unitGroup13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType15 = null;
        unitGroup13.SystemCode = unitGroupSystemCodeType15;
        putObservedProperty0.UnitGroup = unitGroup13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = unitGroup13.setId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType20 = unitGroup19.getSystemCode();
        java.lang.String str21 = unitGroup19.getCustomId();
        org.junit.Assert.assertNull(resultType5);
        org.junit.Assert.assertNotNull(putUnit8);
        org.junit.Assert.assertNotNull(unitGroup13);
        org.junit.Assert.assertNotNull(putUnit14);
        org.junit.Assert.assertNotNull(unitGroup19);
        org.junit.Assert.assertNull(unitGroupSystemCodeType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "https" + "'", str21, "https");
    }

    @Test
    public void test49339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49339");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        java.lang.String str1 = postSpreadsheetTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType2 = postSpreadsheetTemplate0.Type;
        java.lang.String str3 = postSpreadsheetTemplate0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList6, plannedActivityArray5);
        putFieldVisit4.PlannedActivities = plannedActivityList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str10 = domainObjectAttachment9.getId();
        java.lang.String str11 = domainObjectAttachment9.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment13 = domainObjectAttachment9.setAttachment(attachment12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str15 = domainObjectAttachment14.getId();
        java.lang.String str16 = domainObjectAttachment14.getId();
        domainObjectAttachment14.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment20 = domainObjectAttachment14.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str22 = domainObjectAttachment21.getId();
        java.lang.String str23 = domainObjectAttachment21.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = domainObjectAttachment21.setAttachment(attachment24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str27 = domainObjectAttachment26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str29 = domainObjectAttachment28.getId();
        java.lang.String str30 = domainObjectAttachment28.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = domainObjectAttachment28.setAttachment(attachment31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str34 = domainObjectAttachment33.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment9, domainObjectAttachment14, domainObjectAttachment21, domainObjectAttachment26, domainObjectAttachment28, domainObjectAttachment33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList36, domainObjectAttachmentArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit38 = putFieldVisit4.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan39 = putFieldVisit4.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        java.lang.String str43 = domainObjectAttachment41.getId();
        domainObjectAttachment41.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment41.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment40, domainObjectAttachment41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList49, domainObjectAttachmentArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit51 = putFieldVisit4.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate52 = postSpreadsheetTemplate0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = observation53.setPlannedFieldResult(plannedFieldResult54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction56 = null;
        observation55.LabInstruction = labInstruction56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = observation55.setStatistics(observationStatistics58);
        java.time.OffsetDateTime offsetDateTime60 = observation59.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList61 = observation59.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation63 = observation59.setObservedProperty(observedProperty62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade64 = observation63.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails67 = labResultDetails65.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails69 = labResultDetails67.setAuditAttributes(auditAttributes68);
        observation63.AuditAttributes = auditAttributes68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate71 = postSpreadsheetTemplate52.setAuditAttributes(auditAttributes68);
        postSpreadsheetTemplate71.Description = "hi!";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(spreadsheetTemplateType2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(plannedActivityArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(domainObjectAttachment13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(domainObjectAttachment20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(domainObjectAttachment25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachment32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putFieldVisit38);
        org.junit.Assert.assertNull(samplingPlan39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putFieldVisit51);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate52);
        org.junit.Assert.assertNotNull(observation55);
        org.junit.Assert.assertNotNull(observation59);
        org.junit.Assert.assertNull(offsetDateTime60);
        org.junit.Assert.assertNull(importHistoryEventSimpleList61);
        org.junit.Assert.assertNotNull(observation63);
        org.junit.Assert.assertNull(resultGrade64);
        org.junit.Assert.assertNotNull(labResultDetails67);
        org.junit.Assert.assertNotNull(labResultDetails69);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate71);
    }

    @Test
    public void test49340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49340");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums getStandardReferenceDatums0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetStandardReferenceDatums();
        getStandardReferenceDatums0.LocationUniqueId = "MaxDuration";
        getStandardReferenceDatums0.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        java.lang.String str5 = getStandardReferenceDatums0.getLocationUniqueId();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str5, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test49341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49341");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary0.UpdateCount = (-1);
        java.lang.Integer int3 = observationImportSummary0.ExpectedCount;
        java.lang.String str4 = observationImportSummary0.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList6, importErrorArray5);
        observationImportSummary0.ImportJobErrors = importErrorList6;
        observationImportSummary0.NewCount = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary12 = observationImportSummary0.setInvalidRowsCsvUrl("MinDuration");
        java.lang.String str13 = observationImportSummary0.getSummaryReportText();
        java.lang.Integer int14 = observationImportSummary0.SkippedCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList15 = observationImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary17 = observationImportSummary0.setInvalidRowsCsvUrl("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        java.lang.Integer int19 = observationImportSummary18.getUpdateCount();
        java.lang.Integer int20 = observationImportSummary18.NewCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary21.UpdateCount = (-1);
        java.lang.Integer int24 = observationImportSummary21.ExpectedCount;
        java.lang.String str25 = observationImportSummary21.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList27, importItemObservationArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary29 = observationImportSummary21.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary31 = observationImportSummary21.setErrorCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary32.UpdateCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary36 = observationImportSummary32.setSuccessCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary38 = observationImportSummary36.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        observationImportSummary36.SkippedCount = 0;
        observationImportSummary36.UpdateCount = 10;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList43 = observationImportSummary36.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary44.UpdateCount = (-1);
        java.lang.Integer int47 = observationImportSummary44.ExpectedCount;
        java.lang.String str48 = observationImportSummary44.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList50, importErrorArray49);
        observationImportSummary44.ImportJobErrors = importErrorList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary53.UpdateCount = (-1);
        java.lang.Integer int56 = observationImportSummary53.ExpectedCount;
        java.lang.String str57 = observationImportSummary53.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList59, importItemObservationArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary61 = observationImportSummary53.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary62 = observationImportSummary44.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary63 = observationImportSummary36.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList59);
        observationImportSummary31.ImportItems = importItemObservationList59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary65 = observationImportSummary18.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary66 = observationImportSummary17.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList59);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(importErrorArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observationImportSummary12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(importItemObservationList15);
        org.junit.Assert.assertNotNull(observationImportSummary17);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(importItemObservationArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observationImportSummary29);
        org.junit.Assert.assertNotNull(observationImportSummary31);
        org.junit.Assert.assertNotNull(observationImportSummary36);
        org.junit.Assert.assertNotNull(observationImportSummary38);
        org.junit.Assert.assertNull(importItemObservationList43);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(importErrorArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(importItemObservationArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(observationImportSummary61);
        org.junit.Assert.assertNotNull(observationImportSummary62);
        org.junit.Assert.assertNotNull(observationImportSummary63);
        org.junit.Assert.assertNotNull(observationImportSummary65);
        org.junit.Assert.assertNotNull(observationImportSummary66);
    }

    @Test
    public void test49342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49342");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        categoricalValue0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str3 = categoricalValue0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = categoricalValue0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue6 = categoricalValue0.setCustomId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str7 = categoricalValue6.Id;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNotNull(categoricalValue6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test49343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49343");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin();
        putReportPlugin0.UniqueId = "hi!";
        java.lang.Boolean boolean3 = putReportPlugin0.getIsEnabled();
        java.lang.Boolean boolean4 = putReportPlugin0.IsEnabled;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin6 = putReportPlugin0.setUniqueId("");
        java.lang.Boolean boolean7 = putReportPlugin6.IsEnabled;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(putReportPlugin6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test49344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49344");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest3 = fieldVisitDataByLocationServiceRequest1.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty4 = importItemObservedProperty0.setErrors((java.lang.Object) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray9 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = putLocationTags5.setTagUniqueIds(strList10);
        java.util.ArrayList<java.lang.String> strList13 = putLocationTags12.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty14 = importItemObservedProperty0.setWarningMessages((java.util.List<java.lang.String>) strList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType15 = importItemObservedProperty14.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = analyticalGroupItem16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = analyticalGroupItem16.setAnalysisMethod(analysisMethod18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty20.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = analyticalGroupItem19.setObservedProperty(observedProperty20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = analyticalGroupItem23.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = observedProperty24.setId("0001-01-01T00:00:00.0000000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty27 = importItemObservedProperty14.setItem(observedProperty26);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest3);
        org.junit.Assert.assertNotNull(importItemObservedProperty4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(putLocationTags12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(importItemObservedProperty14);
        org.junit.Assert.assertNull(importItemStatusType15);
        org.junit.Assert.assertNull(analysisMethod17);
        org.junit.Assert.assertNotNull(analyticalGroupItem19);
        org.junit.Assert.assertNotNull(analyticalGroupItem23);
        org.junit.Assert.assertNotNull(observedProperty24);
        org.junit.Assert.assertNotNull(observedProperty26);
        org.junit.Assert.assertNotNull(importItemObservedProperty27);
    }

    @Test
    public void test49345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49345");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun();
        java.lang.Boolean boolean1 = postImportLabReportDataDryRun0.CreateMissingObjects;
        java.lang.String str2 = postImportLabReportDataDryRun0.TimeZoneOffset;
        postImportLabReportDataDryRun0.UpdateExistingResults = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun6 = postImportLabReportDataDryRun0.setUpdateExistingResults((java.lang.Boolean) true);
        postImportLabReportDataDryRun6.UpdateExistingResults = false;
        java.lang.String str9 = postImportLabReportDataDryRun6.getFileType();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postImportLabReportDataDryRun6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test49346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49346");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_2 = deleteObservationsV2_0.setFilterId("-PT87591240H");
        java.time.Instant instant3 = deleteObservationsV2_2.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType4 = null;
        deleteObservationsV2_2.SampleFraction = sampleFractionType4;
        java.lang.String str6 = deleteObservationsV2_2.FilterId;
        org.junit.Assert.assertNotNull(deleteObservationsV2_2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-PT87591240H" + "'", str6, "-PT87591240H");
    }

    @Test
    public void test49347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49347");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity3 = gageHeightAtZeroFlowActivity1.setApplicableSince(instant2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = gageHeightAtZeroFlowActivity3.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit6 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity5);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit8 = fieldVisit6.setDischargeActivities(dischargeActivityList7);
        fieldVisit8.LocationIdentifier = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity14 = gageHeightAtZeroFlowActivity12.setApplicableSince(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity16 = gageHeightAtZeroFlowActivity14.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit17 = fieldVisit11.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit18 = fieldVisit8.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity16);
        java.lang.String str19 = gageHeightAtZeroFlowActivity16.Party;
        gageHeightAtZeroFlowActivity16.IsObserved = true;
        java.lang.String str22 = gageHeightAtZeroFlowActivity16.getParty();
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity3);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNotNull(fieldVisit8);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity14);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity16);
        org.junit.Assert.assertNotNull(fieldVisit17);
        org.junit.Assert.assertNotNull(fieldVisit18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test49348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49348");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.util.ArrayList<java.lang.String> strList2 = timeAlignedDataServiceRequest1.getTimeSeriesOutputUnitIds();
        java.time.Instant instant3 = timeAlignedDataServiceRequest1.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        java.util.List<java.lang.String> strList6 = getChartDataV2_4.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        getObservationsV2_7.SpecimenIds = strList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray17 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = putLocationTags13.setTagUniqueIds(strList18);
        getObservationsV2_7.QualityControlTypes = strList18;
        java.util.List<java.lang.String> strList22 = getObservationsV2_7.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_7.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList26 = fieldVisitDataServiceResponse25.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse28 = fieldVisitDataServiceResponse25.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary29.Reviewer = "";
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary29.MeasurementTime = instant32;
        fieldVisitDataServiceResponse25.ResponseTime = instant32;
        getObservationsV2_7.StartObservedTime = instant32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList37 = getSpecimens36.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType39 = putUserV2_38.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = dischargeSummary42.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        dischargeSummary42.MeasurementTime = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse41.setNextToken(instant46);
        java.time.Instant instant50 = locationDescriptionListServiceResponse41.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities51 = getActivities40.setToStartTime(instant50);
        java.lang.String str52 = getActivities51.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList54 = getObservationsV2_53.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        getObservationsV2_53.ResultGrades = strList66;
        getActivities51.Media = strList66;
        putUserV2_38.AccessGroups = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens73 = getSpecimens36.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList66);
        getObservationsV2_7.LabReportIds = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_75 = getChartDataV2_4.setAnalysisMethodIds((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod78 = timeSeriesThresholdPeriod76.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant79 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod76.AppliedTime = instant79;
        java.time.Instant instant81 = timeSeriesThresholdPeriod76.getEndTime();
        java.time.Instant instant82 = timeSeriesThresholdPeriod76.getAppliedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_83 = getChartDataV2_4.setStartModificationTime(instant82);
        java.lang.String str84 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantSerializer.format(instant82);
        timeAlignedDataServiceRequest1.QueryFrom = instant82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse86 = ratingModelEffectiveShiftsByStageValuesServiceResponse0.setTimestamp(instant82);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(putLocationTags20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList26);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(userType39);
        org.junit.Assert.assertNotNull(dischargeSummary44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(getActivities51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(getSpecimens73);
        org.junit.Assert.assertNotNull(getChartDataV2_75);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNull(instant81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(getChartDataV2_83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "MinInstant" + "'", str84, "MinInstant");
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse86);
    }

    @Test
    public void test49349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49349");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory getActivityHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory getActivityHistory2 = getActivityHistory0.setId("MinInstant");
        getActivityHistory2.Id = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityHistory getActivityHistory6 = getActivityHistory2.setId("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNotNull(getActivityHistory2);
        org.junit.Assert.assertNotNull(getActivityHistory6);
    }

    @Test
    public void test49350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49350");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag deleteTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag();
        deleteTag0.Id = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str3 = deleteTag0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag deleteTag5 = deleteTag0.setId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag deleteTag7 = deleteTag5.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteTag deleteTag9 = deleteTag5.setId("0001-01-01T00:00:00.000Z");
        deleteTag5.Id = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str3, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNotNull(deleteTag5);
        org.junit.Assert.assertNotNull(deleteTag7);
        org.junit.Assert.assertNotNull(deleteTag9);
    }

    @Test
    public void test49351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49351");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = postObservedProperty3.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = null;
        quantity5.Unit = unit6;
        postObservedProperty3.LowerLimit = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postObservedProperty3.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit10 = quantity9.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation2.setElevation(quantity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation13 = putSamplingLocation11.setHorizontalCollectionMethod("");
        java.lang.String str14 = putSamplingLocation11.HorizontalCollectionMethod;
        java.lang.String str15 = putSamplingLocation11.VerticalDatum;
        java.lang.String str16 = putSamplingLocation11.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation18 = putSamplingLocation11.setVerticalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList19 = putSamplingLocation11.getExtendedAttributes();
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(unitGroup4);
        org.junit.Assert.assertNotNull(quantity9);
        org.junit.Assert.assertNull(unit10);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNotNull(putSamplingLocation13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(putSamplingLocation18);
        org.junit.Assert.assertNull(extendedAttributeList19);
    }

    @Test
    public void test49352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49352");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem getExtendedAttributeDropdownlistitemListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem();
        getExtendedAttributeDropdownlistitemListItem0.Id = "";
        java.lang.Object obj3 = getExtendedAttributeDropdownlistitemListItem0.getResponseType();
        java.lang.String str4 = getExtendedAttributeDropdownlistitemListItem0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem getExtendedAttributeDropdownlistitemListItem6 = getExtendedAttributeDropdownlistitemListItem0.setId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str7 = getExtendedAttributeDropdownlistitemListItem0.getDropDownListItemId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitemListItem getExtendedAttributeDropdownlistitemListItem9 = getExtendedAttributeDropdownlistitemListItem0.setDropDownListItemId("ZZZZZ");
        java.lang.String str10 = getExtendedAttributeDropdownlistitemListItem9.getId();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeListItem");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeListItem");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeListItem");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitemListItem6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitemListItem9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str10, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test49353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49353");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setApproval(fieldVisitApproval3);
        java.lang.String str5 = fieldVisitReading2.Model;
        java.lang.Boolean boolean6 = fieldVisitReading2.isUseLocationDatumAsReference();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType8 = null;
        uncertainty7.UncertaintyType = uncertaintyType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading2.setUncertainty(uncertainty7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType11 = uncertainty7.getQualitativeUncertainty();
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
        org.junit.Assert.assertNull(qualitativeUncertaintyType11);
    }

    @Test
    public void test49354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49354");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType3 = postObservationV2_0.DataClassification;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_6 = postObservationV2_4.setLabInstruction(labInstruction5);
        java.lang.String str7 = postObservationV2_6.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod8 = postObservationV2_6.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation9.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setCategoricalResult(categoricalResult12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation9.DataClassification = dataClassificationType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_16 = postObservationV2_6.setDataClassification(dataClassificationType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple17 = postObservationV2_16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_20 = postObservationV2_18.setLabInstruction(labInstruction19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult21 = null;
        postObservationV2_18.NumericResult = numericResult21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation23.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation23.setCategoricalResult(categoricalResult26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType28 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation23.DataClassification = dataClassificationType28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_30 = postObservationV2_18.setDataClassification(dataClassificationType28);
        postObservationV2_16.DataClassification = dataClassificationType28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_32 = postObservationV2_0.setDataClassification(dataClassificationType28);
        java.time.OffsetDateTime offsetDateTime33 = postObservationV2_32.getResultTime();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(dataClassificationType3);
        org.junit.Assert.assertNotNull(postObservationV2_6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(collectionMethod8);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertTrue("'" + dataClassificationType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_16);
        org.junit.Assert.assertNull(analysisMethodSimple17);
        org.junit.Assert.assertNotNull(postObservationV2_20);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertTrue("'" + dataClassificationType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_30);
        org.junit.Assert.assertNotNull(postObservationV2_32);
        org.junit.Assert.assertNull(offsetDateTime33);
    }

    @Test
    public void test49355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49355");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.lang.String str3 = fieldVisitReading0.MonitoringMethod;
        java.lang.Boolean boolean4 = fieldVisitReading0.UseLocationDatumAsReference;
        fieldVisitReading0.Parameter = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
    }

    @Test
    public void test49356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49356");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str1 = appliedTag0.getUniqueId();
        appliedTag0.Value = "/AQUARIUS/Provisioning/v1";
        java.lang.String str4 = appliedTag0.getValue();
        java.lang.String str5 = appliedTag0.getUniqueId();
        java.lang.String str6 = appliedTag0.Key;
        java.lang.String str7 = appliedTag0.UniqueId;
        java.lang.String str8 = appliedTag0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag10 = appliedTag0.setKey("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str4, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(appliedTag10);
    }

    @Test
    public void test49357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49357");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier2 = postNullMeasureQualifier0.setName("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier4 = postNullMeasureQualifier0.setName("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier6 = postNullMeasureQualifier4.setName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        postNullMeasureQualifier4.Description = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier10 = postNullMeasureQualifier4.setName("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        org.junit.Assert.assertNotNull(postNullMeasureQualifier2);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier4);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier6);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier10);
    }

    @Test
    public void test49358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49358");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCollectionMethod searchResultCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCollectionMethod();
        java.lang.String str1 = searchResultCollectionMethod0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCollectionMethod searchResultCollectionMethod3 = searchResultCollectionMethod0.setCursor("MinDuration");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod> collectionMethodList4 = searchResultCollectionMethod0.DomainObjects;
        java.lang.String str5 = searchResultCollectionMethod0.getCursor();
        searchResultCollectionMethod0.TotalCount = 0;
        searchResultCollectionMethod0.Cursor = "MinDuration";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod> collectionMethodList10 = searchResultCollectionMethod0.getDomainObjects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(searchResultCollectionMethod3);
        org.junit.Assert.assertNull(collectionMethodList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MinDuration" + "'", str5, "MinDuration");
        org.junit.Assert.assertNull(collectionMethodList10);
    }

    @Test
    public void test49359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49359");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        java.lang.String str1 = putOpenIdConnectUser0.Identifier;
        java.lang.String str2 = putOpenIdConnectUser0.getSubjectIdentifier();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test49360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49360");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.IsValid = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading0.setMonitoringMethod("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = reading0.setParameterId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.AfterCalibration;
        reading7.ReadingType = readingType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str11 = levelSurveyMeasurement10.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = levelSurveyMeasurement10.MeasuredElevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = levelSurveyMeasurement10.getMeasuredElevation();
        java.time.Instant instant14 = levelSurveyMeasurement10.MeasurementTime;
        java.lang.String str15 = levelSurveyMeasurement10.getReferencePointUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str17 = pointVelocityDischargeActivity16.getModel();
        java.lang.String str18 = pointVelocityDischargeActivity16.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        pointVelocityDischargeActivity16.Width = quantityWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType21 = null;
        pointVelocityDischargeActivity16.StartPoint = startPointType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = pointVelocityDischargeActivity16.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        pointVelocityDischargeActivity16.MeterInspectedAfter = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = pointVelocityDischargeActivity16.setSoftwareVersion("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = pointVelocityDischargeActivity16.setSerialNumber("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity31.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity31.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity31.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity39 = pointVelocityDischargeActivity37.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay41 = null;
        crossSectionPoint40.Distance = quantityWithDisplay41;
        crossSectionPoint40.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = crossSectionPoint40.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint47 = crossSectionPoint40.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint49 = crossSectionPoint47.setElevation(quantityWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = null;
        crossSectionPoint49.Depth = quantityWithDisplay50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint49.Depth = datumConvertedQuantityWithDisplay52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = crossSectionPoint49.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity55 = pointVelocityDischargeActivity37.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity56 = pointVelocityDischargeActivity30.setDistanceToMeter(quantityWithDisplay54);
        levelSurveyMeasurement10.MeasuredElevation = quantityWithDisplay54;
        reading7.Value = quantityWithDisplay54;
        java.lang.Boolean boolean59 = reading7.Publish;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNotNull(reading7);
        org.junit.Assert.assertTrue("'" + readingType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.AfterCalibration + "'", readingType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.AfterCalibration));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(quantityWithDisplay12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity24);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity28);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity39);
        org.junit.Assert.assertNull(quantityWithDisplay45);
        org.junit.Assert.assertNotNull(crossSectionPoint47);
        org.junit.Assert.assertNotNull(crossSectionPoint49);
        org.junit.Assert.assertNotNull(quantityWithDisplay54);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity55);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity56);
        org.junit.Assert.assertNull(boolean59);
    }

    @Test
    public void test49361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49361");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPhoneNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation3.setPlannedFieldResult(plannedFieldResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = null;
        observation5.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setStatistics(observationStatistics8);
        java.time.OffsetDateTime offsetDateTime10 = observation9.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = observation9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        java.time.OffsetDateTime offsetDateTime17 = labResultDetails16.getDateReceived();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation9.setLabResultDetails(labResultDetails16);
        java.time.OffsetDateTime offsetDateTime19 = null;
        labResultDetails16.DatePrepared = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime22 = putSchedule21.StartDate;
        java.time.OffsetDateTime offsetDateTime23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule24 = putSchedule21.setEndDate(offsetDateTime23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup25 = putSchedule24.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime26 = null;
        putSchedule24.EndDate = offsetDateTime26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule29 = putSchedule24.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime31 = putSchedule30.StartDate;
        java.time.OffsetDateTime offsetDateTime32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = putSchedule30.setEndDate(offsetDateTime32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup34 = putSchedule33.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime35 = null;
        putSchedule33.EndDate = offsetDateTime35;
        java.time.OffsetDateTime offsetDateTime37 = putSchedule33.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType38 = putSchedule33.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime40 = putSchedule39.StartDate;
        java.time.OffsetDateTime offsetDateTime41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule42 = putSchedule39.setEndDate(offsetDateTime41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = putSchedule42.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime44 = null;
        putSchedule42.LastGenerationDate = offsetDateTime44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int47 = putSchedule46.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType48 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule49 = putSchedule46.setRecurrenceType(recurrenceType48);
        putSchedule42.RecurrenceType = recurrenceType48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule51 = putSchedule33.setRecurrenceType(recurrenceType48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule52 = putSchedule24.setRecurrenceType(recurrenceType48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity56 = samplingPlanPlannedActivity54.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = auditAttributes57.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity56.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = samplingPlanPlannedActivity56.AuditAttributes;
        putAccessGroup53.AuditAttributes = auditAttributes61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup64 = putAccessGroup53.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate67 = postFieldVisitActivityWithTemplate65.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType68 = null;
        postFieldVisitActivityWithTemplate67.Medium = mediumType68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity70.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity74 = postActivity70.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity76 = postActivity74.setAuditAttributes(auditAttributes75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate77 = postFieldVisitActivityWithTemplate67.setAuditAttributes(auditAttributes75);
        putAccessGroup53.AuditAttributes = auditAttributes75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule79 = putSchedule52.setAuditAttributes(auditAttributes75);
        java.time.OffsetDateTime offsetDateTime80 = auditAttributes75.CreationTime;
        labResultDetails16.AuditAttributes = auditAttributes75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory82 = putLaboratory2.setAuditAttributes(auditAttributes75);
        java.lang.String str83 = putLaboratory82.getPhoneNumber();
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(putSchedule24);
        org.junit.Assert.assertNull(samplingLocationGroup25);
        org.junit.Assert.assertNotNull(putSchedule29);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(putSchedule33);
        org.junit.Assert.assertNull(samplingLocationGroup34);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType38);
        org.junit.Assert.assertNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(putSchedule42);
        org.junit.Assert.assertNull(auditAttributes43);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertTrue("'" + recurrenceType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType48.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule49);
        org.junit.Assert.assertNotNull(putSchedule51);
        org.junit.Assert.assertNotNull(putSchedule52);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity56);
        org.junit.Assert.assertNotNull(auditAttributes59);
        org.junit.Assert.assertNotNull(auditAttributes61);
        org.junit.Assert.assertNotNull(putAccessGroup64);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate67);
        org.junit.Assert.assertNotNull(postActivity74);
        org.junit.Assert.assertNotNull(postActivity76);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate77);
        org.junit.Assert.assertNotNull(putSchedule79);
        org.junit.Assert.assertNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(putLaboratory82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str83, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test49362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49362");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_5 = deleteObservationsV2_0.setFieldVisitId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        java.time.Instant instant7 = metadataChangeTransactionListServiceRequest6.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        getObservationsV2_14.DepthUnitCustomId = "hi!";
        java.lang.String str17 = getObservationsV2_14.DepthUnitId;
        java.util.List<java.lang.String> strList18 = getObservationsV2_14.LabResultLaboratoryIds;
        getObservationsV2_14.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int21 = getObservationsV2_14.Limit;
        java.util.List<java.lang.String> strList22 = getObservationsV2_14.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_14.setDepthUnitId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant27 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity28 = gageHeightAtZeroFlowActivity26.setApplicableSince(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity30 = gageHeightAtZeroFlowActivity28.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit31 = fieldVisit25.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean33 = completedWork32.isSafetyInspectionPerformed();
        java.lang.Boolean boolean34 = completedWork32.isGroundWaterLevelPerformed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription35 = fieldVisit31.setCompletedWork(completedWork32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList37 = getObservationsV2_36.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType40 = calibrationCheck39.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = calibrationCheck39.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary43.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse46.setNextToken(instant47);
        dischargeSummary43.MeasurementTime = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = locationDescriptionListServiceResponse42.setNextToken(instant47);
        java.time.Instant instant51 = locationDescriptionListServiceResponse42.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck52 = calibrationCheck39.setTime(instant51);
        monitoringMethodListServiceResponse38.ResponseTime = instant51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_36.setEndResultTime(instant51);
        fieldVisitDescription35.StartTime = instant51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_24.setStartObservedTime(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest57 = metadataChangeTransactionListServiceRequest6.setQueryTo(instant51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_58 = deleteObservationsV2_0.setStartObservedTime(instant51);
        deleteObservationsV2_58.Cursor = "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.Double double61 = deleteObservationsV2_58.getNumericResultValue();
        java.util.List<java.lang.String> strList62 = deleteObservationsV2_58.getSamplingLocationGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList64 = importItemObject63.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList66 = getSpecimens65.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens68 = getSpecimens65.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str70 = getChartDataV2_69.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_72 = getChartDataV2_69.setFilterId("");
        java.util.List<java.lang.String> strList73 = getChartDataV2_69.ResultGrades;
        getChartDataV2_69.MinNumericResultValue = 100.0d;
        java.lang.Double double76 = getChartDataV2_69.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray81 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_84 = getObservationsV2_78.setDataClassifications((java.util.List<java.lang.String>) strList82);
        postTag77.PickListValues = strList82;
        getChartDataV2_69.SamplingContextTagIds = strList82;
        getSpecimens65.ActivityTypes = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject88 = importItemObject63.setExistingItem((java.lang.Object) strList82);
        deleteObservationsV2_58.ActivityIds = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_91 = deleteObservationsV2_58.setCustomId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(deleteObservationsV2_5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity28);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity30);
        org.junit.Assert.assertNotNull(fieldVisit31);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNull(boolean34);
        org.junit.Assert.assertNotNull(fieldVisitDescription35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(calibrationCheckType40);
        org.junit.Assert.assertNull(doubleWithDisplay41);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(calibrationCheck52);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest57);
        org.junit.Assert.assertNotNull(deleteObservationsV2_58);
        org.junit.Assert.assertNull(double61);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(getSpecimens68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(getChartDataV2_72);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNull(double76);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_84);
        org.junit.Assert.assertNotNull(importItemObject88);
        org.junit.Assert.assertNotNull(deleteObservationsV2_91);
    }

    @Test
    public void test49363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49363");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        fieldVisitDataServiceResponse0.ResponseTime = instant7;
        fieldVisitDataServiceResponse0.Identifier = "hi!";
        java.lang.String str12 = fieldVisitDataServiceResponse0.getSummary();
        java.lang.Integer int13 = fieldVisitDataServiceResponse0.getResponseVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval16 = fieldVisitApproval14.setLevelDescription("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse17 = fieldVisitDataServiceResponse0.setApproval(fieldVisitApproval14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval19 = fieldVisitApproval14.setLevelDescription("http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(fieldVisitApproval16);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse17);
        org.junit.Assert.assertNotNull(fieldVisitApproval19);
    }

    @Test
    public void test49364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49364");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        java.lang.String str2 = getAuthTokenServiceRequest0.getEncryptedPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test49365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49365");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute();
        putExtendedAttribute0.Key = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = putExtendedAttribute0.UniqueId;
        putExtendedAttribute0.UniqueId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        putExtendedAttribute0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        putExtendedAttribute0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str10 = putExtendedAttribute0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute12 = putExtendedAttribute0.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        putExtendedAttribute0.Required = true;
        putExtendedAttribute0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(putExtendedAttribute12);
    }

    @Test
    public void test49366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49366");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        postUnitGroupWithUnit0.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation3.setPlannedFieldResult(plannedFieldResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = null;
        observation5.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setStatistics(observationStatistics8);
        java.time.OffsetDateTime offsetDateTime10 = observation9.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = observation9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade14 = observation13.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        observation13.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit21 = postUnitGroupWithUnit0.setAuditAttributes(auditAttributes18);
        java.lang.String str22 = postUnitGroupWithUnit21.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit24 = postUnitGroupWithUnit21.setSupportsConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = postUnitGroupWithUnit21.getAuditAttributes();
        java.lang.Boolean boolean26 = postUnitGroupWithUnit21.getSupportsConversion();
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(resultGrade14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str22, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit24);
        org.junit.Assert.assertNotNull(auditAttributes25);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + true + "'", boolean26, true);
    }

    @Test
    public void test49367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49367");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = getChartDataV2_0.setDepthValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType4 = noteOperation3.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList7, nameTagDefinitionArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse9 = locationTagListServiceResponse5.setTags(nameTagDefinitionList7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        locationTagListServiceResponse5.ResponseTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription18.UtcOffset = 100.0d;
        timeSeriesDescription18.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        dischargeSummary24.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse23.setNextToken(instant28);
        java.time.Instant instant32 = locationDescriptionListServiceResponse23.getNextToken();
        java.time.Instant instant33 = locationDescriptionListServiceResponse23.getNextToken();
        timeSeriesDescription18.RawEndTime = instant33;
        locationTagListServiceResponse5.ResponseTime = instant33;
        java.time.Instant instant36 = locationTagListServiceResponse5.ResponseTime;
        noteOperation3.DateAppliedUtc = instant36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_38 = getChartDataV2_0.setStartModificationTime(instant36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str40 = deleteFieldVisits39.Sort;
        deleteFieldVisits39.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        java.util.List<java.lang.String> strList53 = getObservationsV2_49.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray64 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = putLocationTags60.setTagUniqueIds(strList65);
        getObservationsV2_54.QualityControlTypes = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_49.setMedia((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits70 = deleteFieldVisits39.setSearch((java.util.List<java.lang.String>) strList65);
        getChartDataV2_38.ResultStatuses = strList65;
        java.util.List<java.lang.String> strList72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_73 = getChartDataV2_38.setAnalysisMethodIds(strList72);
        org.junit.Assert.assertNotNull(getChartDataV2_2);
        org.junit.Assert.assertNull(metadataChangeOperationType4);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse9);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(getChartDataV2_38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putLocationTags67);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(deleteFieldVisits70);
        org.junit.Assert.assertNotNull(getChartDataV2_73);
    }

    @Test
    public void test49368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49368");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str2 = postLaboratory1.Address;
        java.lang.String str3 = postLaboratory1.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = samplingPlanPlannedActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = auditAttributes7.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity6.AuditAttributes = auditAttributes7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = samplingPlanPlannedActivity6.AuditAttributes;
        postLaboratory1.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory14 = postLaboratory1.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon16 = taxonomicResult15.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = taxonomicResult15.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan19.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan19.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = samplingPlan19.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan26 = samplingPlan19.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag27 = putTag18.setAuditAttributes(auditAttributes25);
        taxonomicResult15.AuditAttributes = auditAttributes25;
        postLaboratory14.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_30 = putObservationV2_0.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod31 = putObservationV2_30.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str33 = samplingLocation32.Description;
        java.lang.String str34 = samplingLocation32.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str37 = metricConfiguration36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty38.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration41 = metricConfiguration36.setObservedProperty(observedProperty38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType42 = observedProperty38.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup44 = postObservedProperty43.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit46 = null;
        quantity45.Unit = unit46;
        postObservedProperty43.LowerLimit = quantity45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity49 = postObservedProperty43.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit50 = quantity49.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty51 = observedProperty38.setUpperLimit(quantity49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation52 = samplingLocation35.setElevation(quantity49);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList53 = samplingLocation52.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList56, extendedAttributeArray55);
        postActivity54.ExtendedAttributes = extendedAttributeList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation59 = samplingLocation52.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation60 = samplingLocation32.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_61 = putObservationV2_30.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType63 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus62.SystemCode = resultStatusSystemCodeType63;
        java.lang.String str65 = resultStatus62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_66 = putObservationV2_61.setResultStatus(resultStatus62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity67 = putObservationV2_66.getDepth();
        java.lang.String str68 = putObservationV2_66.getCustomId();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity6);
        org.junit.Assert.assertNotNull(auditAttributes9);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(postLaboratory14);
        org.junit.Assert.assertNull(taxon16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup24);
        org.junit.Assert.assertNotNull(samplingPlan26);
        org.junit.Assert.assertNotNull(putTag27);
        org.junit.Assert.assertNotNull(putObservationV2_30);
        org.junit.Assert.assertNull(collectionMethod31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(metricConfiguration41);
        org.junit.Assert.assertNull(resultType42);
        org.junit.Assert.assertNull(unitGroup44);
        org.junit.Assert.assertNotNull(quantity49);
        org.junit.Assert.assertNull(unit50);
        org.junit.Assert.assertNotNull(observedProperty51);
        org.junit.Assert.assertNotNull(samplingLocation52);
        org.junit.Assert.assertNull(domainObjectAttachmentList53);
        org.junit.Assert.assertNotNull(extendedAttributeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(samplingLocation59);
        org.junit.Assert.assertNotNull(samplingLocation60);
        org.junit.Assert.assertNotNull(putObservationV2_61);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType63.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(putObservationV2_66);
        org.junit.Assert.assertNull(quantity67);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test49369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49369");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.Comment;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList4 = putTaxon0.getImportHistoryEventSimples();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList5 = putTaxon0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putTaxon0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList7 = putTaxon0.getImportHistoryEventSimples();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(importHistoryEventSimpleList4);
        org.junit.Assert.assertNull(importHistoryEventSimpleList5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(importHistoryEventSimpleList7);
    }

    @Test
    public void test49370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49370");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getPluginFolderName();
        java.lang.String str2 = fieldDataPlugin0.PluginFolderName;
        fieldDataPlugin0.PluginFolderName = "'.'SSSSSSS";
        java.lang.Integer int5 = fieldDataPlugin0.PluginPriority;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin7 = fieldDataPlugin0.setPluginFolderName("/AQUARIUS/Publish/v2");
        java.lang.Integer int8 = fieldDataPlugin0.getPluginPriority();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(fieldDataPlugin7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test49371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49371");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = pointVelocityDischargeActivity0.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList2 = pointVelocityDischargeActivity0.Verticals;
        java.lang.String str3 = pointVelocityDischargeActivity0.SerialNumber;
        java.lang.Boolean boolean4 = pointVelocityDischargeActivity0.isMeterInspectedAfter();
        pointVelocityDischargeActivity0.MeterInspectedBefore = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay7;
        pointVelocityDischargeActivity0.Manufacturer = "http";
        java.lang.String str11 = pointVelocityDischargeActivity0.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity13 = pointVelocityDischargeActivity0.setNumberOfPanels((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str15 = pointVelocityDischargeActivity14.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity17 = pointVelocityDischargeActivity14.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity19 = pointVelocityDischargeActivity14.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = vertical20.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical20.VerticalType = verticalType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation26 = velocityObservation24.setDeploymentMethod(deploymentMethodType25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation29 = velocityObservation27.setDeploymentMethod(deploymentMethodType28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList31, velocityDepthObservationArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation33 = velocityObservation29.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation34 = velocityObservation24.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical35 = vertical20.setVelocityObservation(velocityObservation24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical37 = vertical35.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay36);
        pointVelocityDischargeActivity14.Width = datumConvertedQuantityWithDisplay36;
        datumConvertedQuantityWithDisplay36.Unit = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity41 = pointVelocityDischargeActivity13.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay36);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(verticalList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity17);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity19);
        org.junit.Assert.assertNull(quantityWithDisplay21);
        org.junit.Assert.assertTrue("'" + verticalType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation26);
        org.junit.Assert.assertTrue("'" + deploymentMethodType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation29);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(velocityObservation33);
        org.junit.Assert.assertNotNull(velocityObservation34);
        org.junit.Assert.assertNotNull(vertical35);
        org.junit.Assert.assertNotNull(vertical37);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity41);
    }

    @Test
    public void test49372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49372");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest0.Value = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest4 = applyTagRequest0.setValue("multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****");
        org.junit.Assert.assertNotNull(applyTagRequest4);
    }

    @Test
    public void test49373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49373");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = noteOperation2.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = noteOperation4.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] noteOperationArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] { noteOperation2, noteOperation4 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>) noteOperationList7, noteOperationArray6);
        metadataChangeTransaction0.NoteOperations = noteOperationList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation> methodOperationList10 = metadataChangeTransaction0.getMethodOperations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType11 = metadataChangeTransaction0.ContentType;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList12 = metadataChangeTransaction0.getCorrectionOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList13 = metadataChangeTransaction0.GapToleranceOperations;
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNull(metadataChangeOperationType5);
        org.junit.Assert.assertNotNull(noteOperationArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(methodOperationList10);
        org.junit.Assert.assertNull(metadataChangeContentType11);
        org.junit.Assert.assertNull(correctionOperationList12);
        org.junit.Assert.assertNull(gapToleranceOperationList13);
    }

    @Test
    public void test49374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49374");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str1 = gapToleranceOperation0.getComments();
        gapToleranceOperation0.StackPosition = 0;
        gapToleranceOperation0.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        gapToleranceOperation0.User = "****82feecb1-0c54-43a1-b60a-302dc897d638****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test49375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49375");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod3 = timeSeriesThresholdPeriod1.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod1.AppliedTime = instant4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        postRecurringReport7.NextGenerationDate = instant11;
        java.time.Instant instant14 = postRecurringReport7.getNextGenerationDate();
        java.lang.String str15 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant14);
        metadataChangeTransactionListServiceRequest6.QueryFrom = instant14;
        timeSeriesThresholdPeriod1.AppliedTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse18 = fieldVisitDescriptionListServiceResponse0.setNextToken(instant14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = getObservationsV2_19.setDataClassifications((java.util.List<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = getObservationsV2_19.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        getObservationsV2_19.StartResultTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType35 = null;
        controlConditionActivity34.ControlCleaned = controlCleanedType35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse37.setNextToken(instant38);
        controlConditionActivity34.DateCleaned = instant38;
        timeAlignedDataServiceRequest33.QueryFrom = instant38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.ActivityIds = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest33.setTimeSeriesOutputUnitIds(strList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = getObservationsV2_19.setCollectionMethodIds((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary62.Reviewer = "";
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary62.MeasurementTime = instant65;
        postRecurringReport61.NextGenerationDate = instant65;
        java.time.Instant instant68 = postRecurringReport61.getNextGenerationDate();
        java.lang.String str69 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant68);
        metadataChangeTransactionListServiceRequest60.QueryFrom = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest71 = downchainProcessorListByRatingModelServiceRequest59.setQueryTo(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest73 = downchainProcessorListByRatingModelServiceRequest59.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant75 = qualifier74.DateApplied;
        java.lang.String str76 = qualifier74.User;
        java.lang.String str77 = qualifier74.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj79 = timeAlignedDataServiceRequest78.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant81 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = locationDescriptionListServiceResponse80.setNextToken(instant81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest83 = timeAlignedDataServiceRequest78.setQueryFrom(instant81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier84 = qualifier74.setDateApplied(instant81);
        java.time.Instant instant85 = qualifier84.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest86 = downchainProcessorListByRatingModelServiceRequest59.setQueryFrom(instant85);
        java.time.Instant instant87 = downchainProcessorListByRatingModelServiceRequest86.getQueryFrom();
        getObservationsV2_19.StartResultTime = instant87;
        fieldVisitDescriptionListServiceResponse0.NextToken = instant87;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList90 = fieldVisitDescriptionListServiceResponse0.DeletedFieldVisitDescriptions;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList91 = fieldVisitDescriptionListServiceResponse0.FieldVisitDescriptions;
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str15, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
        org.junit.Assert.assertNotNull(getObservationsV2_58);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str69, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest71);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest73);
        org.junit.Assert.assertNull(instant75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse82);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest83);
        org.junit.Assert.assertNotNull(qualifier84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNull(fieldVisitDescriptionList90);
        org.junit.Assert.assertNull(fieldVisitDescriptionList91);
    }

    @Test
    public void test49376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49376");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        java.lang.String str1 = postImportLabReportData0.TimeZoneOffset;
        java.lang.String str2 = postImportLabReportData0.TimeZoneOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData4 = postImportLabReportData0.setTimeZoneOffset("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj5 = postImportLabReportData0.getResponseType();
        java.lang.Boolean boolean6 = postImportLabReportData0.UpdateExistingResults;
        java.lang.Boolean boolean7 = postImportLabReportData0.UpdateExistingResults;
        java.lang.Boolean boolean8 = postImportLabReportData0.getCreateMissingObjects();
        java.lang.String str9 = postImportLabReportData0.TimeZoneOffset;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postImportLabReportData4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservationImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservationImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservationImportSummary");
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str9, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test49377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49377");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.Boolean boolean2 = role0.CanAddData;
        java.lang.Boolean boolean3 = role0.CanEditAppendConfigurations;
        java.lang.Boolean boolean4 = role0.isCanEditLocationDetails();
        role0.CanRemoveAppendConfigurations = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role8 = role0.setCanEditAppendConfigurations((java.lang.Boolean) true);
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(role8);
    }

    @Test
    public void test49378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49378");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        java.lang.String str1 = fieldTrip0.CustomId;
        java.time.OffsetDateTime offsetDateTime2 = null;
        fieldTrip0.StartTime = offsetDateTime2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition16 = postDetectioncondition4.setAuditAttributes(auditAttributes13);
        fieldTrip0.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip19 = fieldTrip0.setCustomId("hi!:///AQUARIUS/Provisioning/v1");
        java.time.OffsetDateTime offsetDateTime20 = fieldTrip0.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip22 = fieldTrip0.setParticipants("MaxInstant");
        java.time.OffsetDateTime offsetDateTime23 = fieldTrip22.getStartTime();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(postDetectioncondition16);
        org.junit.Assert.assertNotNull(fieldTrip19);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(fieldTrip22);
        org.junit.Assert.assertNull(offsetDateTime23);
    }

    @Test
    public void test49379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49379");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen2.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = putSpecimen2.getShippingContainer();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen6 = putSpecimen2.setName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen8 = putSpecimen2.setFiltrationComment("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation9.setPlannedFieldResult(plannedFieldResult10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction12 = null;
        observation11.LabInstruction = labInstruction12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation11.setStatistics(observationStatistics14);
        java.time.OffsetDateTime offsetDateTime16 = observation15.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList17 = observation15.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation15.setObservedProperty(observedProperty18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade20 = observation19.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup22 = postObservedProperty21.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList24, importHistoryEventSimpleArray23);
        postObservedProperty21.ImportHistoryEventSimples = importHistoryEventSimpleList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation19.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime29 = activity28.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity31 = activity28.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation32 = activity28.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity34 = putActivity33.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity36 = putActivity33.setEndTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device39 = device37.setType("/AQUARIUS/Acquisition/v2");
        putActivity33.Device = device39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device42 = device39.setDescription("9999-12-31T23:59:59.999Z");
        activity28.Device = device42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium44 = activity28.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit45 = activity28.FieldVisit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation46 = observation27.setActivity(activity28);
        activity28.CustomId = "2021.8.9990";
        java.lang.String str49 = activity28.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen50 = putSpecimen2.setActivity(activity28);
        java.lang.String str51 = putSpecimen50.getDescription();
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(shippingContainer4);
        org.junit.Assert.assertNotNull(putSpecimen6);
        org.junit.Assert.assertNotNull(putSpecimen8);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(importHistoryEventSimpleList17);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNull(resultGrade20);
        org.junit.Assert.assertNull(unitGroup22);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(activity31);
        org.junit.Assert.assertNull(samplingLocation32);
        org.junit.Assert.assertNull(plannedActivity34);
        org.junit.Assert.assertNotNull(putActivity36);
        org.junit.Assert.assertNotNull(device39);
        org.junit.Assert.assertNotNull(device42);
        org.junit.Assert.assertNull(medium44);
        org.junit.Assert.assertNull(fieldVisit45);
        org.junit.Assert.assertNotNull(observation46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(putSpecimen50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test49380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49380");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UtcOffset = 1.0d;
        java.lang.Boolean boolean5 = locationDescription2.getIsExternalLocation();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription7 = locationDescription2.setTags(tagMetadataList6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription9 = locationDescription2.setTags(tagMetadataList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription11 = locationDescription9.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription13 = locationDescription11.setPublish((java.lang.Boolean) false);
        locationDescription11.PrimaryFolder = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(locationDescription7);
        org.junit.Assert.assertNotNull(locationDescription9);
        org.junit.Assert.assertNotNull(locationDescription11);
        org.junit.Assert.assertNotNull(locationDescription13);
    }

    @Test
    public void test49381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49381");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        deleteObservationsV2_0.DepthUnitCustomId = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.String str6 = deleteObservationsV2_0.getFilterId();
        java.util.List<java.lang.String> strList7 = deleteObservationsV2_0.LabResultLaboratoryIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test49382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49382");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate0.CustomId = "hi!";
        java.lang.String str3 = specimenTemplate0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = specimenTemplate0.setFiltered((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate5);
    }

    @Test
    public void test49383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49383");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] metadataChangeTransactionArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList2, metadataChangeTransactionArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse4 = metadataChangeTransactionListServiceResponse0.setMetadataChangeTransactions((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList5 = metadataChangeTransactionListServiceResponse0.MetadataChangeTransactions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] metadataChangeTransactionArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList8, metadataChangeTransactionArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse10 = metadataChangeTransactionListServiceResponse6.setMetadataChangeTransactions((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList8);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList11 = metadataChangeTransactionListServiceResponse6.MetadataChangeTransactions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] metadataChangeTransactionArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList14, metadataChangeTransactionArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse16 = metadataChangeTransactionListServiceResponse12.setMetadataChangeTransactions((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList17 = metadataChangeTransactionListServiceResponse12.MetadataChangeTransactions;
        metadataChangeTransactionListServiceResponse6.MetadataChangeTransactions = metadataChangeTransactionList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] metadataChangeTransactionArray20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList21, metadataChangeTransactionArray20);
        metadataChangeTransactionListServiceResponse19.MetadataChangeTransactions = metadataChangeTransactionList21;
        metadataChangeTransactionListServiceResponse6.MetadataChangeTransactions = metadataChangeTransactionList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceResponse metadataChangeTransactionListServiceResponse25 = metadataChangeTransactionListServiceResponse0.setMetadataChangeTransactions((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction>) metadataChangeTransactionList21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction> metadataChangeTransactionList26 = metadataChangeTransactionListServiceResponse25.MetadataChangeTransactions;
        org.junit.Assert.assertNotNull(metadataChangeTransactionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceResponse4);
        org.junit.Assert.assertNotNull(metadataChangeTransactionList5);
        org.junit.Assert.assertNotNull(metadataChangeTransactionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceResponse10);
        org.junit.Assert.assertNotNull(metadataChangeTransactionList11);
        org.junit.Assert.assertNotNull(metadataChangeTransactionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceResponse16);
        org.junit.Assert.assertNotNull(metadataChangeTransactionList17);
        org.junit.Assert.assertNotNull(metadataChangeTransactionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceResponse25);
        org.junit.Assert.assertNotNull(metadataChangeTransactionList26);
    }

    @Test
    public void test49384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49384");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup();
        java.lang.String str1 = deleteUnitGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup3 = deleteUnitGroup0.setId("hi!");
        deleteUnitGroup0.Id = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup7 = deleteUnitGroup0.setId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup9 = deleteUnitGroup0.setId("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteUnitGroup3);
        org.junit.Assert.assertNotNull(deleteUnitGroup7);
        org.junit.Assert.assertNotNull(deleteUnitGroup9);
    }

    @Test
    public void test49385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49385");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        java.lang.String str1 = postImportLabReportData0.TimeZoneOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData3 = postImportLabReportData0.setCreateMissingObjects((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData5 = postImportLabReportData0.setTimeZoneOffset("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Boolean boolean6 = postImportLabReportData0.UpdateExistingResults;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData8 = postImportLabReportData0.setCreateMissingObjects((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData10 = postImportLabReportData0.setFileType("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postImportLabReportData3);
        org.junit.Assert.assertNotNull(postImportLabReportData5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(postImportLabReportData8);
        org.junit.Assert.assertNotNull(postImportLabReportData10);
    }

    @Test
    public void test49386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49386");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory0.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory4 = laboratory0.setName("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str5 = laboratory4.EmailAddress;
        laboratory4.Name = "http://MaxDurationhttp/json/reply/Integer";
        laboratory4.EmailAddress = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        org.junit.Assert.assertNotNull(laboratory4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test49387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49387");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str1 = deleteFieldVisits0.Sort;
        deleteFieldVisits0.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant4 = deleteFieldVisits0.EndStartTime;
        java.util.List<java.lang.String> strList5 = deleteFieldVisits0.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        java.time.Instant instant8 = getObservationsV2_6.getEndModificationTime();
        java.util.List<java.lang.String> strList9 = getObservationsV2_6.Media;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.ActivityTypes;
        java.util.List<java.lang.String> strList11 = getObservationsV2_6.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        getObservationsV2_6.LabResultLabAnalysisMethodIds = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits19 = deleteFieldVisits0.setFieldTripIds((java.util.List<java.lang.String>) strList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList21 = getExportSpecimens20.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant23 = qualifier22.DateApplied;
        java.lang.String str24 = qualifier22.User;
        java.lang.String str25 = qualifier22.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj27 = timeAlignedDataServiceRequest26.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = timeAlignedDataServiceRequest26.setQueryFrom(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier32 = qualifier22.setDateApplied(instant29);
        getExportSpecimens20.Before = instant29;
        java.util.List<java.lang.String> strList34 = getExportSpecimens20.getLaboratoryIds();
        java.util.List<java.lang.String> strList35 = getExportSpecimens20.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType37 = samplingPlanPlannedActivityRecurrence36.RecurrenceFrequency;
        java.util.List<java.lang.String> strList38 = samplingPlanPlannedActivityRecurrence36.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier41 = putQualifier39.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest42.setTimeSeriesUniqueIds(strList54);
        putQualifier39.GroupIdentifiers = strList54;
        java.util.ArrayList<java.lang.String> strList60 = putQualifier39.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence36.MonthsOfYear = strList60;
        getExportSpecimens20.ActivityTypes = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList64 = getObservationsV2_63.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray75 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = putLocationTags71.setTagUniqueIds(strList76);
        getObservationsV2_65.QualityControlTypes = strList76;
        getObservationsV2_63.ResultGrades = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens81 = getExportSpecimens20.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray86 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags89 = putLocationTags82.setTagUniqueIds(strList87);
        getExportSpecimens20.AnalyticalGroupIds = strList87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits91 = deleteFieldVisits0.setScheduleIds((java.util.List<java.lang.String>) strList87);
        java.util.List<java.lang.String> strList92 = deleteFieldVisits0.getSearch();
        java.util.List<java.lang.String> strList93 = deleteFieldVisits0.SamplingPlanIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest31);
        org.junit.Assert.assertNotNull(qualifier32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(recurrenceFrequencyType37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(putQualifier41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(putLocationTags78);
        org.junit.Assert.assertNotNull(getExportSpecimens81);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(putLocationTags89);
        org.junit.Assert.assertNotNull(deleteFieldVisits91);
        org.junit.Assert.assertNull(strList92);
        org.junit.Assert.assertNull(strList93);
    }

    @Test
    public void test49388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49388");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_1.QualityControlTypes;
        java.lang.String str3 = getObservationExportIIV2_1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj5 = importItemAnalysisMethod4.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod7 = importItemAnalysisMethod4.setRowId("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList8 = importItemAnalysisMethod7.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod10 = importItemAnalysisMethod7.setExistingItem(analysisMethod9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        getObservationsV2_17.DepthUnitCustomId = "hi!";
        java.lang.String str20 = getObservationsV2_17.CustomId;
        java.util.List<java.lang.String> strList21 = getObservationsV2_17.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.QualityControlTypes = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = getObservationsV2_17.setMedia((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier40 = putQualifier38.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest41.setTimeSeriesUniqueIds(strList53);
        putQualifier38.GroupIdentifiers = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_17.setTaxonIds((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod60 = importItemAnalysisMethod7.setFields((java.util.List<java.lang.String>) strList53);
        getObservationExportIIV2_1.QualityControlTypes = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents62 = getLabReportImportHistoryEvents0.setLabReportIds((java.util.List<java.lang.String>) strList53);
        java.util.List<java.lang.String> strList63 = getLabReportImportHistoryEvents0.LabReportIds;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(getObservationsV2_37);
        org.junit.Assert.assertNotNull(putQualifier40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod60);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents62);
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test49389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49389");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        postUnitGroup0.BaseUnitSymbol = "hi!";
        postUnitGroup0.BaseUnitIdentifier = "'.'SSSSSSS";
        java.lang.Integer int5 = postUnitGroup0.getCurrentDimension();
        java.lang.String str6 = postUnitGroup0.BaseUnitSingularName;
        postUnitGroup0.CurrentDimension = 0;
        java.lang.Integer int9 = postUnitGroup0.getMassDimension();
        postUnitGroup0.BaseUnitSingularName = "http://MaxDurationhttp";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase13 = postUnitGroup0.setMassDimension((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(unitGroupBase13);
    }

    @Test
    public void test49390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49390");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList3 = postSpecimen0.getObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen5 = postSpecimen0.setId("MinInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList6 = postSpecimen5.getExtendedAttributes();
        java.lang.Boolean boolean7 = postSpecimen5.getFiltered();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(observationList3);
        org.junit.Assert.assertNotNull(postSpecimen5);
        org.junit.Assert.assertNull(extendedAttributeList6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test49391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49391");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest();
        java.lang.Object obj1 = expandedStageTableServiceRequest0.getResponseType();
        expandedStageTableServiceRequest0.StepSize = 0.0d;
        java.lang.String str4 = expandedStageTableServiceRequest0.TimeSeriesUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest6 = expandedStageTableServiceRequest0.setUtcOffset((java.lang.Double) 1.0d);
        java.lang.Double double7 = expandedStageTableServiceRequest0.getStartValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest9 = expandedStageTableServiceRequest0.setStepSize((java.lang.Double) 10.0d);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(expandedStageTableServiceRequest6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNotNull(expandedStageTableServiceRequest9);
    }

    @Test
    public void test49392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49392");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        getChartDataV2_4.ObservedPropertyIds = strList23;
        getChartDataV2_4.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList33 = getExportObservations32.getLabReportIds();
        java.lang.String str34 = getExportObservations32.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj36 = getActivityTemplates35.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        getObservationsV2_37.QualityControlTypes = strList48;
        getActivityTemplates35.Type = strList48;
        getExportObservations32.AnalyticalGroupIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_54 = getChartDataV2_4.setAnalysisMethodIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations55 = getExportObservations0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList56 = getExportObservations0.ObservedPropertyIds;
        java.util.List<java.lang.String> strList57 = getExportObservations0.ProjectIds;
        java.util.List<java.lang.String> strList58 = getExportObservations0.getSearch();
        java.lang.String str59 = getExportObservations0.FilterId;
        getExportObservations0.SpecimenName = "http://MaxDurationhttp/json/reply/String";
        java.util.List<java.lang.String> strList62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations63 = getExportObservations0.setSearch(strList62);
        java.time.Instant instant64 = getExportObservations63.EndModificationTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(getChartDataV2_54);
        org.junit.Assert.assertNotNull(getExportObservations55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(getExportObservations63);
        org.junit.Assert.assertNull(instant64);
    }

    @Test
    public void test49393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49393");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity();
        java.lang.String str1 = searchResultActivity0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity[] activityArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity> activityList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity>) activityList4, activityArray3);
        searchResultActivity2.DomainObjects = activityList4;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity> activityList7 = searchResultActivity2.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity8 = searchResultActivity0.setDomainObjects(activityList7);
        java.lang.Integer int9 = searchResultActivity0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity[] activityArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity> activityList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity>) activityList12, activityArray11);
        searchResultActivity10.DomainObjects = activityList12;
        searchResultActivity10.TotalCount = 4;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity> activityList17 = searchResultActivity10.getDomainObjects();
        searchResultActivity0.DomainObjects = activityList17;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(activityArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(activityList7);
        org.junit.Assert.assertNotNull(searchResultActivity8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(activityArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(activityList17);
    }

    @Test
    public void test49394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49394");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        java.lang.String str1 = postStatisticalDerivedTimeSeries0.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries3 = postStatisticalDerivedTimeSeries0.setUtcOffset("/AQUARIUS/Provisioning/v1");
        postStatisticalDerivedTimeSeries0.Method = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType6 = postStatisticalDerivedTimeSeries0.NewValueLocation;
        java.lang.String str7 = postStatisticalDerivedTimeSeries0.getComputationIdentifier();
        postStatisticalDerivedTimeSeries0.Comment = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries11 = postStatisticalDerivedTimeSeries0.setComment("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries3);
        org.junit.Assert.assertNull(newValueLocationType6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries11);
    }

    @Test
    public void test49395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49395");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        java.lang.Double double27 = getGroupedObservationsV2_0.getDepthValue();
        java.lang.Double double28 = getGroupedObservationsV2_0.getNumericResultValue();
        java.util.List<java.lang.String> strList29 = getGroupedObservationsV2_0.getSearch();
        java.util.List<java.lang.String> strList30 = getGroupedObservationsV2_0.getAnalysisMethodSimpleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.QualityControlTypes = strList43;
        java.util.List<java.lang.String> strList47 = getObservationsV2_32.getLabReportIds();
        importItem31.Errors = getObservationsV2_32;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList49 = importItem31.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList51 = importItemObject50.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList53, importChangeItemArray52);
        importItemObject50.ItemComparison = importChangeItemList53;
        importItem31.ItemComparison = importChangeItemList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = getObservationsV2_59.setDataClassifications((java.util.List<java.lang.String>) strList63);
        postTag58.PickListValues = strList63;
        java.util.ArrayList<java.lang.String> strList67 = postTag58.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor68 = processor57.setInputTimeSeriesUniqueIds(strList67);
        importItem31.Fields = strList67;
        java.util.List<java.lang.String> strList70 = importItem31.Fields;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_71 = getGroupedObservationsV2_0.setObservedPropertyIds(strList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier74 = putQualifier72.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        getObservationsV2_76.SpecimenIds = strList79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray86 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags89 = putLocationTags82.setTagUniqueIds(strList87);
        getObservationsV2_76.QualityControlTypes = strList87;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest91 = timeAlignedDataServiceRequest75.setTimeSeriesUniqueIds(strList87);
        putQualifier72.GroupIdentifiers = strList87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_93 = getGroupedObservationsV2_71.setQualityControlTypes((java.util.List<java.lang.String>) strList87);
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(importChangeItemList49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(importChangeItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_65);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(processor68);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_71);
        org.junit.Assert.assertNotNull(putQualifier74);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(putLocationTags89);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest91);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_93);
    }

    @Test
    public void test49396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49396");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_64 = deleteObservationsV2_62.setResultGrades(strList63);
        java.lang.Double double65 = deleteObservationsV2_64.getMaxNumericResultValue();
        deleteObservationsV2_64.Sort = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.util.List<java.lang.String> strList68 = deleteObservationsV2_64.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_70 = deleteObservationsV2_64.setDetectionCondition("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_72 = deleteObservationsV2_64.setMaxNumericResultValue((java.lang.Double) 1.0d);
        java.lang.String str73 = deleteObservationsV2_72.getFieldVisitId();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_64);
        org.junit.Assert.assertNull(double65);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNotNull(deleteObservationsV2_70);
        org.junit.Assert.assertNotNull(deleteObservationsV2_72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test49397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49397");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = velocityDepthObservation0.Velocity;
        java.lang.Double double3 = velocityDepthObservation0.getDepthMultiplier();
        velocityDepthObservation0.Weighting = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType7 = calibrationCheck6.getCalibrationCheckType();
        java.lang.String str8 = calibrationCheck6.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary12.DifferenceDuringVisit = doubleWithDisplay13;
        reading9.Value = doubleWithDisplay13;
        calibrationCheck6.Difference = doubleWithDisplay13;
        doubleWithDisplay13.Display = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation19 = velocityDepthObservation0.setObservationIntervalInSeconds(doubleWithDisplay13);
        java.lang.Double double20 = velocityDepthObservation0.DepthMultiplier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = velocityDepthObservation0.getDepth();
        java.lang.Boolean boolean22 = velocityDepthObservation0.IsVelocityEstimated;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(calibrationCheckType7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(velocityDepthObservation19);
        org.junit.Assert.assertNull(double20);
        org.junit.Assert.assertNull(quantityWithDisplay21);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test49398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49398");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        calibrationCheck0.SensorUniqueId = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = calibrationCheck0.getDifference();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck0.setUnit("0001-01-01T00:00:00.000Z");
        java.lang.String str7 = calibrationCheck6.SerialNumber;
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test49399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49399");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setContentType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation3.setLongitude("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation7 = attachmentRepresentation3.setSuccess((java.lang.Boolean) true);
        attachmentRepresentation7.Longitude = "";
        java.lang.String str10 = attachmentRepresentation7.getResolution();
        java.lang.String str11 = attachmentRepresentation7.getFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation13 = attachmentRepresentation7.setSuccess((java.lang.Boolean) false);
        java.lang.String str14 = attachmentRepresentation7.ContentType;
        java.lang.String str15 = attachmentRepresentation7.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
        org.junit.Assert.assertNotNull(attachmentRepresentation7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(attachmentRepresentation13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str14, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test49400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49400");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = getSpecimens0.setSort("MinDuration");
        java.lang.Integer int4 = getSpecimens3.getLimit();
        java.util.List<java.lang.String> strList5 = getSpecimens3.AnalyticalGroupIds;
        java.lang.String str6 = getSpecimens3.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        getLabReports7.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        java.time.Instant instant12 = getObservationsV2_10.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = getObservationsV2_13.setDataClassifications((java.util.List<java.lang.String>) strList17);
        getObservationsV2_10.ResultStatuses = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports21 = getLabReports7.setSearch((java.util.List<java.lang.String>) strList17);
        java.util.List<java.lang.String> strList22 = getLabReports7.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str24 = deleteFieldVisits23.getSort();
        java.util.List<java.lang.String> strList25 = deleteFieldVisits23.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_26.setDataClassifications((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = getObservationsV2_26.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary34.Reviewer = "";
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary34.MeasurementTime = instant37;
        getObservationsV2_26.StartResultTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType42 = null;
        controlConditionActivity41.ControlCleaned = controlCleanedType42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse44.setNextToken(instant45);
        controlConditionActivity41.DateCleaned = instant45;
        timeAlignedDataServiceRequest40.QueryFrom = instant45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray59 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = putLocationTags55.setTagUniqueIds(strList60);
        getObservationsV2_49.ActivityIds = strList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = timeAlignedDataServiceRequest40.setTimeSeriesOutputUnitIds(strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = getObservationsV2_26.setCollectionMethodIds((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits66 = deleteFieldVisits23.setSamplingPlanIds((java.util.List<java.lang.String>) strList60);
        getLabReports7.LaboratoryIds = strList60;
        getSpecimens3.Search = strList60;
        java.util.List<java.lang.String> strList69 = getSpecimens3.getSamplingLocationIds();
        java.util.List<java.lang.String> strList70 = getSpecimens3.FieldVisitId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getSpecimens3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_19);
        org.junit.Assert.assertNotNull(getLabReports21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putLocationTags62);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest64);
        org.junit.Assert.assertNotNull(getObservationsV2_65);
        org.junit.Assert.assertNotNull(deleteFieldVisits66);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNull(strList70);
    }

    @Test
    public void test49401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49401");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList1 = processorListServiceResponse0.getProcessors();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList2 = processorListServiceResponse0.getProcessors();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        postTag4.PickListValues = strList9;
        java.util.ArrayList<java.lang.String> strList13 = postTag4.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor14 = processor3.setInputTimeSeriesUniqueIds(strList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor16 = processor14.setOutputTimeSeriesUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor18 = processor14.setProcessorType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor[] processorArray19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor[] { processor18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor>) processorList20, processorArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse22 = processorListServiceResponse0.setProcessors(processorList20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList24 = processorListServiceResponse23.getProcessors();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList25 = processorListServiceResponse23.Processors;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList27 = processorListServiceResponse26.getProcessors();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList28 = processorListServiceResponse26.getProcessors();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = getObservationsV2_31.setDataClassifications((java.util.List<java.lang.String>) strList35);
        postTag30.PickListValues = strList35;
        java.util.ArrayList<java.lang.String> strList39 = postTag30.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor40 = processor29.setInputTimeSeriesUniqueIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor42 = processor40.setOutputTimeSeriesUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor44 = processor40.setProcessorType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor[] processorArray45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor[] { processor44 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor>) processorList46, processorArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse48 = processorListServiceResponse26.setProcessors(processorList46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse49 = processorListServiceResponse23.setProcessors(processorList46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse50 = processorListServiceResponse22.setProcessors(processorList46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList52 = processorListServiceResponse51.getProcessors();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList53 = processorListServiceResponse51.getProcessors();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_56.setDataClassifications((java.util.List<java.lang.String>) strList60);
        postTag55.PickListValues = strList60;
        java.util.ArrayList<java.lang.String> strList64 = postTag55.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor65 = processor54.setInputTimeSeriesUniqueIds(strList64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor67 = processor65.setOutputTimeSeriesUniqueId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor69 = processor65.setProcessorType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor[] processorArray70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor[] { processor69 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList71 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor>) processorList71, processorArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ProcessorListServiceResponse processorListServiceResponse73 = processorListServiceResponse51.setProcessors(processorList71);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor> processorList74 = processorListServiceResponse51.Processors;
        processorListServiceResponse22.Processors = processorList74;
        org.junit.Assert.assertNull(processorList1);
        org.junit.Assert.assertNull(processorList2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(processor14);
        org.junit.Assert.assertNotNull(processor16);
        org.junit.Assert.assertNotNull(processor18);
        org.junit.Assert.assertNotNull(processorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(processorListServiceResponse22);
        org.junit.Assert.assertNull(processorList24);
        org.junit.Assert.assertNull(processorList25);
        org.junit.Assert.assertNull(processorList27);
        org.junit.Assert.assertNull(processorList28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(processor40);
        org.junit.Assert.assertNotNull(processor42);
        org.junit.Assert.assertNotNull(processor44);
        org.junit.Assert.assertNotNull(processorArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(processorListServiceResponse48);
        org.junit.Assert.assertNotNull(processorListServiceResponse49);
        org.junit.Assert.assertNotNull(processorListServiceResponse50);
        org.junit.Assert.assertNull(processorList52);
        org.junit.Assert.assertNull(processorList53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(processor65);
        org.junit.Assert.assertNotNull(processor67);
        org.junit.Assert.assertNotNull(processor69);
        org.junit.Assert.assertNotNull(processorArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(processorListServiceResponse73);
        org.junit.Assert.assertNotNull(processorList74);
    }

    @Test
    public void test49402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49402");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        labInstructionMinimal0.AnalysisMethod = analysisMethodMinimal1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        java.lang.String str4 = analysisMethodMinimal3.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal5 = labInstructionMinimal0.setAnalysisMethod(analysisMethodMinimal3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal7 = labInstructionMinimal0.setPreparationMethod("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal8 = labInstructionMinimal7.getAnalysisMethod();
        java.lang.String str9 = analysisMethodMinimal8.Id;
        java.lang.String str10 = analysisMethodMinimal8.getName();
        analysisMethodMinimal8.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal14 = analysisMethodMinimal8.setName("****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(labInstructionMinimal5);
        org.junit.Assert.assertNotNull(labInstructionMinimal7);
        org.junit.Assert.assertNotNull(analysisMethodMinimal8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(analysisMethodMinimal14);
    }

    @Test
    public void test49403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49403");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        java.lang.String str37 = putBulkEditResultGradesV2_0.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str39 = getChartDataV2_38.getActivityCustomId();
        java.util.List<java.lang.String> strList40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_41 = getChartDataV2_38.setSearch(strList40);
        java.util.List<java.lang.String> strList42 = getChartDataV2_41.ProjectIds;
        java.util.List<java.lang.String> strList43 = null;
        getChartDataV2_41.ActivityTypes = strList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_41.setSort("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.ActivityIds = strList58;
        getChartDataV2_46.TaxonIds = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_63 = putBulkEditResultGradesV2_0.setCollectionMethodIds((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList64 = putBulkEditResultGradesV2_63.ResultGrades;
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(getChartDataV2_41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_63);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test49404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49404");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplate getActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplate();
        java.lang.Object obj1 = getActivityTemplate0.getResponseType();
        java.lang.String str2 = getActivityTemplate0.Id;
        java.lang.String str3 = getActivityTemplate0.getId();
        java.lang.String str4 = getActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplate getActivityTemplate6 = getActivityTemplate0.setId("multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getActivityTemplate6);
    }

    @Test
    public void test49405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49405");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str9 = samplingContextTag8.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag11 = samplingContextTag8.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = samplingContextTag11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str15 = samplingContextTag14.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        samplingContextTag16.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str21 = samplingContextTag20.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = samplingContextTag20.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag13, samplingContextTag14, samplingContextTag16, samplingContextTag23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25, samplingContextTagArray24);
        postActivity3.SamplingContextTags = samplingContextTagList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity30 = putActivity28.setCustomId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails31.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime34 = activityWithDetails31.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation35 = activityWithDetails31.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str38 = metricConfiguration37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty39.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration42 = metricConfiguration37.setObservedProperty(observedProperty39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType43 = observedProperty39.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup45 = postObservedProperty44.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit47 = null;
        quantity46.Unit = unit47;
        postObservedProperty44.LowerLimit = quantity46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = postObservedProperty44.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = quantity50.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty52 = observedProperty39.setUpperLimit(quantity50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = samplingLocation36.setElevation(quantity50);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList54 = samplingLocation53.getAttachments();
        java.lang.String str55 = samplingLocation53.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList56 = samplingLocation53.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit58 = null;
        quantity57.Unit = unit58;
        samplingLocation53.Elevation = quantity57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails61 = activityWithDetails31.setSamplingLocation(samplingLocation53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails63 = activityWithDetails31.setSourceActivityId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit65 = indexConfiguration64.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = indexConfiguration64.AuditAttributes;
        activityWithDetails31.IndexConfiguration = indexConfiguration64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration69 = indexConfiguration64.setUseScoreRanges((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity70 = putActivity30.setIndexConfiguration(indexConfiguration69);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList71 = putActivity30.getObservations();
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(samplingContextTag11);
        org.junit.Assert.assertNotNull(samplingContextTag13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(samplingContextTag23);
        org.junit.Assert.assertNotNull(samplingContextTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putActivity28);
        org.junit.Assert.assertNotNull(putActivity30);
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNull(samplingLocation35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(metricConfiguration42);
        org.junit.Assert.assertNull(resultType43);
        org.junit.Assert.assertNull(unitGroup45);
        org.junit.Assert.assertNotNull(quantity50);
        org.junit.Assert.assertNull(unit51);
        org.junit.Assert.assertNotNull(observedProperty52);
        org.junit.Assert.assertNotNull(samplingLocation53);
        org.junit.Assert.assertNull(domainObjectAttachmentList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(importHistoryEventSimpleList56);
        org.junit.Assert.assertNotNull(activityWithDetails61);
        org.junit.Assert.assertNotNull(activityWithDetails63);
        org.junit.Assert.assertNull(unit65);
        org.junit.Assert.assertNull(auditAttributes66);
        org.junit.Assert.assertNotNull(indexConfiguration69);
        org.junit.Assert.assertNotNull(putActivity70);
        org.junit.Assert.assertNull(observationMinimalList71);
    }

    @Test
    public void test49406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49406");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit1 = indexConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = indexConfiguration0.AuditAttributes;
        indexConfiguration0.Description = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit5 = indexConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = unit6.AuditAttributes;
        unit6.Name = "2021.4.62.0";
        java.lang.String str10 = unit6.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit12 = unit6.setName("MinDuration");
        java.lang.String str13 = unit6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = unit6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration15 = indexConfiguration0.setUnit(unit6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation16.setPlannedFieldResult(plannedFieldResult17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction19 = null;
        observation18.LabInstruction = labInstruction19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation18.setStatistics(observationStatistics21);
        java.time.OffsetDateTime offsetDateTime23 = observation22.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList24 = observation22.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = observation22.setObservedProperty(observedProperty25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade27 = observation26.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = labResultDetails28.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails32 = labResultDetails30.setAuditAttributes(auditAttributes31);
        observation26.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str35 = metricConfiguration34.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty36.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration39 = metricConfiguration34.setObservedProperty(observedProperty36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType40 = observedProperty36.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup42 = postObservedProperty41.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit44 = null;
        quantity43.Unit = unit44;
        postObservedProperty41.LowerLimit = quantity43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = postObservedProperty41.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = quantity47.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty49 = observedProperty36.setUpperLimit(quantity47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup50 = observedProperty49.UnitGroup;
        observation26.ObservedProperty = observedProperty49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = observedProperty49.setCustomId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity54 = observedProperty49.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity55 = observedProperty49.LowerLimit;
        indexConfiguration0.ObservedProperty = observedProperty49;
        org.junit.Assert.assertNull(unit1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(unit5);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(unit12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(indexConfiguration15);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNull(offsetDateTime23);
        org.junit.Assert.assertNull(importHistoryEventSimpleList24);
        org.junit.Assert.assertNotNull(observation26);
        org.junit.Assert.assertNull(resultGrade27);
        org.junit.Assert.assertNotNull(labResultDetails30);
        org.junit.Assert.assertNotNull(labResultDetails32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(metricConfiguration39);
        org.junit.Assert.assertNull(resultType40);
        org.junit.Assert.assertNull(unitGroup42);
        org.junit.Assert.assertNotNull(quantity47);
        org.junit.Assert.assertNull(unit48);
        org.junit.Assert.assertNotNull(observedProperty49);
        org.junit.Assert.assertNull(unitGroup50);
        org.junit.Assert.assertNotNull(observedProperty53);
        org.junit.Assert.assertNull(quantity54);
        org.junit.Assert.assertNull(quantity55);
    }

    @Test
    public void test49407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49407");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = postBasicTimeSeries5.Publish;
        java.time.Duration duration7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries8 = postBasicTimeSeries5.setGapTolerance(duration7);
        postBasicTimeSeries8.LocationUniqueId = "MaxInstant";
        java.lang.Boolean boolean11 = postBasicTimeSeries8.isPublish();
        java.lang.String str12 = postBasicTimeSeries8.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries14 = postBasicTimeSeries8.setComputationPeriodIdentifier("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType15 = postBasicTimeSeries8.getInterpolationType();
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(postBasicTimeSeries8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + true + "'", boolean11, true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MaxInstant" + "'", str12, "MaxInstant");
        org.junit.Assert.assertNotNull(postBasicTimeSeries14);
        org.junit.Assert.assertNull(interpolationType15);
    }

    @Test
    public void test49408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49408");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        java.lang.String str4 = location0.getLocationPath();
        java.lang.String str5 = location0.getUtcOffset();
        location0.Publish = false;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList8 = location0.getTags();
        location0.Elevation = 100.0d;
        java.lang.String str11 = location0.ElevationUnits;
        location0.Description = "http://MaxDurationhttp";
        java.lang.Boolean boolean14 = location0.Publish;
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(appliedTagList8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + false + "'", boolean14, false);
    }

    @Test
    public void test49409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49409");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        monitoringMethod0.ParameterUniqueId = "-PT87591240H";
        java.lang.String str5 = monitoringMethod0.getParameterUniqueId();
        java.lang.String str6 = monitoringMethod0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod8 = monitoringMethod0.setParameterUniqueId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod10 = monitoringMethod0.setDescription("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-PT87591240H" + "'", str5, "-PT87591240H");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(monitoringMethod8);
        org.junit.Assert.assertNotNull(monitoringMethod10);
    }

    @Test
    public void test49410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49410");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary2 = fieldSheetImportSummary0.setSpecimenSummary(importSummarySpecimen1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation5 = importSummaryObservation3.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Integer int6 = importSummaryObservation5.ErrorCount;
        java.lang.Integer int7 = importSummaryObservation5.NewCount;
        importSummaryObservation5.ExpectedCount = 1;
        importSummaryObservation5.SkippedCount = 4;
        fieldSheetImportSummary2.FieldResultSummary = importSummaryObservation5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation13 = fieldSheetImportSummary2.getFieldResultSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen16 = importSummarySpecimen14.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList17 = importSummarySpecimen16.ImportJobErrors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary18.UpdateCount = (-1);
        java.lang.Integer int21 = observationImportSummary18.ExpectedCount;
        java.lang.String str22 = observationImportSummary18.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList24, importErrorArray23);
        observationImportSummary18.ImportJobErrors = importErrorList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen27 = importSummarySpecimen16.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList24);
        importSummarySpecimen16.SuccessCount = 10;
        java.lang.Integer int30 = importSummarySpecimen16.getExpectedCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldSheetImportSummary fieldSheetImportSummary31 = fieldSheetImportSummary2.setSpecimenSummary(importSummarySpecimen16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation32 = fieldSheetImportSummary31.FieldResultSummary;
        org.junit.Assert.assertNotNull(fieldSheetImportSummary2);
        org.junit.Assert.assertNotNull(importSummaryObservation5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(importSummaryObservation13);
        org.junit.Assert.assertNotNull(importSummarySpecimen16);
        org.junit.Assert.assertNull(importErrorList17);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(importErrorArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(importSummarySpecimen27);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(fieldSheetImportSummary31);
        org.junit.Assert.assertNotNull(importSummaryObservation32);
    }

    @Test
    public void test49411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49411");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple1 = fieldVisitSimple0.getSamplingLocation();
        fieldVisitSimple0.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str5 = samplingLocationSimple4.Name;
        fieldVisitSimple0.SamplingLocation = samplingLocationSimple4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple8 = samplingLocationSimple4.setId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.lang.String str9 = samplingLocationSimple8.Id;
        org.junit.Assert.assertNull(samplingLocationSimple1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(samplingLocationSimple8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str9, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
    }

    @Test
    public void test49412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49412");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList9 = getObservationsV2_2.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType10 = null;
        getObservationsV2_2.FieldResultType = fieldResultType10;
        getObservationsV2_2.MaxNumericResultValue = 100.0d;
        java.lang.String str14 = getObservationsV2_2.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_2.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_2.setAnalysisMethodIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations24 = getExportSamplingLocations0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList20);
        getExportSamplingLocations0.Sort = "9999-12-31T23:59:59.999Z";
        java.lang.Integer int27 = getExportSamplingLocations0.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList29 = getShippingContainers28.Search;
        java.util.List<java.lang.String> strList30 = getShippingContainers28.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.QualityControlTypes = strList44;
        java.util.List<java.lang.String> strList48 = getObservationsV2_33.getLabReportIds();
        importItem32.Errors = getObservationsV2_33;
        java.lang.Object obj50 = importItem32.getExistingItem();
        importItem32.Input = "hi!";
        java.lang.Object obj53 = importItem32.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType54 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem55 = importItem32.setStatus(importItemStatusType54);
        importItem55.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate58.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate62 = specimenTemplate58.setId("hi!");
        java.lang.Boolean boolean63 = specimenTemplate62.getFiltered();
        importItem55.Item = specimenTemplate62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = getObservationsV2_67.setDataClassifications((java.util.List<java.lang.String>) strList71);
        postTag66.PickListValues = strList71;
        java.util.ArrayList<java.lang.String> strList75 = postTag66.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor76 = processor65.setInputTimeSeriesUniqueIds(strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem77 = importItem55.setWarningMessages((java.util.List<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList78 = importItem55.getWarningMessages();
        getAnalysisMethods31.ObservedPropertyIds = strList78;
        getShippingContainers28.Search = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations81 = getExportSamplingLocations0.setSamplingLocationGroupIds(strList78);
        java.util.List<java.lang.String> strList82 = getExportSamplingLocations0.getLocationTypeIds();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSamplingLocations24);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + importItemStatusType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType54.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem55);
        org.junit.Assert.assertNotNull(specimenTemplate62);
        org.junit.Assert.assertNull(boolean63);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_73);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(processor76);
        org.junit.Assert.assertNotNull(importItem77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(getExportSamplingLocations81);
        org.junit.Assert.assertNull(strList82);
    }

    @Test
    public void test49413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49413");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList1 = fieldVisitDataServiceResponse0.DischargeActivities;
        fieldVisitDataServiceResponse0.Identifier = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList5 = inspectionActivity4.getInspections();
        java.lang.String str6 = inspectionActivity4.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList7 = inspectionActivity4.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity9 = inspectionActivity4.setParty("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList10 = inspectionActivity9.Inspections;
        fieldVisitDataServiceResponse0.InspectionActivity = inspectionActivity9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = fieldVisitDataServiceResponse0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult16 = datumConversionResult14.setFailureReason("MinInstant");
        fieldVisit13.DatumConversionResult = datumConversionResult16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity18 = fieldVisit13.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant20 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity21 = gageHeightAtZeroFlowActivity19.setApplicableSince(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit22 = fieldVisit13.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity23 = fieldVisit13.getGageHeightAtZeroFlowActivity();
        java.lang.Boolean boolean24 = gageHeightAtZeroFlowActivity23.IsValid;
        gageHeightAtZeroFlowActivity23.Party = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse27 = fieldVisitDataServiceResponse0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = gageHeightAtZeroFlowActivity23.getZeroFlowHeight();
        org.junit.Assert.assertNull(dischargeActivityList1);
        org.junit.Assert.assertNull(inspectionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(readingList7);
        org.junit.Assert.assertNotNull(inspectionActivity9);
        org.junit.Assert.assertNull(inspectionList10);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity12);
        org.junit.Assert.assertNotNull(datumConversionResult16);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity18);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity21);
        org.junit.Assert.assertNotNull(fieldVisit22);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse27);
        org.junit.Assert.assertNull(doubleWithDisplay28);
    }

    @Test
    public void test49414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49414");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate2 = postSpreadsheetTemplate0.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType4 = null;
        putSpreadsheetTemplate3.Type = spreadsheetTemplateType4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType6 = putSpreadsheetTemplate3.getType();
        java.lang.String str7 = putSpreadsheetTemplate3.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList11, plannedActivityArray10);
        putFieldVisit9.PlannedActivities = plannedActivityList11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str15 = domainObjectAttachment14.getId();
        java.lang.String str16 = domainObjectAttachment14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = domainObjectAttachment14.setAttachment(attachment17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str20 = domainObjectAttachment19.getId();
        java.lang.String str21 = domainObjectAttachment19.getId();
        domainObjectAttachment19.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = domainObjectAttachment19.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str27 = domainObjectAttachment26.getId();
        java.lang.String str28 = domainObjectAttachment26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = domainObjectAttachment26.setAttachment(attachment29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str34 = domainObjectAttachment33.getId();
        java.lang.String str35 = domainObjectAttachment33.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = domainObjectAttachment33.setAttachment(attachment36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment14, domainObjectAttachment19, domainObjectAttachment26, domainObjectAttachment31, domainObjectAttachment33, domainObjectAttachment38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList41, domainObjectAttachmentArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit43 = putFieldVisit9.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan44 = putFieldVisit9.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str47 = domainObjectAttachment46.getId();
        java.lang.String str48 = domainObjectAttachment46.getId();
        domainObjectAttachment46.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = domainObjectAttachment46.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment45, domainObjectAttachment46 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList54, domainObjectAttachmentArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit56 = putFieldVisit9.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList54);
        fieldTrip8.Attachments = domainObjectAttachmentList54;
        putSpreadsheetTemplate3.Attachments = domainObjectAttachmentList54;
        postSpreadsheetTemplate2.Attachments = domainObjectAttachmentList54;
        java.lang.String str60 = postSpreadsheetTemplate2.Description;
        java.lang.String str61 = postSpreadsheetTemplate2.getCustomId();
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate2);
        org.junit.Assert.assertNull(spreadsheetTemplateType6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(plannedActivityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(domainObjectAttachment18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(domainObjectAttachment25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(domainObjectAttachment30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(domainObjectAttachment37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(putFieldVisit43);
        org.junit.Assert.assertNull(samplingPlan44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(domainObjectAttachment52);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putFieldVisit56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "MinDuration" + "'", str61, "MinDuration");
    }

    @Test
    public void test49415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49415");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = null;
        getObservationsV2_6.ProjectIds = strList10;
        java.util.List<java.lang.String> strList12 = getObservationsV2_6.getObservedPropertyIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList14 = getExportObservations13.getLabReportIds();
        java.lang.String str15 = getExportObservations13.DepthUnitCustomId;
        java.util.List<java.lang.String> strList16 = getExportObservations13.getSearch();
        java.util.List<java.lang.String> strList17 = getExportObservations13.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        postRecurringReport19.NextGenerationDate = instant23;
        java.time.Instant instant26 = postRecurringReport19.getNextGenerationDate();
        java.lang.String str27 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant26);
        metadataChangeTransactionListServiceRequest18.QueryFrom = instant26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations29 = getExportObservations13.setEndObservedTime(instant26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList31 = getFieldVisits30.getSamplingLocationIds();
        java.util.List<java.lang.String> strList32 = getFieldVisits30.Ids;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        dischargeSummary33.MeasurementTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = dischargeSummary33.getGageHeightAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant42 = timeSeriesDescription41.getCorrectedStartTime();
        java.lang.String str43 = timeSeriesDescription41.getComputationIdentifier();
        timeSeriesDescription41.TimeSeriesType = "-PT87591240H";
        java.lang.String str46 = timeSeriesDescription41.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_47.setDataClassifications((java.util.List<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList54 = getObservationsV2_47.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary55.Reviewer = "";
        java.time.Instant instant58 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary55.MeasurementTime = instant58;
        getObservationsV2_47.StartResultTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription61 = timeSeriesDescription41.setCorrectedStartTime(instant58);
        dischargeSummary33.MeasurementStartTime = instant58;
        getFieldVisits30.EndStartTime = instant58;
        getExportObservations29.EndResultTime = instant58;
        getObservationsV2_6.EndObservedTime = instant58;
        getObservationsV2_6.MaxNumericResultValue = 0.0d;
        java.util.List<java.lang.String> strList68 = getObservationsV2_6.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList69 = getObservationsV2_6.Media;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str27, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNull(quantityWithDisplay40);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(timeSeriesDescription61);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNull(strList69);
    }

    @Test
    public void test49416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49416");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject4 = postProject2.setApprovalAgency("/AQUARIUS");
        postProject2.ScopeStatement = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNotNull(postProject4);
    }

    @Test
    public void test49417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49417");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse85 = locationDataServiceResponse0.setUniqueId("'.'SSSSSSS");
        java.lang.Boolean boolean86 = locationDataServiceResponse0.IsExternalLocation;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList87 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse88 = locationDataServiceResponse0.setTags(tagMetadataList87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse90 = locationDataServiceResponse0.setIsExternalLocation((java.lang.Boolean) false);
        java.lang.String str91 = locationDataServiceResponse0.getIdentifier();
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNotNull(locationDataServiceResponse85);
        org.junit.Assert.assertNull(boolean86);
        org.junit.Assert.assertNotNull(locationDataServiceResponse88);
        org.junit.Assert.assertNotNull(locationDataServiceResponse90);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test49418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49418");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest();
        applyTagRequest0.UniqueId = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest4 = applyTagRequest0.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str5 = applyTagRequest4.Value;
        applyTagRequest4.UniqueId = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        java.lang.String str8 = applyTagRequest4.Value;
        org.junit.Assert.assertNotNull(applyTagRequest4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str8, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test49419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49419");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList3 = getObservationsV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        getObservationsV2_2.ResultGrades = strList15;
        getExtendedAttributeDropdownlistitems1.Search = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult21 = metricResult0.setMatchedObservations((java.util.List<java.lang.String>) strList15);
        metricResult21.OverriddenByUser = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult25 = metricResult21.setScore((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str27 = metricConfiguration26.getId();
        metricConfiguration26.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean30 = metricConfiguration26.getUseScoreRanges();
        java.lang.String str31 = metricConfiguration26.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = metricConfiguration26.getUnit();
        metricConfiguration26.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult35 = metricResult25.setMetricConfiguration(metricConfiguration26);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(metricResult21);
        org.junit.Assert.assertNotNull(metricResult25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(unit32);
        org.junit.Assert.assertNotNull(metricResult35);
    }

    @Test
    public void test49420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49420");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType putThresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType();
        putThresholdType0.ReferenceValueCode = "http://MaxDurationhttp/json/reply/ArrayList";
        putThresholdType0.ReferenceValueCode = "multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
    }

    @Test
    public void test49421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49421");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        tagDefinition0.AppliesToAttachments = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon5 = importItemTaxon3.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str6 = importItemTaxon5.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon8 = importItemTaxon5.setInput("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean11 = roleFlattened10.CanRemoveFieldVisits;
        roleFlattened10.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str15 = putLocationType14.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_22.setMedia((java.util.List<java.lang.String>) strList38);
        putLocationType14.ExtendedAttributeDefinitionIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase44 = roleFlattened10.setRoleApprovalTransitions(strList38);
        putBulkEditResultGradesV2_9.ResultGrades = strList38;
        importItemTaxon8.WarningMessages = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition47 = tagDefinition0.setPickListValues(strList38);
        java.lang.Boolean boolean48 = tagDefinition47.AppliesToReports;
        java.lang.Boolean boolean49 = tagDefinition47.isAppliesToAttachments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition51 = tagDefinition47.setAppliesToSensorsGauges((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(importItemTaxon5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(importItemTaxon8);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(roleFlattenedBase44);
        org.junit.Assert.assertNotNull(tagDefinition47);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + true + "'", boolean49, true);
        org.junit.Assert.assertNotNull(tagDefinition51);
    }

    @Test
    public void test49422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49422");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSchedule getSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSchedule();
        getSchedule0.Id = "";
        java.lang.String str3 = getSchedule0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSchedule getSchedule5 = getSchedule0.setId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(getSchedule5);
    }

    @Test
    public void test49423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49423");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str3 = tag2.Key;
        tag2.AppliesToLocationNotes = false;
        java.lang.String str6 = tag2.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag8 = tag2.setAppliesToReports((java.lang.Boolean) true);
        java.lang.Boolean boolean9 = tag2.isAppliesToLocations();
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(tag8);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test49424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49424");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setNumericValue10((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint0.setNumericValue2((java.lang.Double) 1.0d);
        java.lang.String str14 = timeAlignedPoint0.GradeName3;
        java.lang.String str15 = timeAlignedPoint0.getMethod3();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test49425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49425");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        java.lang.String str3 = role2.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase6 = postRole4.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str7 = postRole4.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long10 = roleApprovalTransition9.getToApprovalLevel();
        java.lang.Long long11 = roleApprovalTransition9.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long13 = roleApprovalTransition12.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = roleApprovalTransition14.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition19 = roleApprovalTransition17.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition21 = roleApprovalTransition17.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long23 = roleApprovalTransition22.getToApprovalLevel();
        java.lang.Long long24 = roleApprovalTransition22.ToApprovalLevel;
        java.lang.Long long25 = roleApprovalTransition22.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long27 = roleApprovalTransition26.getToApprovalLevel();
        java.lang.Long long28 = roleApprovalTransition26.ToApprovalLevel;
        java.lang.Long long29 = roleApprovalTransition26.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition9, roleApprovalTransition12, roleApprovalTransition16, roleApprovalTransition17, roleApprovalTransition22, roleApprovalTransition26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList31, roleApprovalTransitionArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase33 = postRole8.setRoleApprovalTransitions(roleApprovalTransitionList31);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList34 = postRole8.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase35 = postRole4.setRoleApprovalTransitions(roleApprovalTransitionList34);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList36 = postRole4.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role37 = role2.setRoleApprovalTransitions(roleApprovalTransitionList36);
        role2.CanAssignUserRoles = true;
        java.lang.Boolean boolean40 = role2.CanRemoveAppendConfigurations;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(roleBase6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str7, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertNull(long11);
        org.junit.Assert.assertNull(long13);
        org.junit.Assert.assertNotNull(roleApprovalTransition16);
        org.junit.Assert.assertNotNull(roleApprovalTransition19);
        org.junit.Assert.assertNotNull(roleApprovalTransition21);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNull(long25);
        org.junit.Assert.assertNull(long27);
        org.junit.Assert.assertNull(long28);
        org.junit.Assert.assertNull(long29);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(roleBase33);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList34);
        org.junit.Assert.assertNotNull(roleBase35);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList36);
        org.junit.Assert.assertNotNull(role37);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
    }

    @Test
    public void test49426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49426");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium9 = postObservationV2_2.getMedium();
        java.lang.String str10 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType11 = postObservationV2_2.DataClassification;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon12 = postObservationV2_2.RelatedTaxon;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(medium9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(dataClassificationType11);
        org.junit.Assert.assertNull(taxon12);
    }

    @Test
    public void test49427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49427");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        java.lang.String str4 = laboratory1.PhoneNumber;
        laboratory1.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory7.Id = "MaxInstant";
        java.lang.String str10 = laboratory7.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory1, laboratory7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12, laboratoryArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory14 = searchResultLaboratory0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList15 = searchResultLaboratory14.getDomainObjects();
        searchResultLaboratory14.Cursor = "http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(laboratoryArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory14);
        org.junit.Assert.assertNotNull(laboratoryList15);
    }

    @Test
    public void test49428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49428");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType1 = importItemSpecimen0.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList3 = importItemObject2.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList5, importChangeItemArray4);
        importItemObject2.ItemComparison = importChangeItemList5;
        java.lang.String str8 = importItemObject2.Input;
        java.lang.String str9 = importItemObject2.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getLabReportIds();
        importItem10.Errors = getObservationsV2_11;
        java.lang.Object obj28 = importItem10.getExistingItem();
        importItem10.Input = "hi!";
        java.lang.Object obj31 = importItem10.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem33 = importItem10.setStatus(importItemStatusType32);
        importItemObject2.Status = importItemStatusType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen35 = importItemSpecimen0.setStatus(importItemStatusType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList37 = importItemObject36.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList39, importChangeItemArray38);
        importItemObject36.ItemComparison = importChangeItemList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject50 = importItemObject36.setExistingItem((java.lang.Object) putLocationTags42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        getObservationsV2_51.SpecimenIds = strList54;
        importItemObject50.WarningMessages = strList54;
        importItemSpecimen35.WarningMessages = strList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen60 = importItemSpecimen35.setInput("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen61 = importItemSpecimen35.Item;
        org.junit.Assert.assertNull(importItemStatusType1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(importChangeItemArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + importItemStatusType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem33);
        org.junit.Assert.assertNotNull(importItemSpecimen35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(importChangeItemArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(importItemObject50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(importItemSpecimen60);
        org.junit.Assert.assertNull(specimen61);
    }

    @Test
    public void test49429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49429");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod3 = analyticalGroupItem0.AnalysisMethod;
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNull(analysisMethod2);
        org.junit.Assert.assertNull(analysisMethod3);
    }

    @Test
    public void test49430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49430");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        java.lang.String str62 = locationDatumPeriod0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod64 = locationDatumPeriod0.setStandard("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        locationDatumPeriod64.UnitIdentifier = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        locationDatumPeriod64.Standard = "multipart/form-data; boundary=****4e5cd403-2823-4e43-9a3f-5d99e3f50f4e****";
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locationDatumPeriod64);
    }

    @Test
    public void test49431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49431");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str2 = domainObjectAttachment1.getId();
        java.lang.String str3 = domainObjectAttachment1.getId();
        domainObjectAttachment1.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment7 = domainObjectAttachment1.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment7.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment7, domainObjectAttachment10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList14, domainObjectAttachmentArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit16 = fieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple17 = fieldVisit0.FieldTrip;
        fieldVisit0.Participants = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList21 = fieldVisit20.Attachments;
        java.time.OffsetDateTime offsetDateTime22 = null;
        fieldVisit20.EndTime = offsetDateTime22;
        java.lang.String str24 = fieldVisit20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit26 = fieldVisit20.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan27.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType30 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan27.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup32 = samplingPlan27.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = samplingPlan27.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup34 = samplingPlan27.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan36 = samplingPlan27.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit37 = fieldVisit26.setSamplingPlan(samplingPlan27);
        fieldVisit0.SamplingPlan = samplingPlan27;
        java.lang.String str39 = fieldVisit0.Notes;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(domainObjectAttachment7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(fieldVisit16);
        org.junit.Assert.assertNull(fieldTripSimple17);
        org.junit.Assert.assertNull(domainObjectAttachmentList21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(fieldVisit26);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType30.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup32);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNull(samplingLocationGroup34);
        org.junit.Assert.assertNotNull(samplingPlan36);
        org.junit.Assert.assertNotNull(fieldVisit37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test49432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49432");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup();
        java.lang.String str1 = accessGroup0.Name;
        java.lang.String str2 = accessGroup0.getDescription();
        java.lang.String str3 = accessGroup0.getId();
        java.lang.String str4 = accessGroup0.getName();
        java.lang.String str5 = accessGroup0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup7 = accessGroup0.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime9 = postFilter8.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = postFilter8.getAuditAttributes();
        postFilter8.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime13 = postFilter8.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter14.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList18, samplingLocationArray17);
        postFilter14.SamplingLocations = samplingLocationList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter21 = postFilter8.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str23 = postLaboratory22.Address;
        java.lang.String str24 = postLaboratory22.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity27 = samplingPlanPlannedActivity25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = auditAttributes28.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity27.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = samplingPlanPlannedActivity27.AuditAttributes;
        postLaboratory22.AuditAttributes = auditAttributes32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory35 = postLaboratory22.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime37 = putSchedule36.StartDate;
        java.time.OffsetDateTime offsetDateTime38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule39 = putSchedule36.setEndDate(offsetDateTime38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = putSchedule39.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime41 = null;
        putSchedule39.LastGenerationDate = offsetDateTime41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType43 = putSchedule39.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = plannedFieldResult44.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails48 = labResultDetails46.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails50 = labResultDetails48.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult51 = plannedFieldResult44.setAuditAttributes(auditAttributes49);
        putSchedule39.AuditAttributes = auditAttributes49;
        postLaboratory35.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory55 = postLaboratory35.setEmailAddress("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = auditAttributes56.setCreationUserProfileId("'.'SSSSSSS");
        postLaboratory35.AuditAttributes = auditAttributes56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter60 = postFilter8.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup61 = accessGroup0.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup63 = accessGroup0.setName("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup65 = accessGroup63.setName("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str66 = accessGroup63.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(accessGroup7);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(samplingLocationArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postFilter21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity27);
        org.junit.Assert.assertNotNull(auditAttributes30);
        org.junit.Assert.assertNotNull(auditAttributes32);
        org.junit.Assert.assertNotNull(postLaboratory35);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(putSchedule39);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType43);
        org.junit.Assert.assertNull(auditAttributes45);
        org.junit.Assert.assertNotNull(labResultDetails48);
        org.junit.Assert.assertNotNull(labResultDetails50);
        org.junit.Assert.assertNotNull(plannedFieldResult51);
        org.junit.Assert.assertNotNull(postLaboratory55);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(postFilter60);
        org.junit.Assert.assertNotNull(accessGroup61);
        org.junit.Assert.assertNotNull(accessGroup63);
        org.junit.Assert.assertNotNull(accessGroup65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****" + "'", str66, "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
    }

    @Test
    public void test49433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49433");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.String str1 = locationDataServiceResponse0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse3 = locationDataServiceResponse0.setElevationUnits("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse5 = locationDataServiceResponse3.setLatitude((java.lang.Double) 0.0d);
        locationDataServiceResponse3.UtcOffset = 100.0d;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationDataServiceResponse3);
        org.junit.Assert.assertNotNull(locationDataServiceResponse5);
    }

    @Test
    public void test49434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49434");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeChange resultGradeChange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeChange();
        java.lang.String str1 = resultGradeChange0.TargetResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeChange resultGradeChange3 = resultGradeChange0.setTargetResultGrade("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.lang.String str4 = resultGradeChange3.getTargetResultGrade();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(resultGradeChange3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****" + "'", str4, "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
    }

    @Test
    public void test49435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49435");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList2 = inspectionActivity1.getInspections();
        java.lang.String str3 = inspectionActivity1.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList4 = inspectionActivity1.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity6 = inspectionActivity1.setParty("https");
        fieldVisit0.InspectionActivity = inspectionActivity6;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList8 = fieldVisit0.CrossSectionSurveyActivity;
        java.lang.String str9 = fieldVisit0.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = gageHeightAtZeroFlowActivity10.setApplicableSince(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity14 = gageHeightAtZeroFlowActivity12.setComments("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        fieldVisit0.GageHeightAtZeroFlowActivity = gageHeightAtZeroFlowActivity14;
        java.time.Instant instant16 = gageHeightAtZeroFlowActivity14.ApplicableSince;
        java.lang.Boolean boolean17 = gageHeightAtZeroFlowActivity14.getIsObserved();
        org.junit.Assert.assertNull(inspectionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(readingList4);
        org.junit.Assert.assertNotNull(inspectionActivity6);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity12);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test49436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49436");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getName();
        java.lang.String str2 = project0.Name;
        java.lang.String str3 = project0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test49437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49437");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay3;
        java.lang.Boolean boolean5 = adcpDischargeActivity0.getIsValid();
        java.lang.String str6 = adcpDischargeActivity0.FirmwareVersion;
        java.lang.String str7 = adcpDischargeActivity0.getModel();
        java.lang.String str8 = adcpDischargeActivity0.getManufacturer();
        java.lang.String str9 = adcpDischargeActivity0.getSoftwareVersion();
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test49438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49438");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str2 = postBasicTimeSeries1.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase5 = putParameter3.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str6 = putParameter3.getRoundingSpec();
        java.lang.String str7 = putParameter3.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList9 = postCalculatedDerivedTimeSeries8.TimeSeriesUniqueIds;
        java.lang.String str10 = postCalculatedDerivedTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries12 = postCalculatedDerivedTimeSeries8.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str13 = postCalculatedDerivedTimeSeries12.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart16 = inputPart14.setHeaders((java.lang.Object) interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries12.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase18 = putParameter3.setInterpolationType(interpolationType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase20 = parameterBase18.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase18.InterpolationType = interpolationType21;
        postBasicTimeSeries1.InterpolationType = interpolationType21;
        parameter0.InterpolationType = interpolationType21;
        parameter0.Identifier = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str27 = parameter0.UnitIdentifier;
        java.lang.String str28 = parameter0.getIdentifier();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(parameterBase5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str13, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart16);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(parameterBase18);
        org.junit.Assert.assertNotNull(parameterBase20);
        org.junit.Assert.assertTrue("'" + interpolationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str28, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
    }

    @Test
    public void test49439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49439");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest2 = fieldVisitDataByLocationServiceRequest0.setApplyRounding((java.lang.Boolean) false);
        fieldVisitDataByLocationServiceRequest2.ConvertToStandardReferenceDatum = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest2);
    }

    @Test
    public void test49440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49440");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolderUserRole putLocationFolderUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolderUserRole();
        putLocationFolderUserRole0.LocationFolderUniqueId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.Object obj3 = putLocationFolderUserRole0.getResponseType();
        putLocationFolderUserRole0.LocationFolderUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolderUserRole putLocationFolderUserRole7 = putLocationFolderUserRole0.setLocationFolderUniqueId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str8 = putLocationFolderUserRole0.getUserUniqueId();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolderUserRole");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolderUserRole");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolderUserRole");
        org.junit.Assert.assertNotNull(putLocationFolderUserRole7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test49441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49441");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.String str1 = importChangeItem0.PropertyName;
        java.lang.String str2 = importChangeItem0.getPropertyName();
        java.lang.Object obj3 = importChangeItem0.Right;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str5 = locationMonitoringMethod4.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList6 = null;
        locationMonitoringMethod4.Tags = tagMetadataList6;
        java.lang.String str8 = locationMonitoringMethod4.getParameterId();
        java.lang.String str9 = locationMonitoringMethod4.Parameter;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem10 = importChangeItem0.setRight((java.lang.Object) locationMonitoringMethod4);
        locationMonitoringMethod4.LocationIdentifier = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        locationMonitoringMethod4.ParameterUniqueId = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(importChangeItem10);
    }

    @Test
    public void test49442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49442");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity1 = fieldVisit0.InspectionActivity;
        org.junit.Assert.assertNull(inspectionActivity1);
    }

    @Test
    public void test49443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49443");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        fieldVisitDataServiceRequest0.ApplyRounding = true;
        java.lang.String str3 = fieldVisitDataServiceRequest0.getFieldVisitIdentifier();
        java.lang.String str4 = fieldVisitDataServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean5 = fieldVisitDataServiceRequest0.isApplyRounding();
        java.lang.Boolean boolean6 = fieldVisitDataServiceRequest0.IncludeVerticals;
        java.lang.String str7 = fieldVisitDataServiceRequest0.getFieldVisitIdentifier();
        java.lang.Boolean boolean8 = fieldVisitDataServiceRequest0.IncludeCrossSectionSurveyProfile;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + true + "'", boolean5, true);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test49444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49444");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList1 = specimenWithObservations0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations3 = specimenWithObservations0.setStatus(specimenViewStatusType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory5.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory9 = laboratory5.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport10 = labReport4.setLaboratory(laboratory9);
        java.lang.String str11 = labReport10.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport13 = labReport10.setCustomId("http");
        java.time.OffsetDateTime offsetDateTime14 = null;
        labReport13.DateReceived = offsetDateTime14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport17 = labReport13.setCustomId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory18.Id = "MaxInstant";
        java.lang.String str21 = laboratory18.PhoneNumber;
        java.lang.String str22 = laboratory18.getPointOfContact();
        java.lang.String str23 = laboratory18.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport24 = labReport17.setLaboratory(laboratory18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations25 = specimenWithObservations3.setLaboratory(laboratory18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations28 = specimenWithObservations26.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID;
        specimenWithObservations26.Preservative = preservativeType29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.lang.String str32 = specimenTemplate31.CustomId;
        specimenWithObservations26.TemplateCreatedFrom = specimenTemplate31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = specimenTemplate31.setName("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = specimenTemplate31.setCustomId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations38 = specimenWithObservations3.setTemplateCreatedFrom(specimenTemplate31);
        java.lang.Integer int39 = specimenWithObservations38.NumberOfReceivedObservations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = specimenWithObservations38.getAuditAttributes();
        org.junit.Assert.assertNull(extendedAttributeList1);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations3);
        org.junit.Assert.assertNotNull(laboratory9);
        org.junit.Assert.assertNotNull(labReport10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(labReport13);
        org.junit.Assert.assertNotNull(labReport17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(labReport24);
        org.junit.Assert.assertNotNull(specimenWithObservations25);
        org.junit.Assert.assertNotNull(specimenWithObservations28);
        org.junit.Assert.assertTrue("'" + preservativeType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID + "'", preservativeType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(specimenTemplate35);
        org.junit.Assert.assertNotNull(specimenTemplate37);
        org.junit.Assert.assertNotNull(specimenWithObservations38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(auditAttributes40);
    }

    @Test
    public void test49445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49445");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject4 = postProject2.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier7 = putNullMeasureQualifier5.setDescription("");
        putNullMeasureQualifier5.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str11 = standardDefinition10.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime13 = putSchedule12.StartDate;
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule15 = putSchedule12.setEndDate(offsetDateTime14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = putSchedule15.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime17 = null;
        putSchedule15.LastGenerationDate = offsetDateTime17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType19 = putSchedule15.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = plannedFieldResult20.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = labResultDetails22.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult27 = plannedFieldResult20.setAuditAttributes(auditAttributes25);
        putSchedule15.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition29 = standardDefinition10.setAuditAttributes(auditAttributes25);
        java.time.OffsetDateTime offsetDateTime30 = auditAttributes25.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier31 = putNullMeasureQualifier5.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject32 = postProject4.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject34 = postProject4.setApprovalAgency("multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNotNull(postProject4);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(putSchedule15);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType19);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(labResultDetails24);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(plannedFieldResult27);
        org.junit.Assert.assertNotNull(standardDefinition29);
        org.junit.Assert.assertNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier31);
        org.junit.Assert.assertNotNull(postProject32);
        org.junit.Assert.assertNotNull(postProject34);
    }

    @Test
    public void test49446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49446");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime4 = activity3.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity6 = activity3.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str9 = metricConfiguration8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty10.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration13 = metricConfiguration8.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType14 = observedProperty10.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = postObservedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = null;
        quantity17.Unit = unit18;
        postObservedProperty15.LowerLimit = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = postObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = quantity21.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = observedProperty10.setUpperLimit(quantity21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation7.setElevation(quantity21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = samplingLocation24.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList28, plannedActivityArray27);
        putFieldVisit26.PlannedActivities = plannedActivityList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        java.lang.String str33 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment31.setAttachment(attachment34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        java.lang.String str38 = domainObjectAttachment36.getId();
        domainObjectAttachment36.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment36.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment43.setAttachment(attachment46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment31, domainObjectAttachment36, domainObjectAttachment43, domainObjectAttachment48, domainObjectAttachment50, domainObjectAttachment55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList58, domainObjectAttachmentArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = putFieldVisit26.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList58);
        samplingLocation24.Attachments = domainObjectAttachmentList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = samplingLocation24.setAddress(address62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation65 = samplingLocation63.setHorizontalCollectionMethod("https");
        activity6.SamplingLocation = samplingLocation63;
        java.time.OffsetDateTime offsetDateTime67 = null;
        activity6.EndTime = offsetDateTime67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen69 = putSpecimen0.setActivity(activity6);
        putSpecimen69.Id = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList72 = putSpecimen69.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate75 = specimenTemplate73.setCustomId("hi!");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList76 = specimenTemplate75.LabInstructionTemplates;
        putSpecimen69.TemplateCreatedFrom = specimenTemplate75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate78.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate82 = specimenTemplate78.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = specimenTemplate82.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate85 = specimenTemplate82.setFiltered((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup86 = null;
        specimenTemplate85.AnalyticalGroup = analyticalGroup86;
        java.lang.String str88 = specimenTemplate85.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate89.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate[] labInstructionTemplateArray92 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList93 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate>) labInstructionTemplateList93, labInstructionTemplateArray92);
        specimenTemplate89.LabInstructionTemplates = labInstructionTemplateList93;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate96 = specimenTemplate85.setLabInstructionTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate>) labInstructionTemplateList93);
        specimenTemplate75.LabInstructionTemplates = labInstructionTemplateList93;
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(activity6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(metricConfiguration13);
        org.junit.Assert.assertNull(resultType14);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNotNull(quantity21);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNotNull(observedProperty23);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNotNull(plannedActivityArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putFieldVisit60);
        org.junit.Assert.assertNotNull(samplingLocation63);
        org.junit.Assert.assertNotNull(samplingLocation65);
        org.junit.Assert.assertNotNull(putSpecimen69);
        org.junit.Assert.assertNull(extendedAttributeList72);
        org.junit.Assert.assertNotNull(specimenTemplate75);
        org.junit.Assert.assertNull(labInstructionTemplateList76);
        org.junit.Assert.assertNotNull(specimenTemplate82);
        org.junit.Assert.assertNull(auditAttributes83);
        org.junit.Assert.assertNotNull(specimenTemplate85);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(labInstructionTemplateArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(specimenTemplate96);
    }

    @Test
    public void test49447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49447");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProjectHistory getProjectHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProjectHistory();
        getProjectHistory0.Id = "9999-12-31T23:59:59.999Z";
        getProjectHistory0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.Object obj5 = getProjectHistory0.getResponseType();
        getProjectHistory0.Id = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        getProjectHistory0.Id = "2021.8.9990";
        java.lang.Object obj10 = getProjectHistory0.getResponseType();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test49448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49448");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        postTag0.PickListValues = strList5;
        java.util.ArrayList<java.lang.String> strList9 = postTag0.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        postTag10.PickListValues = strList15;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList19 = postTag10.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList22, tagApplicabilityArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase24 = postTag10.setApplicability(tagApplicabilityList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase25 = postTag0.setApplicability(tagApplicabilityList22);
        postTag0.Key = "/AQUARIUS";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList28 = postTag0.Applicability;
        java.lang.String str29 = postTag0.getKey();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNull(tagApplicabilityList19);
        org.junit.Assert.assertTrue("'" + tagApplicability20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments + "'", tagApplicability20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments));
        org.junit.Assert.assertNotNull(tagApplicabilityArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(tagRequestBase24);
        org.junit.Assert.assertNotNull(tagRequestBase25);
        org.junit.Assert.assertNotNull(tagApplicabilityList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/AQUARIUS" + "'", str29, "/AQUARIUS");
    }

    @Test
    public void test49449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49449");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList3, plannedActivityArray2);
        putFieldVisit1.PlannedActivities = plannedActivityList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str7 = domainObjectAttachment6.getId();
        java.lang.String str8 = domainObjectAttachment6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = domainObjectAttachment6.setAttachment(attachment9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str12 = domainObjectAttachment11.getId();
        java.lang.String str13 = domainObjectAttachment11.getId();
        domainObjectAttachment11.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = domainObjectAttachment11.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str19 = domainObjectAttachment18.getId();
        java.lang.String str20 = domainObjectAttachment18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = domainObjectAttachment18.setAttachment(attachment21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        java.lang.String str27 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = domainObjectAttachment25.setAttachment(attachment28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str31 = domainObjectAttachment30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment6, domainObjectAttachment11, domainObjectAttachment18, domainObjectAttachment23, domainObjectAttachment25, domainObjectAttachment30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33, domainObjectAttachmentArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit35 = putFieldVisit1.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33);
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit1.setEndTime(offsetDateTime36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule40 = schedule38.setCustomId("");
        java.time.OffsetDateTime offsetDateTime41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule42 = schedule38.setStartDate(offsetDateTime41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule44 = schedule42.setRecurrenceType(recurrenceType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit45 = putFieldVisit37.setSchedule(schedule42);
        java.time.OffsetDateTime offsetDateTime46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule47 = schedule42.setStartDate(offsetDateTime46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit48 = postFieldVisit0.setSchedule(schedule42);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList49 = postFieldVisit0.Attachments;
        java.time.OffsetDateTime offsetDateTime50 = postFieldVisit0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple52 = fieldVisitSimple51.getSamplingLocation();
        fieldVisitSimple51.Id = "/AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime55 = fieldVisitSimple51.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str57 = samplingLocationSimple56.getId();
        fieldVisitSimple51.SamplingLocation = samplingLocationSimple56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        java.lang.String str60 = fieldTripSimple59.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple61 = fieldVisitSimple51.setFieldTrip(fieldTripSimple59);
        postFieldVisit0.FieldTrip = fieldTripSimple59;
        org.junit.Assert.assertNotNull(plannedActivityArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(domainObjectAttachment10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(domainObjectAttachment17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(domainObjectAttachment22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(domainObjectAttachment29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putFieldVisit35);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNotNull(schedule40);
        org.junit.Assert.assertNotNull(schedule42);
        org.junit.Assert.assertTrue("'" + recurrenceType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule44);
        org.junit.Assert.assertNotNull(putFieldVisit45);
        org.junit.Assert.assertNotNull(schedule47);
        org.junit.Assert.assertNotNull(postFieldVisit48);
        org.junit.Assert.assertNull(domainObjectAttachmentList49);
        org.junit.Assert.assertNull(offsetDateTime50);
        org.junit.Assert.assertNull(samplingLocationSimple52);
        org.junit.Assert.assertNull(offsetDateTime55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(fieldVisitSimple61);
    }

    @Test
    public void test49450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49450");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus2 = observationNestedInSpecimen0.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen4 = observationNestedInSpecimen0.setLabInstruction(labInstruction3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen6 = observationNestedInSpecimen0.setId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus7.Id = "0001-01-01T00:00:00.000Z";
        resultStatus7.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen12 = observationNestedInSpecimen0.setResultStatus(resultStatus7);
        java.lang.String str13 = resultStatus7.getId();
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(resultStatus2);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen4);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen6);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MaxInstant" + "'", str13, "MaxInstant");
    }

    @Test
    public void test49451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49451");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = correctionOperation0.setType(correctionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation0.OperationType = metadataChangeOperationType3;
        java.time.Instant instant5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation6 = correctionOperation0.setDateAppliedUtc(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType8 = methodOperation7.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation10 = methodOperation7.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation11 = correctionOperation6.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = correctionOperation12.setType(correctionType13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation12.OperationType = metadataChangeOperationType15;
        java.time.Instant instant17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation18 = correctionOperation12.setDateAppliedUtc(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType20 = methodOperation19.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation22 = methodOperation19.setOperationType(metadataChangeOperationType21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation23 = correctionOperation18.setOperationType(metadataChangeOperationType21);
        correctionOperation6.OperationType = metadataChangeOperationType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType26 = trendLineAnalysisServiceRequest25.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = locationRemark27.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        locationRemark29.FromTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = locationRemark29.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod38 = timeSeriesThresholdPeriod36.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription41 = locationDescription39.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType43 = null;
        controlConditionActivity42.ControlCleaned = controlCleanedType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        controlConditionActivity42.DateCleaned = instant46;
        locationDescription41.LastModified = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod50 = timeSeriesThresholdPeriod38.setAppliedTime(instant46);
        locationRemark35.ToTime = instant46;
        trendLineAnalysisServiceRequest25.QueryFrom = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation53 = correctionOperation6.setDateAppliedUtc(instant46);
        java.lang.Integer int54 = correctionOperation6.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary58.Reviewer = "";
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary58.MeasurementTime = instant61;
        postRecurringReport57.NextGenerationDate = instant61;
        java.time.Instant instant64 = postRecurringReport57.getNextGenerationDate();
        java.lang.String str65 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant64);
        metadataChangeTransactionListServiceRequest56.QueryFrom = instant64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest67 = downchainProcessorListByRatingModelServiceRequest55.setQueryTo(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest69 = downchainProcessorListByRatingModelServiceRequest55.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant71 = qualifier70.DateApplied;
        java.lang.String str72 = qualifier70.User;
        java.lang.String str73 = qualifier70.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary75.Reviewer = "";
        java.time.Instant instant78 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary75.MeasurementTime = instant78;
        postRecurringReport74.NextGenerationDate = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier81 = qualifier70.setDateApplied(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest82 = downchainProcessorListByRatingModelServiceRequest55.setQueryTo(instant78);
        java.lang.String str83 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation84 = correctionOperation6.setDateAppliedUtc(instant78);
        java.lang.String str85 = correctionOperation84.getUser();
        java.lang.Integer int86 = correctionOperation84.StackPosition;
        correctionOperation84.Comments = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.util.HashMap<java.lang.String, java.lang.Object> strMap89 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation90 = correctionOperation84.setParameters(strMap89);
        correctionOperation90.StackPosition = 0;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType93 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation94 = correctionOperation90.setType(correctionType93);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType95 = correctionOperation94.OperationType;
        org.junit.Assert.assertTrue("'" + correctionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation2);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation6);
        org.junit.Assert.assertNull(metadataChangeOperationType8);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation10);
        org.junit.Assert.assertNotNull(correctionOperation11);
        org.junit.Assert.assertTrue("'" + correctionType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation14);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation18);
        org.junit.Assert.assertNull(metadataChangeOperationType20);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation22);
        org.junit.Assert.assertNotNull(correctionOperation23);
        org.junit.Assert.assertNull(trendLineAnalysisType26);
        org.junit.Assert.assertNotNull(locationRemark29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(locationRemark35);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod38);
        org.junit.Assert.assertNotNull(locationDescription41);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod50);
        org.junit.Assert.assertNotNull(correctionOperation53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str65, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest67);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest69);
        org.junit.Assert.assertNull(instant71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(qualifier81);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str83, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(correctionOperation84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(int86);
        org.junit.Assert.assertNotNull(correctionOperation90);
        org.junit.Assert.assertTrue("'" + correctionType93 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample + "'", correctionType93.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample));
        org.junit.Assert.assertNotNull(correctionOperation94);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType95 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType95.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
    }

    @Test
    public void test49452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49452");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList3 = extendedAttributeDefinition2.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = extendedAttributeDefinition2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition2.DataType = dataType5;
        putExtendedAttribute0.DataType = dataType5;
        java.lang.Object obj8 = putExtendedAttribute0.getResponseType();
        putExtendedAttribute0.Description = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.ACTIVITY;
        getExtendedAttributes11.AppliesToType = appliesToType12;
        getExtendedAttributes11.CustomId = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        java.util.List<java.lang.String> strList27 = getObservationsV2_22.getAnalysisMethodSimpleIds();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_22.setSamplingContextTagIds((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        getObservationsV2_35.QualityControlTypes = strList46;
        getObservationsV2_22.SamplingContextTagIds = strList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes51 = getExtendedAttributes11.setIds((java.util.List<java.lang.String>) strList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes53 = getExtendedAttributes11.setAppliesToType(appliesToType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute54 = putExtendedAttribute0.setAppliesToType(appliesToType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = putExtendedAttribute54.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList57 = extendedAttributeDefinition56.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = extendedAttributeDefinition56.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType59 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition56.DataType = dataType59;
        putExtendedAttribute54.DataType = dataType59;
        java.lang.Object obj62 = putExtendedAttribute54.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeListItemList3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertTrue("'" + dataType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertTrue("'" + appliesToType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.ACTIVITY + "'", appliesToType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.ACTIVITY));
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNotNull(getExtendedAttributes51);
        org.junit.Assert.assertTrue("'" + appliesToType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION + "'", appliesToType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION));
        org.junit.Assert.assertNotNull(getExtendedAttributes53);
        org.junit.Assert.assertNotNull(putExtendedAttribute54);
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNull(extendedAttributeListItemList57);
        org.junit.Assert.assertNull(auditAttributes58);
        org.junit.Assert.assertTrue("'" + dataType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType59.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
    }

    @Test
    public void test49453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49453");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int4 = postUnitGroup0.IntensityDimension;
        java.lang.Integer int5 = postUnitGroup0.IntensityDimension;
        postUnitGroup0.DisplayName = "";
        java.lang.Integer int8 = postUnitGroup0.getIntensityDimension();
        java.lang.String str9 = postUnitGroup0.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase11 = postUnitGroup0.setLengthDimension((java.lang.Integer) 0);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(unitGroupBase11);
    }

    @Test
    public void test49454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49454");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity();
        getActivity0.Id = "https";
        java.lang.String str3 = getActivity0.Id;
        java.lang.Boolean boolean4 = getActivity0.Detail;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity6 = getActivity0.setDetail((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity8 = getActivity6.setDetail((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity10 = getActivity8.setId("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "https" + "'", str3, "https");
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(getActivity6);
        org.junit.Assert.assertNotNull(getActivity8);
        org.junit.Assert.assertNotNull(getActivity10);
    }

    @Test
    public void test49455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49455");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        java.util.List<java.lang.String> strList2 = putBulkEditResultGradesV2_0.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_8 = putBulkEditResultGradesV2_0.setStartModificationTime(instant6);
        java.util.List<java.lang.String> strList9 = putBulkEditResultGradesV2_0.getAnalysisMethodSimpleIds();
        java.lang.Double double10 = putBulkEditResultGradesV2_0.DepthValue;
        java.util.List<java.lang.String> strList11 = putBulkEditResultGradesV2_0.SamplingContextTagIds;
        java.lang.Integer int12 = putBulkEditResultGradesV2_0.getLimit();
        putBulkEditResultGradesV2_0.DepthValue = 10.0d;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test49456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49456");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries4 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries0.setSourceIsLocalAssumedDatum((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries8 = postDatumConvertedTimeSeries0.setSubLocationIdentifier("hi!:///AQUARIUS/Provisioning/v1");
        postDatumConvertedTimeSeries0.TargetStandardReferenceDatumIdentifier = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str11 = postDatumConvertedTimeSeries0.getComputationPeriodIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase14 = putParameter12.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str15 = putParameter12.getRoundingSpec();
        java.lang.String str16 = putParameter12.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList18 = postCalculatedDerivedTimeSeries17.TimeSeriesUniqueIds;
        java.lang.String str19 = postCalculatedDerivedTimeSeries17.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries21 = postCalculatedDerivedTimeSeries17.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str22 = postCalculatedDerivedTimeSeries21.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart25 = inputPart23.setHeaders((java.lang.Object) interpolationType24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries26 = postCalculatedDerivedTimeSeries21.setInterpolationType(interpolationType24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase27 = putParameter12.setInterpolationType(interpolationType24);
        int int28 = interpolationType24.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries29 = postDatumConvertedTimeSeries0.setInterpolationType(interpolationType24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries31 = postDatumConvertedTimeSeries29.setComputationIdentifier("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        postDatumConvertedTimeSeries29.Method = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries4);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str11, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(parameterBase14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str22, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart25);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries26);
        org.junit.Assert.assertNotNull(parameterBase27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries29);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries31);
    }

    @Test
    public void test49457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49457");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        timeAlignedPoint0.NumericValue6 = (-1.0d);
        java.lang.String str9 = timeAlignedPoint0.getApprovalName5();
        timeAlignedPoint0.NumericValue8 = 10.0d;
        java.lang.Long long12 = timeAlignedPoint0.ApprovalLevel9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint0.setGradeCode3((java.lang.Long) (-1L));
        java.lang.String str15 = timeAlignedPoint14.DisplayValue5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint14.setGradeName2("multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
    }

    @Test
    public void test49458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49458");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary0.UpdateCount = (-1);
        java.lang.Integer int3 = observationImportSummary0.ExpectedCount;
        java.lang.String str4 = observationImportSummary0.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList6, importErrorArray5);
        observationImportSummary0.ImportJobErrors = importErrorList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary9.UpdateCount = (-1);
        java.lang.Integer int12 = observationImportSummary9.ExpectedCount;
        java.lang.String str13 = observationImportSummary9.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList15, importItemObservationArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary17 = observationImportSummary9.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary18 = observationImportSummary0.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList15);
        java.lang.Integer int19 = observationImportSummary0.ErrorCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList20 = observationImportSummary0.getNonErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple21 = observationImportSummary0.getImportHistoryEventSimple();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(importErrorArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(importItemObservationArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(observationImportSummary17);
        org.junit.Assert.assertNotNull(observationImportSummary18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(importItemObservationList20);
        org.junit.Assert.assertNull(importHistoryEventSimple21);
    }

    @Test
    public void test49459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49459");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        java.lang.String str3 = monitoringMethod2.getParameterUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod5 = monitoringMethod2.setParameterId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod7 = monitoringMethod5.setMethodCode("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str8 = monitoringMethod7.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod10 = monitoringMethod7.setDisplayName("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS" + "'", str3, "/AQUARIUS");
        org.junit.Assert.assertNotNull(monitoringMethod5);
        org.junit.Assert.assertNotNull(monitoringMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(monitoringMethod10);
    }

    @Test
    public void test49460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49460");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str1 = levelSurveyMeasurement0.ReferencePointUniqueId;
        levelSurveyMeasurement0.ReferencePointUniqueId = "0001-01-01T00:00:00.000Z";
        levelSurveyMeasurement0.ReferencePointUniqueId = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement7 = levelSurveyMeasurement0.setReferencePointUniqueId("/api");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(levelSurveyMeasurement7);
    }

    @Test
    public void test49461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49461");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_3 = postObservationV2_1.setLabInstruction(labInstruction2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime5 = activity4.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity7 = activity4.setLoggerFileName("'.'SSSSSSS");
        postObservationV2_1.Activity = activity4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = null;
        putActivity9.Depth = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = putActivity12.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity15 = putActivity12.setEndTime(offsetDateTime14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation16 = null;
        putActivity15.SamplingLocation = samplingLocation16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = postObservedProperty18.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        postObservedProperty18.LowerLimit = quantity20;
        putActivity15.Depth = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity25 = putActivity9.setDepth(quantity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity26 = activity4.setDepth(quantity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_27 = postObservationV2_0.setActivity(activity26);
        java.lang.String str28 = postObservationV2_27.getCustomId();
        java.lang.String str29 = postObservationV2_27.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        java.lang.String str31 = observationNestedInSpecimen30.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_34 = postObservationV2_32.setLabInstruction(labInstruction33);
        java.lang.String str35 = postObservationV2_34.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod38 = postLabAnalysisMethod36.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList40, observedPropertyArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod42 = postLabAnalysisMethod38.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType44 = analyticalGroup43.getType();
        analyticalGroup43.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = null;
        analyticalGroupItem53.AnalysisMethod = analysisMethod56;
        java.lang.String str58 = analyticalGroupItem53.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod65 = analyticalGroupItem64.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem64.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod67 = null;
        analyticalGroupItem64.AnalysisMethod = analysisMethod67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem48, analyticalGroupItem50, analyticalGroupItem53, analyticalGroupItem59, analyticalGroupItem62, analyticalGroupItem64 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList70 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList70, analyticalGroupItemArray69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup72 = analyticalGroup47.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList70);
        analyticalGroup43.AnalyticalGroupItems = analyticalGroupItemList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup43.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod76 = postLabAnalysisMethod42.setAuditAttributes(auditAttributes74);
        java.time.OffsetDateTime offsetDateTime77 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = auditAttributes74.setModificationTime(offsetDateTime77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_79 = postObservationV2_34.setAuditAttributes(auditAttributes78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_81 = postObservationV2_34.setLabInstruction(labInstruction80);
        java.lang.String str82 = labInstruction80.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction84 = labInstruction80.setAnalysisMethod(analysisMethod83);
        observationNestedInSpecimen30.LabInstruction = labInstruction84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod86 = labInstruction84.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_87 = postObservationV2_27.setLabInstruction(labInstruction84);
        java.time.OffsetDateTime offsetDateTime88 = postObservationV2_27.getResultTime();
        org.junit.Assert.assertNotNull(postObservationV2_3);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(activity7);
        org.junit.Assert.assertNull(plannedActivity13);
        org.junit.Assert.assertNotNull(putActivity15);
        org.junit.Assert.assertNull(unitGroup19);
        org.junit.Assert.assertNotNull(putActivity25);
        org.junit.Assert.assertNotNull(activity26);
        org.junit.Assert.assertNotNull(postObservationV2_27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(postObservationV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod38);
        org.junit.Assert.assertNotNull(observedPropertyArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod42);
        org.junit.Assert.assertNull(analyticalGroupType44);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(analysisMethod63);
        org.junit.Assert.assertNull(analysisMethod65);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(analyticalGroup72);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod76);
        org.junit.Assert.assertNotNull(auditAttributes78);
        org.junit.Assert.assertNotNull(postObservationV2_79);
        org.junit.Assert.assertNotNull(postObservationV2_81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(labInstruction84);
        org.junit.Assert.assertNotNull(analysisMethod86);
        org.junit.Assert.assertNotNull(postObservationV2_87);
        org.junit.Assert.assertNull(offsetDateTime88);
    }

    @Test
    public void test49462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49462");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.Boolean boolean2 = role0.CanAddAppendConfigurations;
        java.lang.String str3 = role0.getUniqueId();
        role0.CanRemoveFieldVisits = false;
        java.lang.Boolean boolean6 = role0.CanEditLocationDetails;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test49463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49463");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary7.DifferenceDuringVisit = doubleWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay8.setNumeric((java.lang.Double) 100.0d);
        reading0.Value = doubleWithDisplay11;
        java.lang.Boolean boolean13 = reading0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading0.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType16 = reading15.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading18 = reading15.setParameterId("'.'SSSSSSS");
        java.lang.String str19 = reading18.getReadingQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType22 = calibrationCheck21.getCalibrationCheckType();
        java.time.Instant instant23 = calibrationCheck21.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck25 = calibrationCheck21.setModel("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = calibrationCheck21.setModel("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary28.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary30.DifferenceDuringVisit = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = doubleWithDisplay31.setNumeric((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck35 = calibrationCheck27.setStandard(doubleWithDisplay31);
        groundWaterMeasurement20.WaterLevel = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = groundWaterMeasurement20.Cut;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = groundWaterMeasurement20.getHold();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        adcpDischargeActivity39.TransducerDepth = quantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = null;
        adcpDischargeActivity39.TransducerDepth = quantityWithDisplay42;
        java.lang.Boolean boolean44 = adcpDischargeActivity39.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = adcpDischargeActivity39.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType48 = dischargeChannelMeasurement47.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = dischargeChannelMeasurement47.Discharge;
        java.time.Instant instant50 = dischargeChannelMeasurement47.EndTime;
        dischargeChannelMeasurement47.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity53 = engineeredStructureDischargeActivity46.setDischargeChannelMeasurement(dischargeChannelMeasurement47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement55 = dischargeChannelMeasurement47.setParty("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity56 = adcpDischargeActivity39.setDischargeChannelMeasurement(dischargeChannelMeasurement47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading59 = fieldVisitReading57.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading59.Manufacturer = "https";
        java.lang.String str62 = fieldVisitReading59.getControlCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck65 = calibrationCheck63.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = doubleWithDisplay66.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str69 = doubleWithDisplay68.getDisplay();
        calibrationCheck65.Difference = doubleWithDisplay68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity73 = pointVelocityDischargeActivity71.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity71.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity77 = pointVelocityDischargeActivity71.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList78 = pointVelocityDischargeActivity77.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity77.DistanceToMeter = datumConvertedQuantityWithDisplay79;
        calibrationCheck65.Standard = datumConvertedQuantityWithDisplay79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading82 = fieldVisitReading59.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay83 = fieldVisitReading82.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity84 = adcpDischargeActivity56.setMagneticVariation((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay83);
        groundWaterMeasurement20.Hold = quantityWithDisplay83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading86 = reading18.setGroundWaterMeasurement(groundWaterMeasurement20);
        reading18.ParameterId = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNull(readingType16);
        org.junit.Assert.assertNotNull(reading18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(calibrationCheckType22);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNotNull(calibrationCheck25);
        org.junit.Assert.assertNotNull(calibrationCheck27);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNotNull(doubleWithDisplay34);
        org.junit.Assert.assertNotNull(calibrationCheck35);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNull(doubleWithDisplay38);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(quantityWithDisplay45);
        org.junit.Assert.assertNull(channelMaterialType48);
        org.junit.Assert.assertNull(quantityWithDisplay49);
        org.junit.Assert.assertNull(instant50);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity53);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement55);
        org.junit.Assert.assertNotNull(adcpDischargeActivity56);
        org.junit.Assert.assertNotNull(fieldVisitReading59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(calibrationCheck65);
        org.junit.Assert.assertNotNull(doubleWithDisplay68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity73);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity77);
        org.junit.Assert.assertNull(verticalList78);
        org.junit.Assert.assertNotNull(fieldVisitReading82);
        org.junit.Assert.assertNotNull(quantityWithDisplay83);
        org.junit.Assert.assertNotNull(adcpDischargeActivity84);
        org.junit.Assert.assertNotNull(reading86);
    }

    @Test
    public void test49464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49464");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant3 = qualifier2.DateApplied;
        java.lang.String str4 = qualifier2.User;
        java.lang.String str5 = qualifier2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj7 = timeAlignedDataServiceRequest6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = timeAlignedDataServiceRequest6.setQueryFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier12 = qualifier2.setDateApplied(instant9);
        getExportSpecimens0.Before = instant9;
        java.util.List<java.lang.String> strList14 = getExportSpecimens0.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        getObservationsV2_16.SpecimenIds = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        getObservationsV2_16.QualityControlTypes = strList27;
        java.util.List<java.lang.String> strList31 = getObservationsV2_16.getLabReportIds();
        importItem15.Errors = getObservationsV2_16;
        java.lang.Object obj33 = importItem15.getExistingItem();
        java.util.List<java.lang.String> strList34 = importItem15.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        java.util.List<java.lang.String> strList51 = getObservationsV2_36.getLabReportIds();
        importItem35.Errors = getObservationsV2_36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList54 = getObservationsV2_53.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray65 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = putLocationTags61.setTagUniqueIds(strList66);
        getObservationsV2_55.QualityControlTypes = strList66;
        getObservationsV2_53.ResultGrades = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem71 = importItem35.setFields((java.util.List<java.lang.String>) strList66);
        importItem15.Fields = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens73 = getExportSpecimens0.setSamplingLocationIds((java.util.List<java.lang.String>) strList66);
        java.util.List<java.lang.String> strList74 = getExportSpecimens73.getActivityIds();
        getExportSpecimens73.Cursor = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest11);
        org.junit.Assert.assertNotNull(qualifier12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putLocationTags68);
        org.junit.Assert.assertNotNull(importItem71);
        org.junit.Assert.assertNotNull(getExportSpecimens73);
        org.junit.Assert.assertNull(strList74);
    }

    @Test
    public void test49465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49465");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue2 = extendedAttributeValue0.setValue("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue extendedAttributeValue4 = extendedAttributeValue0.setColumnIdentifier("MaxInstant");
        java.lang.String str5 = extendedAttributeValue0.ColumnIdentifier;
        org.junit.Assert.assertNotNull(extendedAttributeValue2);
        org.junit.Assert.assertNotNull(extendedAttributeValue4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
    }

    @Test
    public void test49466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49466");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setSegmentVelocity(quantityWithDisplay1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType pointVelocityObservationType3 = vertical0.VelocityObservationMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = vertical0.setFlowDirection(flowDirectionType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = vertical5.setComments("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = vertical5.SegmentVelocity;
        vertical5.VerticalNumber = 10.0d;
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(pointVelocityObservationType3);
        org.junit.Assert.assertTrue("'" + flowDirectionType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal + "'", flowDirectionType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal));
        org.junit.Assert.assertNotNull(vertical5);
        org.junit.Assert.assertNotNull(vertical7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
    }

    @Test
    public void test49467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49467");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = reading3.getUncertainty();
        java.lang.String str7 = reading3.getParameterId();
        reading3.ParameterId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.time.Instant instant10 = reading3.getTime();
        java.lang.String str11 = reading3.getSerialNumber();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test49468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49468");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        java.lang.String str3 = parameterMetadata0.getUnitGroupIdentifier();
        parameterMetadata0.RoundingSpec = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        parameterMetadata0.InterpolationType = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test49469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49469");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType7 = observedProperty3.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = postObservedProperty8.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        quantity10.Unit = unit11;
        postObservedProperty8.LowerLimit = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservedProperty8.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = quantity14.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty3.setUpperLimit(quantity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = samplingLocation0.setElevation(quantity14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = samplingLocation17.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList21, plannedActivityArray20);
        putFieldVisit19.PlannedActivities = plannedActivityList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        java.lang.String str31 = domainObjectAttachment29.getId();
        domainObjectAttachment29.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment29.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        java.lang.String str38 = domainObjectAttachment36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = domainObjectAttachment36.setAttachment(attachment39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment43.setAttachment(attachment46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment24, domainObjectAttachment29, domainObjectAttachment36, domainObjectAttachment41, domainObjectAttachment43, domainObjectAttachment48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51, domainObjectAttachmentArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit53 = putFieldVisit19.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51);
        samplingLocation17.Attachments = domainObjectAttachmentList51;
        java.lang.String str55 = samplingLocation17.getCustomId();
        java.lang.String str56 = samplingLocation17.getVerticalCollectionMethod();
        java.lang.String str57 = samplingLocation17.getHorizontalDatum();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(resultType7);
        org.junit.Assert.assertNull(unitGroup9);
        org.junit.Assert.assertNotNull(quantity14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNotNull(samplingLocation17);
        org.junit.Assert.assertNull(domainObjectAttachmentList18);
        org.junit.Assert.assertNotNull(plannedActivityArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(domainObjectAttachment40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putFieldVisit53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test49470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49470");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double2 = putBulkEditResultGradesV2_1.DepthValue;
        java.util.List<java.lang.String> strList3 = putBulkEditResultGradesV2_1.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_9 = putBulkEditResultGradesV2_1.setStartModificationTime(instant7);
        qualifier0.DateApplied = instant7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double12 = putBulkEditResultGradesV2_11.DepthValue;
        java.util.List<java.lang.String> strList13 = putBulkEditResultGradesV2_11.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_19 = putBulkEditResultGradesV2_11.setStartModificationTime(instant17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        java.util.List<java.lang.String> strList35 = getObservationsV2_20.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = getObservationsV2_20.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList39 = fieldVisitDataServiceResponse38.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse41 = fieldVisitDataServiceResponse38.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary42.Reviewer = "";
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary42.MeasurementTime = instant45;
        fieldVisitDataServiceResponse38.ResponseTime = instant45;
        getObservationsV2_20.StartObservedTime = instant45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_49 = putBulkEditResultGradesV2_11.setStartModificationTime(instant45);
        qualifier0.StartTime = instant45;
        java.lang.String str51 = qualifier0.getIdentifier();
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_9);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(getObservationsV2_37);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList39);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test49471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49471");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor6 = sensor0.setUniqueId("-PT87591240H");
        sensor0.Comments = "2021.4.62.0";
        java.lang.String str9 = sensor0.Comments;
        java.lang.String str10 = sensor0.getParameterId();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(sensor6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2021.4.62.0" + "'", str9, "2021.4.62.0");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test49472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49472");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase35 = locationDatumPeriod33.setComment("'.'SSSSSSS");
        java.lang.Double double36 = locationDatumPeriodBase35.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant38 = qualifier37.DateApplied;
        java.lang.String str39 = qualifier37.User;
        java.lang.String str40 = qualifier37.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj42 = timeAlignedDataServiceRequest41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = timeAlignedDataServiceRequest41.setQueryFrom(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = qualifier37.setDateApplied(instant44);
        java.time.Instant instant48 = qualifier47.getDateApplied();
        locationDatumPeriodBase35.ValidFrom = instant48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = putBulkEditResultGradesV2_32.setStartModificationTime(instant48);
        java.time.Instant instant51 = putBulkEditResultGradesV2_50.EndResultTime;
        putBulkEditResultGradesV2_50.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList54 = putBulkEditResultGradesV2_50.ResultGrades;
        java.time.Instant instant55 = putBulkEditResultGradesV2_50.EndModificationTime;
        java.util.List<java.lang.String> strList56 = putBulkEditResultGradesV2_50.getActivityIds();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase35);
        org.junit.Assert.assertNull(double36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest46);
        org.junit.Assert.assertNotNull(qualifier47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_50);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNull(strList56);
    }

    @Test
    public void test49473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49473");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        correction0.Comment = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.time.Instant instant3 = correction0.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder4 = correction0.ProcessingOrder;
        java.lang.String str5 = correction0.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType6 = correction0.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation10 = correctionOperation8.setType(correctionType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = correctionOperation8.setProcessingOrder(correctionProcessingOrder11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent;
        correctionOperation8.Type = correctionType13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction15 = correction7.setType(correctionType13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation18 = correctionOperation16.setType(correctionType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation16.OperationType = metadataChangeOperationType19;
        java.time.Instant instant21 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation22 = correctionOperation16.setDateAppliedUtc(instant21);
        java.lang.Integer int23 = correctionOperation16.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation25 = correctionOperation16.setType(correctionType24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction26 = correction7.setType(correctionType24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction27 = correction0.setType(correctionType24);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(correctionProcessingOrder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str5, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(correctionType6);
        org.junit.Assert.assertTrue("'" + correctionType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation10);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing + "'", correctionProcessingOrder11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing));
        org.junit.Assert.assertNotNull(correctionOperation12);
        org.junit.Assert.assertTrue("'" + correctionType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent + "'", correctionType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent));
        org.junit.Assert.assertNotNull(correction15);
        org.junit.Assert.assertTrue("'" + correctionType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation18);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + correctionType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint + "'", correctionType24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint));
        org.junit.Assert.assertNotNull(correctionOperation25);
        org.junit.Assert.assertNotNull(correction26);
        org.junit.Assert.assertNotNull(correction27);
    }

    @Test
    public void test49474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49474");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Object obj3 = putProject0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType4 = putProject0.Type;
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertNull(projectType4);
    }

    @Test
    public void test49475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49475");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.Locale = "9999-12-31T23:59:59.999Z";
        java.lang.String str4 = getAuthTokenServiceRequest0.Username;
        java.lang.String str5 = getAuthTokenServiceRequest0.Locale;
        java.lang.String str6 = getAuthTokenServiceRequest0.Locale;
        java.lang.String str7 = getAuthTokenServiceRequest0.Locale;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str5, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str6, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str7, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test49476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49476");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteReportAttachment deleteReportAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteReportAttachment();
        java.lang.String str1 = deleteReportAttachment0.ReportUniqueId;
        java.lang.String str2 = deleteReportAttachment0.ReportUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteReportAttachment deleteReportAttachment4 = deleteReportAttachment0.setReportUniqueId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str5 = deleteReportAttachment4.getReportUniqueId();
        java.lang.String str6 = deleteReportAttachment4.ReportUniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(deleteReportAttachment4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str5, "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str6, "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
    }

    @Test
    public void test49477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49477");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = role2.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role5 = role2.setCanEditData((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = role2.isCanAddData();
        java.lang.Boolean boolean7 = role2.isCanEditAppendConfigurations();
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(role5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test49478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49478");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup0.Identifier = "";
        putQualifierGroup0.Identifier = "hi!";
        java.lang.String str5 = putQualifierGroup0.UniqueId;
        java.lang.String str6 = putQualifierGroup0.getIdentifier();
        java.lang.Object obj7 = putQualifierGroup0.getResponseType();
        java.lang.String str8 = putQualifierGroup0.getIdentifier();
        java.lang.String str9 = putQualifierGroup0.Identifier;
        java.lang.Object obj10 = putQualifierGroup0.getResponseType();
        java.lang.String str11 = putQualifierGroup0.Identifier;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test49479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49479");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setStartTime(offsetDateTime2);
        java.lang.String str4 = putFieldTrip0.getId();
        java.lang.String str5 = putFieldTrip0.getParticipants();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit8 = fieldVisit6.setFieldTrip(fieldTripSimple7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = fieldVisit8.getSchedule();
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit11 = fieldVisit8.setEndTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup();
        java.lang.Integer int13 = locationObservationsGroup12.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str15 = samplingLocation14.Description;
        java.lang.String str16 = samplingLocation14.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str19 = metricConfiguration18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty20.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration23 = metricConfiguration18.setObservedProperty(observedProperty20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType24 = observedProperty20.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup26 = postObservedProperty25.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit28 = null;
        quantity27.Unit = unit28;
        postObservedProperty25.LowerLimit = quantity27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = postObservedProperty25.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = quantity31.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty33 = observedProperty20.setUpperLimit(quantity31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation34 = samplingLocation17.setElevation(quantity31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList35 = samplingLocation34.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList38, extendedAttributeArray37);
        postActivity36.ExtendedAttributes = extendedAttributeList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = samplingLocation34.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation42 = samplingLocation14.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList38);
        locationObservationsGroup12.SamplingLocation = samplingLocation14;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList44 = samplingLocation14.getExtendedAttributes();
        fieldVisit8.SamplingLocation = samplingLocation14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = null;
        putActivity46.Depth = quantity47;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList49 = putActivity46.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str52 = domainObjectAttachment51.getId();
        java.lang.String str53 = domainObjectAttachment51.getId();
        domainObjectAttachment51.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = domainObjectAttachment51.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment59 = domainObjectAttachment57.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str61 = domainObjectAttachment60.getId();
        java.lang.String str62 = domainObjectAttachment60.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment57, domainObjectAttachment60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64, domainObjectAttachmentArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit66 = fieldVisit50.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64);
        putActivity46.FieldVisit = fieldVisit66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit68.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList73, plannedActivityArray72);
        putFieldVisit71.PlannedActivities = plannedActivityList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit76 = putFieldVisit68.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit77 = fieldVisit66.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList73);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList78 = fieldVisit66.getAttachments();
        samplingLocation14.Attachments = domainObjectAttachmentList78;
        putFieldTrip0.Attachments = domainObjectAttachmentList78;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(fieldVisit8);
        org.junit.Assert.assertNull(schedule9);
        org.junit.Assert.assertNotNull(fieldVisit11);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(metricConfiguration23);
        org.junit.Assert.assertNull(resultType24);
        org.junit.Assert.assertNull(unitGroup26);
        org.junit.Assert.assertNotNull(quantity31);
        org.junit.Assert.assertNull(unit32);
        org.junit.Assert.assertNotNull(observedProperty33);
        org.junit.Assert.assertNotNull(samplingLocation34);
        org.junit.Assert.assertNull(domainObjectAttachmentList35);
        org.junit.Assert.assertNotNull(extendedAttributeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(samplingLocation41);
        org.junit.Assert.assertNotNull(samplingLocation42);
        org.junit.Assert.assertNotNull(extendedAttributeList44);
        org.junit.Assert.assertNull(specimenNestedInActivityList49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(domainObjectAttachment57);
        org.junit.Assert.assertNotNull(domainObjectAttachment59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(fieldVisit66);
        org.junit.Assert.assertNotNull(plannedActivityArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(putFieldVisit76);
        org.junit.Assert.assertNotNull(fieldVisit77);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList78);
    }

    @Test
    public void test49480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49480");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setNullMeasureQualifier(nullMeasureQualifier4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = labInstruction6.setAnalysisMethod(analysisMethod7);
        putObservationV2_2.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = specimenTemplate11.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate13.Preservative = preservativeType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = labResultDetails16.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = specimenTemplate13.setAuditAttributes(auditAttributes19);
        extendedAttributeDefinition10.AuditAttributes = auditAttributes19;
        java.lang.Boolean boolean23 = extendedAttributeDefinition10.Mandatory;
        java.lang.Boolean boolean24 = extendedAttributeDefinition10.Mandatory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = extendedAttributeDefinition10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_26 = putObservationV2_2.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = null;
        putObservationV2_26.SamplingLocation = samplingLocation27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity29.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity33 = postActivity29.setPlannedActivity(plannedActivity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity35 = postActivity29.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate37.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList42 = specimenTemplate41.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = specimenTemplate43.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList48 = specimenTemplate47.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate37, specimenTemplate40, specimenTemplate41, specimenTemplate45, specimenTemplate46, specimenTemplate47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList50, specimenTemplateArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate52 = postFieldVisitActivityWithTemplate36.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity53.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity57 = postActivity53.setPlannedActivity(plannedActivity56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType58 = postActivity53.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate60.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList65 = specimenTemplate64.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate68 = specimenTemplate66.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList71 = specimenTemplate70.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate60, specimenTemplate63, specimenTemplate64, specimenTemplate68, specimenTemplate69, specimenTemplate70 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList73, specimenTemplateArray72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate75 = postFieldVisitActivityWithTemplate59.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate77 = postFieldVisitActivityWithTemplate75.setCollectionMethod(collectionMethod76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity78 = postActivity53.setCollectionMethod(collectionMethod76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate79 = postFieldVisitActivityWithTemplate36.setCollectionMethod(collectionMethod76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity80 = postActivity29.setCollectionMethod(collectionMethod76);
        java.lang.String str81 = collectionMethod76.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_82 = putObservationV2_26.setCollectionMethod(collectionMethod76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium83 = putObservationV2_26.getMedium();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNotNull(labInstruction8);
        org.junit.Assert.assertNotNull(specimenTemplate13);
        org.junit.Assert.assertTrue("'" + preservativeType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails18);
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(specimenTemplate21);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(auditAttributes25);
        org.junit.Assert.assertNotNull(putObservationV2_26);
        org.junit.Assert.assertNotNull(postActivity33);
        org.junit.Assert.assertNotNull(postActivity35);
        org.junit.Assert.assertNull(labInstructionTemplateList42);
        org.junit.Assert.assertNotNull(specimenTemplate45);
        org.junit.Assert.assertNull(labInstructionTemplateList48);
        org.junit.Assert.assertNotNull(specimenTemplateArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate52);
        org.junit.Assert.assertNotNull(postActivity57);
        org.junit.Assert.assertNull(activityType58);
        org.junit.Assert.assertNull(labInstructionTemplateList65);
        org.junit.Assert.assertNotNull(specimenTemplate68);
        org.junit.Assert.assertNull(labInstructionTemplateList71);
        org.junit.Assert.assertNotNull(specimenTemplateArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate75);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate77);
        org.junit.Assert.assertNotNull(postActivity78);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate79);
        org.junit.Assert.assertNotNull(postActivity80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(putObservationV2_82);
        org.junit.Assert.assertNull(medium83);
    }

    @Test
    public void test49481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49481");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        java.lang.Double double1 = timeSeriesThresholdPeriod0.getSecondaryReferenceValue();
        java.time.Instant instant2 = timeSeriesThresholdPeriod0.AppliedTime;
        java.lang.Boolean boolean3 = timeSeriesThresholdPeriod0.SuppressData;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities6 = deleteActivities4.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.util.List<java.lang.String> strList7 = deleteActivities6.Ids;
        java.time.Instant instant8 = deleteActivities6.FromStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType11 = null;
        controlConditionActivity10.ControlCleaned = controlCleanedType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        controlConditionActivity10.DateCleaned = instant14;
        timeAlignedDataServiceRequest9.QueryFrom = instant14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.ActivityIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = timeAlignedDataServiceRequest9.setTimeSeriesOutputUnitIds(strList29);
        java.time.Instant instant34 = timeAlignedDataServiceRequest9.getQueryFrom();
        deleteActivities6.FromStartTime = instant34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod36 = timeSeriesThresholdPeriod0.setStartTime(instant34);
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(deleteActivities6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod36);
    }

    @Test
    public void test49482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49482");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = importItemObservation16.Item;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation20 = importItemSamplingLocation18.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.QualityControlTypes = strList33;
        java.util.List<java.lang.String> strList37 = getObservationsV2_22.getLabReportIds();
        importItem21.Errors = getObservationsV2_22;
        java.lang.Object obj39 = importItem21.getExistingItem();
        importItem21.Input = "hi!";
        java.lang.Object obj42 = importItem21.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem44 = importItem21.setStatus(importItemStatusType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation45 = importItemSamplingLocation20.setStatus(importItemStatusType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation47 = importItemSamplingLocation20.setStatus(importItemStatusType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation48 = importItemObservation16.setStatus(importItemStatusType46);
        java.lang.String str49 = importItemObservation16.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList51 = getExportSpecimens50.getProjectIds();
        java.util.List<java.lang.String> strList52 = getExportSpecimens50.FieldVisitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary55.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse58.setNextToken(instant59);
        dischargeSummary55.MeasurementTime = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse54.setNextToken(instant59);
        java.time.Instant instant63 = locationDescriptionListServiceResponse54.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities64 = getActivities53.setToStartTime(instant63);
        java.lang.String str65 = getActivities64.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList67 = getObservationsV2_66.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        getObservationsV2_68.SpecimenIds = strList71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray78 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = putLocationTags74.setTagUniqueIds(strList79);
        getObservationsV2_68.QualityControlTypes = strList79;
        getObservationsV2_66.ResultGrades = strList79;
        getActivities64.Media = strList79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens85 = getExportSpecimens50.setSamplingLocationIds((java.util.List<java.lang.String>) strList79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation86 = importItemObservation16.setWarningMessages((java.util.List<java.lang.String>) strList79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation88 = importItemObservation86.setRowId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.util.List<java.lang.String> strList89 = importItemObservation86.getWarningMessages();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(observation17);
        org.junit.Assert.assertNotNull(importItemSamplingLocation20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + importItemStatusType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem44);
        org.junit.Assert.assertNotNull(importItemSamplingLocation45);
        org.junit.Assert.assertTrue("'" + importItemStatusType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation47);
        org.junit.Assert.assertNotNull(importItemObservation48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(getActivities64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(putLocationTags81);
        org.junit.Assert.assertNotNull(getExportSpecimens85);
        org.junit.Assert.assertNotNull(importItemObservation86);
        org.junit.Assert.assertNotNull(importItemObservation88);
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test49483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49483");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.time.Instant instant2 = getObservationExportIIV2_0.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str4 = postExtendedAttribute3.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType5 = postExtendedAttribute3.ValueType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList7 = getExportSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        getExportSpecimens6.Before = instant15;
        java.util.List<java.lang.String> strList20 = getExportSpecimens6.getLaboratoryIds();
        java.util.List<java.lang.String> strList21 = getExportSpecimens6.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType23 = samplingPlanPlannedActivityRecurrence22.RecurrenceFrequency;
        java.util.List<java.lang.String> strList24 = samplingPlanPlannedActivityRecurrence22.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier27 = putQualifier25.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray39 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTagUniqueIds(strList40);
        getObservationsV2_29.QualityControlTypes = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest28.setTimeSeriesUniqueIds(strList40);
        putQualifier25.GroupIdentifiers = strList40;
        java.util.ArrayList<java.lang.String> strList46 = putQualifier25.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence22.MonthsOfYear = strList46;
        getExportSpecimens6.ActivityTypes = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute49 = postExtendedAttribute3.setPickListValues(strList46);
        getObservationExportIIV2_0.SpecimenIds = strList46;
        getObservationExportIIV2_0.CustomId = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str54 = referencePoint53.Name;
        java.time.Instant instant55 = referencePoint53.getPrimarySinceDate();
        java.lang.Double double56 = referencePoint53.Longitude;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList57 = referencePoint53.ReferencePointPeriods;
        java.time.Instant instant58 = referencePoint53.getDecommissionedDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary62.Reviewer = "";
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary62.MeasurementTime = instant65;
        postRecurringReport61.NextGenerationDate = instant65;
        java.time.Instant instant68 = postRecurringReport61.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset69 = statisticalDateTimeOffset60.setDateTimeOffset(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest70 = ratingModelEffectiveShiftsByStageValuesServiceRequest59.setMeasurementTime(instant68);
        referencePoint53.DecommissionedDate = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType73 = null;
        controlConditionActivity72.ControlCleaned = controlCleanedType73;
        java.lang.String str75 = controlConditionActivity72.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary76.Reviewer = "";
        java.time.Instant instant79 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary76.MeasurementTime = instant79;
        controlConditionActivity72.DateCleaned = instant79;
        java.lang.String str82 = controlConditionActivity72.getFlowOverControl();
        java.time.Instant instant83 = controlConditionActivity72.getDateCleaned();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint84 = referencePoint53.setPrimarySinceDate(instant83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_85 = getObservationExportIIV2_0.setStartResultTime(instant83);
        java.util.List<java.lang.String> strList86 = getObservationExportIIV2_85.getAnalysisMethodIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(tagValueType5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(recurrenceFrequencyType23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(putQualifier27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(editableExtendedAttribute49);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNull(double56);
        org.junit.Assert.assertNull(referencePointPeriodList57);
        org.junit.Assert.assertNull(instant58);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset69);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest70);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(referencePoint84);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_85);
        org.junit.Assert.assertNull(strList86);
    }

    @Test
    public void test49484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49484");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList4 = null;
        timeSeriesDataServiceResponse0.Approvals = approvalList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse0.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList9 = timeSeriesDataServiceResponse8.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse11 = timeSeriesDataServiceResponse8.setTimeRange(statisticalTimeRange10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList13 = timeSeriesDataServiceResponse12.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse15 = timeSeriesDataServiceResponse12.setParameter("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType17 = methodOperation16.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation19 = methodOperation16.setOperationType(metadataChangeOperationType18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation21 = methodOperation19.setComments("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant23 = methodOperation22.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        dischargeSummary24.MeasurementTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation31 = methodOperation22.setDateAppliedUtc(instant28);
        methodOperation22.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation35 = methodOperation22.setStackPosition((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation38 = methodOperation36.setOperationType(metadataChangeOperationType37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType39 = methodOperation38.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation40 = methodOperation35.setOperationType(metadataChangeOperationType39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method method42 = methodOperation40.setMethodCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.time.Instant instant43 = method42.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.lang.Integer int45 = methodOperation44.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation48 = methodOperation46.setOperationType(metadataChangeOperationType47);
        java.lang.String str49 = methodOperation48.getUser();
        java.lang.Integer int50 = methodOperation48.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation52 = methodOperation48.setUser("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant54 = methodOperation53.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary55.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse58.setNextToken(instant59);
        dischargeSummary55.MeasurementTime = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation62 = methodOperation53.setDateAppliedUtc(instant59);
        methodOperation53.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation66 = methodOperation53.setComments("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method[] methodArray67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method[] { methodOperation21, method42, methodOperation44, methodOperation48, methodOperation53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method> methodList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method>) methodList68, methodArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse70 = timeSeriesDataServiceResponse12.setMethods(methodList68);
        timeSeriesDataServiceResponse11.Methods = methodList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse72 = timeSeriesDataServiceResponse7.setMethods(methodList68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList74 = timeSeriesDataServiceResponse73.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange75 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse76 = timeSeriesDataServiceResponse73.setTimeRange(statisticalTimeRange75);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList77 = null;
        timeSeriesDataServiceResponse73.Approvals = approvalList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse80 = timeSeriesDataServiceResponse73.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse80.TimeRange = statisticalTimeRange81;
        timeSeriesDataServiceResponse72.TimeRange = statisticalTimeRange81;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(interpolationTypeList9);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse11);
        org.junit.Assert.assertNull(interpolationTypeList13);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse15);
        org.junit.Assert.assertNull(metadataChangeOperationType17);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation19);
        org.junit.Assert.assertNotNull(methodOperation21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(methodOperation31);
        org.junit.Assert.assertNotNull(methodOperation35);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation38);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation40);
        org.junit.Assert.assertNotNull(method42);
        org.junit.Assert.assertNull(instant43);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(methodOperation52);
        org.junit.Assert.assertNull(instant54);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(methodOperation62);
        org.junit.Assert.assertNotNull(methodOperation66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse70);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse72);
        org.junit.Assert.assertNull(interpolationTypeList74);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse76);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse80);
    }

    @Test
    public void test49485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49485");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        java.util.List<java.lang.String> strList1 = getLabReports0.LaboratoryIds;
        java.lang.Integer int2 = getLabReports0.getLimit();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test49486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49486");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postObservedProperty0.ImportHistoryEventSimples;
        java.lang.Object obj3 = postObservedProperty0.getResponseType();
        postObservedProperty0.Id = "POST";
        java.lang.String str6 = postObservedProperty0.getName();
        java.lang.String str7 = postObservedProperty0.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = postObservedProperty0.getUpperLimit();
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(quantity8);
    }

    @Test
    public void test49487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49487");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        java.lang.Double double9 = timeAlignedPoint8.getNumericValue10();
        java.lang.String str10 = timeAlignedPoint8.GradeName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod13 = timeSeriesThresholdPeriod11.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod15 = timeSeriesThresholdPeriod13.setReferenceValue((java.lang.Double) 0.0d);
        timeSeriesThresholdPeriod15.ReferenceValue = 100.0d;
        java.time.Instant instant18 = timeSeriesThresholdPeriod15.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod20 = timeSeriesThresholdPeriod15.setReferenceValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation23 = correctionOperation21.setType(correctionType22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation21.OperationType = metadataChangeOperationType24;
        java.time.Instant instant26 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation27 = correctionOperation21.setDateAppliedUtc(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType29 = methodOperation28.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation31 = methodOperation28.setOperationType(metadataChangeOperationType30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation32 = correctionOperation27.setOperationType(metadataChangeOperationType30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType34 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation35 = correctionOperation33.setType(correctionType34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType36 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation33.OperationType = metadataChangeOperationType36;
        java.time.Instant instant38 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation39 = correctionOperation33.setDateAppliedUtc(instant38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType41 = methodOperation40.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType42 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation43 = methodOperation40.setOperationType(metadataChangeOperationType42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation44 = correctionOperation39.setOperationType(metadataChangeOperationType42);
        correctionOperation27.OperationType = metadataChangeOperationType42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType47 = trendLineAnalysisServiceRequest46.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark50 = locationRemark48.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant52 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = locationDescriptionListServiceResponse51.setNextToken(instant52);
        locationRemark50.FromTime = instant52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark56 = locationRemark50.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod59 = timeSeriesThresholdPeriod57.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription62 = locationDescription60.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType64 = null;
        controlConditionActivity63.ControlCleaned = controlCleanedType64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant67 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = locationDescriptionListServiceResponse66.setNextToken(instant67);
        controlConditionActivity63.DateCleaned = instant67;
        locationDescription62.LastModified = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod71 = timeSeriesThresholdPeriod59.setAppliedTime(instant67);
        locationRemark56.ToTime = instant67;
        trendLineAnalysisServiceRequest46.QueryFrom = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation74 = correctionOperation27.setDateAppliedUtc(instant67);
        timeSeriesThresholdPeriod15.AppliedTime = instant67;
        timeAlignedPoint8.Timestamp = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint78 = timeAlignedPoint8.setNumericValue3((java.lang.Double) 100.0d);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod13);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod15);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod20);
        org.junit.Assert.assertTrue("'" + correctionType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation23);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation27);
        org.junit.Assert.assertNull(metadataChangeOperationType29);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation31);
        org.junit.Assert.assertNotNull(correctionOperation32);
        org.junit.Assert.assertTrue("'" + correctionType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType34.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation35);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType36.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation39);
        org.junit.Assert.assertNull(metadataChangeOperationType41);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType42 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType42.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation43);
        org.junit.Assert.assertNotNull(correctionOperation44);
        org.junit.Assert.assertNull(trendLineAnalysisType47);
        org.junit.Assert.assertNotNull(locationRemark50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse53);
        org.junit.Assert.assertNotNull(locationRemark56);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod59);
        org.junit.Assert.assertNotNull(locationDescription62);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse68);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod71);
        org.junit.Assert.assertNotNull(correctionOperation74);
        org.junit.Assert.assertNotNull(timeAlignedPoint78);
    }

    @Test
    public void test49488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49488");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str1 = postBasicTimeSeries0.getParameter();
        postBasicTimeSeries0.Comment = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries0.setLabel("multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries7 = postBasicTimeSeries0.setUtcOffset("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNotNull(postBasicTimeSeries7);
    }

    @Test
    public void test49489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49489");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location3.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.lang.Boolean boolean6 = location3.isPublish();
        java.lang.String str7 = location3.getLocationName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location9 = location3.setDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location11 = location3.setLongitude((java.lang.Double) 100.0d);
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(location9);
        org.junit.Assert.assertNotNull(location11);
    }

    @Test
    public void test49490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49490");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str1 = setting0.getKey();
        java.lang.String str2 = setting0.getGroup();
        setting0.Group = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting6 = setting0.setIsSystem((java.lang.Boolean) false);
        java.lang.String str7 = setting6.Value;
        java.lang.Boolean boolean8 = setting6.IsSystem;
        setting6.Value = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(setting6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
    }

    @Test
    public void test49491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49491");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int4 = postUnitGroup0.IntensityDimension;
        java.lang.Integer int5 = postUnitGroup0.IntensityDimension;
        postUnitGroup0.DisplayName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup9 = postUnitGroup0.setBaseUnitSingularName("MinDuration");
        postUnitGroup9.IntensityDimension = 4;
        postUnitGroup9.BaseUnitPluralName = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        postUnitGroup9.CurrentDimension = 100;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(postUnitGroup9);
    }

    @Test
    public void test49492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49492");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = postCalculatedDerivedTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart8 = inputPart6.setHeaders((java.lang.Object) interpolationType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries9 = postCalculatedDerivedTimeSeries4.setInterpolationType(interpolationType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation10.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList14, extendedAttributeValueArray13);
        postLocation10.ExtendedAttributeValues = extendedAttributeValueList14;
        postCalculatedDerivedTimeSeries4.ExtendedAttributeValues = extendedAttributeValueList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries19 = postCalculatedDerivedTimeSeries4.setDescription("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str20 = postCalculatedDerivedTimeSeries4.ComputationPeriodIdentifier;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart8);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries9);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test49493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49493");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.time.OffsetDateTime offsetDateTime8 = null;
        observation6.ObservedTime = offsetDateTime8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon10 = observation6.getRelatedTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics11.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        java.lang.Double double14 = observationStatistics11.Max;
        java.lang.String str15 = observationStatistics11.getSamplingLocationId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation6.setStatistics(observationStatistics11);
        java.lang.String str17 = observation16.getId();
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(taxon10);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test49494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49494");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        java.lang.String str1 = extendedAttribute0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute3 = extendedAttribute0.setType("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str4 = extendedAttribute0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(extendedAttribute3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test49495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49495");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription4 = locationDescription2.setUniqueId("'.'SSSSSSS");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList5 = locationDescription2.getTags();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription7 = locationDescription2.setUtcOffset((java.lang.Double) 0.0d);
        java.lang.String str8 = locationDescription2.getUniqueId();
        java.lang.String str9 = locationDescription2.UniqueId;
        locationDescription2.Identifier = "https";
        locationDescription2.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.util.ArrayList<java.lang.String> strList14 = locationDescription2.getSecondaryFolders();
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNotNull(locationDescription4);
        org.junit.Assert.assertNull(tagMetadataList5);
        org.junit.Assert.assertNotNull(locationDescription7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "'.'SSSSSSS" + "'", str8, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "'.'SSSSSSS" + "'", str9, "'.'SSSSSSS");
        org.junit.Assert.assertNull(strList14);
    }

    @Test
    public void test49496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49496");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents2 = getLabReportImportHistoryEvents0.setLimit((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents4 = getLabReportImportHistoryEvents2.setLimit((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList6 = getExportSpecimens5.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant8 = qualifier7.DateApplied;
        java.lang.String str9 = qualifier7.User;
        java.lang.String str10 = qualifier7.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj12 = timeAlignedDataServiceRequest11.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = timeAlignedDataServiceRequest11.setQueryFrom(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = qualifier7.setDateApplied(instant14);
        getExportSpecimens5.Before = instant14;
        java.util.List<java.lang.String> strList19 = getExportSpecimens5.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.QualityControlTypes = strList32;
        java.util.List<java.lang.String> strList36 = getObservationsV2_21.getLabReportIds();
        importItem20.Errors = getObservationsV2_21;
        java.lang.Object obj38 = importItem20.getExistingItem();
        java.util.List<java.lang.String> strList39 = importItem20.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        getObservationsV2_41.SpecimenIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray51 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = putLocationTags47.setTagUniqueIds(strList52);
        getObservationsV2_41.QualityControlTypes = strList52;
        java.util.List<java.lang.String> strList56 = getObservationsV2_41.getLabReportIds();
        importItem40.Errors = getObservationsV2_41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList59 = getObservationsV2_58.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray70 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags66.setTagUniqueIds(strList71);
        getObservationsV2_60.QualityControlTypes = strList71;
        getObservationsV2_58.ResultGrades = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem76 = importItem40.setFields((java.util.List<java.lang.String>) strList71);
        importItem20.Fields = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens78 = getExportSpecimens5.setSamplingLocationIds((java.util.List<java.lang.String>) strList71);
        getLabReportImportHistoryEvents4.LabReportIds = strList71;
        java.util.List<java.lang.String> strList80 = null;
        getLabReportImportHistoryEvents4.LabReportIds = strList80;
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents2);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest16);
        org.junit.Assert.assertNotNull(qualifier17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(putLocationTags54);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(importItem76);
        org.junit.Assert.assertNotNull(getExportSpecimens78);
    }

    @Test
    public void test49497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49497");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary2.BaseFlow = baseFlowType7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType9 = dischargeSummary2.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList11 = ratingModelDescriptionListServiceResponse10.RatingModelDescriptions;
        java.time.Instant instant12 = ratingModelDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType14 = calibrationCheck13.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = calibrationCheck13.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary17.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        dischargeSummary17.MeasurementTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse16.setNextToken(instant21);
        java.time.Instant instant25 = locationDescriptionListServiceResponse16.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck26 = calibrationCheck13.setTime(instant25);
        java.time.Instant instant27 = calibrationCheck26.Time;
        ratingModelDescriptionListServiceResponse10.NextToken = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary2.setMeasurementEndTime(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = dischargeSummary29.MeanGageHeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary29.setGageHeightComments("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str34 = crossSectionSurveyActivity33.Channel;
        java.lang.String str35 = crossSectionSurveyActivity33.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity38 = adcpDischargeActivity36.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = adcpDischargeActivity38.getDischargeCoefficientVariation();
        adcpDischargeActivity38.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = dischargeSummary42.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = dischargeSummary42.Discharge;
        java.lang.Integer int45 = dischargeSummary42.getGradeCode();
        java.lang.String str46 = dischargeSummary42.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary42.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        adcpDischargeActivity38.Area = datumConvertedQuantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity50 = crossSectionSurveyActivity33.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary32.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData52 = openWaterData0.setDistanceToMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData54 = openWaterData52.setSuspensionWeight("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData56 = openWaterData54.setDryLineCorrection((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData58 = openWaterData54.setWetLineCorrection((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData60 = openWaterData58.setDryLineAngle((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData62 = openWaterData58.setSuspensionWeight("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + baseFlowType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(calibrationCheckType14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(calibrationCheck26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNull(quantityWithDisplay30);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(adcpDischargeActivity38);
        org.junit.Assert.assertNull(doubleWithDisplay39);
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertNull(quantityWithDisplay44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity50);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(openWaterData52);
        org.junit.Assert.assertNotNull(openWaterData54);
        org.junit.Assert.assertNotNull(openWaterData56);
        org.junit.Assert.assertNotNull(openWaterData58);
        org.junit.Assert.assertNotNull(openWaterData60);
        org.junit.Assert.assertNotNull(openWaterData62);
    }

    @Test
    public void test49498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49498");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj3 = timeAlignedDataServiceRequest2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = locationDescriptionListServiceResponse4.setNextToken(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = timeAlignedDataServiceRequest2.setQueryFrom(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = timeAlignedDataServiceRequest2.setTimeSeriesOutputUnitIds(strList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation17 = importItemObservation1.setFields((java.util.List<java.lang.String>) strList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase18 = putOpenIdConnectRelyingPartyConfiguration0.setHostedDomains((java.util.List<java.lang.String>) strList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str20 = postUser19.Id;
        postUser19.Email = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int24 = getFieldVisits23.Limit;
        java.util.List<java.lang.String> strList25 = getFieldVisits23.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList27 = getSpecimens26.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType29 = putUserV2_28.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = dischargeSummary32.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        dischargeSummary32.MeasurementTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse31.setNextToken(instant36);
        java.time.Instant instant40 = locationDescriptionListServiceResponse31.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities41 = getActivities30.setToStartTime(instant40);
        java.lang.String str42 = getActivities41.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList44 = getObservationsV2_43.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        getObservationsV2_43.ResultGrades = strList56;
        getActivities41.Media = strList56;
        putUserV2_28.AccessGroups = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens63 = getSpecimens26.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits64 = getFieldVisits23.setSearch((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser65 = postUser19.setAccessGroups((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase66 = openIdConnectRelyingPartyConfigurationBase18.setHostedDomains((java.util.List<java.lang.String>) strList56);
        java.lang.String str67 = openIdConnectRelyingPartyConfigurationBase18.getIdentifierClaim();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse6);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest16);
        org.junit.Assert.assertNotNull(importItemObservation17);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(userType29);
        org.junit.Assert.assertNotNull(dischargeSummary34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(getActivities41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(getSpecimens63);
        org.junit.Assert.assertNotNull(getFieldVisits64);
        org.junit.Assert.assertNotNull(postUser65);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase66);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test49499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49499");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup getUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup();
        java.lang.String str1 = getUnitGroup0.getUniqueId();
        java.lang.String str2 = getUnitGroup0.UniqueId;
        java.lang.Object obj3 = getUnitGroup0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UnitGroup");
    }

    @Test
    public void test49500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest98.test49500");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        java.lang.String str1 = getGroupedObservationsV2_0.ImportHistoryEventId;
        java.lang.String str2 = getGroupedObservationsV2_0.DetectionCondition;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }
}

