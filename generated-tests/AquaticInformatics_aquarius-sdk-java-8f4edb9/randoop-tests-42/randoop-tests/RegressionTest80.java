import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest80 {

    public static boolean debug = false;

    @Test
    public void test40001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40001");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple1 = fieldVisitSimple0.getSamplingLocation();
        java.time.OffsetDateTime offsetDateTime2 = fieldVisitSimple0.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str4 = projectSimple3.Name;
        java.lang.String str5 = projectSimple3.getCustomId();
        projectSimple3.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple9 = projectSimple3.setId("MinDuration");
        fieldVisitSimple0.Project = projectSimple3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple12 = fieldVisitSimple0.setFieldTrip(fieldTripSimple11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple15 = fieldTripSimple13.setCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        fieldTripSimple13.CustomId = "PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple18 = fieldVisitSimple12.setFieldTrip(fieldTripSimple13);
        java.lang.String str19 = fieldTripSimple13.CustomId;
        org.junit.Assert.assertNull(samplingLocationSimple1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(projectSimple9);
        org.junit.Assert.assertNotNull(fieldVisitSimple12);
        org.junit.Assert.assertNotNull(fieldTripSimple15);
        org.junit.Assert.assertNotNull(fieldVisitSimple18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT87591240H" + "'", str19, "PT87591240H");
    }

    @Test
    public void test40002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40002");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = reading3.getUncertainty();
        reading3.SubLocationIdentifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary9.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary11.DifferenceDuringVisit = doubleWithDisplay12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = doubleWithDisplay12.setDisplay("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading16 = reading3.setAdjustmentAmount(doubleWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading18 = reading3.setManufacturer("2021.8.9990");
        java.lang.String str19 = reading3.Comments;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertNotNull(dischargeSummary11);
        org.junit.Assert.assertNotNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(reading16);
        org.junit.Assert.assertNotNull(reading18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test40003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40003");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_2 = deleteObservationsV2_0.setFilterId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean4 = getFieldVisitReadingsByLocationServiceRequest3.ApplyRounding;
        java.lang.String str5 = getFieldVisitReadingsByLocationServiceRequest3.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest7 = getFieldVisitReadingsByLocationServiceRequest3.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getLabReportIds();
        importItem8.Errors = getObservationsV2_9;
        java.lang.Object obj26 = importItem8.getExistingItem();
        importItem8.Input = "hi!";
        java.lang.Object obj29 = importItem8.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType30 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem31 = importItem8.setStatus(importItemStatusType30);
        importItem31.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate34.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate34.setId("hi!");
        java.lang.Boolean boolean39 = specimenTemplate38.getFiltered();
        importItem31.Item = specimenTemplate38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        postTag42.PickListValues = strList47;
        java.util.ArrayList<java.lang.String> strList51 = postTag42.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor52 = processor41.setInputTimeSeriesUniqueIds(strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem53 = importItem31.setWarningMessages((java.util.List<java.lang.String>) strList51);
        getFieldVisitReadingsByLocationServiceRequest3.Parameters = strList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_55 = deleteObservationsV2_0.setSearch((java.util.List<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList56 = deleteObservationsV2_55.getActivityIds();
        java.lang.Double double57 = deleteObservationsV2_55.getMaxNumericResultValue();
        org.junit.Assert.assertNotNull(deleteObservationsV2_2);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + importItemStatusType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType30.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem31);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(processor52);
        org.junit.Assert.assertNotNull(importItem53);
        org.junit.Assert.assertNotNull(deleteObservationsV2_55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(double57);
    }

    @Test
    public void test40004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40004");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.Integer int39 = deleteActivities0.Limit;
        java.lang.String str40 = deleteActivities0.CustomId;
        java.util.List<java.lang.String> strList41 = deleteActivities0.ActivityTypes;
        java.lang.String str42 = deleteActivities0.FieldVisitId;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test40005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40005");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange62 = locationDatumPeriod0.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod64 = locationDatumPeriod0.setOffsetToStandard((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection65 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.Unknown;
        locationDatumPeriod0.MeasurementDirection = measurementDirection65;
        java.lang.String str67 = locationDatumPeriod0.Standard;
        locationDatumPeriod0.User = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.Double double70 = locationDatumPeriod0.Uncertainty;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(timeRange62);
        org.junit.Assert.assertNotNull(locationDatumPeriod64);
        org.junit.Assert.assertTrue("'" + measurementDirection65 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.Unknown + "'", measurementDirection65.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.Unknown));
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(double70);
    }

    @Test
    public void test40006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40006");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange62 = locationDatumPeriod0.getTimeRange();
        java.lang.String str63 = locationDatumPeriod0.Method;
        java.lang.String str64 = locationDatumPeriod0.getMethod();
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(timeRange62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test40007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40007");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles2 = locationUserRoles0.setLocationUniqueId("MaxInstant");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList3 = locationUserRoles2.Roles;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles5 = locationUserRoles2.setLocationUniqueId("");
        java.lang.String str6 = locationUserRoles2.LocationUniqueId;
        java.lang.String str7 = locationUserRoles2.LocationUniqueId;
        org.junit.Assert.assertNotNull(locationUserRoles2);
        org.junit.Assert.assertNull(locationUserRoleList3);
        org.junit.Assert.assertNotNull(locationUserRoles5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test40008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40008");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity8 = pointVelocityDischargeActivity0.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        java.lang.String str9 = pointVelocityDischargeActivity0.getMeterEquation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity11 = pointVelocityDischargeActivity0.setSuspensionWeight("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement12 = pointVelocityDischargeActivity11.DischargeChannelMeasurement;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = pointVelocityDischargeActivity11.DistanceToMeter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity11);
        org.junit.Assert.assertNull(dischargeChannelMeasurement12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
    }

    @Test
    public void test40009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40009");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderWriteBase locationFolderWriteBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderWriteBase();
        java.lang.String str1 = locationFolderWriteBase0.LocationFolderName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderWriteBase locationFolderWriteBase3 = locationFolderWriteBase0.setLocationFolderName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str4 = locationFolderWriteBase0.LocationFolderName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationFolderWriteBase3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str4, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test40010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40010");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_6 = postObservationV2_2.setLabResultDetails(labResultDetails5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier7 = postObservationV2_2.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList9 = fieldVisit8.Attachments;
        java.time.OffsetDateTime offsetDateTime10 = null;
        fieldVisit8.EndTime = offsetDateTime10;
        java.lang.String str12 = fieldVisit8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str14 = samplingLocation13.Description;
        java.lang.String str15 = samplingLocation13.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str18 = metricConfiguration17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty19.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = metricConfiguration17.setObservedProperty(observedProperty19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType23 = observedProperty19.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup25 = postObservedProperty24.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        postObservedProperty24.LowerLimit = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity30 = postObservedProperty24.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = quantity30.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty32 = observedProperty19.setUpperLimit(quantity30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation33 = samplingLocation16.setElevation(quantity30);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList34 = samplingLocation33.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList37, extendedAttributeArray36);
        postActivity35.ExtendedAttributes = extendedAttributeList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation40 = samplingLocation33.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = samplingLocation13.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList37);
        fieldVisit8.ExtendedAttributes = extendedAttributeList37;
        postObservationV2_2.ExtendedAttributes = extendedAttributeList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate45.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList50 = specimenTemplate49.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate53 = specimenTemplate51.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList56 = specimenTemplate55.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate45, specimenTemplate48, specimenTemplate49, specimenTemplate53, specimenTemplate54, specimenTemplate55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList58, specimenTemplateArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate60 = postFieldVisitActivityWithTemplate44.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity61.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity65 = postActivity61.setPlannedActivity(plannedActivity64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType66 = postActivity61.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate68.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList73 = specimenTemplate72.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate76 = specimenTemplate74.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList79 = specimenTemplate78.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate68, specimenTemplate71, specimenTemplate72, specimenTemplate76, specimenTemplate77, specimenTemplate78 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList81 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList81, specimenTemplateArray80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate83 = postFieldVisitActivityWithTemplate67.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate85 = postFieldVisitActivityWithTemplate83.setCollectionMethod(collectionMethod84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity86 = postActivity61.setCollectionMethod(collectionMethod84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate87 = postFieldVisitActivityWithTemplate44.setCollectionMethod(collectionMethod84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_88 = postObservationV2_2.setCollectionMethod(collectionMethod84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult89 = postObservationV2_88.getNumericResult();
        java.time.OffsetDateTime offsetDateTime90 = null;
        postObservationV2_88.ResultTime = offsetDateTime90;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics92 = postObservationV2_88.getStatistics();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postObservationV2_6);
        org.junit.Assert.assertNull(nullMeasureQualifier7);
        org.junit.Assert.assertNull(domainObjectAttachmentList9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(metricConfiguration22);
        org.junit.Assert.assertNull(resultType23);
        org.junit.Assert.assertNull(unitGroup25);
        org.junit.Assert.assertNotNull(quantity30);
        org.junit.Assert.assertNull(unit31);
        org.junit.Assert.assertNotNull(observedProperty32);
        org.junit.Assert.assertNotNull(samplingLocation33);
        org.junit.Assert.assertNull(domainObjectAttachmentList34);
        org.junit.Assert.assertNotNull(extendedAttributeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(samplingLocation40);
        org.junit.Assert.assertNotNull(samplingLocation41);
        org.junit.Assert.assertNull(labInstructionTemplateList50);
        org.junit.Assert.assertNotNull(specimenTemplate53);
        org.junit.Assert.assertNull(labInstructionTemplateList56);
        org.junit.Assert.assertNotNull(specimenTemplateArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate60);
        org.junit.Assert.assertNotNull(postActivity65);
        org.junit.Assert.assertNull(activityType66);
        org.junit.Assert.assertNull(labInstructionTemplateList73);
        org.junit.Assert.assertNotNull(specimenTemplate76);
        org.junit.Assert.assertNull(labInstructionTemplateList79);
        org.junit.Assert.assertNotNull(specimenTemplateArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate83);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate85);
        org.junit.Assert.assertNotNull(postActivity86);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate87);
        org.junit.Assert.assertNotNull(postObservationV2_88);
        org.junit.Assert.assertNull(numericResult89);
        org.junit.Assert.assertNull(observationStatistics92);
    }

    @Test
    public void test40011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40011");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        java.lang.String str1 = getLabReportImportHistoryEvents0.getCursor();
        getLabReportImportHistoryEvents0.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents5 = getLabReportImportHistoryEvents0.setLimit((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents7 = getLabReportImportHistoryEvents0.setCursor("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents9 = getLabReportImportHistoryEvents0.setLimit((java.lang.Integer) 4);
        getLabReportImportHistoryEvents0.Sort = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents5);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents7);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents9);
    }

    @Test
    public void test40012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40012");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        importChangeItem0.PropertyName = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest();
        timeSeriesDescriptionServiceRequest3.ComputationIdentifier = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest7 = timeSeriesDescriptionServiceRequest3.setComputationPeriodIdentifier("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem8 = importChangeItem0.setRight((java.lang.Object) timeSeriesDescriptionServiceRequest3);
        java.lang.Object obj9 = importChangeItem8.Right;
        org.junit.Assert.assertNotNull(timeSeriesDescriptionServiceRequest7);
        org.junit.Assert.assertNotNull(importChangeItem8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test40013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40013");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        postRecurringReport1.NextGenerationDate = instant5;
        java.time.Instant instant8 = postRecurringReport1.getNextGenerationDate();
        java.lang.String str9 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant8);
        metadataChangeTransactionListServiceRequest0.QueryFrom = instant8;
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest12 = metadataChangeTransactionListServiceRequest0.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList16 = locationDescriptionListServiceResponse15.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str18 = timeSeriesApprovalsTransactionListServiceRequest17.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType20 = null;
        controlConditionActivity19.ControlCleaned = controlCleanedType20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        controlConditionActivity19.DateCleaned = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest26 = timeSeriesApprovalsTransactionListServiceRequest17.setQueryTo(instant23);
        java.time.Instant instant27 = timeSeriesApprovalsTransactionListServiceRequest17.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse15.setNextToken(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest29 = metadataChangeTransactionListServiceRequest12.setQueryFrom(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str31 = ratingModelEffectiveShiftsServiceRequest30.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double33 = putBulkEditResultGradesV2_32.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        java.util.List<java.lang.String> strList49 = getObservationsV2_34.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList50 = getObservationsV2_34.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType51 = getObservationsV2_34.FieldResultType;
        java.time.Instant instant52 = getObservationsV2_34.getEndObservedTime();
        java.lang.String str53 = getObservationsV2_34.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        java.util.ArrayList<java.lang.String> strList62 = putLocationTags61.TagUniqueIds;
        getObservationsV2_34.ProjectIds = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_64 = putBulkEditResultGradesV2_32.setSearch((java.util.List<java.lang.String>) strList62);
        java.util.List<java.lang.String> strList65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_66 = putBulkEditResultGradesV2_64.setLabResultLaboratoryIds(strList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList68 = fieldVisitDataServiceResponse67.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse70 = fieldVisitDataServiceResponse67.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary71.Reviewer = "";
        java.time.Instant instant74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary71.MeasurementTime = instant74;
        fieldVisitDataServiceResponse67.ResponseTime = instant74;
        putBulkEditResultGradesV2_66.EndModificationTime = instant74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest78 = ratingModelEffectiveShiftsServiceRequest30.setQueryFrom(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest79 = metadataChangeTransactionListServiceRequest29.setQueryTo(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest81 = metadataChangeTransactionListServiceRequest79.setTimeSeriesUniqueId("2021.4.62.0");
        java.lang.Object obj82 = metadataChangeTransactionListServiceRequest79.getResponseType();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str9, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNull(locationDescriptionList16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(double33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(fieldResultType51);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_64);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_66);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList68);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse70);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest78);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest79);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$MetadataChangeTransactionListServiceResponse");
    }

    @Test
    public void test40014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40014");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        java.util.List<java.lang.String> strList1 = deleteActivities0.ActivityTypes;
        java.util.List<java.lang.String> strList2 = deleteActivities0.getMedia();
        java.lang.String str3 = deleteActivities0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        getObservationsV2_5.SpecimenIds = strList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray15 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags11.setTagUniqueIds(strList16);
        getObservationsV2_5.QualityControlTypes = strList16;
        java.util.List<java.lang.String> strList20 = getObservationsV2_5.getLabReportIds();
        importItem4.Errors = getObservationsV2_5;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList22 = importItem4.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList24 = importItemObject23.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList26, importChangeItemArray25);
        importItemObject23.ItemComparison = importChangeItemList26;
        importItem4.ItemComparison = importChangeItemList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str31 = getChartDataV2_30.getActivityCustomId();
        java.util.List<java.lang.String> strList32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_33 = getChartDataV2_30.setSearch(strList32);
        java.time.Instant instant34 = getChartDataV2_30.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList36 = getExportSpecimens35.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant38 = qualifier37.DateApplied;
        java.lang.String str39 = qualifier37.User;
        java.lang.String str40 = qualifier37.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj42 = timeAlignedDataServiceRequest41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = timeAlignedDataServiceRequest41.setQueryFrom(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = qualifier37.setDateApplied(instant44);
        getExportSpecimens35.Before = instant44;
        java.time.Instant instant49 = getExportSpecimens35.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList51 = getSpecimens50.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType53 = putUserV2_52.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = dischargeSummary56.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        dischargeSummary56.MeasurementTime = instant60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = locationDescriptionListServiceResponse55.setNextToken(instant60);
        java.time.Instant instant64 = locationDescriptionListServiceResponse55.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities65 = getActivities54.setToStartTime(instant64);
        java.lang.String str66 = getActivities65.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList68 = getObservationsV2_67.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        getObservationsV2_69.SpecimenIds = strList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray79 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = putLocationTags75.setTagUniqueIds(strList80);
        getObservationsV2_69.QualityControlTypes = strList80;
        getObservationsV2_67.ResultGrades = strList80;
        getActivities65.Media = strList80;
        putUserV2_52.AccessGroups = strList80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens87 = getSpecimens50.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens88 = getExportSpecimens35.setSamplingLocationIds((java.util.List<java.lang.String>) strList80);
        getChartDataV2_30.AnalysisMethodIds = strList80;
        importItem4.WarningMessages = strList80;
        deleteActivities0.Ids = strList80;
        java.util.List<java.lang.String> strList92 = deleteActivities0.getActivityTypes();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(importChangeItemList22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(importChangeItemArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(getChartDataV2_33);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest46);
        org.junit.Assert.assertNotNull(qualifier47);
        org.junit.Assert.assertNull(instant49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(userType53);
        org.junit.Assert.assertNotNull(dischargeSummary58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(getActivities65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(putLocationTags82);
        org.junit.Assert.assertNotNull(getSpecimens87);
        org.junit.Assert.assertNotNull(getExportSpecimens88);
        org.junit.Assert.assertNull(strList92);
    }

    @Test
    public void test40015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40015");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        java.lang.String str3 = postSamplingLocation2.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation6 = postSamplingLocation4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation8 = postSamplingLocation4.setAddress(address7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postSamplingLocation8.getElevation();
        postSamplingLocation8.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = postSamplingLocation8.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList15, samplingLocationGroupArray14);
        postAccessGroup13.SamplingLocationGroups = samplingLocationGroupList15;
        postSamplingLocation8.SamplingLocationGroups = samplingLocationGroupList15;
        postSamplingLocation2.SamplingLocationGroups = samplingLocationGroupList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType20 = postSamplingLocation2.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = postSamplingLocation2.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList22 = postSamplingLocation2.Standards;
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postSamplingLocation6);
        org.junit.Assert.assertNotNull(postSamplingLocation8);
        org.junit.Assert.assertNull(quantity9);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(locationType20);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNull(standardSimpleList22);
    }

    @Test
    public void test40016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40016");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType1 = null;
        samplingPlanPlannedActivity0.ActivityType = activityType1;
        samplingPlanPlannedActivity0.Id = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = samplingPlanPlannedActivity0.setActivityType(activityType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence7 = samplingPlanPlannedActivity0.Recurrence;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType8 = samplingPlanPlannedActivity0.ActivityType;
        java.lang.String str9 = samplingPlanPlannedActivity0.getId();
        org.junit.Assert.assertTrue("'" + activityType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK + "'", activityType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity6);
        org.junit.Assert.assertNull(samplingPlanPlannedActivityRecurrence7);
        org.junit.Assert.assertTrue("'" + activityType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK + "'", activityType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str9, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test40017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40017");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        java.lang.String str1 = fieldVisitDataByLocationServiceRequest0.getConvertToStandardReferenceDatum();
        java.lang.String str2 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean3 = fieldVisitDataByLocationServiceRequest0.isIncludeNodeDetails();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList4 = fieldVisitDataByLocationServiceRequest0.Activities;
        java.lang.Boolean boolean5 = fieldVisitDataByLocationServiceRequest0.ApplyRounding;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest7 = fieldVisitDataByLocationServiceRequest0.setLocationIdentifier("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(activityTypeList4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest7);
    }

    @Test
    public void test40018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40018");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole putLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole();
        java.lang.Object obj1 = putLocationUserRole0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase3 = putLocationUserRole0.setRoleUniqueId("http");
        putLocationUserRole0.RoleUniqueId = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        java.lang.Object obj6 = putLocationUserRole0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertNotNull(putUserRoleBase3);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
    }

    @Test
    public void test40019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40019");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList3 = getExportObservations2.getLabReportIds();
        java.lang.Double double4 = getExportObservations2.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str6 = getChartDataV2_5.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_5.setFilterId("");
        java.util.List<java.lang.String> strList9 = getChartDataV2_5.ResultGrades;
        getChartDataV2_5.MinNumericResultValue = 100.0d;
        java.lang.Double double12 = getChartDataV2_5.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        postTag13.PickListValues = strList18;
        getChartDataV2_5.SamplingContextTagIds = strList18;
        getChartDataV2_5.Limit = (-1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest27 = fieldVisitDataByLocationServiceRequest25.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest36 = fieldVisitDataByLocationServiceRequest27.setParameters(strList33);
        java.lang.Object obj37 = fieldVisitDataByLocationServiceRequest27.getResponseType();
        java.util.ArrayList<java.lang.String> strList38 = fieldVisitDataByLocationServiceRequest27.getParameters();
        getChartDataV2_5.Media = strList38;
        getExportObservations2.CollectionMethodIds = strList38;
        java.lang.Double double41 = getExportObservations2.NumericResultValue;
        java.util.List<java.lang.String> strList42 = getExportObservations2.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.ActivityIds = strList64;
        getObservationsV2_49.ResultStatuses = strList64;
        getExportObservations2.ObservedPropertyIds = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_70 = deleteObservationsV2_0.setSearch((java.util.List<java.lang.String>) strList64);
        java.lang.String str71 = deleteObservationsV2_0.getImportHistoryEventId();
        java.util.List<java.lang.String> strList72 = deleteObservationsV2_0.SamplingContextTagIds;
        java.util.List<java.lang.String> strList73 = deleteObservationsV2_0.TaxonIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(double41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(deleteObservationsV2_70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNull(strList73);
    }

    @Test
    public void test40020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40020");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str6 = activeMeterDetails5.getConfiguration();
        vertical0.CurrentMeter = activeMeterDetails5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = vertical0.TaglinePosition;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        crossSectionPoint9.Distance = quantityWithDisplay10;
        crossSectionPoint9.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = crossSectionPoint9.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint16 = crossSectionPoint9.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint18 = crossSectionPoint16.setElevation(quantityWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        crossSectionPoint18.Depth = quantityWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint18.Depth = datumConvertedQuantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity25 = pointVelocityDischargeActivity23.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity23.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = pointVelocityDischargeActivity23.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList30 = pointVelocityDischargeActivity29.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity29.DistanceToMeter = datumConvertedQuantityWithDisplay31;
        crossSectionPoint18.Elevation = datumConvertedQuantityWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical34 = vertical0.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay31);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNotNull(crossSectionPoint16);
        org.junit.Assert.assertNotNull(crossSectionPoint18);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity25);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity29);
        org.junit.Assert.assertNull(verticalList30);
        org.junit.Assert.assertNotNull(vertical34);
    }

    @Test
    public void test40021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40021");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setDisplayValue2("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint0.setApprovalName8("9999-12-31T23:59:59.999Z");
        java.lang.Long long15 = timeAlignedPoint14.getApprovalLevel9();
        timeAlignedPoint14.GradeCode5 = 0L;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNull(long15);
    }

    @Test
    public void test40022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40022");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType1 = importItemSpecimen0.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList3 = importItemObject2.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList5, importChangeItemArray4);
        importItemObject2.ItemComparison = importChangeItemList5;
        java.lang.String str8 = importItemObject2.Input;
        java.lang.String str9 = importItemObject2.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getLabReportIds();
        importItem10.Errors = getObservationsV2_11;
        java.lang.Object obj28 = importItem10.getExistingItem();
        importItem10.Input = "hi!";
        java.lang.Object obj31 = importItem10.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem33 = importItem10.setStatus(importItemStatusType32);
        importItemObject2.Status = importItemStatusType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen35 = importItemSpecimen0.setStatus(importItemStatusType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen37 = importItemSpecimen35.setRowId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE;
        importItemSpecimen37.Status = importItemStatusType38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen40 = importItemSpecimen37.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType42 = observation41.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium43 = null;
        observation41.Medium = medium43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult45 = observation41.getTaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics46 = observation41.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics47 = observation41.Statistics;
        importItemSpecimen37.Errors = observation41;
        java.util.List<java.lang.String> strList49 = importItemSpecimen37.Fields;
        org.junit.Assert.assertNull(importItemStatusType1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(importChangeItemArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + importItemStatusType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem33);
        org.junit.Assert.assertNotNull(importItemSpecimen35);
        org.junit.Assert.assertNotNull(importItemSpecimen37);
        org.junit.Assert.assertTrue("'" + importItemStatusType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE + "'", importItemStatusType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.UPDATE));
        org.junit.Assert.assertNull(specimen40);
        org.junit.Assert.assertNull(dataClassificationType42);
        org.junit.Assert.assertNull(taxonomicResult45);
        org.junit.Assert.assertNull(observationStatistics46);
        org.junit.Assert.assertNull(observationStatistics47);
        org.junit.Assert.assertNull(strList49);
    }

    @Test
    public void test40023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40023");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser17 = openIdConnectUser15.setIdentifier("");
        java.lang.Boolean boolean18 = openIdConnectUser17.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setErrors((java.lang.Object) openIdConnectUser17);
        java.lang.Object obj20 = importItemObject0.ExistingItem;
        java.util.List<java.lang.String> strList21 = importItemObject0.getFields();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int23 = postUnitGroup22.getTimeDimension();
        java.lang.Integer int24 = postUnitGroup22.getTemperatureDimension();
        java.lang.Integer int25 = postUnitGroup22.CurrentDimension;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject26 = importItemObject0.setErrors((java.lang.Object) int25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject28 = importItemObject26.setInput("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        java.lang.Object obj29 = importItemObject28.getExistingItem();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(openIdConnectUser17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(importItemObject26);
        org.junit.Assert.assertNotNull(importItemObject28);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test40024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40024");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperty getObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperty();
        java.lang.String str1 = getObservedProperty0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperty getObservedProperty3 = getObservedProperty0.setId("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        getObservedProperty0.Id = "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****";
        java.lang.String str6 = getObservedProperty0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getObservedProperty3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****" + "'", str6, "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
    }

    @Test
    public void test40025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40025");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str1 = activeMeterDetails0.SoftwareVersion;
        java.lang.String str2 = activeMeterDetails0.Manufacturer;
        activeMeterDetails0.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList6, activeMeterCalibrationArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails8 = activeMeterDetails0.setMeterCalibrations(activeMeterCalibrationList6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList9 = activeMeterDetails8.MeterCalibrations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str11 = activeMeterDetails10.SoftwareVersion;
        java.lang.String str12 = activeMeterDetails10.Manufacturer;
        activeMeterDetails10.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList16, activeMeterCalibrationArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails18 = activeMeterDetails10.setMeterCalibrations(activeMeterCalibrationList16);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList19 = activeMeterDetails18.MeterCalibrations;
        activeMeterDetails8.MeterCalibrations = activeMeterCalibrationList19;
        java.lang.String str21 = activeMeterDetails8.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter23 = activeMeterDetails8.setSerialNumber("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails25 = activeMeterDetails8.setSoftwareVersion("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails27 = activeMeterDetails25.setConfiguration("POST");
        activeMeterDetails27.SoftwareVersion = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails8);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails18);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(currentMeter23);
        org.junit.Assert.assertNotNull(activeMeterDetails25);
        org.junit.Assert.assertNotNull(activeMeterDetails27);
    }

    @Test
    public void test40026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40026");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setBaseOffset((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit4 = unit0.setSymbol("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = unit4.getUnitIdentifier();
        java.lang.String str6 = unit4.getSingularName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit8 = unit4.setUniqueId("");
        java.lang.String str9 = unit4.PluralName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit11 = unit4.setSingularName("9999-12-31T23:59:59.9999999Z");
        unit4.BaseMultiplier = 0.0d;
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNotNull(unit4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(unit8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(unit11);
    }

    @Test
    public void test40027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40027");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.getStartResultTime();
        java.time.Instant instant4 = getObservationExportIIV2_0.getStartResultTime();
        java.util.List<java.lang.String> strList5 = getObservationExportIIV2_0.getResultStatuses();
        getObservationExportIIV2_0.NumericResultValue = 0.0d;
        java.time.Instant instant8 = getObservationExportIIV2_0.StartResultTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(instant8);
    }

    @Test
    public void test40028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40028");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups2 = getUnitGroups0.setSystemCode(getUnitGroupsSystemCodeType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType3 = getUnitGroups0.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups5 = getUnitGroups0.setCustomId("-PT87591240H");
        getUnitGroups0.CustomId = "MaxDuration";
        getUnitGroups0.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNotNull(getUnitGroups2);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType3);
        org.junit.Assert.assertNotNull(getUnitGroups5);
    }

    @Test
    public void test40029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40029");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putFieldTrip0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setParticipants("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str4 = putFieldTrip0.getId();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test40030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40030");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation postVisitFileToLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation();
        java.lang.String str1 = postVisitFileToLocation0.getLocationUniqueId();
        java.lang.String str2 = postVisitFileToLocation0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation postVisitFileToLocation4 = postVisitFileToLocation0.setLocationUniqueId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postVisitFileToLocation4);
    }

    @Test
    public void test40031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40031");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        java.lang.String str1 = postImportLabReportData0.TimeZoneOffset;
        java.lang.String str2 = postImportLabReportData0.TimeZoneOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData4 = postImportLabReportData0.setTimeZoneOffset("/AQUARIUS/Provisioning/v1");
        java.lang.String str5 = postImportLabReportData4.TimeZoneOffset;
        java.lang.Boolean boolean6 = postImportLabReportData4.getCreateMissingObjects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postImportLabReportData4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str5, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test40032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40032");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitsInGroup getUnitsInGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitsInGroup();
        java.lang.String str1 = getUnitsInGroup0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitsInGroup getUnitsInGroup3 = getUnitsInGroup0.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitsInGroup getUnitsInGroup5 = getUnitsInGroup3.setUniqueId("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getUnitsInGroup3);
        org.junit.Assert.assertNotNull(getUnitsInGroup5);
    }

    @Test
    public void test40033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40033");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule6 = schedule4.setRecurrenceType(recurrenceType5);
        java.lang.String str7 = schedule6.Id;
        java.lang.String str8 = schedule6.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        schedule6.RecurrenceDayMonthly = recurrenceDayMonthlyType9;
        java.lang.Integer int11 = schedule6.SamplingLocationGroupSelectionTypeRandomCount;
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertTrue("'" + recurrenceType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test40034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40034");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.getOptionalIssuerDiscoveryUri();
        putOpenIdConnectRelyingPartyConfiguration0.IdentifierClaim = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase6 = putOpenIdConnectRelyingPartyConfiguration0.setClientSecret("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase6);
    }

    @Test
    public void test40035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40035");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum();
        java.lang.String str1 = putBaseStandardReferenceDatum0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatum putBaseStandardReferenceDatum3 = putBaseStandardReferenceDatum0.setComments("MaxInstant");
        java.lang.Object obj4 = putBaseStandardReferenceDatum3.getResponseType();
        putBaseStandardReferenceDatum3.Method = "MaxInstant";
        putBaseStandardReferenceDatum3.Uncertainty = 100.0d;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatum3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
    }

    @Test
    public void test40036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40036");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.time.Instant instant1 = locationNote0.CreateTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription4 = locationDescription2.setIdentifier("");
        locationDescription4.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str8 = locationMonitoringMethod7.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod10 = locationMonitoringMethod7.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList12, tagMetadataArray11);
        locationMonitoringMethod10.Tags = tagMetadataList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription15 = locationDescription4.setTags(tagMetadataList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote16 = locationNote0.setTags(tagMetadataList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation();
        java.lang.String str18 = qualifierOperation17.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType19 = null;
        qualifierOperation17.OperationType = metadataChangeOperationType19;
        qualifierOperation17.User = "multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType23 = qualifierOperation17.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest26 = fieldVisitDescriptionListServiceRequest24.setLocationIdentifier("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.Boolean boolean27 = fieldVisitDescriptionListServiceRequest26.isIncludeInvalidFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary28.Reviewer = "";
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary28.MeasurementTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary28.BaseFlow = baseFlowType33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType35 = dischargeSummary28.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList37 = ratingModelDescriptionListServiceResponse36.RatingModelDescriptions;
        java.time.Instant instant38 = ratingModelDescriptionListServiceResponse36.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType40 = calibrationCheck39.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = calibrationCheck39.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary43.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse46.setNextToken(instant47);
        dischargeSummary43.MeasurementTime = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = locationDescriptionListServiceResponse42.setNextToken(instant47);
        java.time.Instant instant51 = locationDescriptionListServiceResponse42.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck52 = calibrationCheck39.setTime(instant51);
        java.time.Instant instant53 = calibrationCheck52.Time;
        ratingModelDescriptionListServiceResponse36.NextToken = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary28.setMeasurementEndTime(instant53);
        fieldVisitDescriptionListServiceRequest26.QueryTo = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation57 = qualifierOperation17.setDateAppliedUtc(instant53);
        locationNote16.CreateTimeUtc = instant53;
        locationNote16.TimeSeriesUniqueId = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(locationDescription4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locationMonitoringMethod10);
        org.junit.Assert.assertNotNull(tagMetadataArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locationDescription15);
        org.junit.Assert.assertNotNull(locationNote16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(metadataChangeOperationType23);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + baseFlowType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList37);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(calibrationCheckType40);
        org.junit.Assert.assertNull(doubleWithDisplay41);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(calibrationCheck52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(qualifierOperation57);
    }

    @Test
    public void test40037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40037");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter2 = parameter0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter4 = parameter2.setMinValue((java.lang.Double) 0.0d);
        parameter2.System = false;
        java.lang.Boolean boolean7 = parameter2.isSystem();
        java.lang.String str8 = parameter2.ParameterId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter10 = parameter2.setUnitGroupIdentifier("2021.8.9990");
        parameter2.ParameterId = "PT87591240H";
        org.junit.Assert.assertNotNull(parameter2);
        org.junit.Assert.assertNotNull(parameter4);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(parameter10);
    }

    @Test
    public void test40038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40038");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        postUnitGroupWithUnit0.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation3.setPlannedFieldResult(plannedFieldResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = null;
        observation5.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setStatistics(observationStatistics8);
        java.time.OffsetDateTime offsetDateTime10 = observation9.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = observation9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade14 = observation13.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        observation13.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit21 = postUnitGroupWithUnit0.setAuditAttributes(auditAttributes18);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList22 = postUnitGroupWithUnit21.Units;
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(resultGrade14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit21);
        org.junit.Assert.assertNull(unitList22);
    }

    @Test
    public void test40039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40039");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription3 = locationDescription1.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription5 = locationDescription3.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = reading6.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = reading6.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading11 = reading9.setModel("MaxInstant");
        java.lang.Integer int12 = reading11.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField16 = extendedAttributeField14.setDisplayName("");
        java.lang.Boolean boolean17 = extendedAttributeField16.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        getObservationsV2_26.DepthUnitCustomId = "hi!";
        java.lang.String str29 = getObservationsV2_26.CustomId;
        java.util.List<java.lang.String> strList30 = getObservationsV2_26.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_26.setMedia((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str48 = getObservationsV2_47.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        getObservationsV2_47.ProjectIds = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_26.setObservedPropertyIds((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest18.setTimeSeriesOutputUnitIds(strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField58 = extendedAttributeField16.setValueOptions((java.util.List<java.lang.String>) strList52);
        putBulkEditResultGradesV2_13.AnalysisMethodSimpleIds = strList52;
        reading11.ReadingQualifiers = strList52;
        locationDescription5.SecondaryFolders = strList52;
        sensorsAndGaugesServiceRequest0.TagKeys = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest64 = sensorsAndGaugesServiceRequest0.setLocationIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest67 = fieldVisitDataByLocationServiceRequest65.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray72 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = putLocationTags68.setTagUniqueIds(strList73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest76 = fieldVisitDataByLocationServiceRequest67.setParameters(strList73);
        java.util.ArrayList<java.lang.String> strList77 = fieldVisitDataByLocationServiceRequest76.getParameters();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest78 = sensorsAndGaugesServiceRequest64.setTagKeys(strList77);
        java.util.ArrayList<java.lang.String> strList79 = sensorsAndGaugesServiceRequest78.TagKeys;
        java.util.ArrayList<java.lang.String> strList80 = sensorsAndGaugesServiceRequest78.LocationUniqueIds;
        java.util.ArrayList<java.lang.String> strList81 = sensorsAndGaugesServiceRequest78.TagKeys;
        java.util.ArrayList<java.lang.String> strList82 = sensorsAndGaugesServiceRequest78.getTagValues();
        org.junit.Assert.assertNotNull(locationDescription3);
        org.junit.Assert.assertNotNull(locationDescription5);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNotNull(reading9);
        org.junit.Assert.assertNotNull(reading11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(extendedAttributeField16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
        org.junit.Assert.assertNotNull(extendedAttributeField58);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest64);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest67);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(putLocationTags75);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNull(strList82);
    }

    @Test
    public void test40040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40040");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        java.lang.String str2 = postSpecimen0.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails5.setAuditAttributes(auditAttributes6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        java.lang.String str11 = laboratory8.PhoneNumber;
        java.lang.String str12 = laboratory8.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails5.setLaboratory(laboratory8);
        java.lang.String str14 = laboratory8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen15 = postSpecimen0.setLaboratory(laboratory8);
        postSpecimen15.FiltrationComment = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        java.lang.String str19 = putSpecimen18.Description;
        java.lang.String str20 = putSpecimen18.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate21.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = specimenTemplate21.setId("hi!");
        java.lang.Boolean boolean26 = specimenTemplate25.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen27 = putSpecimen18.setTemplateCreatedFrom(specimenTemplate25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen28 = postSpecimen15.setTemplateCreatedFrom(specimenTemplate25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType29 = postSpecimen28.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = postSamplingLocationGroup30.getAuditAttributes();
        postSamplingLocationGroup30.Id = "POST";
        postSamplingLocationGroup30.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup37 = postSamplingLocationGroup30.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = auditAttributes38.setCreationUserProfileId("'.'SSSSSSS");
        postSamplingLocationGroup30.AuditAttributes = auditAttributes40;
        postSpecimen28.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = specimenTemplate43.setAnalyticalGroup(analyticalGroup44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        java.lang.String str57 = analyticalGroupItem52.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = analyticalGroupItem58.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem58.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = analyticalGroupItem61.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem63.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod65 = analyticalGroupItem63.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = null;
        analyticalGroupItem63.AnalysisMethod = analysisMethod66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem47, analyticalGroupItem49, analyticalGroupItem52, analyticalGroupItem58, analyticalGroupItem61, analyticalGroupItem63 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList69 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList69, analyticalGroupItemArray68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup71 = analyticalGroup46.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList69);
        specimenTemplate43.AnalyticalGroup = analyticalGroup71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType73 = analyticalGroup71.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType74 = analyticalGroup71.Type;
        java.lang.Integer int75 = analyticalGroup71.NumberOfObservedPropertiesInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen76 = postSpecimen28.setAnalyticalGroup(analyticalGroup71);
        java.lang.String str77 = postSpecimen76.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen79 = postSpecimen76.setFiltrationComment("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MaxInstant" + "'", str14, "MaxInstant");
        org.junit.Assert.assertNotNull(postSpecimen15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(specimenTemplate25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(putSpecimen27);
        org.junit.Assert.assertNotNull(postSpecimen28);
        org.junit.Assert.assertNull(specimenViewStatusType29);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup37);
        org.junit.Assert.assertNotNull(auditAttributes40);
        org.junit.Assert.assertNotNull(specimenTemplate45);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(analysisMethod59);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod62);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(analysisMethod65);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(analyticalGroup71);
        org.junit.Assert.assertNull(analyticalGroupType73);
        org.junit.Assert.assertNull(analyticalGroupType74);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(postSpecimen76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(postSpecimen79);
    }

    @Test
    public void test40041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40041");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesMetadataResponse postTimeSeriesMetadataResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesMetadataResponse();
        postTimeSeriesMetadataResponse0.NotesCreated = 10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesMetadataResponse postTimeSeriesMetadataResponse4 = postTimeSeriesMetadataResponse0.setNotesCreated((java.lang.Integer) 5);
        org.junit.Assert.assertNotNull(postTimeSeriesMetadataResponse4);
    }

    @Test
    public void test40042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40042");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList6, importItemObservedPropertyArray5);
        observedPropertyImportSummary0.ErrorImportItems = importItemObservedPropertyList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary10 = observedPropertyImportSummary0.setSuccessCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList11 = observedPropertyImportSummary10.getErrorImportItems();
        observedPropertyImportSummary10.SkippedCount = 10;
        observedPropertyImportSummary10.ExpectedCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary17 = observedPropertyImportSummary10.setNewCount((java.lang.Integer) 5);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary10);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList11);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary17);
    }

    @Test
    public void test40043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40043");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark19 = locationRemark17.setDescription("MaxInstant");
        java.lang.String str20 = locationRemark19.getTypeName();
        java.time.Instant instant21 = locationRemark19.CreateTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str23 = getChartDataV2_22.getActivityCustomId();
        java.util.List<java.lang.String> strList24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_25 = getChartDataV2_22.setSearch(strList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_26.setDataClassifications((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = getObservationsV2_26.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary34.Reviewer = "";
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary34.MeasurementTime = instant37;
        getObservationsV2_26.StartResultTime = instant37;
        java.lang.String[] strArray49 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_26.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription55 = locationDescription53.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType57 = null;
        controlConditionActivity56.ControlCleaned = controlCleanedType57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        controlConditionActivity56.DateCleaned = instant60;
        locationDescription55.LastModified = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_52.setStartResultTime(instant60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = getChartDataV2_22.setEndObservedTime(instant60);
        locationRemark19.CreateTime = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations67 = getExportObservations0.setEndModificationTime(instant60);
        java.time.Instant instant68 = getExportObservations67.getStartModificationTime();
        getExportObservations67.FilterId = "http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNotNull(locationRemark19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(getChartDataV2_25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNotNull(locationDescription55);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(getChartDataV2_65);
        org.junit.Assert.assertNotNull(getExportObservations67);
        org.junit.Assert.assertNull(instant68);
    }

    @Test
    public void test40044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40044");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = schedule4.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        postSchedule6.Id = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SUNDAY;
        postSchedule6.RecurrenceDayWeekly = recurrenceDayWeeklyType9;
        java.time.OffsetDateTime offsetDateTime11 = postSchedule6.getEndDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup12 = null;
        postSchedule6.SamplingLocationGroup = samplingLocationGroup12;
        java.lang.String str14 = postSchedule6.getId();
        java.time.OffsetDateTime offsetDateTime15 = postSchedule6.EndDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType16 = postSchedule6.getRecurrenceDayWeekly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule17 = schedule4.setRecurrenceDayWeekly(recurrenceDayWeeklyType16);
        java.time.OffsetDateTime offsetDateTime18 = schedule4.StartDate;
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SUNDAY + "'", recurrenceDayWeeklyType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SUNDAY));
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str14, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SUNDAY + "'", recurrenceDayWeeklyType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SUNDAY));
        org.junit.Assert.assertNotNull(schedule17);
        org.junit.Assert.assertNull(offsetDateTime18);
    }

    @Test
    public void test40045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40045");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str1 = unitMetadata0.getBaseOffset();
        java.lang.String str2 = unitMetadata0.UniqueId;
        java.lang.String str3 = unitMetadata0.BaseMultiplier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata5 = unitMetadata0.setGroupIdentifier("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata7 = unitMetadata0.setBaseMultiplier("9999-12-31T23:59:59.9999999Z");
        unitMetadata7.BaseMultiplier = "PT87591240H";
        java.lang.String str10 = unitMetadata7.BaseOffset;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(unitMetadata5);
        org.junit.Assert.assertNotNull(unitMetadata7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test40046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40046");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.Object obj1 = importChangeItem0.getRight();
        java.lang.String str2 = importChangeItem0.getPropertyName();
        importChangeItem0.PropertyName = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier7 = putQualifier5.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        getObservationsV2_14.DepthUnitCustomId = "hi!";
        java.lang.String str17 = getObservationsV2_14.CustomId;
        java.util.List<java.lang.String> strList18 = getObservationsV2_14.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_14.setMedia((java.util.List<java.lang.String>) strList30);
        putQualifier5.GroupIdentifiers = strList30;
        importChangeItem0.Left = putQualifier5;
        java.lang.String str37 = putQualifier5.getUniqueId();
        java.util.ArrayList<java.lang.String> strList38 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier39 = putQualifier5.setGroupIdentifiers(strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities42 = deleteActivities40.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        java.time.Instant instant51 = getObservationsV2_44.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.QualityControlTypes = strList64;
        java.util.List<java.lang.String> strList68 = getObservationsV2_53.getLabReportIds();
        importItem52.Errors = getObservationsV2_53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList71 = getObservationsV2_70.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        getObservationsV2_72.SpecimenIds = strList75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray82 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags85 = putLocationTags78.setTagUniqueIds(strList83);
        getObservationsV2_72.QualityControlTypes = strList83;
        getObservationsV2_70.ResultGrades = strList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem88 = importItem52.setFields((java.util.List<java.lang.String>) strList83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_89 = getObservationsV2_44.setSearch((java.util.List<java.lang.String>) strList83);
        importItemSamplingLocation43.Fields = strList83;
        deleteActivities40.Media = strList83;
        putQualifier5.GroupIdentifiers = strList83;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putQualifier7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(putQualifier39);
        org.junit.Assert.assertNotNull(deleteActivities42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(putLocationTags85);
        org.junit.Assert.assertNotNull(importItem88);
        org.junit.Assert.assertNotNull(getObservationsV2_89);
    }

    @Test
    public void test40047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40047");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setNumber((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute4 = extendedAttribute0.setNumber((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute6 = extendedAttribute0.setAttributeId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str9 = postFieldVisitActivityWithTemplate8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate11 = postFieldVisitActivityWithTemplate8.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = plannedFieldResult12.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = labResultDetails16.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult19 = plannedFieldResult12.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType21 = analyticalGroup20.getType();
        analyticalGroup20.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = null;
        analyticalGroupItem30.AnalysisMethod = analysisMethod33;
        java.lang.String str35 = analyticalGroupItem30.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem25, analyticalGroupItem27, analyticalGroupItem30, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47, analyticalGroupItemArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup49 = analyticalGroup24.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47);
        analyticalGroup20.AnalyticalGroupItems = analyticalGroupItemList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup20.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult53 = plannedFieldResult19.setAuditAttributes(auditAttributes51);
        postFieldVisitActivityWithTemplate11.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport55 = postLabReport7.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = putDetectioncondition56.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition59 = putDetectioncondition56.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity62 = samplingPlanPlannedActivity60.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = auditAttributes63.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity62.AuditAttributes = auditAttributes63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = samplingPlanPlannedActivity62.AuditAttributes;
        putDetectioncondition56.AuditAttributes = auditAttributes67;
        postLabReport7.AuditAttributes = auditAttributes67;
        extendedAttribute6.AuditAttributes = auditAttributes67;
        java.lang.String str71 = extendedAttribute6.Id;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(extendedAttribute4);
        org.junit.Assert.assertNotNull(extendedAttribute6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate11);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(labResultDetails18);
        org.junit.Assert.assertNotNull(plannedFieldResult19);
        org.junit.Assert.assertNull(analyticalGroupType21);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(analyticalGroup49);
        org.junit.Assert.assertNotNull(plannedFieldResult53);
        org.junit.Assert.assertNotNull(postLabReport55);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNotNull(putDetectioncondition59);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity62);
        org.junit.Assert.assertNotNull(auditAttributes65);
        org.junit.Assert.assertNotNull(auditAttributes67);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test40048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40048");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade();
        searchResultResultGrade0.TotalCount = 4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade4 = searchResultResultGrade0.setCursor("ZZZZZ");
        java.lang.String str5 = searchResultResultGrade0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade7 = searchResultResultGrade0.setCursor("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade9 = searchResultResultGrade7.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade11 = searchResultResultGrade9.setCursor("");
        org.junit.Assert.assertNotNull(searchResultResultGrade4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ZZZZZ" + "'", str5, "ZZZZZ");
        org.junit.Assert.assertNotNull(searchResultResultGrade7);
        org.junit.Assert.assertNotNull(searchResultResultGrade9);
        org.junit.Assert.assertNotNull(searchResultResultGrade11);
    }

    @Test
    public void test40049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40049");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork2 = completedWork0.setGroundWaterLevelPerformed((java.lang.Boolean) false);
        completedWork0.SafetyInspectionPerformed = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork6 = completedWork0.setLevelsPerformed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork8 = completedWork0.setCollectionAgency("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNotNull(completedWork2);
        org.junit.Assert.assertNotNull(completedWork6);
        org.junit.Assert.assertNotNull(completedWork8);
    }

    @Test
    public void test40050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40050");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField3 = extendedAttributeField1.setDisplayName("");
        java.lang.Boolean boolean4 = extendedAttributeField3.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str35 = getObservationsV2_34.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        getObservationsV2_34.ProjectIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_13.setObservedPropertyIds((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest5.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField3.setValueOptions((java.util.List<java.lang.String>) strList39);
        putBulkEditResultGradesV2_0.AnalysisMethodSimpleIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_48 = putBulkEditResultGradesV2_0.setNumericResultValue((java.lang.Double) (-1.0d));
        java.lang.String str49 = putBulkEditResultGradesV2_48.getDepthUnitId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.time.Instant instant51 = getExportObservations50.getStartModificationTime();
        getExportObservations50.FieldVisitId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList55 = getSpecimens54.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType57 = putUserV2_56.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = dischargeSummary60.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant64 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = locationDescriptionListServiceResponse63.setNextToken(instant64);
        dischargeSummary60.MeasurementTime = instant64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = locationDescriptionListServiceResponse59.setNextToken(instant64);
        java.time.Instant instant68 = locationDescriptionListServiceResponse59.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities69 = getActivities58.setToStartTime(instant68);
        java.lang.String str70 = getActivities69.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList72 = getObservationsV2_71.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        getObservationsV2_73.SpecimenIds = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray83 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags86 = putLocationTags79.setTagUniqueIds(strList84);
        getObservationsV2_73.QualityControlTypes = strList84;
        getObservationsV2_71.ResultGrades = strList84;
        getActivities69.Media = strList84;
        putUserV2_56.AccessGroups = strList84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens91 = getSpecimens54.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList84);
        getExportObservations50.ObservedPropertyIds = strList84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_93 = putBulkEditResultGradesV2_48.setResultGrades((java.util.List<java.lang.String>) strList84);
        java.util.List<java.lang.String> strList94 = putBulkEditResultGradesV2_48.getSamplingLocationGroupIds();
        org.junit.Assert.assertNotNull(extendedAttributeField3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(userType57);
        org.junit.Assert.assertNotNull(dischargeSummary62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse65);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(getActivities69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(putLocationTags86);
        org.junit.Assert.assertNotNull(getSpecimens91);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_93);
        org.junit.Assert.assertNull(strList94);
    }

    @Test
    public void test40051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40051");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod3 = locationMonitoringMethod0.setParameter("MinDuration");
        locationMonitoringMethod3.Parameter = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory7 = attachment6.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment9 = attachment6.setFileName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription12 = locationDescription10.setIdentifier("");
        locationDescription12.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str16 = locationMonitoringMethod15.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod18 = locationMonitoringMethod15.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList20, tagMetadataArray19);
        locationMonitoringMethod18.Tags = tagMetadataList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription23 = locationDescription12.setTags(tagMetadataList20);
        attachment9.Tags = tagMetadataList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod25 = locationMonitoringMethod3.setTags(tagMetadataList20);
        java.lang.String str26 = locationMonitoringMethod25.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod28 = locationMonitoringMethod25.setMethod("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod30 = locationMonitoringMethod25.setParameterId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod32 = locationMonitoringMethod25.setUniqueId("");
        locationMonitoringMethod32.MethodCode = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationMonitoringMethod3);
        org.junit.Assert.assertNull(attachmentCategory7);
        org.junit.Assert.assertNotNull(attachment9);
        org.junit.Assert.assertNotNull(locationDescription12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locationMonitoringMethod18);
        org.junit.Assert.assertNotNull(tagMetadataArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locationDescription23);
        org.junit.Assert.assertNotNull(locationMonitoringMethod25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locationMonitoringMethod28);
        org.junit.Assert.assertNotNull(locationMonitoringMethod30);
        org.junit.Assert.assertNotNull(locationMonitoringMethod32);
    }

    @Test
    public void test40052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40052");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResult searchResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResult();
        java.lang.Integer int1 = searchResult0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResult searchResult3 = searchResult0.setCursor("ZZZZZ");
        java.lang.Integer int4 = searchResult0.TotalCount;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResult3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test40053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40053");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = reading6.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = reading6.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading11 = reading9.setModel("MaxInstant");
        java.lang.Integer int12 = reading11.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField16 = extendedAttributeField14.setDisplayName("");
        java.lang.Boolean boolean17 = extendedAttributeField16.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        getObservationsV2_26.DepthUnitCustomId = "hi!";
        java.lang.String str29 = getObservationsV2_26.CustomId;
        java.util.List<java.lang.String> strList30 = getObservationsV2_26.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_26.setMedia((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str48 = getObservationsV2_47.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        getObservationsV2_47.ProjectIds = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_26.setObservedPropertyIds((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest18.setTimeSeriesOutputUnitIds(strList52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField58 = extendedAttributeField16.setValueOptions((java.util.List<java.lang.String>) strList52);
        putBulkEditResultGradesV2_13.AnalysisMethodSimpleIds = strList52;
        reading11.ReadingQualifiers = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty61 = importItemObservedProperty5.setFields((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty5 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList63, importItemObservedPropertyArray62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary65 = observedPropertyImportSummary0.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary67 = observedPropertyImportSummary65.setSuccessCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary68.UpdateCount = (-1);
        java.lang.Integer int71 = observationImportSummary68.ExpectedCount;
        java.lang.String str72 = observationImportSummary68.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList74 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList74, importErrorArray73);
        observationImportSummary68.ImportJobErrors = importErrorList74;
        observedPropertyImportSummary65.ImportJobErrors = importErrorList74;
        observedPropertyImportSummary65.SkippedCount = 0;
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNotNull(reading9);
        org.junit.Assert.assertNotNull(reading11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(extendedAttributeField16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
        org.junit.Assert.assertNotNull(extendedAttributeField58);
        org.junit.Assert.assertNotNull(importItemObservedProperty61);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary65);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary67);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(importErrorArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test40054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40054");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList9, schedulePlannedActivityArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule7.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule13 = schedule11.setSamplingLocationGroup(samplingLocationGroup12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule15 = schedule13.setRecurrenceDayMonthly(recurrenceDayMonthlyType14);
        putSchedule3.RecurrenceDayMonthly = recurrenceDayMonthlyType14;
        java.time.OffsetDateTime offsetDateTime17 = putSchedule3.getStartDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType18 = putSchedule3.RecurrenceType;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(schedule11);
        org.junit.Assert.assertNotNull(schedule13);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(schedule15);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNull(recurrenceType18);
    }

    @Test
    public void test40055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40055");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.lang.String str3 = getExportObservations0.DetectionCondition;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = getExportObservations0.setDepthUnitCustomId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        java.lang.Double double6 = getExportObservations5.getNumericResultValue();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getExportObservations5);
        org.junit.Assert.assertNull(double6);
    }

    @Test
    public void test40056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40056");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList5 = getExportObservations0.getSpecimenIds();
        getExportObservations0.MinNumericResultValue = 100.0d;
        java.lang.Double double8 = getExportObservations0.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities9.Limit = 10;
        java.util.List<java.lang.String> strList12 = getActivities9.ActivityTemplateId;
        java.lang.String str13 = getActivities9.Sort;
        java.util.List<java.lang.String> strList14 = getActivities9.CollectionMethodIds;
        java.lang.String str15 = getActivities9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType18 = putUserV2_17.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities30 = getActivities19.setToStartTime(instant29);
        java.lang.String str31 = getActivities30.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList33 = getObservationsV2_32.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        getObservationsV2_32.ResultGrades = strList45;
        getActivities30.Media = strList45;
        putUserV2_17.AccessGroups = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens52 = getSpecimens16.setSamplingLocationIds((java.util.List<java.lang.String>) strList45);
        getActivities9.ActivityTemplateId = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations54 = getExportObservations0.setProjectIds((java.util.List<java.lang.String>) strList45);
        java.util.List<java.lang.String> strList55 = getExportObservations54.ActivityTypes;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(userType18);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(getActivities30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getSpecimens52);
        org.junit.Assert.assertNotNull(getExportObservations54);
        org.junit.Assert.assertNull(strList55);
    }

    @Test
    public void test40057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40057");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        java.lang.String str5 = pointVelocityDischargeActivity0.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType8 = dischargeChannelMeasurement7.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = dischargeChannelMeasurement7.Discharge;
        java.time.Instant instant10 = dischargeChannelMeasurement7.EndTime;
        dischargeChannelMeasurement7.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str13 = dischargeChannelMeasurement7.Channel;
        dischargeChannelMeasurement7.Channel = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement17 = dischargeChannelMeasurement7.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = locationRemark18.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark23 = locationRemark21.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        locationRemark23.FromTime = instant25;
        locationRemark20.CreateTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement29 = dischargeChannelMeasurement17.setEndTime(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity30 = volumetricDischargeActivity6.setDischargeChannelMeasurement(dischargeChannelMeasurement17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay31 = volumetricDischargeActivity30.getMeasurementContainerVolume();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = pointVelocityDischargeActivity32.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity32.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity38 = pointVelocityDischargeActivity32.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity40 = pointVelocityDischargeActivity38.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = null;
        crossSectionPoint41.Distance = quantityWithDisplay42;
        crossSectionPoint41.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = crossSectionPoint41.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint48 = crossSectionPoint41.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint50 = crossSectionPoint48.setElevation(quantityWithDisplay49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = null;
        crossSectionPoint50.Depth = quantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint50.Depth = datumConvertedQuantityWithDisplay53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = crossSectionPoint50.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity56 = pointVelocityDischargeActivity38.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity57 = volumetricDischargeActivity30.setMeasurementContainerVolume(quantityWithDisplay55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = volumetricDischargeActivity57.MeasurementContainerVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay59 = volumetricDischargeActivity57.MeasurementContainerVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity60 = pointVelocityDischargeActivity0.setWidth(quantityWithDisplay59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay61 = pointVelocityDischargeActivity0.MeanObservationDurationInSeconds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay62 = pointVelocityDischargeActivity0.MeanObservationDurationInSeconds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(channelMaterialType8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str13, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement17);
        org.junit.Assert.assertNotNull(locationRemark20);
        org.junit.Assert.assertNotNull(locationRemark23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement29);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity30);
        org.junit.Assert.assertNull(quantityWithDisplay31);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity34);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity38);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity40);
        org.junit.Assert.assertNull(quantityWithDisplay46);
        org.junit.Assert.assertNotNull(crossSectionPoint48);
        org.junit.Assert.assertNotNull(crossSectionPoint50);
        org.junit.Assert.assertNotNull(quantityWithDisplay55);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity56);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity57);
        org.junit.Assert.assertNotNull(quantityWithDisplay58);
        org.junit.Assert.assertNotNull(quantityWithDisplay59);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity60);
        org.junit.Assert.assertNull(doubleWithDisplay61);
        org.junit.Assert.assertNull(doubleWithDisplay62);
    }

    @Test
    public void test40058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40058");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        getObservationsV2_0.ResultGrades = strList13;
        java.lang.Double double18 = getObservationsV2_0.getMinNumericResultValue();
        java.util.List<java.lang.String> strList19 = getObservationsV2_0.getQualityControlTypes();
        getObservationsV2_0.DepthUnitId = "/AQUARIUS";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(strList19);
    }

    @Test
    public void test40059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40059");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str2 = getChartDataV2_1.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_1.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = getChartDataV2_4.setMinNumericResultValue((java.lang.Double) 1.0d);
        java.util.List<java.lang.String> strList7 = getChartDataV2_6.getSpecimenIds();
        java.time.Instant instant8 = getChartDataV2_6.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType11 = putUserV2_10.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        dischargeSummary14.MeasurementTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse13.setNextToken(instant18);
        java.time.Instant instant22 = locationDescriptionListServiceResponse13.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = getActivities12.setToStartTime(instant22);
        java.lang.String str24 = getActivities23.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList26 = getObservationsV2_25.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        getObservationsV2_25.ResultGrades = strList38;
        getActivities23.Media = strList38;
        putUserV2_10.AccessGroups = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens45 = getSpecimens9.setSamplingLocationIds((java.util.List<java.lang.String>) strList38);
        getChartDataV2_6.LabResultLabAnalysisMethodIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        getObservationsV2_54.DepthUnitCustomId = "hi!";
        java.lang.String str57 = getObservationsV2_54.DepthUnitId;
        java.util.List<java.lang.String> strList58 = getObservationsV2_54.LabResultLaboratoryIds;
        getObservationsV2_54.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int61 = getObservationsV2_54.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray73 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = putLocationTags69.setTagUniqueIds(strList74);
        getObservationsV2_63.QualityControlTypes = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest62.setTimeSeriesUniqueIds(strList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_54.setSamplingLocationIds((java.util.List<java.lang.String>) strList74);
        putUser47.Roles = strList74;
        getChartDataV2_6.AnalysisMethodSimpleIds = strList74;
        deleteObservationsV2_0.AnalyticalGroupIds = strList74;
        java.lang.String str83 = deleteObservationsV2_0.getDepthUnitId();
        java.lang.String str84 = deleteObservationsV2_0.getFieldVisitId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_86 = deleteObservationsV2_0.setCursor("http://MaxDurationhttp/json/reply/ArrayList");
        java.util.List<java.lang.String> strList87 = deleteObservationsV2_86.getLabResultLaboratoryIds();
        java.util.List<java.lang.String> strList88 = deleteObservationsV2_86.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNotNull(getChartDataV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(userType11);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(getActivities23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getSpecimens45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(putLocationTags76);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(deleteObservationsV2_86);
        org.junit.Assert.assertNull(strList87);
        org.junit.Assert.assertNull(strList88);
    }

    @Test
    public void test40060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40060");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setSegmentVelocity(quantityWithDisplay1);
        java.lang.Double double3 = vertical0.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = vertical0.getEffectiveDepth();
        java.lang.Double double5 = vertical0.CosineOfUniqueFlow;
        java.lang.String str6 = vertical0.getComments();
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test40061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40061");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutCredentialsAuth putCredentialsAuth0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutCredentialsAuth();
        java.lang.Object obj1 = putCredentialsAuth0.getResponseType();
        java.lang.String str2 = putCredentialsAuth0.Password;
        java.lang.String str3 = putCredentialsAuth0.Password;
        java.lang.String str4 = putCredentialsAuth0.Password;
        putCredentialsAuth0.Password = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        java.lang.String str7 = putCredentialsAuth0.UniqueId;
        java.lang.Object obj8 = putCredentialsAuth0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
    }

    @Test
    public void test40062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40062");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long2 = roleApprovalTransition1.getToApprovalLevel();
        java.lang.Long long3 = roleApprovalTransition1.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long5 = roleApprovalTransition4.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition8 = roleApprovalTransition6.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition13 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long15 = roleApprovalTransition14.getToApprovalLevel();
        java.lang.Long long16 = roleApprovalTransition14.ToApprovalLevel;
        java.lang.Long long17 = roleApprovalTransition14.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long19 = roleApprovalTransition18.getToApprovalLevel();
        java.lang.Long long20 = roleApprovalTransition18.ToApprovalLevel;
        java.lang.Long long21 = roleApprovalTransition18.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition1, roleApprovalTransition4, roleApprovalTransition8, roleApprovalTransition9, roleApprovalTransition14, roleApprovalTransition18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList23, roleApprovalTransitionArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase25 = postRole0.setRoleApprovalTransitions(roleApprovalTransitionList23);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList26 = postRole0.RoleApprovalTransitions;
        java.lang.Boolean boolean27 = postRole0.isCanAssignUserRoles();
        postRole0.CanAddOrRemoveLocations = false;
        java.lang.Boolean boolean30 = postRole0.CanEditLocationDetails;
        java.lang.Boolean boolean31 = postRole0.CanEditAppendConfigurations;
        org.junit.Assert.assertNull(long2);
        org.junit.Assert.assertNull(long3);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNotNull(roleApprovalTransition8);
        org.junit.Assert.assertNotNull(roleApprovalTransition11);
        org.junit.Assert.assertNotNull(roleApprovalTransition13);
        org.junit.Assert.assertNull(long15);
        org.junit.Assert.assertNull(long16);
        org.junit.Assert.assertNull(long17);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long21);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(roleBase25);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(boolean31);
    }

    @Test
    public void test40063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40063");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.String str1 = putBulkEditResultGradesV2_0.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_3 = putBulkEditResultGradesV2_0.setDepthUnitId("http");
        java.util.List<java.lang.String> strList4 = putBulkEditResultGradesV2_0.AnalysisMethodSimpleIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList6 = ratingModelDescriptionListServiceResponse5.RatingModelDescriptions;
        java.time.Instant instant7 = ratingModelDescriptionListServiceResponse5.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType9 = calibrationCheck8.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = calibrationCheck8.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary12.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        dischargeSummary12.MeasurementTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse11.setNextToken(instant16);
        java.time.Instant instant20 = locationDescriptionListServiceResponse11.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck21 = calibrationCheck8.setTime(instant20);
        java.time.Instant instant22 = calibrationCheck21.Time;
        ratingModelDescriptionListServiceResponse5.NextToken = instant22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_24 = putBulkEditResultGradesV2_0.setStartObservedTime(instant22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.time.Instant instant26 = getObservationExportIIV2_25.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str28 = getChartDataV2_27.getActivityCustomId();
        java.lang.String str29 = getChartDataV2_27.DepthUnitId;
        getChartDataV2_27.MinNumericResultValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList35 = getObservationsV2_34.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        getObservationsV2_34.ResultGrades = strList47;
        getExtendedAttributeDropdownlistitems33.Search = strList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult53 = metricResult32.setMatchedObservations((java.util.List<java.lang.String>) strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult55 = metricResult53.setOverriddenByUser((java.lang.Boolean) false);
        java.util.List<java.lang.String> strList56 = metricResult53.MatchedObservations;
        java.util.List<java.lang.String> strList57 = metricResult53.MatchedObservations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_27.setCollectionMethodIds(strList57);
        getObservationExportIIV2_25.LabReportIds = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_60 = putBulkEditResultGradesV2_24.setAnalyticalGroupIds(strList57);
        java.util.List<java.lang.String> strList61 = putBulkEditResultGradesV2_60.getDataClassifications();
        java.util.List<java.lang.String> strList62 = putBulkEditResultGradesV2_60.Ids;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(ratingModelDescriptionList6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(calibrationCheckType9);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(calibrationCheck21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_24);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(metricResult53);
        org.junit.Assert.assertNotNull(metricResult55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNull(strList62);
    }

    @Test
    public void test40064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40064");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan3.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime6 = samplingPlan3.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit9 = putUnitGroupWithUnit7.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType10 = putUnitGroupWithUnit7.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity14 = samplingPlanPlannedActivity12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = auditAttributes15.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity14.AuditAttributes = auditAttributes15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = samplingPlanPlannedActivity14.AuditAttributes;
        putAccessGroup11.AuditAttributes = auditAttributes19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit21 = putUnitGroupWithUnit7.setAuditAttributes(auditAttributes19);
        samplingPlan3.AuditAttributes = auditAttributes19;
        java.time.OffsetDateTime offsetDateTime23 = null;
        auditAttributes19.ModificationTime = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails0.setAuditAttributes(auditAttributes19);
        java.lang.String str26 = labResultDetails25.LabSampleId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory28.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory32 = laboratory28.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport33 = labReport27.setLaboratory(laboratory32);
        java.lang.String str34 = labReport33.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport36 = labReport33.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport38 = labReport33.setLaboratory(laboratory37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport40 = labReport33.setCaseNarrative("-PT87591240H");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList41 = labReport33.getAttachments();
        java.lang.String str42 = labReport33.getCaseNarrative();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory43 = labReport33.Laboratory;
        java.lang.String str44 = labReport33.QcSummary;
        labResultDetails25.LabReport = labReport33;
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit9);
        org.junit.Assert.assertNull(unitGroupSystemCodeType10);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity14);
        org.junit.Assert.assertNotNull(auditAttributes17);
        org.junit.Assert.assertNotNull(auditAttributes19);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit21);
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(laboratory32);
        org.junit.Assert.assertNotNull(labReport33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(labReport36);
        org.junit.Assert.assertNotNull(labReport38);
        org.junit.Assert.assertNotNull(labReport40);
        org.junit.Assert.assertNull(domainObjectAttachmentList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-PT87591240H" + "'", str42, "-PT87591240H");
        org.junit.Assert.assertNull(laboratory43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test40065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40065");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase35 = locationDatumPeriod33.setComment("'.'SSSSSSS");
        java.lang.Double double36 = locationDatumPeriodBase35.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant38 = qualifier37.DateApplied;
        java.lang.String str39 = qualifier37.User;
        java.lang.String str40 = qualifier37.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj42 = timeAlignedDataServiceRequest41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = timeAlignedDataServiceRequest41.setQueryFrom(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = qualifier37.setDateApplied(instant44);
        java.time.Instant instant48 = qualifier47.getDateApplied();
        locationDatumPeriodBase35.ValidFrom = instant48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = putBulkEditResultGradesV2_32.setStartModificationTime(instant48);
        java.lang.String str51 = putBulkEditResultGradesV2_32.getCustomId();
        java.time.Instant instant52 = putBulkEditResultGradesV2_32.getEndObservedTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj54 = timeAlignedDataServiceRequest53.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant56 = sensor55.getLastModifiedUtc();
        java.time.Instant instant57 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor58 = sensor55.setLastModifiedUtc(instant57);
        java.time.Instant instant59 = sensor55.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest60 = timeAlignedDataServiceRequest53.setQueryTo(instant59);
        putBulkEditResultGradesV2_32.EndObservedTime = instant59;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase35);
        org.junit.Assert.assertNull(double36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest46);
        org.junit.Assert.assertNotNull(qualifier47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(sensor58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest60);
    }

    @Test
    public void test40066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40066");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postFieldVisitActivityWithTemplate0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate3 = postFieldVisitActivityWithTemplate0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList4 = postFieldVisitActivityWithTemplate3.getSpecimenTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = postFieldVisitActivityWithTemplate3.AuditAttributes;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate3);
        org.junit.Assert.assertNull(specimenTemplateList4);
        org.junit.Assert.assertNull(auditAttributes5);
    }

    @Test
    public void test40067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40067");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPhoneNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory4 = putLaboratory2.setPhoneNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = putLaboratory4.getCustomId();
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNotNull(putLaboratory4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test40068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40068");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.AssemblyName = "";
        java.lang.Boolean boolean3 = reportPlugin0.IsEnabled;
        java.lang.String str4 = reportPlugin0.UniqueId;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test40069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40069");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription2 = ratingModelDescription0.setIdentifier("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription4 = ratingModelDescription0.setLocationIdentifier("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        ratingModelDescription0.TemplateName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription8 = ratingModelDescription0.setLocationIdentifier("9999-12-31T23:59:59.999Z");
        java.lang.String str9 = ratingModelDescription0.getDescription();
        org.junit.Assert.assertNotNull(ratingModelDescription2);
        org.junit.Assert.assertNotNull(ratingModelDescription4);
        org.junit.Assert.assertNotNull(ratingModelDescription8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test40070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40070");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType2 = postActivityTemplate0.getMedium();
        postActivityTemplate0.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = null;
        postActivityTemplate0.Depth = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate8 = postActivityTemplate0.setCustomId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        java.lang.String str9 = postActivityTemplate0.getId();
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNull(mediumType2);
        org.junit.Assert.assertNotNull(postActivityTemplate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "POST" + "'", str9, "POST");
    }

    @Test
    public void test40071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40071");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.util.List<java.lang.String> strList1 = postUser0.Roles;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser3 = postUser0.setEmail("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser5 = postUser0.setUserProfile(userProfile4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser7 = postUser5.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.lang.String str8 = postUser7.Email;
        java.lang.String str9 = postUser7.CustomId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postUser3);
        org.junit.Assert.assertNotNull(postUser5);
        org.junit.Assert.assertNotNull(postUser7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS" + "'", str8, "/AQUARIUS");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str9, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
    }

    @Test
    public void test40072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40072");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int1 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList2 = getFieldVisits0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType5 = putUserV2_4.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary8.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        dischargeSummary8.MeasurementTime = instant12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse7.setNextToken(instant12);
        java.time.Instant instant16 = locationDescriptionListServiceResponse7.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities17 = getActivities6.setToStartTime(instant16);
        java.lang.String str18 = getActivities17.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList20 = getObservationsV2_19.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.QualityControlTypes = strList32;
        getObservationsV2_19.ResultGrades = strList32;
        getActivities17.Media = strList32;
        putUserV2_4.AccessGroups = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens39 = getSpecimens3.setSamplingLocationIds((java.util.List<java.lang.String>) strList32);
        getFieldVisits0.PlanningStatuses = strList32;
        java.util.List<java.lang.String> strList41 = getFieldVisits0.getFieldTripIds();
        java.time.Instant instant42 = getFieldVisits0.EndStartTime;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(userType5);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(getActivities17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(getSpecimens39);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(instant42);
    }

    @Test
    public void test40073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40073");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen2.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = putSpecimen2.getShippingContainer();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen6 = putSpecimen2.setName("'.'SSSSSSS");
        java.lang.String str7 = putSpecimen2.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType9 = analyticalGroup8.getType();
        analyticalGroup8.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = analyticalGroup8.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        analyticalGroup8.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen16 = putSpecimen2.setAnalyticalGroup(analyticalGroup8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = putSpecimen2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory18.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory22 = laboratory18.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = laboratory22.AuditAttributes;
        java.lang.String str24 = laboratory22.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory26 = laboratory22.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen27 = putSpecimen2.setLaboratory(laboratory22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer28 = putSpecimen27.ShippingContainer;
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(shippingContainer4);
        org.junit.Assert.assertNotNull(putSpecimen6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(analyticalGroupType9);
        org.junit.Assert.assertNotNull(analyticalGroup13);
        org.junit.Assert.assertNotNull(putSpecimen16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(laboratory22);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MaxInstant" + "'", str24, "MaxInstant");
        org.junit.Assert.assertNotNull(laboratory26);
        org.junit.Assert.assertNotNull(putSpecimen27);
        org.junit.Assert.assertNull(shippingContainer28);
    }

    @Test
    public void test40074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40074");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        java.util.List<java.lang.String> strList17 = importItemObservation16.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation19 = importItemObservation16.setRowId("");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(importItemObservation19);
    }

    @Test
    public void test40075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40075");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = pointVelocityDischargeActivity3.getVelocityAverage();
        pointVelocityDischargeActivity3.MeterInspectedBefore = true;
        java.lang.String str7 = pointVelocityDischargeActivity3.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = pointVelocityDischargeActivity3.setMeterInspectedAfter((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical12 = vertical10.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        java.lang.Double double13 = vertical12.getCosineOfUniqueFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = vertical12.TaglinePosition;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = vertical12.EffectiveDepth;
        vertical12.VerticalNumber = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType19 = calibrationCheck18.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = calibrationCheck18.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay22 = pointVelocityDischargeActivity21.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList23 = pointVelocityDischargeActivity21.Verticals;
        java.lang.String str24 = pointVelocityDischargeActivity21.SerialNumber;
        java.lang.Integer int25 = pointVelocityDischargeActivity21.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType dischargeMethodType26 = pointVelocityDischargeActivity21.DischargeMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = pointVelocityDischargeActivity21.setSoftwareVersion("9999-12-31T23:59:59.999Z");
        java.lang.String str29 = pointVelocityDischargeActivity28.getMeterEquation();
        java.lang.Boolean boolean30 = pointVelocityDischargeActivity28.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        java.lang.String str34 = dischargeSummary33.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        dischargeSummary35.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType40 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary35.MeasurementGrade = measurementGradeType40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary33.setMeasurementGrade(measurementGradeType40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity43.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity43.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity49 = pointVelocityDischargeActivity43.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList50 = pointVelocityDischargeActivity49.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity49.DistanceToMeter = datumConvertedQuantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary33.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity54 = pointVelocityDischargeActivity28.setWidth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType56 = fieldVisitReading55.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval57 = fieldVisitReading55.Approval;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = null;
        fieldVisitReading55.AdjustmentAmount = quantityWithDisplay58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading61 = fieldVisitReading55.setControlCondition("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = null;
        adcpDischargeActivity62.TransducerDepth = quantityWithDisplay63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary65.Reviewer = "";
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary65.MeasurementTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType70 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary65.BaseFlow = baseFlowType70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary65.DischargeUncertainty = dischargeUncertainty72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay75 = dischargeSummary74.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay76 = dischargeSummary74.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay77 = dischargeSummary74.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay80 = doubleWithDisplay78.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary81 = dischargeSummary74.setDurationInHours(doubleWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty82 = dischargeUncertainty72.setQuantitativeUncertainty(doubleWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity83 = adcpDischargeActivity62.setTopEstimateExponent(doubleWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity85 = adcpDischargeActivity62.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay86 = adcpDischargeActivity62.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str88 = datumConvertedQuantityWithDisplay87.TargetDatum;
        adcpDischargeActivity62.Area = datumConvertedQuantityWithDisplay87;
        fieldVisitReading55.Value = datumConvertedQuantityWithDisplay87;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity91 = pointVelocityDischargeActivity54.setArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay87);
        calibrationCheck18.Standard = datumConvertedQuantityWithDisplay87;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical93 = vertical12.setSegmentVelocity((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay87);
        pointVelocityDischargeActivity9.Width = datumConvertedQuantityWithDisplay87;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity9);
        org.junit.Assert.assertNotNull(vertical12);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(quantityWithDisplay15);
        org.junit.Assert.assertNull(calibrationCheckType19);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertNull(quantityWithDisplay22);
        org.junit.Assert.assertNull(verticalList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(dischargeMethodType26);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + measurementGradeType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType40.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity49);
        org.junit.Assert.assertNull(verticalList50);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity54);
        org.junit.Assert.assertNull(fieldVisitReadingType56);
        org.junit.Assert.assertNull(fieldVisitApproval57);
        org.junit.Assert.assertNotNull(fieldVisitReading61);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + baseFlowType70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay75);
        org.junit.Assert.assertNull(quantityWithDisplay76);
        org.junit.Assert.assertNull(doubleWithDisplay77);
        org.junit.Assert.assertNotNull(doubleWithDisplay80);
        org.junit.Assert.assertNotNull(dischargeSummary81);
        org.junit.Assert.assertNotNull(dischargeUncertainty82);
        org.junit.Assert.assertNotNull(adcpDischargeActivity83);
        org.junit.Assert.assertNotNull(adcpDischargeActivity85);
        org.junit.Assert.assertNull(doubleWithDisplay86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity91);
        org.junit.Assert.assertNotNull(vertical93);
    }

    @Test
    public void test40076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40076");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolder deleteLocationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolder deleteLocationFolder2 = deleteLocationFolder0.setLocationFolderUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolder deleteLocationFolder4 = deleteLocationFolder2.setLocationFolderUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteLocationFolder deleteLocationFolder6 = deleteLocationFolder4.setLocationFolderUniqueId("");
        org.junit.Assert.assertNotNull(deleteLocationFolder2);
        org.junit.Assert.assertNotNull(deleteLocationFolder4);
        org.junit.Assert.assertNotNull(deleteLocationFolder6);
    }

    @Test
    public void test40077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40077");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity2 = gageHeightAtZeroFlowActivity0.setApplicableSince(instant1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity4 = gageHeightAtZeroFlowActivity2.setComments("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.time.Instant instant5 = gageHeightAtZeroFlowActivity4.ObservedDate;
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity2);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity4);
        org.junit.Assert.assertNull(instant5);
    }

    @Test
    public void test40078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40078");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        timeSeriesDataServiceResponse0.NumPoints = 0L;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList5 = timeSeriesDataServiceResponse4.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse4.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse9 = timeSeriesDataServiceResponse7.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse11 = timeSeriesDataServiceResponse7.setLabel("MinDuration");
        java.lang.String str12 = timeSeriesDataServiceResponse7.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse14 = timeSeriesDataServiceResponse7.setLocationIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method> methodList15 = timeSeriesDataServiceResponse14.Methods;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest18 = trendLineAnalysisServiceRequest16.setType(trendLineAnalysisType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset20 = null;
        timeSeriesPoint19.Timestamp = statisticalDateTimeOffset20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset23 = timeSeriesPoint22.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset25 = timeSeriesPoint24.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] timeSeriesPointArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] { timeSeriesPoint19, timeSeriesPoint22, timeSeriesPoint24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>) timeSeriesPointList27, timeSeriesPointArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest29 = trendLineAnalysisServiceRequest18.setPoints(timeSeriesPointList27);
        timeSeriesDataServiceResponse14.Points = timeSeriesPointList27;
        timeSeriesDataServiceResponse0.Points = timeSeriesPointList27;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNull(interpolationTypeList5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse9);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse14);
        org.junit.Assert.assertNull(methodList15);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest18);
        org.junit.Assert.assertNull(statisticalDateTimeOffset23);
        org.junit.Assert.assertNull(statisticalDateTimeOffset25);
        org.junit.Assert.assertNotNull(timeSeriesPointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest29);
    }

    @Test
    public void test40079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40079");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList3 = fieldVisit0.Attachments;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList4 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult7 = datumConversionResult5.setTargetDatum("http");
        java.lang.String str8 = datumConversionResult5.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult10 = datumConversionResult5.setTargetDatum("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit11 = fieldVisit0.setDatumConversionResult(datumConversionResult10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork12 = fieldVisit11.getCompletedWork();
        java.lang.String str13 = fieldVisit11.Party;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(attachmentList3);
        org.junit.Assert.assertNull(attachmentList4);
        org.junit.Assert.assertNotNull(datumConversionResult7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
        org.junit.Assert.assertNotNull(datumConversionResult10);
        org.junit.Assert.assertNotNull(fieldVisit11);
        org.junit.Assert.assertNull(completedWork12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test40080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40080");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = dischargeSummary1.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = locationDescriptionListServiceResponse4.setNextToken(instant5);
        dischargeSummary1.MeasurementTime = instant5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse0.setNextToken(instant5);
        java.time.Instant instant9 = locationDescriptionListServiceResponse0.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType12 = null;
        controlConditionActivity11.ControlCleaned = controlCleanedType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        controlConditionActivity11.DateCleaned = instant15;
        timeAlignedDataServiceRequest10.QueryFrom = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse0.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double21 = putBulkEditResultGradesV2_20.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.QualityControlTypes = strList33;
        java.util.List<java.lang.String> strList37 = getObservationsV2_22.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList38 = getObservationsV2_22.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType39 = getObservationsV2_22.FieldResultType;
        java.time.Instant instant40 = getObservationsV2_22.getEndObservedTime();
        java.lang.String str41 = getObservationsV2_22.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        java.util.ArrayList<java.lang.String> strList50 = putLocationTags49.TagUniqueIds;
        getObservationsV2_22.ProjectIds = strList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_52 = putBulkEditResultGradesV2_20.setSearch((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase55 = locationDatumPeriod53.setComment("'.'SSSSSSS");
        java.lang.Double double56 = locationDatumPeriodBase55.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant58 = qualifier57.DateApplied;
        java.lang.String str59 = qualifier57.User;
        java.lang.String str60 = qualifier57.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj62 = timeAlignedDataServiceRequest61.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant64 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = locationDescriptionListServiceResponse63.setNextToken(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest66 = timeAlignedDataServiceRequest61.setQueryFrom(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier67 = qualifier57.setDateApplied(instant64);
        java.time.Instant instant68 = qualifier67.getDateApplied();
        locationDatumPeriodBase55.ValidFrom = instant68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_70 = putBulkEditResultGradesV2_52.setStartModificationTime(instant68);
        java.time.Instant instant71 = putBulkEditResultGradesV2_70.EndResultTime;
        putBulkEditResultGradesV2_70.MinNumericResultValue = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant75 = sensor74.getLastModifiedUtc();
        java.time.Instant instant76 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor77 = sensor74.setLastModifiedUtc(instant76);
        java.lang.String str78 = sensor74.getSerialNumber();
        java.time.Instant instant79 = sensor74.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_80 = putBulkEditResultGradesV2_70.setStartModificationTime(instant79);
        java.lang.Integer int81 = putBulkEditResultGradesV2_70.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant83 = crossSectionSurveyActivity82.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double86 = putBulkEditResultGradesV2_85.DepthValue;
        java.util.List<java.lang.String> strList87 = putBulkEditResultGradesV2_85.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary88 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary88.Reviewer = "";
        java.time.Instant instant91 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary88.MeasurementTime = instant91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_93 = putBulkEditResultGradesV2_85.setStartModificationTime(instant91);
        qualifier84.DateApplied = instant91;
        crossSectionSurveyActivity82.StartTime = instant91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_96 = putBulkEditResultGradesV2_70.setStartModificationTime(instant91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse97 = locationDescriptionListServiceResponse19.setNextToken(instant91);
        org.junit.Assert.assertNotNull(dischargeSummary3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNull(double21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(fieldResultType39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_52);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase55);
        org.junit.Assert.assertNull(double56);
        org.junit.Assert.assertNull(instant58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse65);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest66);
        org.junit.Assert.assertNotNull(qualifier67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_70);
        org.junit.Assert.assertNull(instant71);
        org.junit.Assert.assertNull(instant75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(sensor77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_80);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNull(instant83);
        org.junit.Assert.assertNull(double86);
        org.junit.Assert.assertNull(strList87);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_93);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_96);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse97);
    }

    @Test
    public void test40081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40081");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList1 = locationMonitoringMethod0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod3 = locationMonitoringMethod0.setParameterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str4 = locationMonitoringMethod3.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod6 = locationMonitoringMethod3.setSubLocationIdentifier("http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        org.junit.Assert.assertNull(tagMetadataList1);
        org.junit.Assert.assertNotNull(locationMonitoringMethod3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locationMonitoringMethod6);
    }

    @Test
    public void test40082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40082");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList5 = getSpecimens4.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens7 = getSpecimens4.setSort("MinDuration");
        java.util.List<java.lang.String> strList8 = getSpecimens7.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_9.setDataClassifications((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList16 = getObservationsV2_9.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary17.Reviewer = "";
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary17.MeasurementTime = instant20;
        getObservationsV2_9.StartResultTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType25 = null;
        controlConditionActivity24.ControlCleaned = controlCleanedType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        controlConditionActivity24.DateCleaned = instant28;
        timeAlignedDataServiceRequest23.QueryFrom = instant28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.ActivityIds = strList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = timeAlignedDataServiceRequest23.setTimeSeriesOutputUnitIds(strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_9.setCollectionMethodIds((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary52.Reviewer = "";
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary52.MeasurementTime = instant55;
        postRecurringReport51.NextGenerationDate = instant55;
        java.time.Instant instant58 = postRecurringReport51.getNextGenerationDate();
        java.lang.String str59 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant58);
        metadataChangeTransactionListServiceRequest50.QueryFrom = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest61 = downchainProcessorListByRatingModelServiceRequest49.setQueryTo(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest63 = downchainProcessorListByRatingModelServiceRequest49.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant65 = qualifier64.DateApplied;
        java.lang.String str66 = qualifier64.User;
        java.lang.String str67 = qualifier64.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj69 = timeAlignedDataServiceRequest68.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = locationDescriptionListServiceResponse70.setNextToken(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest73 = timeAlignedDataServiceRequest68.setQueryFrom(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier74 = qualifier64.setDateApplied(instant71);
        java.time.Instant instant75 = qualifier74.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest76 = downchainProcessorListByRatingModelServiceRequest49.setQueryFrom(instant75);
        java.time.Instant instant77 = downchainProcessorListByRatingModelServiceRequest76.getQueryFrom();
        getObservationsV2_9.StartResultTime = instant77;
        getSpecimens7.After = instant77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_80 = deleteObservationsV2_0.setStartModificationTime(instant77);
        java.time.Instant instant81 = deleteObservationsV2_80.EndObservedTime;
        java.util.List<java.lang.String> strList82 = deleteObservationsV2_80.getResultGrades();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_84 = deleteObservationsV2_80.setSort("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType85 = deleteObservationsV2_84.getSampleFraction();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getSpecimens7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest47);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str59, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest61);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest63);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse72);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest73);
        org.junit.Assert.assertNotNull(qualifier74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(deleteObservationsV2_80);
        org.junit.Assert.assertNull(instant81);
        org.junit.Assert.assertNull(strList82);
        org.junit.Assert.assertNotNull(deleteObservationsV2_84);
        org.junit.Assert.assertNull(sampleFractionType85);
    }

    @Test
    public void test40083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40083");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        java.lang.String str18 = timeSeries0.Description;
        timeSeries0.UtcOffset = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries22 = timeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType timeSeriesType23 = timeSeries22.TimeSeriesType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries24.Comment = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase29 = postLocation27.setLocationType("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation30.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList34, extendedAttributeValueArray33);
        postLocation30.ExtendedAttributeValues = extendedAttributeValueList34;
        java.lang.Boolean boolean37 = postLocation30.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries40 = postStatisticalDerivedTimeSeries38.setComment("'.'SSSSSSS");
        java.lang.String str41 = postStatisticalDerivedTimeSeries38.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries43 = postStatisticalDerivedTimeSeries38.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType44 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries45 = postStatisticalDerivedTimeSeries38.setInterpolationType(interpolationType44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47, extendedAttributeValueArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries49 = postStatisticalDerivedTimeSeries38.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase50 = postLocation30.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList52 = postCalculatedDerivedTimeSeries51.TimeSeriesUniqueIds;
        java.lang.String str53 = postCalculatedDerivedTimeSeries51.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation54.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList58, extendedAttributeValueArray57);
        postLocation54.ExtendedAttributeValues = extendedAttributeValueList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries61 = postCalculatedDerivedTimeSeries51.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase62 = postLocation30.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase63 = postLocation27.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList58);
        postReflectedTimeSeries24.ExtendedAttributeValues = extendedAttributeValueList58;
        timeSeries22.ExtendedAttributeValues = extendedAttributeValueList58;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(timeSeries22);
        org.junit.Assert.assertNull(timeSeriesType23);
        org.junit.Assert.assertNotNull(locationBase29);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries43);
        org.junit.Assert.assertTrue("'" + interpolationType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType44.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries45);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries49);
        org.junit.Assert.assertNotNull(locationBase50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries61);
        org.junit.Assert.assertNotNull(locationBase62);
        org.junit.Assert.assertNotNull(locationBase63);
    }

    @Test
    public void test40084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40084");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = null;
        putSpreadsheetTemplate0.Type = spreadsheetTemplateType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str4 = postLaboratory3.Address;
        java.lang.String str5 = postLaboratory3.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = samplingPlanPlannedActivity6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = auditAttributes9.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity8.AuditAttributes = auditAttributes9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = samplingPlanPlannedActivity8.AuditAttributes;
        postLaboratory3.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory16 = postLaboratory3.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon18 = taxonomicResult17.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = taxonomicResult17.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan21.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType24 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan21.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup26 = samplingPlan21.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan28 = samplingPlan21.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag29 = putTag20.setAuditAttributes(auditAttributes27);
        taxonomicResult17.AuditAttributes = auditAttributes27;
        postLaboratory16.AuditAttributes = auditAttributes27;
        putSpreadsheetTemplate0.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime34 = postFilter33.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = postFilter33.getAuditAttributes();
        postFilter33.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime38 = postFilter33.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter39.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList43, samplingLocationArray42);
        postFilter39.SamplingLocations = samplingLocationList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter46 = postFilter33.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList43);
        postFilter46.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = locationGroupType49.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType52 = locationGroupType49.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = locationGroupType49.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str55 = putActivityTemplate54.getId();
        java.lang.String str56 = putActivityTemplate54.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = auditAttributes57.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate60 = putActivityTemplate54.setAuditAttributes(auditAttributes59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType61 = locationGroupType49.setAuditAttributes(auditAttributes59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter62 = postFilter46.setAuditAttributes(auditAttributes59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity63.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity67 = postActivity63.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity69 = postActivity67.setAuditAttributes(auditAttributes68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter70 = postFilter46.setAuditAttributes(auditAttributes68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate71 = putSpreadsheetTemplate0.setAuditAttributes(auditAttributes68);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList72 = putSpreadsheetTemplate0.Attachments;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity8);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNotNull(postLaboratory16);
        org.junit.Assert.assertNull(taxon18);
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType24.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup26);
        org.junit.Assert.assertNotNull(samplingPlan28);
        org.junit.Assert.assertNotNull(putTag29);
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(samplingLocationArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(postFilter46);
        org.junit.Assert.assertNull(auditAttributes50);
        org.junit.Assert.assertNotNull(locationGroupType52);
        org.junit.Assert.assertNull(auditAttributes53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(auditAttributes59);
        org.junit.Assert.assertNotNull(putActivityTemplate60);
        org.junit.Assert.assertNotNull(locationGroupType61);
        org.junit.Assert.assertNotNull(postFilter62);
        org.junit.Assert.assertNotNull(postActivity67);
        org.junit.Assert.assertNotNull(postActivity69);
        org.junit.Assert.assertNotNull(postFilter70);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate71);
        org.junit.Assert.assertNull(domainObjectAttachmentList72);
    }

    @Test
    public void test40085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40085");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str1 = volumetricDischargeReading0.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading3 = volumetricDischargeReading0.setIsUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary4.BaseFlow = baseFlowType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary4.DischargeUncertainty = dischargeUncertainty11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary13.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = dischargeSummary13.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = dischargeSummary13.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = doubleWithDisplay17.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary13.setDurationInHours(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty21 = dischargeUncertainty11.setQuantitativeUncertainty(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading22 = volumetricDischargeReading0.setEndingVolume(doubleWithDisplay17);
        java.lang.Boolean boolean23 = volumetricDischargeReading22.getIsUsed();
        java.lang.String str24 = volumetricDischargeReading22.Name;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(volumetricDischargeReading3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + baseFlowType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(quantityWithDisplay15);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNotNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNotNull(dischargeUncertainty21);
        org.junit.Assert.assertNotNull(volumetricDischargeReading22);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + true + "'", boolean23, true);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test40086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40086");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        timeAlignedPoint8.DisplayValue8 = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint8.setGradeName3("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        timeAlignedPoint12.GradeName2 = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str15 = timeAlignedPoint12.DisplayValue5;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test40087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40087");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity3.setMeterEquation("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str6 = pointVelocityDischargeActivity3.SuspensionWeight;
        java.lang.String str7 = pointVelocityDischargeActivity3.getMeterEquation();
        pointVelocityDischargeActivity3.VelocityObservationMethod = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary17.Reviewer = "";
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary17.MeasurementTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary17.BaseFlow = baseFlowType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary17.DischargeUncertainty = dischargeUncertainty24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType26 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair;
        dischargeUncertainty24.QualitativeUncertainty = qualitativeUncertaintyType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType28 = dischargeUncertainty24.ActiveUncertaintyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary10.setDischargeUncertainty(dischargeUncertainty24);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList30 = dischargeSummary10.getGageHeightReadings();
        java.lang.Boolean boolean31 = dischargeSummary10.IsValid;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str33 = pointVelocityDischargeActivity32.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity35 = pointVelocityDischargeActivity32.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity32.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay39 = vertical38.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType40 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical38.VerticalType = verticalType40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType43 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation44 = velocityObservation42.setDeploymentMethod(deploymentMethodType43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType46 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation47 = velocityObservation45.setDeploymentMethod(deploymentMethodType46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList49, velocityDepthObservationArray48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation51 = velocityObservation47.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation52 = velocityObservation42.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical53 = vertical38.setVelocityObservation(velocityObservation42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical55 = vertical53.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay54);
        pointVelocityDischargeActivity32.Width = datumConvertedQuantityWithDisplay54;
        dischargeSummary10.GageHeightAdjustmentAmount = datumConvertedQuantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity58 = pointVelocityDischargeActivity3.setVelocityAverage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay54);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + baseFlowType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair + "'", qualitativeUncertaintyType26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair));
        org.junit.Assert.assertNull(uncertaintyType28);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNull(gageHeightReadingList30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity35);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNull(quantityWithDisplay39);
        org.junit.Assert.assertTrue("'" + verticalType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType40.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation44);
        org.junit.Assert.assertTrue("'" + deploymentMethodType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType46.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation47);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(velocityObservation51);
        org.junit.Assert.assertNotNull(velocityObservation52);
        org.junit.Assert.assertNotNull(vertical53);
        org.junit.Assert.assertNotNull(vertical55);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity58);
    }

    @Test
    public void test40088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40088");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder();
        java.lang.String str1 = locationFolder0.getParentLocationFolderUniqueId();
        java.lang.String str2 = locationFolder0.UniqueId;
        locationFolder0.ParentLocationFolderUniqueId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder6 = locationFolder0.setLocationFolderName("POST");
        locationFolder6.UniqueId = "http";
        locationFolder6.LocationFolderPath = "/AQUARIUS/Provisioning/v1";
        locationFolder6.ParentLocationFolderUniqueId = "****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.String str13 = locationFolder6.getLocationFolderName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(locationFolder6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
    }

    @Test
    public void test40089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40089");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType sourceRoundedValueType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult2 = numericResult0.setSourceRoundedValue(sourceRoundedValueType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType sourceRoundedValueType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult5 = numericResult3.setSourceRoundedValue(sourceRoundedValueType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str7 = postLaboratory6.Address;
        java.lang.String str8 = postLaboratory6.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity11 = samplingPlanPlannedActivity9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = auditAttributes12.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity11.AuditAttributes = auditAttributes12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = samplingPlanPlannedActivity11.AuditAttributes;
        postLaboratory6.AuditAttributes = auditAttributes16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory19 = postLaboratory6.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon21 = taxonomicResult20.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = taxonomicResult20.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan24.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan24.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup29 = samplingPlan24.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan31 = samplingPlan24.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag32 = putTag23.setAuditAttributes(auditAttributes30);
        taxonomicResult20.AuditAttributes = auditAttributes30;
        postLaboratory19.AuditAttributes = auditAttributes30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult35 = numericResult5.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType sourceRoundedValueType36 = numericResult5.getSourceRoundedValue();
        numericResult2.SourceRoundedValue = sourceRoundedValueType36;
        org.junit.Assert.assertTrue("'" + sourceRoundedValueType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT + "'", sourceRoundedValueType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT));
        org.junit.Assert.assertNotNull(numericResult2);
        org.junit.Assert.assertTrue("'" + sourceRoundedValueType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT + "'", sourceRoundedValueType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT));
        org.junit.Assert.assertNotNull(numericResult5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity11);
        org.junit.Assert.assertNotNull(auditAttributes14);
        org.junit.Assert.assertNotNull(auditAttributes16);
        org.junit.Assert.assertNotNull(postLaboratory19);
        org.junit.Assert.assertNull(taxon21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup29);
        org.junit.Assert.assertNotNull(samplingPlan31);
        org.junit.Assert.assertNotNull(putTag32);
        org.junit.Assert.assertNotNull(numericResult35);
        org.junit.Assert.assertTrue("'" + sourceRoundedValueType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT + "'", sourceRoundedValueType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SourceRoundedValueType.SYSTEM_DEFAULT));
    }

    @Test
    public void test40090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40090");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity0.setRefreshed((java.lang.Boolean) true);
        java.lang.Object obj7 = postActivity6.getResponseType();
        java.time.OffsetDateTime offsetDateTime8 = postActivity6.StartTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList9 = postActivity6.SamplingContextTags;
        java.lang.String str10 = postActivity6.LoggerFileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation11.setPlannedFieldResult(plannedFieldResult12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        observation13.LabInstruction = labInstruction14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation13.setStatistics(observationStatistics16);
        java.time.OffsetDateTime offsetDateTime18 = observation17.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList19 = observation17.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setObservedProperty(observedProperty20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade22 = observation21.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation21.setNumericResult(numericResult23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade25 = observation21.getResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device28 = device26.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setDevice(device28);
        postActivity6.Device = device28;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(samplingContextTagList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNull(importHistoryEventSimpleList19);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(resultGrade22);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNull(resultGrade25);
        org.junit.Assert.assertNotNull(device28);
        org.junit.Assert.assertNotNull(observation29);
    }

    @Test
    public void test40091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40091");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project3 = project0.setType(projectType2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project5 = project0.setStartTime(offsetDateTime4);
        project0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject10 = postProject8.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject12 = postProject10.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        postProject10.Type = projectType13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project15 = project0.setType(projectType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project17 = project0.setApprovalAgency("");
        java.time.OffsetDateTime offsetDateTime18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project19 = project17.setStartTime(offsetDateTime18);
        java.lang.String str20 = project19.getCustomId();
        java.lang.String str21 = project19.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + projectType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNotNull(project3);
        org.junit.Assert.assertNotNull(project5);
        org.junit.Assert.assertNotNull(postProject10);
        org.junit.Assert.assertNotNull(postProject12);
        org.junit.Assert.assertTrue("'" + projectType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNotNull(project15);
        org.junit.Assert.assertNotNull(project17);
        org.junit.Assert.assertNotNull(project19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str20, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test40092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40092");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSchedule deleteSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSchedule();
        java.lang.String str1 = deleteSchedule0.getId();
        java.lang.String str2 = deleteSchedule0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSchedule deleteSchedule4 = deleteSchedule0.setId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str5 = deleteSchedule0.Id;
        deleteSchedule0.Id = "/api";
        deleteSchedule0.Id = "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****";
        java.lang.String str10 = deleteSchedule0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(deleteSchedule4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str5, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****" + "'", str10, "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
    }

    @Test
    public void test40093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40093");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        roleBase2.CanAddData = true;
        java.lang.Boolean boolean5 = roleBase2.isCanRemoveFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long9 = roleApprovalTransition8.getToApprovalLevel();
        java.lang.Long long10 = roleApprovalTransition8.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long12 = roleApprovalTransition11.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition15 = roleApprovalTransition13.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition18 = roleApprovalTransition16.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition20 = roleApprovalTransition16.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long22 = roleApprovalTransition21.getToApprovalLevel();
        java.lang.Long long23 = roleApprovalTransition21.ToApprovalLevel;
        java.lang.Long long24 = roleApprovalTransition21.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long26 = roleApprovalTransition25.getToApprovalLevel();
        java.lang.Long long27 = roleApprovalTransition25.ToApprovalLevel;
        java.lang.Long long28 = roleApprovalTransition25.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition8, roleApprovalTransition11, roleApprovalTransition15, roleApprovalTransition16, roleApprovalTransition21, roleApprovalTransition25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList30, roleApprovalTransitionArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase32 = postRole7.setRoleApprovalTransitions(roleApprovalTransitionList30);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList33 = postRole7.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase34 = postRole6.setRoleApprovalTransitions(roleApprovalTransitionList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long37 = roleApprovalTransition36.getToApprovalLevel();
        java.lang.Long long38 = roleApprovalTransition36.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long40 = roleApprovalTransition39.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition43 = roleApprovalTransition41.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition46 = roleApprovalTransition44.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition48 = roleApprovalTransition44.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long50 = roleApprovalTransition49.getToApprovalLevel();
        java.lang.Long long51 = roleApprovalTransition49.ToApprovalLevel;
        java.lang.Long long52 = roleApprovalTransition49.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long54 = roleApprovalTransition53.getToApprovalLevel();
        java.lang.Long long55 = roleApprovalTransition53.ToApprovalLevel;
        java.lang.Long long56 = roleApprovalTransition53.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition36, roleApprovalTransition39, roleApprovalTransition43, roleApprovalTransition44, roleApprovalTransition49, roleApprovalTransition53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList58, roleApprovalTransitionArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase60 = postRole35.setRoleApprovalTransitions(roleApprovalTransitionList58);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList61 = postRole35.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase62 = roleBase34.setRoleApprovalTransitions(roleApprovalTransitionList61);
        roleBase62.CanEditData = true;
        java.lang.Boolean boolean65 = roleBase62.CanRemoveFieldVisits;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase68 = postRole66.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str69 = postRole66.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long72 = roleApprovalTransition71.getToApprovalLevel();
        java.lang.Long long73 = roleApprovalTransition71.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long75 = roleApprovalTransition74.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition78 = roleApprovalTransition76.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition81 = roleApprovalTransition79.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition83 = roleApprovalTransition79.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long85 = roleApprovalTransition84.getToApprovalLevel();
        java.lang.Long long86 = roleApprovalTransition84.ToApprovalLevel;
        java.lang.Long long87 = roleApprovalTransition84.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition88 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long89 = roleApprovalTransition88.getToApprovalLevel();
        java.lang.Long long90 = roleApprovalTransition88.ToApprovalLevel;
        java.lang.Long long91 = roleApprovalTransition88.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray92 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition71, roleApprovalTransition74, roleApprovalTransition78, roleApprovalTransition79, roleApprovalTransition84, roleApprovalTransition88 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList93 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList93, roleApprovalTransitionArray92);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase95 = postRole70.setRoleApprovalTransitions(roleApprovalTransitionList93);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList96 = postRole70.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase97 = postRole66.setRoleApprovalTransitions(roleApprovalTransitionList96);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase98 = roleBase62.setRoleApprovalTransitions(roleApprovalTransitionList96);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase99 = roleBase2.setRoleApprovalTransitions(roleApprovalTransitionList96);
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNotNull(roleApprovalTransition15);
        org.junit.Assert.assertNotNull(roleApprovalTransition18);
        org.junit.Assert.assertNotNull(roleApprovalTransition20);
        org.junit.Assert.assertNull(long22);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNull(long26);
        org.junit.Assert.assertNull(long27);
        org.junit.Assert.assertNull(long28);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roleBase32);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList33);
        org.junit.Assert.assertNotNull(roleBase34);
        org.junit.Assert.assertNull(long37);
        org.junit.Assert.assertNull(long38);
        org.junit.Assert.assertNull(long40);
        org.junit.Assert.assertNotNull(roleApprovalTransition43);
        org.junit.Assert.assertNotNull(roleApprovalTransition46);
        org.junit.Assert.assertNotNull(roleApprovalTransition48);
        org.junit.Assert.assertNull(long50);
        org.junit.Assert.assertNull(long51);
        org.junit.Assert.assertNull(long52);
        org.junit.Assert.assertNull(long54);
        org.junit.Assert.assertNull(long55);
        org.junit.Assert.assertNull(long56);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(roleBase60);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList61);
        org.junit.Assert.assertNotNull(roleBase62);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNotNull(roleBase68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str69, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(long72);
        org.junit.Assert.assertNull(long73);
        org.junit.Assert.assertNull(long75);
        org.junit.Assert.assertNotNull(roleApprovalTransition78);
        org.junit.Assert.assertNotNull(roleApprovalTransition81);
        org.junit.Assert.assertNotNull(roleApprovalTransition83);
        org.junit.Assert.assertNull(long85);
        org.junit.Assert.assertNull(long86);
        org.junit.Assert.assertNull(long87);
        org.junit.Assert.assertNull(long89);
        org.junit.Assert.assertNull(long90);
        org.junit.Assert.assertNull(long91);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(roleBase95);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList96);
        org.junit.Assert.assertNotNull(roleBase97);
        org.junit.Assert.assertNotNull(roleBase98);
        org.junit.Assert.assertNotNull(roleBase99);
    }

    @Test
    public void test40094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40094");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase2 = roleFlattened0.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean3 = roleFlattened0.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str5 = deleteFieldVisits4.Sort;
        deleteFieldVisits4.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        java.util.List<java.lang.String> strList15 = getObservationsV2_8.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        getObservationsV2_8.StartResultTime = instant19;
        java.lang.String[] strArray31 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_8.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList32);
        deleteFieldVisits4.PlanningStatuses = strList32;
        roleFlattened0.RoleApprovalTransitions = strList32;
        java.lang.Boolean boolean37 = roleFlattened0.isCanReadData();
        java.lang.Boolean boolean38 = roleFlattened0.isCanEditLocationDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase40 = roleFlattened0.setCanAddAppendConfigurations((java.lang.Boolean) false);
        roleFlattened0.CanAddOrRemoveLocations = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase44 = roleFlattened0.setCanAddAppendConfigurations((java.lang.Boolean) false);
        roleFlattenedBase44.CanRemoveFieldVisits = true;
        org.junit.Assert.assertNotNull(roleFlattenedBase2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(roleFlattenedBase40);
        org.junit.Assert.assertNotNull(roleFlattenedBase44);
    }

    @Test
    public void test40095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40095");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setDisplayValue3("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.Double double12 = timeAlignedPoint8.NumericValue7;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(double12);
    }

    @Test
    public void test40096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40096");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole getRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole();
        java.lang.String str1 = getRole0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRole getRole3 = getRole0.setUniqueId("-PT87591240H");
        java.lang.String str4 = getRole3.getUniqueId();
        java.lang.Object obj5 = getRole3.getResponseType();
        java.lang.String str6 = getRole3.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getRole3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-PT87591240H" + "'", str4, "-PT87591240H");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Role");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Role");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Role");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-PT87591240H" + "'", str6, "-PT87591240H");
    }

    @Test
    public void test40097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40097");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList1 = postUserV2_0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = getActivities2.setToStartTime(instant12);
        java.lang.String str14 = getActivities13.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities16 = getActivities13.setLimit((java.lang.Integer) 1);
        getActivities16.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = timeAlignedDataServiceRequest19.setTimeSeriesUniqueIds(strList31);
        getActivities16.CollectionMethodIds = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_37 = postUserV2_0.setRoles((java.util.List<java.lang.String>) strList31);
        java.lang.String str38 = postUserV2_37.getCustomId();
        postUserV2_37.Id = "****82feecb1-0c54-43a1-b60a-302dc897d638****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(getActivities13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getActivities16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest35);
        org.junit.Assert.assertNotNull(postUserV2_37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test40098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40098");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem2 = putFixedDropDownListItem0.setDropDownListId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem4 = putFixedDropDownListItem2.setId("2021.8.9990");
        putFixedDropDownListItem4.DisplayName = "/AQUARIUS";
        java.lang.String str7 = putFixedDropDownListItem4.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem9 = putFixedDropDownListItem4.setDisplayName("MinDuration");
        java.lang.Object obj10 = putFixedDropDownListItem9.getResponseType();
        java.lang.String str11 = putFixedDropDownListItem9.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem13 = putFixedDropDownListItem9.setDisplayName("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutFixedDropDownListItem putFixedDropDownListItem15 = putFixedDropDownListItem13.setId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str16 = putFixedDropDownListItem13.DropDownListId;
        putFixedDropDownListItem13.DisplayName = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        org.junit.Assert.assertNotNull(putFixedDropDownListItem2);
        org.junit.Assert.assertNotNull(putFixedDropDownListItem4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS" + "'", str7, "/AQUARIUS");
        org.junit.Assert.assertNotNull(putFixedDropDownListItem9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FixedDropDownListItem");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MinDuration" + "'", str11, "MinDuration");
        org.junit.Assert.assertNotNull(putFixedDropDownListItem13);
        org.junit.Assert.assertNotNull(putFixedDropDownListItem15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str16, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test40099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40099");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries0.setNewValueLocation(newValueLocationType6);
        postStatisticalDerivedTimeSeries7.Label = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int10 = postStatisticalDerivedTimeSeries7.TimeStepCount;
        postStatisticalDerivedTimeSeries7.Publish = true;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertTrue("'" + newValueLocationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test40100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40100");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes2 = deleteTimeSeriesNotes0.setTimeRange(interval1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotes deleteTimeSeriesNotes4 = deleteTimeSeriesNotes0.setUniqueId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        deleteTimeSeriesNotes4.UniqueId = "multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****";
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotes2);
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotes4);
    }

    @Test
    public void test40101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40101");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str10 = pointVelocityDischargeActivity9.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity9.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = pointVelocityDischargeActivity12.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary16.DifferenceDuringVisit = doubleWithDisplay17;
        java.lang.String str19 = doubleWithDisplay17.getDisplay();
        pointVelocityDischargeActivity12.MeanObservationDurationInSeconds = doubleWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement21 = groundWaterMeasurement8.setHold(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str23 = volumetricDischargeReading22.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = dischargeSummary24.getMeanGageHeight();
        java.lang.String str26 = dischargeSummary24.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay29.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary24.DurationInHours = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading33 = volumetricDischargeReading22.setDischarge(doubleWithDisplay31);
        groundWaterMeasurement21.TapeCorrection = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis35 = trendLineAnalysis0.setSlopeStandardError(doubleWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = trendLineAnalysis35.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = null;
        timeSeriesPoint37.Timestamp = statisticalDateTimeOffset38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset40 = null;
        timeSeriesPoint37.Timestamp = statisticalDateTimeOffset40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis42 = trendLineAnalysis35.setStartPoint(timeSeriesPoint37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType43 = trendLineAnalysis42.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = null;
        trendLineAnalysis42.Slope = doubleWithDisplay44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = trendLineAnalysis42.getModeledAbsoluteChange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay48 = trendLineAnalysis47.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset50 = timeSeriesPoint49.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant52 = statisticalDateTimeOffset51.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint53 = timeSeriesPoint49.setTimestamp(statisticalDateTimeOffset51);
        trendLineAnalysis47.StartPoint = timeSeriesPoint49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str57 = pointVelocityDischargeActivity56.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity59 = pointVelocityDischargeActivity56.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay60 = pointVelocityDischargeActivity59.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary63 = dischargeSummary61.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary63.DifferenceDuringVisit = doubleWithDisplay64;
        java.lang.String str66 = doubleWithDisplay64.getDisplay();
        pointVelocityDischargeActivity59.MeanObservationDurationInSeconds = doubleWithDisplay64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement68 = groundWaterMeasurement55.setHold(doubleWithDisplay64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str70 = volumetricDischargeReading69.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay72 = dischargeSummary71.getMeanGageHeight();
        java.lang.String str73 = dischargeSummary71.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary75 = dischargeSummary71.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay78 = doubleWithDisplay76.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary71.DurationInHours = doubleWithDisplay78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading80 = volumetricDischargeReading69.setDischarge(doubleWithDisplay78);
        groundWaterMeasurement68.TapeCorrection = doubleWithDisplay78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis82 = trendLineAnalysis47.setSlopeStandardError(doubleWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay83 = trendLineAnalysis82.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType84 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis85 = trendLineAnalysis82.setType(trendLineAnalysisType84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset87 = null;
        timeSeriesPoint86.Timestamp = statisticalDateTimeOffset87;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint90 = timeSeriesPoint86.setTimestamp(statisticalDateTimeOffset89);
        trendLineAnalysis85.StartPoint = timeSeriesPoint90;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay92 = trendLineAnalysis85.UpperQuartileOfResiduals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType93 = trendLineAnalysis85.Type;
        trendLineAnalysis42.Type = trendLineAnalysisType93;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay95 = trendLineAnalysis42.StandardDeviation;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(groundWaterMeasurement21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(volumetricDischargeReading33);
        org.junit.Assert.assertNotNull(trendLineAnalysis35);
        org.junit.Assert.assertNotNull(doubleWithDisplay36);
        org.junit.Assert.assertNotNull(trendLineAnalysis42);
        org.junit.Assert.assertNull(trendLineAnalysisType43);
        org.junit.Assert.assertNull(doubleWithDisplay46);
        org.junit.Assert.assertNull(doubleWithDisplay48);
        org.junit.Assert.assertNull(statisticalDateTimeOffset50);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNotNull(timeSeriesPoint53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity59);
        org.junit.Assert.assertNull(quantityWithDisplay60);
        org.junit.Assert.assertNotNull(dischargeSummary63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(groundWaterMeasurement68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(quantityWithDisplay72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(dischargeSummary75);
        org.junit.Assert.assertNotNull(doubleWithDisplay78);
        org.junit.Assert.assertNotNull(volumetricDischargeReading80);
        org.junit.Assert.assertNotNull(trendLineAnalysis82);
        org.junit.Assert.assertNotNull(doubleWithDisplay83);
        org.junit.Assert.assertTrue("'" + trendLineAnalysisType84 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear + "'", trendLineAnalysisType84.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear));
        org.junit.Assert.assertNotNull(trendLineAnalysis85);
        org.junit.Assert.assertNotNull(timeSeriesPoint90);
        org.junit.Assert.assertNull(doubleWithDisplay92);
        org.junit.Assert.assertTrue("'" + trendLineAnalysisType93 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear + "'", trendLineAnalysisType93.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear));
        org.junit.Assert.assertNull(doubleWithDisplay95);
    }

    @Test
    public void test40102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40102");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard2 = getStandard0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str3 = getStandard0.Id;
        java.lang.String str4 = getStandard0.Id;
        java.lang.String str5 = getStandard0.Id;
        getStandard0.Id = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        java.lang.String str8 = getStandard0.Id;
        java.lang.String str9 = getStandard0.Id;
        org.junit.Assert.assertNotNull(getStandard2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str8, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str9, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
    }

    @Test
    public void test40103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40103");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation3 = correctionOperation1.setType(correctionType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation5 = correctionOperation1.setProcessingOrder(correctionProcessingOrder4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent;
        correctionOperation1.Type = correctionType6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction8 = correction0.setType(correctionType6);
        java.time.Instant instant9 = correction0.getStartTime();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction11 = correction0.setParameters(strMap10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType12 = correction0.getType();
        java.lang.String str13 = correction0.Comment;
        org.junit.Assert.assertTrue("'" + correctionType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation3);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing + "'", correctionProcessingOrder4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing));
        org.junit.Assert.assertNotNull(correctionOperation5);
        org.junit.Assert.assertTrue("'" + correctionType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent + "'", correctionType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent));
        org.junit.Assert.assertNotNull(correction8);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNotNull(correction11);
        org.junit.Assert.assertTrue("'" + correctionType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent + "'", correctionType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent));
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test40104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40104");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList1 = timeSeriesUniqueIdListServiceResponse0.TimeSeriesUniqueIds;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList2 = timeSeriesUniqueIdListServiceResponse0.getTimeSeriesUniqueIds();
        java.time.Instant instant3 = timeSeriesUniqueIdListServiceResponse0.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        postRecurringReport7.NextGenerationDate = instant11;
        java.time.Instant instant14 = postRecurringReport7.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset15 = statisticalDateTimeOffset6.setDateTimeOffset(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest16 = ratingModelEffectiveShiftsByStageValuesServiceRequest5.setMeasurementTime(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse17 = timeSeriesUniqueIdListServiceResponse4.setNextToken(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] timeSeriesUniqueIdsArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>) timeSeriesUniqueIdsList19, timeSeriesUniqueIdsArray18);
        timeSeriesUniqueIdListServiceResponse4.TimeSeriesUniqueIds = timeSeriesUniqueIdsList19;
        timeSeriesUniqueIdListServiceResponse0.TimeSeriesUniqueIds = timeSeriesUniqueIdsList19;
        org.junit.Assert.assertNull(timeSeriesUniqueIdsList1);
        org.junit.Assert.assertNull(timeSeriesUniqueIdsList2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset15);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest16);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse17);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdsArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test40105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40105");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit postUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase2 = postUnit0.setSymbol("9999-12-31T23:59:59.999Z");
        java.lang.String str3 = postUnit0.getSymbol();
        java.lang.Double double4 = postUnit0.getBaseMultiplier();
        java.lang.String str5 = postUnit0.getSymbol();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit postUnit7 = postUnit0.setGroupIdentifier("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str8 = postUnit0.GroupIdentifier;
        java.lang.Double double9 = postUnit0.getBaseOffset();
        org.junit.Assert.assertNotNull(unitBase2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str3, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str5, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(postUnit7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str8, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(double9);
    }

    @Test
    public void test40106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40106");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        java.time.Instant instant1 = null;
        downchainProcessorListByRatingModelServiceRequest0.QueryFrom = instant1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = getObservationsV2_3.setDataClassifications((java.util.List<java.lang.String>) strList7);
        getObservationsV2_9.DepthUnitCustomId = "hi!";
        java.lang.String str12 = getObservationsV2_9.CustomId;
        java.util.List<java.lang.String> strList13 = getObservationsV2_9.getSearch();
        java.util.List<java.lang.String> strList14 = getObservationsV2_9.getAnalysisMethodSimpleIds();
        java.util.List<java.lang.String> strList15 = getObservationsV2_9.ActivityIds;
        java.lang.Object obj16 = getObservationsV2_9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant18 = methodOperation17.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = dischargeSummary19.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        dischargeSummary19.MeasurementTime = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation26 = methodOperation17.setDateAppliedUtc(instant23);
        methodOperation17.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation30 = methodOperation17.setStackPosition((java.lang.Integer) 0);
        java.time.Instant instant31 = methodOperation17.DateAppliedUtc;
        getObservationsV2_9.EndResultTime = instant31;
        downchainProcessorListByRatingModelServiceRequest0.QueryTo = instant31;
        downchainProcessorListByRatingModelServiceRequest0.RatingModelIdentifier = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType38 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition39 = tagDefinition37.setValueType(tagValueType38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition41 = tagDefinition37.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition43 = tagDefinition41.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition45 = tagDefinition41.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj47 = timeAlignedDataServiceRequest46.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = locationDescriptionListServiceResponse48.setNextToken(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = timeAlignedDataServiceRequest46.setQueryFrom(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest60 = timeAlignedDataServiceRequest46.setTimeSeriesOutputUnitIds(strList57);
        tagDefinition45.PickListValues = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_62 = getGroupedObservationsV2_36.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList57);
        java.lang.Double double63 = getGroupedObservationsV2_36.getDepthValue();
        java.lang.Double double64 = getGroupedObservationsV2_36.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary67.Reviewer = "";
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary67.MeasurementTime = instant70;
        postRecurringReport66.NextGenerationDate = instant70;
        java.time.Instant instant73 = postRecurringReport66.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset74 = statisticalDateTimeOffset65.setDateTimeOffset(instant73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_75 = getGroupedObservationsV2_36.setEndResultTime(instant73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest76 = downchainProcessorListByRatingModelServiceRequest0.setQueryFrom(instant73);
        java.lang.Object obj77 = downchainProcessorListByRatingModelServiceRequest0.getResponseType();
        java.time.Instant instant78 = downchainProcessorListByRatingModelServiceRequest0.QueryTo;
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservation");
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(dischargeSummary21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(methodOperation26);
        org.junit.Assert.assertNotNull(methodOperation30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(tagDefinition39);
        org.junit.Assert.assertNotNull(tagDefinition41);
        org.junit.Assert.assertNotNull(tagDefinition43);
        org.junit.Assert.assertNotNull(tagDefinition45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse50);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest51);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest60);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_62);
        org.junit.Assert.assertNull(double63);
        org.junit.Assert.assertNull(double64);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset74);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_75);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertNotNull(instant78);
    }

    @Test
    public void test40107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40107");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType5 = postActivity0.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate7.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList12 = specimenTemplate11.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate13.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList18 = specimenTemplate17.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate7, specimenTemplate10, specimenTemplate11, specimenTemplate15, specimenTemplate16, specimenTemplate17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList20, specimenTemplateArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate22 = postFieldVisitActivityWithTemplate6.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate24 = postFieldVisitActivityWithTemplate22.setCollectionMethod(collectionMethod23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = postActivity0.setCollectionMethod(collectionMethod23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        java.lang.Double double29 = quantity26.Value;
        postActivity25.Depth = quantity26;
        postActivity25.Refreshed = true;
        java.lang.String str33 = postActivity25.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity34 = postActivity25.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.time.OffsetDateTime offsetDateTime36 = fieldVisit35.getStartTime();
        java.time.OffsetDateTime offsetDateTime37 = fieldVisit35.StartTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList38 = fieldVisit35.getPlannedFieldResults();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = fieldVisit35.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit40.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList45, plannedActivityArray44);
        putFieldVisit43.PlannedActivities = plannedActivityList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = putFieldVisit40.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str50 = projectSimple49.Name;
        java.lang.String str51 = projectSimple49.getCustomId();
        projectSimple49.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple55 = projectSimple49.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit56 = putFieldVisit40.setProject(projectSimple49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit57 = fieldVisit35.setProject(projectSimple49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity58 = postActivity25.setFieldVisit(fieldVisit35);
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(activityType5);
        org.junit.Assert.assertNull(labInstructionTemplateList12);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNull(labInstructionTemplateList18);
        org.junit.Assert.assertNotNull(specimenTemplateArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate22);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate24);
        org.junit.Assert.assertNotNull(postActivity25);
        org.junit.Assert.assertNull(double29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(quantity34);
        org.junit.Assert.assertNull(offsetDateTime36);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNull(plannedFieldResultList38);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNotNull(plannedActivityArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(putFieldVisit48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(projectSimple55);
        org.junit.Assert.assertNotNull(putFieldVisit56);
        org.junit.Assert.assertNotNull(fieldVisit57);
        org.junit.Assert.assertNotNull(postActivity58);
    }

    @Test
    public void test40108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40108");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        java.lang.Double double27 = getGroupedObservationsV2_0.getDepthValue();
        java.lang.Double double28 = getGroupedObservationsV2_0.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList30 = getSpecimens29.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens32 = getSpecimens29.setSort("MinDuration");
        java.time.Instant instant33 = getSpecimens32.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens35 = getSpecimens32.setCursor("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList38 = getObservationsV2_37.SamplingContextTagIds;
        java.time.Instant instant39 = getObservationsV2_37.getEndModificationTime();
        java.util.List<java.lang.String> strList40 = getObservationsV2_37.Media;
        java.util.List<java.lang.String> strList41 = getObservationsV2_37.ActivityTypes;
        java.util.List<java.lang.String> strList42 = getObservationsV2_37.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj44 = timeAlignedDataServiceRequest43.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = getObservationsV2_45.setDataClassifications((java.util.List<java.lang.String>) strList49);
        getObservationsV2_51.DepthUnitCustomId = "hi!";
        java.lang.String str54 = getObservationsV2_51.CustomId;
        java.util.List<java.lang.String> strList55 = getObservationsV2_51.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_51.setMedia((java.util.List<java.lang.String>) strList67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str73 = getObservationsV2_72.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        getObservationsV2_74.SpecimenIds = strList77;
        getObservationsV2_72.ProjectIds = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_81 = getObservationsV2_51.setObservedPropertyIds((java.util.List<java.lang.String>) strList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest82 = timeAlignedDataServiceRequest43.setTimeSeriesOutputUnitIds(strList77);
        getObservationsV2_37.DataClassifications = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods84 = getLabAnalysisMethods36.setObservedPropertyIds((java.util.List<java.lang.String>) strList77);
        getSpecimens35.ActivityIds = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_86 = getGroupedObservationsV2_0.setAnalysisMethodIds((java.util.List<java.lang.String>) strList77);
        java.util.List<java.lang.String> strList87 = getGroupedObservationsV2_86.Media;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_89 = getGroupedObservationsV2_86.setFilterId("****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.Double double90 = getGroupedObservationsV2_89.MaxNumericResultValue;
        getGroupedObservationsV2_89.FilterId = "****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(getSpecimens32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNotNull(getSpecimens35);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_81);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest82);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods84);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_86);
        org.junit.Assert.assertNull(strList87);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_89);
        org.junit.Assert.assertNull(double90);
    }

    @Test
    public void test40109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40109");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        java.lang.Double double61 = locationDatumPeriod0.getOffsetToStandard();
        java.lang.Double double62 = locationDatumPeriod0.Uncertainty;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(double61);
        org.junit.Assert.assertNull(double62);
    }

    @Test
    public void test40110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40110");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory3 = postLaboratory0.setId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory5 = postLaboratory3.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str6 = postLaboratory3.getAddress();
        java.lang.String str7 = postLaboratory3.getCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postLaboratory3);
        org.junit.Assert.assertNotNull(postLaboratory5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test40111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40111");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        java.lang.String str7 = timeAlignedPoint0.ApprovalName5;
        java.lang.String str8 = timeAlignedPoint0.getApprovalName6();
        java.lang.String str9 = timeAlignedPoint0.ApprovalName2;
        timeAlignedPoint0.GradeCode1 = 100L;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint0.setDisplayValue4("/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
    }

    @Test
    public void test40112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40112");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup populatedUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup();
        java.lang.String str1 = populatedUnitGroup0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup3 = populatedUnitGroup0.setDisplayName("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup5 = unitGroup3.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Integer int6 = unitGroup5.getSubstanceDimension();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup8 = unitGroup5.setIsSystem((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup10 = unitGroup5.setTimeDimension((java.lang.Integer) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(unitGroup3);
        org.junit.Assert.assertNotNull(unitGroup5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(unitGroup8);
        org.junit.Assert.assertNotNull(unitGroup10);
    }

    @Test
    public void test40113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40113");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary2 = analysisMethodImportSummary0.setErrorCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList4 = analysisMethodImportSummary3.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary6 = analysisMethodImportSummary3.setSuccessCount((java.lang.Integer) 2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod> importItemAnalysisMethodList7 = analysisMethodImportSummary6.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod10 = importItemAnalysisMethod8.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod12 = importItemAnalysisMethod10.setInput("'.'SSSSSSS");
        importItemAnalysisMethod10.RowId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj16 = importItemAnalysisMethod15.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod18 = importItemAnalysisMethod15.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj19 = importItemAnalysisMethod18.getErrors();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetFieldDataPlugins getFieldDataPlugins20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetFieldDataPlugins();
        java.lang.Object obj21 = getFieldDataPlugins20.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod22 = importItemAnalysisMethod18.setErrors(obj21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.util.List<java.lang.String> strList24 = importItemAnalysisMethod23.getWarningMessages();
        java.lang.String str25 = importItemAnalysisMethod23.Input;
        java.lang.Object obj26 = importItemAnalysisMethod23.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod29 = importItemAnalysisMethod27.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod31 = importItemAnalysisMethod29.setRowId("https");
        java.lang.String str32 = importItemAnalysisMethod29.RowId;
        java.util.List<java.lang.String> strList33 = importItemAnalysisMethod29.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod36 = importItemAnalysisMethod34.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod38 = importItemAnalysisMethod36.setRowId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = importItemAnalysisMethod38.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod41 = importItemAnalysisMethod38.setItem(analysisMethod40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj43 = importItemAnalysisMethod42.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod45 = importItemAnalysisMethod42.setRowId("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList46 = importItemAnalysisMethod45.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod48 = importItemAnalysisMethod45.setExistingItem(analysisMethod47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod51 = importItemAnalysisMethod49.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList53 = importItemObject52.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList55 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList55, importChangeItemArray54);
        importItemObject52.ItemComparison = importChangeItemList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation60 = importItemSamplingLocation58.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        getObservationsV2_62.SpecimenIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray72 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = putLocationTags68.setTagUniqueIds(strList73);
        getObservationsV2_62.QualityControlTypes = strList73;
        java.util.List<java.lang.String> strList77 = getObservationsV2_62.getLabReportIds();
        importItem61.Errors = getObservationsV2_62;
        java.lang.Object obj79 = importItem61.getExistingItem();
        importItem61.Input = "hi!";
        java.lang.Object obj82 = importItem61.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType83 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem84 = importItem61.setStatus(importItemStatusType83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation85 = importItemSamplingLocation60.setStatus(importItemStatusType83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType86 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation87 = importItemSamplingLocation60.setStatus(importItemStatusType86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType88 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation89 = importItemSamplingLocation60.setStatus(importItemStatusType88);
        importItemObject52.Status = importItemStatusType88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod91 = importItemAnalysisMethod51.setStatus(importItemStatusType88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType92 = importItemAnalysisMethod51.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod[] importItemAnalysisMethodArray93 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod[] { importItemAnalysisMethod10, importItemAnalysisMethod22, importItemAnalysisMethod23, importItemAnalysisMethod29, importItemAnalysisMethod41, importItemAnalysisMethod45, importItemAnalysisMethod51 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod> importItemAnalysisMethodList94 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod>) importItemAnalysisMethodList94, importItemAnalysisMethodArray93);
        analysisMethodImportSummary6.NonErrorImportItems = importItemAnalysisMethodList94;
        analysisMethodImportSummary2.ErrorImportItems = importItemAnalysisMethodList94;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary99 = analysisMethodImportSummary2.setNewCount((java.lang.Integer) 5);
        org.junit.Assert.assertNotNull(analysisMethodImportSummary2);
        org.junit.Assert.assertNull(importErrorList4);
        org.junit.Assert.assertNotNull(analysisMethodImportSummary6);
        org.junit.Assert.assertNull(importItemAnalysisMethodList7);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod10);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPluginsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPluginsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPluginsResponse");
        org.junit.Assert.assertNotNull(importItemAnalysisMethod22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod29);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "https" + "'", str32, "https");
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod36);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod38);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod48);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod51);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(importChangeItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(importItemSamplingLocation60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(putLocationTags75);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + importItemStatusType83 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType83.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem84);
        org.junit.Assert.assertNotNull(importItemSamplingLocation85);
        org.junit.Assert.assertTrue("'" + importItemStatusType86 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType86.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation87);
        org.junit.Assert.assertTrue("'" + importItemStatusType88 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW + "'", importItemStatusType88.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW));
        org.junit.Assert.assertNotNull(importItemSamplingLocation89);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod91);
        org.junit.Assert.assertTrue("'" + importItemStatusType92 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW + "'", importItemStatusType92.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW));
        org.junit.Assert.assertNotNull(importItemAnalysisMethodArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(analysisMethodImportSummary99);
    }

    @Test
    public void test40114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40114");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod2 = putLabAnalysisMethod0.setMethodId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList3 = putLabAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList5 = postAnalysisMethod4.ImportHistoryEventSimples;
        java.lang.String str6 = postAnalysisMethod4.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod8 = postAnalysisMethod4.setId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod10 = postAnalysisMethod4.setContext("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList12 = postAnalysisMethod11.ImportHistoryEventSimples;
        postAnalysisMethod11.Id = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod15.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList19, observedPropertyArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod21 = postLabAnalysisMethod17.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod23 = postLabAnalysisMethod17.setAuditAttributes(auditAttributes22);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList24 = postLabAnalysisMethod23.getObservedProperties();
        postAnalysisMethod11.ObservedProperties = observedPropertyList24;
        postAnalysisMethod10.ObservedProperties = observedPropertyList24;
        putLabAnalysisMethod0.ObservedProperties = observedPropertyList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod29 = putLabAnalysisMethod0.setName("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNotNull(putLabAnalysisMethod2);
        org.junit.Assert.assertNull(importHistoryEventSimpleList3);
        org.junit.Assert.assertNull(importHistoryEventSimpleList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postAnalysisMethod8);
        org.junit.Assert.assertNotNull(postAnalysisMethod10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList12);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(observedPropertyArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod23);
        org.junit.Assert.assertNotNull(observedPropertyList24);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod29);
    }

    @Test
    public void test40115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40115");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits();
        getUnits0.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits4 = getUnits0.setUnitgroup("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnits getUnits6 = getUnits0.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str7 = getUnits6.CustomId;
        org.junit.Assert.assertNotNull(getUnits4);
        org.junit.Assert.assertNotNull(getUnits6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str7, "http://MaxDurationhttp/json/reply/ArrayList");
    }

    @Test
    public void test40116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40116");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty();
        java.lang.Integer int1 = searchResultObservedProperty0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty3 = searchResultObservedProperty0.setCursor("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Integer int4 = searchResultObservedProperty0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty6 = searchResultObservedProperty0.setCursor("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = searchResultObservedProperty0.getDomainObjects();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultObservedProperty3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(searchResultObservedProperty6);
        org.junit.Assert.assertNull(observedPropertyList7);
    }

    @Test
    public void test40117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40117");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceRequest locationDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceRequest();
        java.lang.Object obj1 = locationDataServiceRequest0.getResponseType();
        locationDataServiceRequest0.LocationIdentifier = "ZZZZZ";
        java.lang.String str4 = locationDataServiceRequest0.getLocationIdentifier();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDataServiceResponse");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZZZZZ" + "'", str4, "ZZZZZ");
    }

    @Test
    public void test40118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40118");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList5, nameTagDefinitionArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse7 = locationTagListServiceResponse3.setTags(nameTagDefinitionList5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary8.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        dischargeSummary8.MeasurementTime = instant12;
        locationTagListServiceResponse3.ResponseTime = instant12;
        getChartDataV2_0.StartResultTime = instant12;
        java.time.Instant instant17 = getChartDataV2_0.getStartResultTime();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse7);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test40119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40119");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        java.lang.String str3 = parameterMetadata0.getInterpolationType();
        parameterMetadata0.InterpolationType = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata7 = parameterMetadata0.setDisplayName("PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata9 = parameterMetadata7.setUnitGroupIdentifier("");
        java.lang.String str10 = parameterMetadata9.getUnitIdentifier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(parameterMetadata7);
        org.junit.Assert.assertNotNull(parameterMetadata9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test40120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40120");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str1 = ratingModelEffectiveShiftsServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest3 = ratingModelEffectiveShiftsServiceRequest0.setRatingModelIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList5 = ratingModelDescriptionListServiceResponse4.RatingModelDescriptions;
        java.time.Instant instant6 = ratingModelDescriptionListServiceResponse4.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType8 = calibrationCheck7.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = calibrationCheck7.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck20 = calibrationCheck7.setTime(instant19);
        java.time.Instant instant21 = calibrationCheck20.Time;
        ratingModelDescriptionListServiceResponse4.NextToken = instant21;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList23 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse24 = ratingModelDescriptionListServiceResponse4.setRatingModelDescriptions(ratingModelDescriptionList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription27 = locationDescription25.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType29 = null;
        controlConditionActivity28.ControlCleaned = controlCleanedType29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        controlConditionActivity28.DateCleaned = instant32;
        locationDescription27.LastModified = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse36 = ratingModelDescriptionListServiceResponse4.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest37 = ratingModelEffectiveShiftsServiceRequest0.setQueryTo(instant32);
        java.time.Instant instant38 = ratingModelEffectiveShiftsServiceRequest0.getQueryTo();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest3);
        org.junit.Assert.assertNull(ratingModelDescriptionList5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(calibrationCheckType8);
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(calibrationCheck20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(locationDescription27);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest37);
        org.junit.Assert.assertNotNull(instant38);
    }

    @Test
    public void test40121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40121");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint offsetPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint();
        offsetPoint0.Offset = 0.0d;
        java.lang.Double double3 = offsetPoint0.getInputValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint offsetPoint5 = offsetPoint0.setOffset((java.lang.Double) 0.0d);
        java.lang.Double double6 = offsetPoint5.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint offsetPoint8 = offsetPoint5.setInputValue((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint offsetPoint10 = offsetPoint8.setInputValue((java.lang.Double) 1.0d);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(offsetPoint5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNotNull(offsetPoint8);
        org.junit.Assert.assertNotNull(offsetPoint10);
    }

    @Test
    public void test40122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40122");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        postRecurringReport19.NextGenerationDate = instant23;
        java.time.Instant instant26 = postRecurringReport19.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset27 = statisticalDateTimeOffset18.setDateTimeOffset(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription35 = timeSeriesDescription28.setRawStartTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset36 = statisticalDateTimeOffset18.setDateTimeOffset(instant32);
        timeSeries0.LastModifiedTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries39 = timeSeries0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries41 = timeSeries0.setComment("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries43 = timeSeries41.setPublish((java.lang.Boolean) true);
        java.time.Instant instant44 = timeSeries41.getLastModifiedTime();
        timeSeries41.Parameter = "hi!";
        timeSeries41.Identifier = "/AQUARIUS";
        timeSeries41.LocationName = "http://MaxDurationhttp/json/reply/Float";
        java.time.Instant instant51 = timeSeries41.LastModifiedTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList52 = timeSeries41.ExtendedAttributeValues;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(timeSeriesDescription35);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset36);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertNotNull(timeSeries41);
        org.junit.Assert.assertNotNull(timeSeries43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNull(extendedAttributeValueList52);
    }

    @Test
    public void test40123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40123");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport();
        java.lang.String str1 = getLabReport0.Id;
        java.lang.String str2 = getLabReport0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test40124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40124");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField3 = extendedAttributeField1.setDisplayName("");
        java.lang.Boolean boolean4 = extendedAttributeField3.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str35 = getObservationsV2_34.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        getObservationsV2_34.ProjectIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_13.setObservedPropertyIds((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest5.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField3.setValueOptions((java.util.List<java.lang.String>) strList39);
        putBulkEditResultGradesV2_0.AnalysisMethodSimpleIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_48 = putBulkEditResultGradesV2_0.setNumericResultValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList50 = importItemObject49.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList52 = getSpecimens51.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens54 = getSpecimens51.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str56 = getChartDataV2_55.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_55.setFilterId("");
        java.util.List<java.lang.String> strList59 = getChartDataV2_55.ResultGrades;
        getChartDataV2_55.MinNumericResultValue = 100.0d;
        java.lang.Double double62 = getChartDataV2_55.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_64.setDataClassifications((java.util.List<java.lang.String>) strList68);
        postTag63.PickListValues = strList68;
        getChartDataV2_55.SamplingContextTagIds = strList68;
        getSpecimens51.ActivityTypes = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject74 = importItemObject49.setExistingItem((java.lang.Object) strList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_75 = putBulkEditResultGradesV2_48.setIds((java.util.List<java.lang.String>) strList68);
        java.time.Instant instant76 = putBulkEditResultGradesV2_75.getEndModificationTime();
        java.time.Instant instant77 = putBulkEditResultGradesV2_75.getStartResultTime();
        java.util.List<java.lang.String> strList78 = putBulkEditResultGradesV2_75.getProjectIds();
        java.util.List<java.lang.String> strList79 = putBulkEditResultGradesV2_75.getTaxonIds();
        org.junit.Assert.assertNotNull(extendedAttributeField3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(getSpecimens54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(double62);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNotNull(importItemObject74);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(instant77);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNull(strList79);
    }

    @Test
    public void test40125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40125");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportStatusV2 getObservationImportStatusV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportStatusV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportStatusV2 getObservationImportStatusV2_2 = getObservationImportStatusV2_0.setId("'.'SSSSSSS");
        java.lang.Object obj3 = getObservationImportStatusV2_0.getResponseType();
        org.junit.Assert.assertNotNull(getObservationImportStatusV2_2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ImportProcessorTransactionStatusResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ImportProcessorTransactionStatusResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ImportProcessorTransactionStatusResponse");
    }

    @Test
    public void test40126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40126");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList1 = analysisMethodImportSummary0.getImportJobErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple2 = analysisMethodImportSummary0.getImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList4 = analysisMethodImportSummary3.getImportJobErrors();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod> importItemAnalysisMethodList5 = analysisMethodImportSummary3.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodImportSummary analysisMethodImportSummary7 = analysisMethodImportSummary3.setNewCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary8.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary12 = observedPropertyImportSummary8.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = reading14.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading17 = reading14.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading19 = reading17.setModel("MaxInstant");
        java.lang.Integer int20 = reading19.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField24 = extendedAttributeField22.setDisplayName("");
        java.lang.Boolean boolean25 = extendedAttributeField24.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj27 = timeAlignedDataServiceRequest26.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_28.setDataClassifications((java.util.List<java.lang.String>) strList32);
        getObservationsV2_34.DepthUnitCustomId = "hi!";
        java.lang.String str37 = getObservationsV2_34.CustomId;
        java.util.List<java.lang.String> strList38 = getObservationsV2_34.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        getObservationsV2_39.QualityControlTypes = strList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_34.setMedia((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str56 = getObservationsV2_55.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        getObservationsV2_55.ProjectIds = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_34.setObservedPropertyIds((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = timeAlignedDataServiceRequest26.setTimeSeriesOutputUnitIds(strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField66 = extendedAttributeField24.setValueOptions((java.util.List<java.lang.String>) strList60);
        putBulkEditResultGradesV2_21.AnalysisMethodSimpleIds = strList60;
        reading19.ReadingQualifiers = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty69 = importItemObservedProperty13.setFields((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty13 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList71 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList71, importItemObservedPropertyArray70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary73 = observedPropertyImportSummary8.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary75 = observedPropertyImportSummary73.setSuccessCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary76.UpdateCount = (-1);
        java.lang.Integer int79 = observationImportSummary76.ExpectedCount;
        java.lang.String str80 = observationImportSummary76.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList82 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList82, importErrorArray81);
        observationImportSummary76.ImportJobErrors = importErrorList82;
        observedPropertyImportSummary73.ImportJobErrors = importErrorList82;
        analysisMethodImportSummary7.ImportJobErrors = importErrorList82;
        analysisMethodImportSummary0.ImportJobErrors = importErrorList82;
        org.junit.Assert.assertNull(importErrorList1);
        org.junit.Assert.assertNull(importHistoryEventSimple2);
        org.junit.Assert.assertNull(importErrorList4);
        org.junit.Assert.assertNull(importItemAnalysisMethodList5);
        org.junit.Assert.assertNotNull(analysisMethodImportSummary7);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary12);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(reading17);
        org.junit.Assert.assertNotNull(reading19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(extendedAttributeField24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest65);
        org.junit.Assert.assertNotNull(extendedAttributeField66);
        org.junit.Assert.assertNotNull(importItemObservedProperty69);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary73);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary75);
        org.junit.Assert.assertNull(int79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(importErrorArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test40127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40127");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag7 = postTag3.setName("0001-01-01T00:00:00.000Z");
        java.lang.String str8 = postTag3.Id;
        java.lang.String str9 = postTag3.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNotNull(postTag7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "POST" + "'", str9, "POST");
    }

    @Test
    public void test40128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40128");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean2 = role1.CanRemoveAppendConfigurations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role4 = role1.setCanAddAppendConfigurations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role[] roleArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role[] { role1 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role>) roleList6, roleArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse8 = rolesResponse0.setResults(roleList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean12 = role11.CanRemoveAppendConfigurations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role14 = role11.setCanAddAppendConfigurations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role[] roleArray15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role[] { role11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role>) roleList16, roleArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse18 = rolesResponse10.setResults(roleList16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse19 = rolesResponse9.setResults(roleList16);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList20 = rolesResponse19.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RolesResponse rolesResponse21 = rolesResponse8.setResults(roleList20);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList22 = rolesResponse8.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role> roleList23 = rolesResponse8.getResults();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(role4);
        org.junit.Assert.assertNotNull(roleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(rolesResponse8);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(role14);
        org.junit.Assert.assertNotNull(roleArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(rolesResponse18);
        org.junit.Assert.assertNotNull(rolesResponse19);
        org.junit.Assert.assertNotNull(roleList20);
        org.junit.Assert.assertNotNull(rolesResponse21);
        org.junit.Assert.assertNotNull(roleList22);
        org.junit.Assert.assertNotNull(roleList23);
    }

    @Test
    public void test40129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40129");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin();
        java.lang.String str1 = putReportPlugin0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin3 = putReportPlugin0.setUniqueId("POST");
        putReportPlugin3.IsEnabled = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putReportPlugin3);
    }

    @Test
    public void test40130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40130");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.DiscreteMeasurementActivity;
        java.lang.Boolean boolean2 = fieldVisitDataServiceRequest0.IncludeInvalidActivities;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test40131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40131");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str1 = tagMetadata0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata3 = tagMetadata0.setUniqueId("'.'SSSSSSS");
        java.lang.String str4 = tagMetadata3.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata6 = tagMetadata3.setUniqueId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata8 = tagMetadata6.setName("'.'SSSSSSS");
        java.lang.String str9 = tagMetadata6.Key;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata11 = tagMetadata6.setName("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(tagMetadata3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "'.'SSSSSSS" + "'", str4, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(tagMetadata6);
        org.junit.Assert.assertNotNull(tagMetadata8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(tagMetadata11);
    }

    @Test
    public void test40132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40132");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.lang.Integer int1 = inspectionActivity0.NumberOfReadingsNotDatumConverted;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity3 = inspectionActivity0.setNumberOfReadingsNotDatumConverted((java.lang.Integer) 1);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList4 = inspectionActivity0.Readings;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(inspectionActivity3);
        org.junit.Assert.assertNull(readingList4);
    }

    @Test
    public void test40133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40133");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        java.lang.String str1 = samplingLocationGroup0.Id;
        java.lang.String str2 = samplingLocationGroup0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test40134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40134");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        java.time.OffsetDateTime offsetDateTime1 = putFieldVisit0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple2 = putFieldVisit0.getFieldTrip();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList3 = putFieldVisit0.getPlannedActivities();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList4 = putFieldVisit0.PlannedFieldResults;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        putFieldVisit0.ExtendedAttributes = extendedAttributeList5;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList7 = putFieldVisit0.PlannedActivities;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit8.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList13, plannedActivityArray12);
        putFieldVisit11.PlannedActivities = plannedActivityList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit16 = putFieldVisit8.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str18 = projectSimple17.Name;
        java.lang.String str19 = projectSimple17.getCustomId();
        projectSimple17.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple23 = projectSimple17.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit24 = putFieldVisit8.setProject(projectSimple17);
        putFieldVisit0.Project = projectSimple17;
        projectSimple17.Id = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str28 = projectSimple17.getName();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(fieldTripSimple2);
        org.junit.Assert.assertNull(plannedActivityList3);
        org.junit.Assert.assertNull(plannedFieldResultList4);
        org.junit.Assert.assertNull(plannedActivityList7);
        org.junit.Assert.assertNotNull(plannedActivityArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(putFieldVisit16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(projectSimple23);
        org.junit.Assert.assertNotNull(putFieldVisit24);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test40135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40135");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = null;
        putSchedule5.LastGenerationDate = offsetDateTime7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType9 = putSchedule5.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = plannedFieldResult10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = plannedFieldResult10.setAuditAttributes(auditAttributes15);
        putSchedule5.AuditAttributes = auditAttributes15;
        labInstructionTemplate0.AuditAttributes = auditAttributes15;
        java.lang.String str20 = labInstructionTemplate0.PreparationMethod;
        java.lang.String str21 = labInstructionTemplate0.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = labInstructionTemplate0.getAnalysisMethod();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType9);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(plannedFieldResult17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(analysisMethod22);
    }

    @Test
    public void test40136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40136");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.Integer int1 = indexRange0.getUpperLimitValue();
        java.lang.Integer int2 = indexRange0.LowerLimitValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange4 = indexRange0.setLowerLimitValue((java.lang.Integer) 10);
        indexRange4.LowerLimitValue = 0;
        indexRange4.UpperLimitValue = 5;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(indexRange4);
    }

    @Test
    public void test40137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40137");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = putFieldVisit0.getSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan6.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList9 = samplingPlan6.PlannedActivities;
        java.lang.String str10 = samplingPlan6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit11 = putFieldVisit0.setSamplingPlan(samplingPlan6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit13 = putFieldVisit11.setProject(projectSimple12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList16, plannedActivityArray15);
        putFieldVisit14.PlannedActivities = plannedActivityList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str20 = domainObjectAttachment19.getId();
        java.lang.String str21 = domainObjectAttachment19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = domainObjectAttachment19.setAttachment(attachment22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        domainObjectAttachment24.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = domainObjectAttachment24.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        java.lang.String str33 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment31.setAttachment(attachment34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment19, domainObjectAttachment24, domainObjectAttachment31, domainObjectAttachment36, domainObjectAttachment38, domainObjectAttachment43 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList46, domainObjectAttachmentArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = putFieldVisit14.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan49 = putFieldVisit14.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple50 = putFieldVisit14.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule51 = putFieldVisit14.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str53 = samplingLocation52.Description;
        java.lang.String str54 = samplingLocation52.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation56 = samplingLocation52.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit57 = putFieldVisit14.setSamplingLocation(samplingLocation52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation59 = samplingLocation52.setAddress(address58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = putFieldVisit11.setSamplingLocation(samplingLocation52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType61 = samplingLocation52.Type;
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNull(schedule5);
        org.junit.Assert.assertNull(samplingPlanPlannedActivityList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(putFieldVisit11);
        org.junit.Assert.assertNotNull(putFieldVisit13);
        org.junit.Assert.assertNotNull(plannedActivityArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(domainObjectAttachment23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putFieldVisit48);
        org.junit.Assert.assertNull(samplingPlan49);
        org.junit.Assert.assertNull(fieldTripSimple50);
        org.junit.Assert.assertNull(schedule51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(samplingLocation56);
        org.junit.Assert.assertNotNull(putFieldVisit57);
        org.junit.Assert.assertNotNull(samplingLocation59);
        org.junit.Assert.assertNotNull(putFieldVisit60);
        org.junit.Assert.assertNull(locationType61);
    }

    @Test
    public void test40138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40138");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen8.Activity = activity9;
        java.lang.String str11 = activity9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_12 = putObservationV2_2.setActivity(activity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_15 = postObservationV2_13.setLabInstruction(labInstruction14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = plannedFieldResult16.AuditAttributes;
        plannedFieldResult16.Id = "'.'SSSSSSS";
        java.lang.String str20 = plannedFieldResult16.DeviceType;
        java.lang.String str21 = plannedFieldResult16.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str23 = metricConfiguration22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty24.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration27 = metricConfiguration22.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType28 = observedProperty24.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup30 = postObservedProperty29.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = null;
        quantity31.Unit = unit32;
        postObservedProperty29.LowerLimit = quantity31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity35 = postObservedProperty29.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit36 = quantity35.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = observedProperty24.setUpperLimit(quantity35);
        plannedFieldResult16.ObservedProperty = observedProperty37;
        plannedFieldResult16.Id = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_41 = postObservationV2_13.setPlannedFieldResult(plannedFieldResult16);
        plannedFieldResult16.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        plannedFieldResult16.Comment = "ZZZZZ";
        putObservationV2_12.PlannedFieldResult = plannedFieldResult16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType48 = observation47.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium49 = null;
        observation47.Medium = medium49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = observation47.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple52 = observation47.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = plannedFieldResult53.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails59 = labResultDetails57.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult60 = plannedFieldResult53.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty61 = plannedFieldResult60.getObservedProperty();
        observation47.PlannedFieldResult = plannedFieldResult60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_63 = putObservationV2_12.setPlannedFieldResult(plannedFieldResult60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen66 = specimen64.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory67 = specimen66.Laboratory;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList68 = specimen66.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType69 = specimen66.getPreservative();
        java.lang.String str70 = specimen66.getId();
        putObservationV2_12.Specimen = specimen66;
        java.time.OffsetDateTime offsetDateTime72 = putObservationV2_12.ResultTime;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(putObservationV2_12);
        org.junit.Assert.assertNotNull(postObservationV2_15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "'.'SSSSSSS" + "'", str21, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(metricConfiguration27);
        org.junit.Assert.assertNull(resultType28);
        org.junit.Assert.assertNull(unitGroup30);
        org.junit.Assert.assertNotNull(quantity35);
        org.junit.Assert.assertNull(unit36);
        org.junit.Assert.assertNotNull(observedProperty37);
        org.junit.Assert.assertNotNull(postObservationV2_41);
        org.junit.Assert.assertNull(dataClassificationType48);
        org.junit.Assert.assertNull(quantity51);
        org.junit.Assert.assertNull(analysisMethodSimple52);
        org.junit.Assert.assertNull(auditAttributes54);
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNotNull(labResultDetails59);
        org.junit.Assert.assertNotNull(plannedFieldResult60);
        org.junit.Assert.assertNull(observedProperty61);
        org.junit.Assert.assertNotNull(putObservationV2_63);
        org.junit.Assert.assertNotNull(specimen66);
        org.junit.Assert.assertNull(laboratory67);
        org.junit.Assert.assertNull(extendedAttributeList68);
        org.junit.Assert.assertNull(preservativeType69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(offsetDateTime72);
    }

    @Test
    public void test40139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40139");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest6.ReportTitle = "MinDuration";
        java.lang.String str9 = reportListServiceRequest6.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_10.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList28 = getObservationsV2_27.getMedia();
        java.time.Instant instant29 = getObservationsV2_27.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_27.setProjectIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest37 = reportListServiceRequest6.setTagKeys(strList33);
        reportListServiceRequest6.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str41 = deleteFieldVisits40.Sort;
        deleteFieldVisits40.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList44 = deleteFieldVisits40.getScheduleIds();
        java.util.List<java.lang.String> strList45 = deleteFieldVisits40.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_47.setDataClassifications((java.util.List<java.lang.String>) strList51);
        postTag46.PickListValues = strList51;
        java.util.ArrayList<java.lang.String> strList55 = postTag46.PickListValues;
        deleteFieldVisits40.PlanningStatuses = strList55;
        reportListServiceRequest6.TagKeys = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_0.setSearch((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList59 = getChartDataV2_0.ProjectIds;
        java.time.Instant instant60 = getChartDataV2_0.StartResultTime;
        java.lang.Double double61 = getChartDataV2_0.DepthValue;
        java.util.List<java.lang.String> strList62 = getChartDataV2_0.getQualityControlTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(reportListServiceRequest37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(instant60);
        org.junit.Assert.assertNull(double61);
        org.junit.Assert.assertNull(strList62);
    }

    @Test
    public void test40140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40140");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = importSummarySpecimen2.ImportJobErrors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary4.UpdateCount = (-1);
        java.lang.Integer int7 = observationImportSummary4.ExpectedCount;
        java.lang.String str8 = observationImportSummary4.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10, importErrorArray9);
        observationImportSummary4.ImportJobErrors = importErrorList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen13 = importSummarySpecimen2.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList14 = importSummarySpecimen2.ImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen16 = importSummarySpecimen2.setInvalidRowsCsvUrl("multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****");
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(importErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(importSummarySpecimen13);
        org.junit.Assert.assertNull(importItemSpecimenList14);
        org.junit.Assert.assertNotNull(importSummarySpecimen16);
    }

    @Test
    public void test40141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40141");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = pointVelocityDischargeActivity0.Width;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = pointVelocityDischargeActivity0.setModel("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity11 = pointVelocityDischargeActivity9.setSerialNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str12 = pointVelocityDischargeActivity11.getSuspensionWeight();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(quantityWithDisplay7);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity9);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test40142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40142");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType4 = postStatisticalDerivedTimeSeries0.getNewValueLocation();
        java.lang.String str5 = postStatisticalDerivedTimeSeries0.getMethod();
        postStatisticalDerivedTimeSeries0.Method = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(newValueLocationType4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test40143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40143");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.MeanGageHeight;
        java.time.Instant instant2 = dischargeSummary0.getMeasurementStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary0.setIsValid((java.lang.Boolean) true);
        dischargeSummary0.MeanGageHeightMethod = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(dischargeSummary4);
    }

    @Test
    public void test40144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40144");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address2 = address0.setStreetName("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address4 = address2.setPostalCode("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address6 = address2.setStreetName("https");
        java.lang.String str7 = address6.StateProvinceCode;
        org.junit.Assert.assertNotNull(address2);
        org.junit.Assert.assertNotNull(address4);
        org.junit.Assert.assertNotNull(address6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test40145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40145");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = postAnalysisMethod0.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = postAnalysisMethod0.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod7 = postAnalysisMethod5.setMethodId("MaxInstant");
        java.lang.String str8 = postAnalysisMethod7.getContext();
        postAnalysisMethod7.MethodId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod12 = postAnalysisMethod7.setName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod14 = postAnalysisMethod7.setContext("MinDuration");
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postAnalysisMethod3);
        org.junit.Assert.assertNotNull(postAnalysisMethod5);
        org.junit.Assert.assertNotNull(postAnalysisMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postAnalysisMethod12);
        org.junit.Assert.assertNotNull(postAnalysisMethod14);
    }

    @Test
    public void test40146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40146");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier2 = postNullMeasureQualifier0.setId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier4 = postNullMeasureQualifier2.setName("****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.String str5 = postNullMeasureQualifier4.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier7 = postNullMeasureQualifier4.setId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit8.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit12 = putFieldVisit8.setProject(projectSimple11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule13 = putFieldVisit8.getSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan14.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList17 = samplingPlan14.PlannedActivities;
        java.lang.String str18 = samplingPlan14.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit19 = putFieldVisit8.setSamplingPlan(samplingPlan14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation20.setPlannedFieldResult(plannedFieldResult21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction23 = null;
        observation22.LabInstruction = labInstruction23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = observation22.setStatistics(observationStatistics25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon27 = null;
        observation22.RelatedTaxon = taxon27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation22.setResultStatus(resultStatus29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str33 = metricConfiguration32.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty34.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration37 = metricConfiguration32.setObservedProperty(observedProperty34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType38 = observedProperty34.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup40 = postObservedProperty39.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit42 = null;
        quantity41.Unit = unit42;
        postObservedProperty39.LowerLimit = quantity41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity45 = postObservedProperty39.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit46 = quantity45.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = observedProperty34.setUpperLimit(quantity45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation48 = samplingLocation31.setElevation(quantity45);
        observation30.SamplingLocation = samplingLocation31;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList50 = null;
        samplingLocation31.ImportHistoryEventSimples = importHistoryEventSimpleList50;
        putFieldVisit19.SamplingLocation = samplingLocation31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = putFieldVisit19.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = resultDetectionCondition54.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition57 = resultDetectionCondition54.setId("/AQUARIUS");
        java.lang.String str58 = resultDetectionCondition54.getCustomId();
        java.lang.String str59 = resultDetectionCondition54.Description;
        resultDetectionCondition54.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition63 = resultDetectionCondition54.setSystemCode("0001-01-01T00:00:00.000Z");
        java.lang.String str64 = resultDetectionCondition63.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition66 = resultDetectionCondition63.setId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str68 = putActivityTemplate67.getId();
        java.lang.String str69 = putActivityTemplate67.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject72 = postProject70.setAuditAttributes(auditAttributes71);
        java.time.OffsetDateTime offsetDateTime73 = null;
        postProject70.StartTime = offsetDateTime73;
        java.time.OffsetDateTime offsetDateTime75 = postProject70.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject77 = postProject70.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan78.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType81 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan78.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup83 = samplingPlan78.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan85 = samplingPlan78.setAuditAttributes(auditAttributes84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject86 = postProject77.setAuditAttributes(auditAttributes84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate87 = putActivityTemplate67.setAuditAttributes(auditAttributes84);
        java.time.OffsetDateTime offsetDateTime88 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = auditAttributes84.setCreationTime(offsetDateTime88);
        resultDetectionCondition66.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation91 = samplingLocation53.setAuditAttributes(auditAttributes89);
        java.time.OffsetDateTime offsetDateTime92 = auditAttributes89.ModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier93 = postNullMeasureQualifier4.setAuditAttributes(auditAttributes89);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier2);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier7);
        org.junit.Assert.assertNotNull(putFieldVisit12);
        org.junit.Assert.assertNull(schedule13);
        org.junit.Assert.assertNull(samplingPlanPlannedActivityList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(putFieldVisit19);
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNotNull(observation26);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(metricConfiguration37);
        org.junit.Assert.assertNull(resultType38);
        org.junit.Assert.assertNull(unitGroup40);
        org.junit.Assert.assertNotNull(quantity45);
        org.junit.Assert.assertNull(unit46);
        org.junit.Assert.assertNotNull(observedProperty47);
        org.junit.Assert.assertNotNull(samplingLocation48);
        org.junit.Assert.assertNotNull(samplingLocation53);
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNotNull(resultDetectionCondition57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(resultDetectionCondition63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(resultDetectionCondition66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(postProject72);
        org.junit.Assert.assertNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(postProject77);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType81 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType81.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup83);
        org.junit.Assert.assertNotNull(samplingPlan85);
        org.junit.Assert.assertNotNull(postProject86);
        org.junit.Assert.assertNotNull(putActivityTemplate87);
        org.junit.Assert.assertNotNull(auditAttributes89);
        org.junit.Assert.assertNotNull(samplingLocation91);
        org.junit.Assert.assertNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier93);
    }

    @Test
    public void test40147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40147");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.time.Instant instant1 = deleteObservationsV2_0.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest2.ReportTitle = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = reportListServiceRequest2.setUserUniqueId("hi!:///AQUARIUS/Provisioning/v1");
        java.util.ArrayList<java.lang.String> strList7 = reportListServiceRequest6.getTagKeys();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest ratingModelInputValuesServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList14 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList14, doubleArray13);
        ratingModelOutputValuesServiceResponse9.OutputValues = doubleList14;
        ratingModelInputValuesServiceRequest8.OutputValues = doubleList14;
        java.time.Instant instant18 = ratingModelInputValuesServiceRequest8.getEffectiveTime();
        java.time.Instant instant19 = ratingModelInputValuesServiceRequest8.getEffectiveTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType21 = gapToleranceOperation20.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList23 = fieldVisitDataServiceResponse22.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = fieldVisitDataServiceResponse22.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        fieldVisitDataServiceResponse22.ResponseTime = instant29;
        gapToleranceOperation20.DateAppliedUtc = instant29;
        ratingModelInputValuesServiceRequest8.EffectiveTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest34 = reportListServiceRequest6.setCreatedFrom(instant29);
        deleteObservationsV2_0.EndObservedTime = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_37 = deleteObservationsV2_0.setDepthValue((java.lang.Double) 100.0d);
        java.time.Instant instant38 = deleteObservationsV2_0.getEndResultTime();
        java.lang.Double double39 = deleteObservationsV2_0.NumericResultValue;
        java.util.List<java.lang.String> strList40 = deleteObservationsV2_0.TaxonIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_42 = deleteObservationsV2_0.setMaxNumericResultValue((java.lang.Double) 1.0d);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(reportListServiceRequest6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(metadataChangeOperationType21);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList23);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(reportListServiceRequest34);
        org.junit.Assert.assertNotNull(deleteObservationsV2_37);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(double39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(deleteObservationsV2_42);
    }

    @Test
    public void test40148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40148");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.getFieldVisitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest3 = fieldVisitDataServiceRequest0.setIncludeInvalidActivities((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest5 = fieldVisitDataServiceRequest0.setIncludeCrossSectionSurveyProfile((java.lang.Boolean) true);
        fieldVisitDataServiceRequest5.IncludeVerticals = true;
        java.lang.Boolean boolean8 = fieldVisitDataServiceRequest5.isIncludeNodeDetails();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest5);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test40149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40149");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase2 = roleFlattened0.setCanEditAppendConfigurations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase4 = roleFlattenedBase2.setName("");
        java.lang.Boolean boolean5 = roleFlattenedBase4.CanAssignUserRoles;
        org.junit.Assert.assertNotNull(roleFlattenedBase2);
        org.junit.Assert.assertNotNull(roleFlattenedBase4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test40150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40150");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setLocationUniqueId("https");
        sensor7.MethodCode = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor11 = sensor7.setParameterId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor13 = sensor7.setUnitId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor15 = sensor13.setSerialNumber("");
        java.lang.String str16 = sensor15.getSubLocationIdentifier();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNotNull(sensor11);
        org.junit.Assert.assertNotNull(sensor13);
        org.junit.Assert.assertNotNull(sensor15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test40151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40151");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        java.lang.String str3 = postTaxon0.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setScientificName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon7 = postTaxon5.setItisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon8.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str11 = putTaxon8.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate13.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate15.Preservative = preservativeType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate15.setAuditAttributes(auditAttributes21);
        extendedAttributeDefinition12.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon25 = putTaxon8.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon26.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str29 = putTaxon26.getComment();
        putTaxon26.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType33 = postObservedProperty32.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation35.setCategoricalResult(categoricalResult38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41, importHistoryEventSimpleArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation35.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        observedProperty34.ImportHistoryEventSimples = importHistoryEventSimpleList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = postObservedProperty32.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon46 = putTaxon26.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon47 = putTaxon25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon48 = postTaxon5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        postTaxon5.ScientificName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon52 = postTaxon5.setItisComment("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.lang.String str53 = postTaxon52.CommonName;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(postTaxon7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertTrue("'" + preservativeType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertNotNull(putTaxon25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(analysisType33);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(postObservedProperty45);
        org.junit.Assert.assertNotNull(putTaxon46);
        org.junit.Assert.assertNotNull(putTaxon47);
        org.junit.Assert.assertNotNull(postTaxon48);
        org.junit.Assert.assertNotNull(postTaxon52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test40152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40152");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        java.lang.String str7 = timeAlignedPoint0.getDisplayValue2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition11 = tagDefinition9.setValueType(tagValueType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition13 = tagDefinition9.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition15 = tagDefinition13.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition17 = tagDefinition13.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = timeAlignedDataServiceRequest18.setQueryFrom(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest32 = timeAlignedDataServiceRequest18.setTimeSeriesOutputUnitIds(strList29);
        tagDefinition17.PickListValues = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_8.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType35 = getGroupedObservationsV2_34.FieldResultType;
        getGroupedObservationsV2_34.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_39 = getGroupedObservationsV2_34.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList40 = getGroupedObservationsV2_34.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_42 = getGroupedObservationsV2_34.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str43 = getGroupedObservationsV2_34.getDepthUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        java.lang.Double double45 = timeSeriesDataCorrectedServiceRequest44.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList47 = getExportObservations46.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj49 = putLocationType48.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest50.ReportTitle = "MinDuration";
        java.lang.String str53 = reportListServiceRequest50.getLocationUniqueId();
        java.time.Instant instant54 = null;
        reportListServiceRequest50.CreatedFrom = instant54;
        java.lang.String[] strArray68 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        reportListServiceRequest50.TagValues = strList69;
        putLocationType48.ExtendedAttributeDefinitionIds = strList69;
        getExportObservations46.SpecimenIds = strList69;
        java.lang.Double double74 = getExportObservations46.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant76 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse77 = locationDescriptionListServiceResponse75.setNextToken(instant76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations78 = getExportObservations46.setStartModificationTime(instant76);
        timeSeriesDataCorrectedServiceRequest44.QueryFrom = instant76;
        getGroupedObservationsV2_34.EndResultTime = instant76;
        timeAlignedPoint0.Timestamp = instant76;
        java.lang.Long long82 = timeAlignedPoint0.getGradeCode1();
        java.lang.Long long83 = timeAlignedPoint0.getGradeCode1();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint85 = timeAlignedPoint0.setGradeName9("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint87 = timeAlignedPoint85.setGradeName1("PT87591240H");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(tagDefinition11);
        org.junit.Assert.assertNotNull(tagDefinition13);
        org.junit.Assert.assertNotNull(tagDefinition15);
        org.junit.Assert.assertNotNull(tagDefinition17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest23);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(fieldResultType35);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(double45);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(double74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse77);
        org.junit.Assert.assertNotNull(getExportObservations78);
        org.junit.Assert.assertNull(long82);
        org.junit.Assert.assertNull(long83);
        org.junit.Assert.assertNotNull(timeAlignedPoint85);
        org.junit.Assert.assertNotNull(timeAlignedPoint87);
    }

    @Test
    public void test40153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40153");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostConfigurableDropDownListItem postConfigurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostConfigurableDropDownListItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItemBase configurableDropDownListItemBase2 = postConfigurableDropDownListItem0.setDisplayName("MaxInstant");
        java.lang.String str3 = postConfigurableDropDownListItem0.getDropDownListId();
        org.junit.Assert.assertNotNull(configurableDropDownListItemBase2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test40154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40154");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.util.List<java.lang.String> strList1 = postUser0.Roles;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser3 = postUser0.setEmail("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser5 = postUser0.setUserProfile(userProfile4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser7 = postUser5.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile8 = postUser7.UserProfile;
        java.lang.String str9 = postUser7.getCustomId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postUser3);
        org.junit.Assert.assertNotNull(postUser5);
        org.junit.Assert.assertNotNull(postUser7);
        org.junit.Assert.assertNull(userProfile8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str9, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
    }

    @Test
    public void test40155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40155");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = specimen2.Laboratory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen5 = specimen2.setPreservative(preservativeType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen7 = specimen2.setFiltrationComment("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNull(laboratory3);
        org.junit.Assert.assertNotNull(specimen5);
        org.junit.Assert.assertNotNull(specimen7);
    }

    @Test
    public void test40156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40156");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.FieldNamer fieldNamer3 = new com.aquaticinformatics.aquarius.sdk.samples.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient5 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("MaxDuration", "http", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer3, false);
        net.servicestack.client.ExceptionFilter exceptionFilter6 = null;
        sdkServiceClient5.ExceptionFilter = exceptionFilter6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser10 = openIdConnectUser8.setIdentifier("");
        openIdConnectUser8.SubjectIdentifier = "/AQUARIUS/Acquisition/v2";
        openIdConnectUser8.Active = true;
        net.servicestack.client.Route route15 = sdkServiceClient5.getRoute((java.lang.Object) openIdConnectUser8);
        sdkServiceClient5.setAuthenticationToken("POST");
        java.lang.String str18 = sdkServiceClient5.getEndpointUrl();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double20 = putBulkEditResultGradesV2_19.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType23 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition24 = tagDefinition22.setValueType(tagValueType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition26 = tagDefinition22.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition28 = tagDefinition26.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition30 = tagDefinition26.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj32 = timeAlignedDataServiceRequest31.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse33.setNextToken(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = timeAlignedDataServiceRequest31.setQueryFrom(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = timeAlignedDataServiceRequest31.setTimeSeriesOutputUnitIds(strList42);
        tagDefinition30.PickListValues = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_47 = getGroupedObservationsV2_21.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType48 = getGroupedObservationsV2_47.FieldResultType;
        getGroupedObservationsV2_47.SpecimenName = "MaxInstant";
        java.lang.String str51 = getGroupedObservationsV2_47.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_53 = getGroupedObservationsV2_47.setCustomId("MinDuration");
        java.time.Instant instant54 = getGroupedObservationsV2_47.StartObservedTime;
        java.util.List<java.lang.String> strList55 = getGroupedObservationsV2_47.getLabResultLabAnalysisMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_56 = putBulkEditResultGradesV2_19.setActivityTypes(strList55);
        net.servicestack.client.Route route57 = sdkServiceClient5.getRoute((java.lang.Object) putBulkEditResultGradesV2_56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList59 = getObservationExportIIV2_58.getCollectionMethodIds();
        java.lang.Integer int60 = getObservationExportIIV2_58.getLimit();
        java.util.List<java.lang.String> strList61 = getObservationExportIIV2_58.SamplingLocationGroupIds;
        java.util.List<java.lang.String> strList62 = getObservationExportIIV2_58.Search;
        // The following exception was thrown during execution in test generation
        try {
            sdkServiceClient5.delete((net.servicestack.client.IReturnVoid) getObservationExportIIV2_58);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.UnknownHostException: MaxDurationhttp");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sdkServiceClient5);
        org.junit.Assert.assertNotNull(openIdConnectUser10);
        org.junit.Assert.assertNull(route15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://MaxDurationhttp" + "'", str18, "http://MaxDurationhttp");
        org.junit.Assert.assertNull(double20);
        org.junit.Assert.assertNotNull(tagDefinition24);
        org.junit.Assert.assertNotNull(tagDefinition26);
        org.junit.Assert.assertNotNull(tagDefinition28);
        org.junit.Assert.assertNotNull(tagDefinition30);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest45);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_47);
        org.junit.Assert.assertNull(fieldResultType48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_53);
        org.junit.Assert.assertNull(instant54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_56);
        org.junit.Assert.assertNotNull(route57);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNull(strList62);
    }

    @Test
    public void test40157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40157");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType5 = putObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty7 = putObservedProperty0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str8 = putObservedProperty0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = postAnalysisMethod10.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = postLabAnalysisMethod12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList16, observedPropertyArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod18 = postLabAnalysisMethod14.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList16);
        postAnalysisMethod10.ObservedProperties = observedPropertyList16;
        java.lang.String str20 = postAnalysisMethod10.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList22 = postAnalysisMethod21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod25 = postLabAnalysisMethod23.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList27, observedPropertyArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod25.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList27);
        postAnalysisMethod21.ObservedProperties = observedPropertyList27;
        postAnalysisMethod10.ObservedProperties = observedPropertyList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod32 = putLabAnalysisMethod9.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList27);
        java.lang.String str33 = putLabAnalysisMethod32.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod35 = putLabAnalysisMethod32.setContext("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod37 = putLabAnalysisMethod35.setContext("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation40.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation44 = observation40.setCategoricalResult(categoricalResult43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList46, importHistoryEventSimpleArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = observation40.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod49 = postLabAnalysisMethod39.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty50 = postObservedProperty38.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType51 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty52 = postObservedProperty50.setAnalysisType(analysisType51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = observation53.setPlannedFieldResult(plannedFieldResult54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction56 = null;
        observation55.LabInstruction = labInstruction56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = observation55.setStatistics(observationStatistics58);
        java.time.OffsetDateTime offsetDateTime60 = observation59.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList61 = observation59.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation63 = observation59.setObservedProperty(observedProperty62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade64 = observation63.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup66 = postObservedProperty65.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList68, importHistoryEventSimpleArray67);
        postObservedProperty65.ImportHistoryEventSimples = importHistoryEventSimpleList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation71 = observation63.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList68);
        postObservedProperty52.ImportHistoryEventSimples = importHistoryEventSimpleList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod73 = putLabAnalysisMethod35.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList68);
        putObservedProperty0.ImportHistoryEventSimples = importHistoryEventSimpleList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType75 = putObservedProperty0.getAnalysisType();
        java.lang.String str76 = putObservedProperty0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity77 = putObservedProperty0.getLowerLimit();
        java.lang.String str78 = putObservedProperty0.Id;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(analysisType5);
        org.junit.Assert.assertNotNull(putObservedProperty7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod14);
        org.junit.Assert.assertNotNull(observedPropertyArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(importHistoryEventSimpleList22);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod25);
        org.junit.Assert.assertNotNull(observedPropertyArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod35);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod37);
        org.junit.Assert.assertNotNull(observation44);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(observation48);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod49);
        org.junit.Assert.assertNotNull(postObservedProperty50);
        org.junit.Assert.assertTrue("'" + analysisType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL + "'", analysisType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL));
        org.junit.Assert.assertNotNull(postObservedProperty52);
        org.junit.Assert.assertNotNull(observation55);
        org.junit.Assert.assertNotNull(observation59);
        org.junit.Assert.assertNull(offsetDateTime60);
        org.junit.Assert.assertNull(importHistoryEventSimpleList61);
        org.junit.Assert.assertNotNull(observation63);
        org.junit.Assert.assertNull(resultGrade64);
        org.junit.Assert.assertNull(unitGroup66);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(observation71);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod73);
        org.junit.Assert.assertNull(analysisType75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(quantity77);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test40158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40158");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeStepCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries8 = postStatisticalDerivedTimeSeries6.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries10 = postStatisticalDerivedTimeSeries6.setLabel("'.'SSSSSSS");
        postStatisticalDerivedTimeSeries6.Parameter = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries14 = postStatisticalDerivedTimeSeries6.setLocationUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries16 = postStatisticalDerivedTimeSeries14.setNewValueLocation(newValueLocationType15);
        postStatisticalDerivedTimeSeries5.NewValueLocation = newValueLocationType15;
        postStatisticalDerivedTimeSeries5.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str20 = postStatisticalDerivedTimeSeries5.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries22 = postStatisticalDerivedTimeSeries5.setTimeSeriesUniqueId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries8);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries10);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries14);
        org.junit.Assert.assertTrue("'" + newValueLocationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries22);
    }

    @Test
    public void test40159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40159");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        activityTemplate0.AuditAttributes = auditAttributes1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str4 = putActivityTemplate3.getId();
        java.lang.String str5 = putActivityTemplate3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate9 = putActivityTemplate3.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate9.Medium = mediumType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate12 = activityTemplate0.setMedium(mediumType10);
        java.lang.String str13 = activityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION;
        activityTemplate0.Type = activityTemplateType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate17 = activityTemplate0.setComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate19 = activityTemplate17.setCustomId("/AQUARIUS");
        java.lang.String str20 = activityTemplate19.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType21 = activityTemplate19.getType();
        java.lang.String str22 = activityTemplate19.Comment;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putActivityTemplate9);
        org.junit.Assert.assertTrue("'" + mediumType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + activityTemplateType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION + "'", activityTemplateType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION));
        org.junit.Assert.assertNotNull(activityTemplate17);
        org.junit.Assert.assertNotNull(activityTemplate19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/AQUARIUS" + "'", str20, "/AQUARIUS");
        org.junit.Assert.assertTrue("'" + activityTemplateType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION + "'", activityTemplateType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str22, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
    }

    @Test
    public void test40160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40160");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity3.setMeterEquation("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str7 = pointVelocityDischargeActivity6.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = pointVelocityDischargeActivity6.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity11 = pointVelocityDischargeActivity6.setMethodCoefficientUsed((java.lang.Boolean) true);
        java.lang.String str12 = pointVelocityDischargeActivity11.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str14 = pointVelocityDischargeActivity13.getModel();
        pointVelocityDischargeActivity13.Manufacturer = "'.'SSSSSSS";
        pointVelocityDischargeActivity13.HorizontalCoefficientUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity20 = pointVelocityDischargeActivity13.setModel("9999-12-31T23:59:59.999Z");
        java.lang.Integer int21 = pointVelocityDischargeActivity13.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str23 = pointVelocityDischargeActivity22.getModel();
        java.lang.String str24 = pointVelocityDischargeActivity22.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = null;
        pointVelocityDischargeActivity22.Width = quantityWithDisplay25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType27 = null;
        pointVelocityDischargeActivity22.StartPoint = startPointType27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList30, verticalArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = pointVelocityDischargeActivity22.setVerticals(verticalList30);
        pointVelocityDischargeActivity13.Verticals = verticalList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = pointVelocityDischargeActivity11.setVerticals(verticalList30);
        pointVelocityDischargeActivity5.Verticals = verticalList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str37 = pointVelocityDischargeActivity36.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity39 = pointVelocityDischargeActivity36.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity41 = pointVelocityDischargeActivity36.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = vertical42.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType44 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical42.VerticalType = verticalType44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation48 = velocityObservation46.setDeploymentMethod(deploymentMethodType47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType50 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation51 = velocityObservation49.setDeploymentMethod(deploymentMethodType50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList53, velocityDepthObservationArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation55 = velocityObservation51.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation56 = velocityObservation46.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical57 = vertical42.setVelocityObservation(velocityObservation46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical59 = vertical57.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay58);
        pointVelocityDischargeActivity36.Width = datumConvertedQuantityWithDisplay58;
        pointVelocityDischargeActivity5.DistanceToMeter = datumConvertedQuantityWithDisplay58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str63 = pointVelocityDischargeActivity62.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity65 = pointVelocityDischargeActivity62.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity67 = pointVelocityDischargeActivity62.setSoftwareVersion("");
        java.lang.String str68 = pointVelocityDischargeActivity67.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType69 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity67.StartPoint = startPointType69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity71 = pointVelocityDischargeActivity5.setStartPoint(startPointType69);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity9);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(verticalArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity32);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity39);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity41);
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertTrue("'" + verticalType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType44.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation48);
        org.junit.Assert.assertTrue("'" + deploymentMethodType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType50.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation51);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(velocityObservation55);
        org.junit.Assert.assertNotNull(velocityObservation56);
        org.junit.Assert.assertNotNull(vertical57);
        org.junit.Assert.assertNotNull(vertical59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity65);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + startPointType69 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType69.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity71);
    }

    @Test
    public void test40161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40161");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = pointVelocityDischargeActivity0.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList2 = pointVelocityDischargeActivity0.Verticals;
        java.lang.String str3 = pointVelocityDischargeActivity0.SerialNumber;
        java.lang.Integer int4 = pointVelocityDischargeActivity0.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType dischargeMethodType5 = pointVelocityDischargeActivity0.DischargeMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity0.setSoftwareVersion("9999-12-31T23:59:59.999Z");
        java.lang.String str8 = pointVelocityDischargeActivity7.getMeterEquation();
        java.lang.Boolean boolean9 = pointVelocityDischargeActivity7.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        java.lang.String str13 = dischargeSummary12.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        dischargeSummary14.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary14.MeasurementGrade = measurementGradeType19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = dischargeSummary12.setMeasurementGrade(measurementGradeType19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity24 = pointVelocityDischargeActivity22.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity22.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = pointVelocityDischargeActivity22.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList29 = pointVelocityDischargeActivity28.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity28.DistanceToMeter = datumConvertedQuantityWithDisplay30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary12.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity7.setWidth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay30);
        pointVelocityDischargeActivity7.SoftwareVersion = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        pointVelocityDischargeActivity7.MethodCoefficientUsed = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType38 = pointVelocityDischargeActivity7.StartPoint;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(verticalList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dischargeMethodType5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + measurementGradeType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary21);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity24);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity28);
        org.junit.Assert.assertNull(verticalList29);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNull(startPointType38);
    }

    @Test
    public void test40162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40162");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse codeTableResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] codeTableArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>) codeTableList2, codeTableArray1);
        codeTableResponse0.Results = codeTableList2;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList5 = codeTableResponse0.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse codeTableResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] codeTableArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>) codeTableList8, codeTableArray7);
        codeTableResponse6.Results = codeTableList8;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList11 = codeTableResponse6.Results;
        codeTableResponse0.Results = codeTableList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse codeTableResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] codeTableArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>) codeTableList15, codeTableArray14);
        codeTableResponse13.Results = codeTableList15;
        codeTableResponse0.Results = codeTableList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse codeTableResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] codeTableArray20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable>) codeTableList21, codeTableArray20);
        codeTableResponse19.Results = codeTableList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse codeTableResponse24 = codeTableResponse0.setResults(codeTableList21);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList25 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableResponse codeTableResponse26 = codeTableResponse0.setResults(codeTableList25);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList27 = codeTableResponse0.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable> codeTableList28 = codeTableResponse0.getResults();
        org.junit.Assert.assertNotNull(codeTableArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(codeTableList5);
        org.junit.Assert.assertNotNull(codeTableArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(codeTableList11);
        org.junit.Assert.assertNotNull(codeTableArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(codeTableArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(codeTableResponse24);
        org.junit.Assert.assertNotNull(codeTableResponse26);
        org.junit.Assert.assertNull(codeTableList27);
        org.junit.Assert.assertNull(codeTableList28);
    }

    @Test
    public void test40163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40163");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project3 = project0.setType(projectType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project5 = project0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str6 = project0.getId();
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project8 = project0.setEndTime(offsetDateTime7);
        java.time.OffsetDateTime offsetDateTime9 = null;
        project8.StartTime = offsetDateTime9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project12 = project8.setCustomId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project14 = project8.setCustomId("");
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project16 = project8.setStartTime(offsetDateTime15);
        java.lang.Boolean boolean17 = project8.Approved;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + projectType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNotNull(project3);
        org.junit.Assert.assertNotNull(project5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(project8);
        org.junit.Assert.assertNotNull(project12);
        org.junit.Assert.assertNotNull(project14);
        org.junit.Assert.assertNotNull(project16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test40164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40164");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary0.UpdateCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary4 = observationImportSummary0.setSuccessCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary6 = observationImportSummary4.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        observationImportSummary4.SkippedCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary9.UpdateCount = (-1);
        java.lang.Integer int12 = observationImportSummary9.ExpectedCount;
        java.lang.String str13 = observationImportSummary9.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList15, importErrorArray14);
        observationImportSummary9.ImportJobErrors = importErrorList15;
        observationImportSummary9.NewCount = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str21 = importHistoryEventSimple20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary22 = observationImportSummary9.setImportHistoryEventSimple(importHistoryEventSimple20);
        java.lang.String str23 = importHistoryEventSimple20.getFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple25 = importHistoryEventSimple20.setImportedBy(userProfile24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile26 = importHistoryEventSimple25.ImportedBy;
        observationImportSummary4.ImportHistoryEventSimple = importHistoryEventSimple25;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList28 = observationImportSummary4.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary29.UpdateCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary33 = observationImportSummary29.setSuccessCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple34 = observationImportSummary29.getImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary36 = observationImportSummary29.setInvalidRowsCsvUrl("https");
        java.lang.Integer int37 = observationImportSummary29.getNewCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary39 = observationImportSummary29.setExpectedCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary42 = observationImportSummary40.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary44 = observationImportSummary42.setExpectedCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary46 = observationImportSummary42.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList48, importItemObservationArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary50 = observationImportSummary46.setErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary51 = observationImportSummary29.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList48);
        observationImportSummary4.ImportItems = importItemObservationList48;
        org.junit.Assert.assertNotNull(observationImportSummary4);
        org.junit.Assert.assertNotNull(observationImportSummary6);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(importErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(observationImportSummary22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(importHistoryEventSimple25);
        org.junit.Assert.assertNull(userProfile26);
        org.junit.Assert.assertNull(importItemObservationList28);
        org.junit.Assert.assertNotNull(observationImportSummary33);
        org.junit.Assert.assertNull(importHistoryEventSimple34);
        org.junit.Assert.assertNotNull(observationImportSummary36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(observationImportSummary39);
        org.junit.Assert.assertNotNull(observationImportSummary42);
        org.junit.Assert.assertNotNull(observationImportSummary44);
        org.junit.Assert.assertNotNull(observationImportSummary46);
        org.junit.Assert.assertNotNull(importItemObservationArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(observationImportSummary50);
        org.junit.Assert.assertNotNull(observationImportSummary51);
    }

    @Test
    public void test40165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40165");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = observation0.RelatedTaxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation10.setPlannedFieldResult(plannedFieldResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction13 = null;
        observation12.LabInstruction = labInstruction13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation12.setStatistics(observationStatistics15);
        java.time.OffsetDateTime offsetDateTime17 = observation16.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList18 = observation16.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation16.setObservedProperty(observedProperty19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList22, ruleValidationDetailsArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation16.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList22);
        observation0.ValidationWarnings = ruleValidationDetailsList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str28 = postLaboratory27.Address;
        java.lang.String str29 = postLaboratory27.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = samplingPlanPlannedActivity30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = auditAttributes33.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity32.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = samplingPlanPlannedActivity32.AuditAttributes;
        postLaboratory27.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory40 = postLaboratory27.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon42 = taxonomicResult41.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = taxonomicResult41.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan45.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType48 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan45.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup50 = samplingPlan45.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan52 = samplingPlan45.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag53 = putTag44.setAuditAttributes(auditAttributes51);
        taxonomicResult41.AuditAttributes = auditAttributes51;
        postLaboratory40.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_56 = putObservationV2_26.setAuditAttributes(auditAttributes51);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList57 = putObservationV2_56.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade60 = resultGrade58.setId("/AQUARIUS/Provisioning/v1");
        putObservationV2_56.ResultGrade = resultGrade60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_64 = postObservationV2_62.setLabInstruction(labInstruction63);
        java.lang.String str65 = postObservationV2_64.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod66 = postObservationV2_64.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation67.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation71 = observation67.setCategoricalResult(categoricalResult70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType72 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation67.DataClassification = dataClassificationType72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_74 = postObservationV2_64.setDataClassification(dataClassificationType72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_75 = putObservationV2_56.setDataClassification(dataClassificationType72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation76 = observation0.setDataClassification(dataClassificationType72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest80 = fieldVisitDataByLocationServiceRequest78.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty81 = importItemObservedProperty77.setErrors((java.lang.Object) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty82 = importItemObservedProperty77.ExistingItem;
        java.lang.String str83 = importItemObservedProperty77.Input;
        java.util.List<java.lang.String> strList84 = importItemObservedProperty77.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str86 = metricConfiguration85.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty87.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration90 = metricConfiguration85.setObservedProperty(observedProperty87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType91 = observedProperty87.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty93 = observedProperty87.setDescription("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty95 = observedProperty87.setCasNumber("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        importItemObservedProperty77.Item = observedProperty95;
        observation76.ObservedProperty = observedProperty95;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty99 = observedProperty95.setCasNumber("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(taxon9);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNull(importHistoryEventSimpleList18);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity32);
        org.junit.Assert.assertNotNull(auditAttributes35);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(postLaboratory40);
        org.junit.Assert.assertNull(taxon42);
        org.junit.Assert.assertNull(auditAttributes43);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType48.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup50);
        org.junit.Assert.assertNotNull(samplingPlan52);
        org.junit.Assert.assertNotNull(putTag53);
        org.junit.Assert.assertNotNull(putObservationV2_56);
        org.junit.Assert.assertNull(ruleValidationDetailsList57);
        org.junit.Assert.assertNotNull(resultGrade60);
        org.junit.Assert.assertNotNull(postObservationV2_64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(collectionMethod66);
        org.junit.Assert.assertNotNull(observation71);
        org.junit.Assert.assertTrue("'" + dataClassificationType72 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType72.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_74);
        org.junit.Assert.assertNotNull(putObservationV2_75);
        org.junit.Assert.assertNotNull(observation76);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest80);
        org.junit.Assert.assertNotNull(importItemObservedProperty81);
        org.junit.Assert.assertNull(observedProperty82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(metricConfiguration90);
        org.junit.Assert.assertNull(resultType91);
        org.junit.Assert.assertNotNull(observedProperty93);
        org.junit.Assert.assertNotNull(observedProperty95);
        org.junit.Assert.assertNotNull(observedProperty99);
    }

    @Test
    public void test40166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40166");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier2 = putNullMeasureQualifier0.setId("hi!");
        putNullMeasureQualifier2.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        putNullMeasureQualifier2.Name = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier8 = putNullMeasureQualifier2.setCustomId("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier10 = putNullMeasureQualifier8.setDescription("9999-12-31T23:59:59.999Z");
        putNullMeasureQualifier8.Name = "multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****";
        org.junit.Assert.assertNotNull(putNullMeasureQualifier2);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier8);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier10);
    }

    @Test
    public void test40167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40167");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity4.setLoggerFileName("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = postActivity8.setMedium(medium9);
        java.lang.Object obj11 = postActivity10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = postActivityTemplate12.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType14 = postActivityTemplate12.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SURFACE_WATER;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate16 = postActivityTemplate12.setMedium(mediumType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity17.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = postActivity17.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = postActivity17.setPlannedActivity(plannedActivity22);
        postActivity17.Comment = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str27 = collectionMethod26.getCustomId();
        postActivity17.CollectionMethod = collectionMethod26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate29 = postActivityTemplate16.setCollectionMethod(collectionMethod26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity10.setCollectionMethod(collectionMethod26);
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNotNull(postActivity10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertNull(quantity13);
        org.junit.Assert.assertNull(activityTemplateType14);
        org.junit.Assert.assertTrue("'" + mediumType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SURFACE_WATER + "'", mediumType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.SURFACE_WATER));
        org.junit.Assert.assertNotNull(postActivityTemplate16);
        org.junit.Assert.assertNotNull(postActivity21);
        org.junit.Assert.assertNotNull(postActivity23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(postActivityTemplate29);
        org.junit.Assert.assertNotNull(postActivity30);
    }

    @Test
    public void test40168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40168");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        java.lang.String str2 = postSpecimen0.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails5.setAuditAttributes(auditAttributes6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        java.lang.String str11 = laboratory8.PhoneNumber;
        java.lang.String str12 = laboratory8.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails5.setLaboratory(laboratory8);
        java.lang.String str14 = laboratory8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen15 = postSpecimen0.setLaboratory(laboratory8);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList16 = postSpecimen0.getObservations();
        java.lang.Integer int17 = postSpecimen0.getNumberOfReceivedObservations();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MaxInstant" + "'", str14, "MaxInstant");
        org.junit.Assert.assertNotNull(postSpecimen15);
        org.junit.Assert.assertNull(observationList16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test40169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40169");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation6.setResultGrade(resultGrade11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics13 = observation6.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation15.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation15.setCategoricalResult(categoricalResult18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList21, importHistoryEventSimpleArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation15.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList21);
        observedProperty14.ImportHistoryEventSimples = importHistoryEventSimpleList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation6.setObservedProperty(observedProperty14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction26 = null;
        observation25.LabInstruction = labInstruction26;
        java.lang.String str28 = observation25.Id;
        java.lang.String str29 = observation25.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation25.setMediumSubdivision("hi!");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList32 = null;
        observation31.ValidationWarnings = ruleValidationDetailsList32;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNull(observationStatistics13);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(observation31);
    }

    @Test
    public void test40170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40170");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType2 = dischargeChannelMeasurement0.getChannelEvenness();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Unknown;
        dischargeChannelMeasurement0.VelocityVariation = velocityVariationType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType verticalVelocityDistributionType5 = dischargeChannelMeasurement0.VerticalVelocityDistribution;
        java.lang.String str6 = dischargeChannelMeasurement0.Party;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement8 = dischargeChannelMeasurement0.setComments("http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(channelEvennessType2);
        org.junit.Assert.assertTrue("'" + velocityVariationType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Unknown + "'", velocityVariationType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Unknown));
        org.junit.Assert.assertNull(verticalVelocityDistributionType5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement8);
    }

    @Test
    public void test40171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40171");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = statisticalDateTimeOffset2.setDateTimeOffset(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest12 = ratingModelEffectiveShiftsByStageValuesServiceRequest1.setMeasurementTime(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse13 = timeSeriesUniqueIdListServiceResponse0.setNextToken(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] timeSeriesUniqueIdsArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>) timeSeriesUniqueIdsList15, timeSeriesUniqueIdsArray14);
        timeSeriesUniqueIdListServiceResponse0.TimeSeriesUniqueIds = timeSeriesUniqueIdsList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary22.Reviewer = "";
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary22.MeasurementTime = instant25;
        postRecurringReport21.NextGenerationDate = instant25;
        java.time.Instant instant28 = postRecurringReport21.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset29 = statisticalDateTimeOffset20.setDateTimeOffset(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest30 = ratingModelEffectiveShiftsByStageValuesServiceRequest19.setMeasurementTime(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse31 = timeSeriesUniqueIdListServiceResponse18.setNextToken(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod35 = timeSeriesThresholdPeriod33.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod33.AppliedTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary40.Reviewer = "";
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary40.MeasurementTime = instant43;
        postRecurringReport39.NextGenerationDate = instant43;
        java.time.Instant instant46 = postRecurringReport39.getNextGenerationDate();
        java.lang.String str47 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant46);
        metadataChangeTransactionListServiceRequest38.QueryFrom = instant46;
        timeSeriesThresholdPeriod33.AppliedTime = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse50 = fieldVisitDescriptionListServiceResponse32.setNextToken(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant52 = ratingCurveListServiceRequest51.QueryTo;
        java.lang.String str53 = ratingCurveListServiceRequest51.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary55.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse58.setNextToken(instant59);
        dischargeSummary55.MeasurementTime = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse54.setNextToken(instant59);
        java.time.Instant instant63 = locationDescriptionListServiceResponse54.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType66 = null;
        controlConditionActivity65.ControlCleaned = controlCleanedType66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant69 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = locationDescriptionListServiceResponse68.setNextToken(instant69);
        controlConditionActivity65.DateCleaned = instant69;
        timeAlignedDataServiceRequest64.QueryFrom = instant69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse54.setNextToken(instant69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest74 = ratingCurveListServiceRequest51.setQueryTo(instant69);
        java.time.Instant instant75 = ratingCurveListServiceRequest74.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse76 = fieldVisitDescriptionListServiceResponse50.setNextToken(instant75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse77 = timeSeriesUniqueIdListServiceResponse31.setNextToken(instant75);
        java.time.Instant instant78 = timeSeriesUniqueIdListServiceResponse31.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds82 = timeSeriesUniqueIds80.setIsDeleted((java.lang.Boolean) true);
        timeSeriesUniqueIds80.HasAttributeChange = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds87 = timeSeriesUniqueIds85.setIsDeleted((java.lang.Boolean) true);
        timeSeriesUniqueIds85.UniqueId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] timeSeriesUniqueIdsArray90 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds[] { timeSeriesUniqueIds79, timeSeriesUniqueIds80, timeSeriesUniqueIds85 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList91 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds>) timeSeriesUniqueIdsList91, timeSeriesUniqueIdsArray90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse93 = timeSeriesUniqueIdListServiceResponse31.setTimeSeriesUniqueIds(timeSeriesUniqueIdsList91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse94 = timeSeriesUniqueIdListServiceResponse0.setTimeSeriesUniqueIds(timeSeriesUniqueIdsList91);
        java.time.Instant instant95 = timeSeriesUniqueIdListServiceResponse0.NextToken;
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest12);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse13);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdsArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset29);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest30);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse31);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str47, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse50);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse76);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds82);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds87);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdsArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse93);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse94);
        org.junit.Assert.assertNotNull(instant95);
    }

    @Test
    public void test40172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40172");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_38.setDataClassifications((java.util.List<java.lang.String>) strList42);
        getObservationsV2_44.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        getObservationsV2_44.EndObservedTime = instant48;
        java.time.Instant instant51 = getObservationsV2_44.StartResultTime;
        java.util.List<java.lang.String> strList52 = getObservationsV2_44.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList54 = importItemObject53.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList56, importChangeItemArray55);
        importItemObject53.ItemComparison = importChangeItemList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject67 = importItemObject53.setExistingItem((java.lang.Object) putLocationTags59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        getObservationsV2_68.SpecimenIds = strList71;
        importItemObject67.WarningMessages = strList71;
        getObservationsV2_44.LabResultLabAnalysisMethodIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities76 = deleteActivities0.setActivityTemplateId((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities78 = deleteActivities0.setCustomId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.util.List<java.lang.String> strList79 = deleteActivities78.getActivityTypes();
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(importChangeItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(importItemObject67);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(deleteActivities76);
        org.junit.Assert.assertNotNull(deleteActivities78);
        org.junit.Assert.assertNull(strList79);
    }

    @Test
    public void test40173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40173");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldTripBasic searchResultFieldTripBasic0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldTripBasic();
        searchResultFieldTripBasic0.Cursor = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldTripBasic searchResultFieldTripBasic4 = searchResultFieldTripBasic0.setCursor("");
        java.lang.String str5 = searchResultFieldTripBasic4.getCursor();
        searchResultFieldTripBasic4.Cursor = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldTripBasic searchResultFieldTripBasic9 = searchResultFieldTripBasic4.setTotalCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldTripBasic searchResultFieldTripBasic10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldTripBasic();
        searchResultFieldTripBasic10.TotalCount = 4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime15 = fieldTripBasic14.getEndTime();
        java.lang.String str16 = fieldTripBasic14.Participants;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic[] fieldTripBasicArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic[] { fieldTripBasic13, fieldTripBasic14 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic> fieldTripBasicList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic>) fieldTripBasicList18, fieldTripBasicArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFieldTripBasic searchResultFieldTripBasic20 = searchResultFieldTripBasic10.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic>) fieldTripBasicList18);
        searchResultFieldTripBasic4.DomainObjects = fieldTripBasicList18;
        org.junit.Assert.assertNotNull(searchResultFieldTripBasic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(searchResultFieldTripBasic9);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(fieldTripBasicArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(searchResultFieldTripBasic20);
    }

    @Test
    public void test40174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40174");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setEndDate(offsetDateTime1);
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule2.setLastGenerationDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup5 = schedule4.SamplingLocationGroup;
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertNull(samplingLocationGroup5);
    }

    @Test
    public void test40175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40175");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod2 = locationMonitoringMethod0.setSubLocationIdentifier("hi!");
        locationMonitoringMethod2.MethodCode = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        java.lang.String str8 = standardSimple5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = standardSimple10.setName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = standardSimple12.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple14.setApplicabilityRange(interval15);
        java.lang.String str17 = standardSimple14.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple14.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = standardSimple19.setName("");
        java.lang.String str22 = standardSimple21.Id;
        java.lang.String str23 = standardSimple21.Id;
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant25 = interval24.Start;
        java.time.Instant instant26 = interval24.End;
        standardSimple21.ApplicabilityRange = interval24;
        standardSimple12.ApplicabilityRange = interval24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.lang.Object obj30 = ratingCurveListServiceRequest29.getResponseType();
        java.time.Instant instant31 = ratingCurveListServiceRequest29.getQueryTo();
        java.time.Instant instant32 = ratingCurveListServiceRequest29.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = locationRemark33.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        locationRemark35.FromTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = locationRemark35.setRemark("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str42 = locationRemark41.TypeName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary43.setMeanGageHeightMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = dischargeSummary43.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary43.setParty("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str51 = getObservationsV2_50.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        getObservationsV2_50.ProjectIds = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_59 = putBulkEditResultGradesV2_49.setTaxonIds((java.util.List<java.lang.String>) strList55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse60.setNextToken(instant61);
        java.time.Instant instant63 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        locationDescriptionListServiceResponse60.NextToken = instant63;
        putBulkEditResultGradesV2_59.EndResultTime = instant63;
        dischargeSummary43.MeasurementTime = instant63;
        locationRemark41.ToTime = instant63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest68 = ratingCurveListServiceRequest29.setQueryTo(instant63);
        interval24.End = instant63;
        locationMonitoringMethod2.LastModifiedUtc = instant63;
        org.junit.Assert.assertNotNull(locationMonitoringMethod2);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple12);
        org.junit.Assert.assertNull(interval13);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNotNull(standardSimple21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingCurveListServiceResponse");
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNotNull(locationRemark35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(locationRemark41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNull(quantityWithDisplay46);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest68);
    }

    @Test
    public void test40176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40176");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest2 = fieldVisitDataByLocationServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest4 = fieldVisitDataByLocationServiceRequest2.setIncludeInvalidActivities((java.lang.Boolean) true);
        java.util.ArrayList<java.lang.String> strList5 = fieldVisitDataByLocationServiceRequest4.getParameters();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest7 = fieldVisitDataByLocationServiceRequest4.setConvertToLocalAssumedDatum((java.lang.Boolean) false);
        fieldVisitDataByLocationServiceRequest7.ApplyRounding = false;
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest2);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest7);
    }

    @Test
    public void test40177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40177");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        parameterBase2.UnitGroupIdentifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase6 = parameterBase2.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str7 = parameterBase6.RoundingSpec;
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNotNull(parameterBase6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test40178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40178");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList2 = metadataChangeTransaction0.getNoteOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList3 = metadataChangeTransaction0.getCorrectionOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation> gradeOperationList4 = metadataChangeTransaction0.GradeOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType5 = metadataChangeTransaction0.getContentType();
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(noteOperationList2);
        org.junit.Assert.assertNull(correctionOperationList3);
        org.junit.Assert.assertNull(gradeOperationList4);
        org.junit.Assert.assertNull(metadataChangeContentType5);
    }

    @Test
    public void test40179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40179");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest();
        applyTagRequest0.UniqueId = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest4 = applyTagRequest0.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest6 = applyTagRequest4.setUniqueId("MaxDuration");
        applyTagRequest6.Value = "/api";
        org.junit.Assert.assertNotNull(applyTagRequest4);
        org.junit.Assert.assertNotNull(applyTagRequest6);
    }

    @Test
    public void test40180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40180");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation75 = postSamplingLocation73.setName("ZZZZZ");
        java.lang.String str76 = postSamplingLocation75.getVerticalDatum();
        java.lang.String str77 = postSamplingLocation75.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType78 = postSamplingLocation75.getType();
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNotNull(postSamplingLocation75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(locationType78);
    }

    @Test
    public void test40181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40181");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary0.UpdateCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary4 = observationImportSummary0.setSuccessCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple5 = observationImportSummary0.getImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary7 = observationImportSummary0.setInvalidRowsCsvUrl("https");
        java.lang.Integer int8 = observationImportSummary0.getNewCount();
        java.lang.Integer int9 = observationImportSummary0.getSkippedCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        importSummaryObservation10.InvalidRowsCsvUrl = "hi!";
        java.lang.Integer int13 = importSummaryObservation10.SuccessCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary14.UpdateCount = (-1);
        java.lang.Integer int17 = observationImportSummary14.ExpectedCount;
        java.lang.String str18 = observationImportSummary14.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList20, importErrorArray19);
        observationImportSummary14.ImportJobErrors = importErrorList20;
        observationImportSummary14.NewCount = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str26 = importHistoryEventSimple25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary27 = observationImportSummary14.setImportHistoryEventSimple(importHistoryEventSimple25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary28.UpdateCount = (-1);
        java.lang.Integer int31 = observationImportSummary28.ExpectedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary32.UpdateCount = (-1);
        java.lang.Integer int35 = observationImportSummary32.ExpectedCount;
        java.lang.String str36 = observationImportSummary32.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38, importItemObservationArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary40 = observationImportSummary32.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary41 = observationImportSummary28.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary42 = observationImportSummary14.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38);
        importSummaryObservation10.NonErrorImportItems = importItemObservationList38;
        observationImportSummary0.ErrorImportItems = importItemObservationList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary46 = observationImportSummary0.setNewCount((java.lang.Integer) 4);
        org.junit.Assert.assertNotNull(observationImportSummary4);
        org.junit.Assert.assertNull(importHistoryEventSimple5);
        org.junit.Assert.assertNotNull(observationImportSummary7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(importErrorArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(observationImportSummary27);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(importItemObservationArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(observationImportSummary40);
        org.junit.Assert.assertNotNull(observationImportSummary41);
        org.junit.Assert.assertNotNull(observationImportSummary42);
        org.junit.Assert.assertNotNull(observationImportSummary46);
    }

    @Test
    public void test40182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40182");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str1 = inspection0.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType inspectionType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.MaximumMinimumGage;
        inspection0.InspectionType = inspectionType2;
        java.lang.String str4 = inspection0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection6 = inspection0.setComments("9999-12-31T23:59:59.999Z");
        java.time.Instant instant7 = inspection6.getTime();
        inspection6.Manufacturer = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + inspectionType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.MaximumMinimumGage + "'", inspectionType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionType.MaximumMinimumGage));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(inspection6);
        org.junit.Assert.assertNull(instant7);
    }

    @Test
    public void test40183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40183");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary9 = taxonImportSummary0.setSuccessCount((java.lang.Integer) (-1));
        taxonImportSummary0.InvalidRowsCsvUrl = "9999-12-31T23:59:59.9999999Z";
        taxonImportSummary0.ExpectedCount = 100;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList14 = taxonImportSummary0.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary16 = taxonImportSummary0.setUpdateCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary18 = taxonImportSummary0.setNewCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary20 = taxonImportSummary18.setSuccessCount((java.lang.Integer) 0);
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNotNull(taxonImportSummary9);
        org.junit.Assert.assertNull(importItemTaxonList14);
        org.junit.Assert.assertNotNull(taxonImportSummary16);
        org.junit.Assert.assertNotNull(taxonImportSummary18);
        org.junit.Assert.assertNotNull(taxonImportSummary20);
    }

    @Test
    public void test40184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40184");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int4 = postUnitGroup0.getIntensityDimension();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase6 = postUnitGroup0.setMassDimension((java.lang.Integer) 10);
        unitGroupBase6.MassDimension = 4;
        java.lang.Integer int9 = unitGroupBase6.getSubstanceDimension();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(unitGroupBase6);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test40185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40185");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = postSamplingLocation0.setAddress(address3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList5 = postSamplingLocation4.Standards;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity6 = postSamplingLocation4.getElevation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation8 = postSamplingLocation4.setLatitude("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList9 = postSamplingLocation8.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation11 = postSamplingLocation8.setVerticalCollectionMethod("/AQUARIUS/Publish/v2");
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(postSamplingLocation4);
        org.junit.Assert.assertNull(standardSimpleList5);
        org.junit.Assert.assertNull(quantity6);
        org.junit.Assert.assertNotNull(postSamplingLocation8);
        org.junit.Assert.assertNull(domainObjectAttachmentList9);
        org.junit.Assert.assertNotNull(postSamplingLocation11);
    }

    @Test
    public void test40186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40186");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitHistory getFieldVisitHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitHistory();
        java.lang.String str1 = getFieldVisitHistory0.Id;
        java.lang.String str2 = getFieldVisitHistory0.getId();
        java.lang.Object obj3 = getFieldVisitHistory0.getResponseType();
        getFieldVisitHistory0.Id = "http";
        java.lang.String str6 = getFieldVisitHistory0.Id;
        java.lang.String str7 = getFieldVisitHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitHistory getFieldVisitHistory9 = getFieldVisitHistory0.setId("http://MaxDurationhttp");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http" + "'", str6, "http");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http" + "'", str7, "http");
        org.junit.Assert.assertNotNull(getFieldVisitHistory9);
    }

    @Test
    public void test40187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40187");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart3 = inputPart1.setHeaders((java.lang.Object) interpolationType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType4 = inputPart1.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart6 = inputPart1.setMediaType(mediaType5);
        java.lang.String str7 = mediaType5.getSubtype();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest9.ReportTitle = "MinDuration";
        reportListServiceRequest9.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList15 = getExportSpecimens14.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant17 = qualifier16.DateApplied;
        java.lang.String str18 = qualifier16.User;
        java.lang.String str19 = qualifier16.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj21 = timeAlignedDataServiceRequest20.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest25 = timeAlignedDataServiceRequest20.setQueryFrom(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier26 = qualifier16.setDateApplied(instant23);
        getExportSpecimens14.Before = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark30 = locationRemark28.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList32 = fieldVisitDataServiceResponse31.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse34 = fieldVisitDataServiceResponse31.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        fieldVisitDataServiceResponse31.ResponseTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = locationRemark28.setCreateTime(instant38);
        getExportSpecimens14.EndModificationTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest43 = reportListServiceRequest9.setCreatedFrom(instant38);
        getSamplingLocations8.StartModificationTime = instant38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType45 = mediaType5.setParameters((java.lang.Object) instant38);
        correction0.EndTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType47 = correction0.getType();
        java.time.Instant instant48 = correction0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj50 = timeAlignedDataServiceRequest49.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType52 = dischargeChannelMeasurement51.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay53 = dischargeChannelMeasurement51.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType54 = dischargeChannelMeasurement51.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement56 = dischargeChannelMeasurement51.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory58 = attachment57.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment60 = attachment57.setFileName("");
        attachment57.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList63 = attachment57.Tags;
        java.lang.String str64 = attachment57.Url;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList66 = getExportSpecimens65.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant68 = qualifier67.DateApplied;
        java.lang.String str69 = qualifier67.User;
        java.lang.String str70 = qualifier67.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj72 = timeAlignedDataServiceRequest71.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse73.setNextToken(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest76 = timeAlignedDataServiceRequest71.setQueryFrom(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier77 = qualifier67.setDateApplied(instant74);
        getExportSpecimens65.Before = instant74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark81 = locationRemark79.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList83 = fieldVisitDataServiceResponse82.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse85 = fieldVisitDataServiceResponse82.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary86.Reviewer = "";
        java.time.Instant instant89 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary86.MeasurementTime = instant89;
        fieldVisitDataServiceResponse82.ResponseTime = instant89;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark92 = locationRemark79.setCreateTime(instant89);
        getExportSpecimens65.EndModificationTime = instant89;
        attachment57.DateUploaded = instant89;
        dischargeChannelMeasurement51.StartTime = instant89;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest96 = timeAlignedDataServiceRequest49.setQueryTo(instant89);
        java.time.Instant instant97 = timeAlignedDataServiceRequest96.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction98 = correction0.setEndTime(instant97);
        org.junit.Assert.assertTrue("'" + interpolationType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart3);
        org.junit.Assert.assertNull(mediaType4);
        org.junit.Assert.assertNotNull(inputPart6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest25);
        org.junit.Assert.assertNotNull(qualifier26);
        org.junit.Assert.assertNotNull(locationRemark30);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList32);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(locationRemark41);
        org.junit.Assert.assertNotNull(reportListServiceRequest43);
        org.junit.Assert.assertNotNull(mediaType45);
        org.junit.Assert.assertNull(correctionType47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(channelMaterialType52);
        org.junit.Assert.assertNull(quantityWithDisplay53);
        org.junit.Assert.assertNull(horizontalFlowType54);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement56);
        org.junit.Assert.assertNull(attachmentCategory58);
        org.junit.Assert.assertNotNull(attachment60);
        org.junit.Assert.assertNull(tagMetadataList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(instant68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest76);
        org.junit.Assert.assertNotNull(qualifier77);
        org.junit.Assert.assertNotNull(locationRemark81);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList83);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse85);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(locationRemark92);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest96);
        org.junit.Assert.assertNotNull(instant97);
        org.junit.Assert.assertNotNull(correction98);
    }

    @Test
    public void test40188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40188");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck2 = calibrationCheck0.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck4 = calibrationCheck0.setUnit("http");
        java.lang.String str5 = calibrationCheck0.Unit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = dischargeUncertainty6.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = dischargeUncertainty6.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = vertical9.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical9.VerticalType = verticalType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = null;
        adcpDischargeActivity13.TransducerDepth = quantityWithDisplay14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary16.BaseFlow = baseFlowType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary16.DischargeUncertainty = dischargeUncertainty23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = dischargeSummary25.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = dischargeSummary25.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = dischargeSummary25.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay29.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary25.setDurationInHours(doubleWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty33 = dischargeUncertainty23.setQuantitativeUncertainty(doubleWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity34 = adcpDischargeActivity13.setTopEstimateExponent(doubleWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity36 = adcpDischargeActivity13.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = adcpDischargeActivity13.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str39 = datumConvertedQuantityWithDisplay38.TargetDatum;
        adcpDischargeActivity13.Area = datumConvertedQuantityWithDisplay38;
        vertical9.SegmentDischarge = datumConvertedQuantityWithDisplay38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty42 = dischargeUncertainty6.setQuantitativeUncertainty((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = calibrationCheck0.setDifference((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay38);
        java.lang.String str44 = calibrationCheck43.Parameter;
        org.junit.Assert.assertNotNull(calibrationCheck2);
        org.junit.Assert.assertNotNull(calibrationCheck4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http" + "'", str5, "http");
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertTrue("'" + verticalType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + baseFlowType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay26);
        org.junit.Assert.assertNull(quantityWithDisplay27);
        org.junit.Assert.assertNull(doubleWithDisplay28);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNotNull(dischargeUncertainty33);
        org.junit.Assert.assertNotNull(adcpDischargeActivity34);
        org.junit.Assert.assertNotNull(adcpDischargeActivity36);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dischargeUncertainty42);
        org.junit.Assert.assertNotNull(calibrationCheck43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test40189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40189");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray5 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = putLocationTags1.setTagUniqueIds(strList6);
        java.util.ArrayList<java.lang.String> strList9 = putLocationTags8.TagUniqueIds;
        getLabReportImportHistoryEvents0.LabReportIds = strList9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents12 = getLabReportImportHistoryEvents0.setLimit((java.lang.Integer) 0);
        getLabReportImportHistoryEvents0.Sort = "PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents16 = getLabReportImportHistoryEvents0.setCursor("");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(putLocationTags8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents12);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents16);
    }

    @Test
    public void test40190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40190");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str1 = putLabReport0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = putLabReport0.getAuditAttributes();
        java.lang.String str3 = putLabReport0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        java.time.OffsetDateTime offsetDateTime5 = putFieldVisit4.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple6 = putFieldVisit4.getFieldTrip();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList7 = putFieldVisit4.getPlannedActivities();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList8 = putFieldVisit4.PlannedFieldResults;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList9 = null;
        putFieldVisit4.ExtendedAttributes = extendedAttributeList9;
        java.time.OffsetDateTime offsetDateTime11 = putFieldVisit4.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime13 = fieldTripBasic12.getEndTime();
        java.lang.String str14 = fieldTripBasic12.Participants;
        fieldTripBasic12.Notes = "'.'SSSSSSS";
        java.lang.String str17 = fieldTripBasic12.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str19 = domainObjectAttachment18.getId();
        java.lang.String str20 = domainObjectAttachment18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment21 = null;
        domainObjectAttachment18.Attachment = attachment21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        domainObjectAttachment23.Id = "2021.4.62.0";
        java.lang.String str27 = domainObjectAttachment23.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str29 = domainObjectAttachment28.getId();
        java.lang.String str30 = domainObjectAttachment28.getId();
        domainObjectAttachment28.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = domainObjectAttachment28.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = domainObjectAttachment34.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str38 = domainObjectAttachment37.getId();
        java.lang.String str39 = domainObjectAttachment37.getId();
        domainObjectAttachment37.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = domainObjectAttachment37.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str48 = domainObjectAttachment47.getId();
        java.lang.String str49 = domainObjectAttachment47.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment50 = null;
        domainObjectAttachment47.Attachment = attachment50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str53 = domainObjectAttachment52.getId();
        java.lang.String str54 = domainObjectAttachment52.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment18, domainObjectAttachment23, domainObjectAttachment34, domainObjectAttachment43, domainObjectAttachment46, domainObjectAttachment47, domainObjectAttachment52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList56, domainObjectAttachmentArray55);
        fieldTripBasic12.Attachments = domainObjectAttachmentList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit59 = putFieldVisit4.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList56);
        putLabReport0.Attachments = domainObjectAttachmentList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport62 = putLabReport0.setCustomId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str63 = putLabReport0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNull(fieldTripSimple6);
        org.junit.Assert.assertNull(plannedActivityList7);
        org.junit.Assert.assertNull(plannedFieldResultList8);
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2021.4.62.0" + "'", str27, "2021.4.62.0");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachment34);
        org.junit.Assert.assertNotNull(domainObjectAttachment36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachment43);
        org.junit.Assert.assertNotNull(domainObjectAttachment45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putFieldVisit59);
        org.junit.Assert.assertNotNull(putLabReport62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test40191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40191");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup2 = putAnalyticalGroup0.setAnalyticalGroupItems(analyticalGroupItemList1);
        java.lang.Integer int3 = putAnalyticalGroup2.NumberOfAnalysisMethodsInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup5 = putAnalyticalGroup2.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup7 = putAnalyticalGroup5.setDescription("ZZZZZ");
        java.lang.String str8 = putAnalyticalGroup5.Name;
        java.lang.String str9 = putAnalyticalGroup5.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList10 = putAnalyticalGroup5.AnalyticalGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType12 = analyticalGroup11.getType();
        analyticalGroup11.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup16 = analyticalGroup11.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.Integer int17 = analyticalGroup11.NumberOfObservedPropertiesInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = analyticalGroup11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup19.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList22 = postAnalyticalGroup19.getAnalyticalGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType24 = analyticalGroup23.getType();
        analyticalGroup23.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = null;
        analyticalGroupItem33.AnalysisMethod = analysisMethod36;
        java.lang.String str38 = analyticalGroupItem33.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = analyticalGroupItem44.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem44.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = null;
        analyticalGroupItem44.AnalysisMethod = analysisMethod47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem28, analyticalGroupItem30, analyticalGroupItem33, analyticalGroupItem39, analyticalGroupItem42, analyticalGroupItem44 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList50, analyticalGroupItemArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup52 = analyticalGroup27.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList50);
        analyticalGroup23.AnalyticalGroupItems = analyticalGroupItemList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup23.AuditAttributes = auditAttributes54;
        java.lang.String str56 = analyticalGroup23.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType57 = analyticalGroup23.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType59 = analyticalGroup58.getType();
        java.lang.String str60 = analyticalGroup58.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup62 = analyticalGroup58.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType63 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup64 = analyticalGroup62.setType(analyticalGroupType63);
        analyticalGroup23.Type = analyticalGroupType63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup66 = postAnalyticalGroup19.setType(analyticalGroupType63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup67 = analyticalGroup11.setType(analyticalGroupType63);
        putAnalyticalGroup5.Type = analyticalGroupType63;
        org.junit.Assert.assertNotNull(putAnalyticalGroup2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(putAnalyticalGroup5);
        org.junit.Assert.assertNotNull(putAnalyticalGroup7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2021.4.62.0" + "'", str8, "2021.4.62.0");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2021.4.62.0" + "'", str9, "2021.4.62.0");
        org.junit.Assert.assertNull(analyticalGroupItemList10);
        org.junit.Assert.assertNull(analyticalGroupType12);
        org.junit.Assert.assertNotNull(analyticalGroup16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(analyticalGroupItemList22);
        org.junit.Assert.assertNull(analyticalGroupType24);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(analysisMethod45);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(analyticalGroup52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(analyticalGroupType57);
        org.junit.Assert.assertNull(analyticalGroupType59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(analyticalGroup62);
        org.junit.Assert.assertTrue("'" + analyticalGroupType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType63.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup64);
        org.junit.Assert.assertNotNull(postAnalyticalGroup66);
        org.junit.Assert.assertNotNull(analyticalGroup67);
    }

    @Test
    public void test40192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40192");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList32 = getGroupedObservationsV2_26.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_34 = getGroupedObservationsV2_26.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str35 = getGroupedObservationsV2_26.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList36 = getGroupedObservationsV2_26.LabResultLabAnalysisMethodIds;
        getGroupedObservationsV2_26.SpecimenName = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_40 = getGroupedObservationsV2_26.setDepthUnitId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.util.List<java.lang.String> strList41 = getGroupedObservationsV2_40.getResultStatuses();
        java.util.List<java.lang.String> strList42 = getGroupedObservationsV2_40.ActivityTypes;
        java.util.List<java.lang.String> strList43 = getGroupedObservationsV2_40.getResultGrades();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList43);
    }

    @Test
    public void test40193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40193");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds2 = timeSeriesUniqueIds0.setIsDeleted((java.lang.Boolean) true);
        timeSeriesUniqueIds0.UniqueId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        java.time.Instant instant6 = timeSeriesThresholdPeriod5.StartTime;
        java.time.Instant instant7 = timeSeriesThresholdPeriod5.StartTime;
        java.time.Instant instant8 = timeSeriesThresholdPeriod5.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase12 = locationDatumPeriod10.setComment("'.'SSSSSSS");
        java.lang.Double double13 = locationDatumPeriodBase12.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant15 = qualifier14.DateApplied;
        java.lang.String str16 = qualifier14.User;
        java.lang.String str17 = qualifier14.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = timeAlignedDataServiceRequest18.setQueryFrom(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier24 = qualifier14.setDateApplied(instant21);
        java.time.Instant instant25 = qualifier24.getDateApplied();
        locationDatumPeriodBase12.ValidFrom = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase27 = putRecurringReport9.setNextGenerationDate(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod28 = timeSeriesThresholdPeriod5.setStartTime(instant25);
        timeSeriesUniqueIds0.LastMatchedTime = instant25;
        java.lang.Boolean boolean30 = timeSeriesUniqueIds0.IsDeleted;
        java.lang.Boolean boolean31 = timeSeriesUniqueIds0.getIsDeleted();
        java.time.Instant instant32 = timeSeriesUniqueIds0.LastMatchedTime;
        java.time.Instant instant33 = timeSeriesUniqueIds0.LastMatchedTime;
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds2);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase12);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest23);
        org.junit.Assert.assertNotNull(qualifier24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(recurringReportBase27);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod28);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + true + "'", boolean31, true);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
    }

    @Test
    public void test40194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40194");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        java.util.List<java.lang.String> strList8 = getObservationsV2_0.ActivityIds;
        getObservationsV2_0.ImportHistoryEventId = "0001-01-01T00:00:00.000Z";
        java.lang.String str11 = getObservationsV2_0.DetectionCondition;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test40195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40195");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon7 = null;
        observation2.RelatedTaxon = taxon7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation2.setResultStatus(resultStatus9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str13 = metricConfiguration12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty14.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = metricConfiguration12.setObservedProperty(observedProperty14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType18 = observedProperty14.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = null;
        quantity21.Unit = unit22;
        postObservedProperty19.LowerLimit = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = postObservedProperty19.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit26 = quantity25.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = observedProperty14.setUpperLimit(quantity25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation28 = samplingLocation11.setElevation(quantity25);
        observation10.SamplingLocation = samplingLocation11;
        java.lang.String str30 = observation10.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation10.setSpecimen(specimen31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList34 = importItemTaxon33.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon36 = importItemTaxon33.setItem(taxon35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str38 = postCalculatedDerivedTimeSeries37.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList39 = postCalculatedDerivedTimeSeries37.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon40 = importItemTaxon36.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList42 = importItemObject41.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList44, importChangeItemArray43);
        importItemObject41.ItemComparison = importChangeItemList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray51 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = putLocationTags47.setTagUniqueIds(strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject55 = importItemObject41.setExistingItem((java.lang.Object) putLocationTags47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser58 = openIdConnectUser56.setIdentifier("");
        java.lang.Boolean boolean59 = openIdConnectUser58.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject60 = importItemObject41.setErrors((java.lang.Object) openIdConnectUser58);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList61 = importItemObject60.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon62 = importItemTaxon40.setItemComparison(importChangeItemList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList64 = importItemTaxon63.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon66 = importItemTaxon63.setItem(taxon65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str68 = postCalculatedDerivedTimeSeries67.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList69 = postCalculatedDerivedTimeSeries67.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon70 = importItemTaxon66.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon72 = importItemTaxon66.setExistingItem(taxon71);
        importItemTaxon40.Item = taxon71;
        taxon71.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str76 = taxon71.ItisTsn;
        java.lang.String str77 = taxon71.getCommonName();
        java.lang.String str78 = taxon71.getItisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel79 = taxon71.TaxonomyLevel;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon81 = taxon71.setItisTsn("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon83 = taxon81.setSource("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation84 = observation32.setRelatedTaxon(taxon83);
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(metricConfiguration17);
        org.junit.Assert.assertNull(resultType18);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(quantity25);
        org.junit.Assert.assertNull(unit26);
        org.junit.Assert.assertNotNull(observedProperty27);
        org.junit.Assert.assertNotNull(samplingLocation28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(importItemTaxon36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(extendedAttributeValueList39);
        org.junit.Assert.assertNotNull(importItemTaxon40);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(importChangeItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(putLocationTags54);
        org.junit.Assert.assertNotNull(importItemObject55);
        org.junit.Assert.assertNotNull(openIdConnectUser58);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNotNull(importItemObject60);
        org.junit.Assert.assertNotNull(importChangeItemList61);
        org.junit.Assert.assertNotNull(importItemTaxon62);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(importItemTaxon66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(extendedAttributeValueList69);
        org.junit.Assert.assertNotNull(importItemTaxon70);
        org.junit.Assert.assertNotNull(importItemTaxon72);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str76, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(taxonomyLevel79);
        org.junit.Assert.assertNotNull(taxon81);
        org.junit.Assert.assertNotNull(taxon83);
        org.junit.Assert.assertNotNull(observation84);
    }

    @Test
    public void test40196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40196");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        java.lang.Object obj17 = importItemObservation16.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation19 = importItemObservation16.setRowId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType20 = importItemObservation19.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj22 = importItemAnalysisMethod21.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        getObservationsV2_25.SpecimenIds = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray35 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags31.setTagUniqueIds(strList36);
        getObservationsV2_25.QualityControlTypes = strList36;
        java.util.List<java.lang.String> strList40 = getObservationsV2_25.getLabReportIds();
        importItem24.Errors = getObservationsV2_25;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList42 = importItem24.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation45 = importItemSamplingLocation43.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        java.util.List<java.lang.String> strList62 = getObservationsV2_47.getLabReportIds();
        importItem46.Errors = getObservationsV2_47;
        java.lang.Object obj64 = importItem46.getExistingItem();
        importItem46.Input = "hi!";
        java.lang.Object obj67 = importItem46.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType68 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem69 = importItem46.setStatus(importItemStatusType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation70 = importItemSamplingLocation45.setStatus(importItemStatusType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList72 = importItemObject71.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList74 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList74, importChangeItemArray73);
        importItemObject71.ItemComparison = importChangeItemList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray81 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags84 = putLocationTags77.setTagUniqueIds(strList82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject85 = importItemObject71.setExistingItem((java.lang.Object) putLocationTags77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser88 = openIdConnectUser86.setIdentifier("");
        java.lang.Boolean boolean89 = openIdConnectUser88.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject90 = importItemObject71.setErrors((java.lang.Object) openIdConnectUser88);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList91 = importItemObject90.ItemComparison;
        importItemSamplingLocation70.ItemComparison = importChangeItemList91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem93 = importItem24.setItemComparison(importChangeItemList91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty94 = importItemObservedProperty23.setItemComparison(importChangeItemList91);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList95 = importItemObservedProperty23.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod96 = importItemAnalysisMethod21.setItemComparison(importChangeItemList95);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation97 = importItemObservation19.setItemComparison(importChangeItemList95);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(importItemObservation19);
        org.junit.Assert.assertNull(importItemStatusType20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(importChangeItemList42);
        org.junit.Assert.assertNotNull(importItemSamplingLocation45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + importItemStatusType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType68.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem69);
        org.junit.Assert.assertNotNull(importItemSamplingLocation70);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(importChangeItemArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putLocationTags84);
        org.junit.Assert.assertNotNull(importItemObject85);
        org.junit.Assert.assertNotNull(openIdConnectUser88);
        org.junit.Assert.assertNull(boolean89);
        org.junit.Assert.assertNotNull(importItemObject90);
        org.junit.Assert.assertNotNull(importChangeItemList91);
        org.junit.Assert.assertNotNull(importItem93);
        org.junit.Assert.assertNotNull(importItemObservedProperty94);
        org.junit.Assert.assertNotNull(importChangeItemList95);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod96);
        org.junit.Assert.assertNotNull(importItemObservation97);
    }

    @Test
    public void test40197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40197");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.String str9 = timeAlignedPoint8.Qualifiers10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setNumericValue3((java.lang.Double) 10.0d);
        java.lang.String str12 = timeAlignedPoint8.getApprovalName2();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test40198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40198");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setStartTime(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        putFieldTrip0.StartTime = offsetDateTime4;
        java.time.OffsetDateTime offsetDateTime6 = null;
        putFieldTrip0.StartTime = offsetDateTime6;
        java.lang.String str8 = putFieldTrip0.getId();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test40199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40199");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType1 = null;
        controlConditionActivity0.ControlCleaned = controlCleanedType1;
        java.time.Instant instant3 = controlConditionActivity0.getDateCleaned();
        java.lang.String str4 = controlConditionActivity0.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity6 = controlConditionActivity0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.time.Instant instant7 = controlConditionActivity0.getDateCleaned();
        java.time.Instant instant8 = controlConditionActivity0.getDateCleaned();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList10 = getSpecimens9.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens12 = getSpecimens9.setSort("MinDuration");
        getSpecimens9.Limit = 100;
        java.util.List<java.lang.String> strList15 = null;
        getSpecimens9.FieldVisitId = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType19 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition20 = tagDefinition18.setValueType(tagValueType19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition22 = tagDefinition18.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition24 = tagDefinition22.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition26 = tagDefinition22.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj28 = timeAlignedDataServiceRequest27.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse29.setNextToken(instant30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest32 = timeAlignedDataServiceRequest27.setQueryFrom(instant30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = timeAlignedDataServiceRequest27.setTimeSeriesOutputUnitIds(strList38);
        tagDefinition26.PickListValues = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_43 = getGroupedObservationsV2_17.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType44 = getGroupedObservationsV2_43.FieldResultType;
        getGroupedObservationsV2_43.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_48 = getGroupedObservationsV2_43.setCustomId("/AQUARIUS");
        java.util.List<java.lang.String> strList49 = getGroupedObservationsV2_43.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_51 = getGroupedObservationsV2_43.setSpecimenName("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str52 = getGroupedObservationsV2_43.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList53 = getGroupedObservationsV2_43.LabResultLabAnalysisMethodIds;
        getGroupedObservationsV2_43.SpecimenName = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_57 = getGroupedObservationsV2_43.setDepthUnitId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.util.List<java.lang.String> strList58 = getGroupedObservationsV2_57.getLabResultLaboratoryIds();
        java.util.List<java.lang.String> strList59 = getGroupedObservationsV2_57.LabResultLaboratoryIds;
        java.lang.String str60 = getGroupedObservationsV2_57.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str62 = referencePoint61.Name;
        java.time.Instant instant63 = referencePoint61.getPrimarySinceDate();
        java.lang.Double double64 = referencePoint61.Longitude;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList65 = referencePoint61.ReferencePointPeriods;
        java.time.Instant instant66 = referencePoint61.getDecommissionedDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary70.Reviewer = "";
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary70.MeasurementTime = instant73;
        postRecurringReport69.NextGenerationDate = instant73;
        java.time.Instant instant76 = postRecurringReport69.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset77 = statisticalDateTimeOffset68.setDateTimeOffset(instant76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest78 = ratingModelEffectiveShiftsByStageValuesServiceRequest67.setMeasurementTime(instant76);
        referencePoint61.DecommissionedDate = instant76;
        getGroupedObservationsV2_57.StartModificationTime = instant76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens81 = getSpecimens9.setAfter(instant76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity82 = controlConditionActivity0.setDateCleaned(instant76);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(controlConditionActivity6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(getSpecimens12);
        org.junit.Assert.assertNotNull(tagDefinition20);
        org.junit.Assert.assertNotNull(tagDefinition22);
        org.junit.Assert.assertNotNull(tagDefinition24);
        org.junit.Assert.assertNotNull(tagDefinition26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest41);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_43);
        org.junit.Assert.assertNull(fieldResultType44);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(instant63);
        org.junit.Assert.assertNull(double64);
        org.junit.Assert.assertNull(referencePointPeriodList65);
        org.junit.Assert.assertNull(instant66);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset77);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest78);
        org.junit.Assert.assertNotNull(getSpecimens81);
        org.junit.Assert.assertNotNull(controlConditionActivity82);
    }

    @Test
    public void test40200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40200");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAuditHistory searchResultAuditHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAuditHistory();
        searchResultAuditHistory0.TotalCount = 0;
        searchResultAuditHistory0.Cursor = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
    }

    @Test
    public void test40201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40201");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties();
        getObservedProperties0.Limit = 4;
        java.util.List<java.lang.String> strList3 = getObservedProperties0.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = getObservationsV2_4.setDataClassifications((java.util.List<java.lang.String>) strList8);
        getObservationsV2_10.DepthUnitCustomId = "hi!";
        java.lang.String str13 = getObservationsV2_10.DepthUnitId;
        java.util.List<java.lang.String> strList14 = getObservationsV2_10.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setSpecimenName("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType17 = getObservationsV2_16.getFieldResultType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        getObservationsV2_24.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        getObservationsV2_24.EndObservedTime = instant28;
        java.time.Instant instant31 = getObservationsV2_24.StartResultTime;
        java.util.List<java.lang.String> strList32 = getObservationsV2_24.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList34 = importItemObject33.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList36, importChangeItemArray35);
        importItemObject33.ItemComparison = importChangeItemList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject47 = importItemObject33.setExistingItem((java.lang.Object) putLocationTags39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        getObservationsV2_48.SpecimenIds = strList51;
        importItemObject47.WarningMessages = strList51;
        getObservationsV2_24.LabResultLabAnalysisMethodIds = strList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_16.setObservedPropertyIds((java.util.List<java.lang.String>) strList51);
        getObservedProperties0.ResultTypes = strList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties59 = getObservedProperties0.setCustomId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties61 = getObservedProperties0.setLimit((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties63 = getObservedProperties61.setLimit((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedProperties getObservedProperties65 = getObservedProperties63.setLimit((java.lang.Integer) 2);
        getObservedProperties63.Limit = 100;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(fieldResultType17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(importChangeItemArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(importItemObject47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(getObservedProperties59);
        org.junit.Assert.assertNotNull(getObservedProperties61);
        org.junit.Assert.assertNotNull(getObservedProperties63);
        org.junit.Assert.assertNotNull(getObservedProperties65);
    }

    @Test
    public void test40202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40202");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        report2.Comments = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report2.setIsTransient((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report8 = report2.setUserUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.String str9 = report2.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        java.lang.String str11 = report10.Description;
        report10.Comments = "/AQUARIUS";
        java.lang.Boolean boolean14 = report10.getIsTransient();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription17 = locationDescription15.setIdentifier("");
        locationDescription17.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str21 = locationMonitoringMethod20.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod23 = locationMonitoringMethod20.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList25, tagMetadataArray24);
        locationMonitoringMethod23.Tags = tagMetadataList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription28 = locationDescription17.setTags(tagMetadataList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report29 = report10.setTags(tagMetadataList25);
        report2.Tags = tagMetadataList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int32 = gradeOperation31.StackPosition;
        java.lang.String str33 = gradeOperation31.getComments();
        java.lang.String str34 = gradeOperation31.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant36 = interpolationTypeOperation35.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType37 = interpolationTypeOperation35.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant39 = interpolationTypeOperation38.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType40 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation41 = interpolationTypeOperation38.setOperationType(metadataChangeOperationType40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation42 = interpolationTypeOperation35.setOperationType(metadataChangeOperationType40);
        gradeOperation31.OperationType = metadataChangeOperationType40;
        java.lang.Integer int44 = gradeOperation31.getStackPosition();
        java.time.Instant instant45 = gradeOperation31.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation47 = gradeOperation31.setComments("0001-01-01T00:00:00.000Z");
        java.lang.String str48 = gradeOperation47.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation50 = gradeOperation47.setComments("PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation52 = gradeOperation47.setComments("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report53 = report2.setSourceTimeRange((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange) gradeOperation52);
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNotNull(report8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(locationDescription17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locationMonitoringMethod23);
        org.junit.Assert.assertNotNull(tagMetadataArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locationDescription28);
        org.junit.Assert.assertNotNull(report29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(instant36);
        org.junit.Assert.assertNull(metadataChangeOperationType37);
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType40.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation41);
        org.junit.Assert.assertNotNull(interpolationTypeOperation42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(instant45);
        org.junit.Assert.assertNotNull(gradeOperation47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(gradeOperation50);
        org.junit.Assert.assertNotNull(gradeOperation52);
        org.junit.Assert.assertNotNull(report53);
    }

    @Test
    public void test40203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40203");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits2 = searchResultUnitGroupWithUnits0.setCursor("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Integer int3 = searchResultUnitGroupWithUnits2.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits5 = searchResultUnitGroupWithUnits2.setTotalCount((java.lang.Integer) 2);
        org.junit.Assert.assertNotNull(searchResultUnitGroupWithUnits2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(searchResultUnitGroupWithUnits5);
    }

    @Test
    public void test40204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40204");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment0.ContentType = "/AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = attachment0.DateTaken;
        java.lang.String str4 = attachment0.FileName;
        attachment0.FileSize = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull7 = attachment0.AuditAttributes;
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(auditAttributesFull7);
    }

    @Test
    public void test40205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40205");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.time.OffsetDateTime offsetDateTime1 = fieldTripBasic0.getEndTime();
        java.lang.String str2 = fieldTripBasic0.Participants;
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic4 = fieldTripBasic0.setEndTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit5.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit9 = putFieldVisit5.setProject(projectSimple8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule12 = schedule10.setCustomId("");
        java.time.OffsetDateTime offsetDateTime13 = schedule10.getLastGenerationDate();
        putFieldVisit5.Schedule = schedule10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation15 = putFieldVisit5.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple16 = null;
        putFieldVisit5.FieldTrip = fieldTripSimple16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit19 = putFieldVisit5.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan20.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType23 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan20.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup25 = samplingPlan20.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan27 = samplingPlan20.setAuditAttributes(auditAttributes26);
        putFieldVisit5.SamplingPlan = samplingPlan20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule31 = schedule29.setCustomId("");
        putFieldVisit5.Schedule = schedule31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        java.time.OffsetDateTime offsetDateTime69 = null;
        putFieldVisit33.EndTime = offsetDateTime69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit72 = putFieldVisit33.setId("9999-12-31T23:59:59.999Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList73 = putFieldVisit72.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit74 = putFieldVisit5.setAttachments(domainObjectAttachmentList73);
        fieldTripBasic0.Attachments = domainObjectAttachmentList73;
        java.time.OffsetDateTime offsetDateTime76 = fieldTripBasic0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus77.Id = "0001-01-01T00:00:00.000Z";
        resultStatus77.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = putDetectioncondition82.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition85 = putDetectioncondition82.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes87 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity88 = samplingPlanPlannedActivity86.setAuditAttributes(auditAttributes87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes91 = auditAttributes89.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity88.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes93 = samplingPlanPlannedActivity88.AuditAttributes;
        putDetectioncondition82.AuditAttributes = auditAttributes93;
        resultStatus77.AuditAttributes = auditAttributes93;
        fieldTripBasic0.AuditAttributes = auditAttributes93;
        fieldTripBasic0.Participants = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(fieldTripBasic4);
        org.junit.Assert.assertNotNull(putFieldVisit9);
        org.junit.Assert.assertNotNull(schedule12);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNull(samplingLocation15);
        org.junit.Assert.assertNotNull(putFieldVisit19);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType23.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup25);
        org.junit.Assert.assertNotNull(samplingPlan27);
        org.junit.Assert.assertNotNull(schedule31);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNotNull(putFieldVisit72);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList73);
        org.junit.Assert.assertNotNull(putFieldVisit74);
        org.junit.Assert.assertNull(offsetDateTime76);
        org.junit.Assert.assertNull(auditAttributes83);
        org.junit.Assert.assertNotNull(putDetectioncondition85);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity88);
        org.junit.Assert.assertNotNull(auditAttributes91);
        org.junit.Assert.assertNotNull(auditAttributes93);
    }

    @Test
    public void test40206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40206");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty2.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType6 = observedProperty2.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = observedProperty2.setDescription("MinDuration");
        java.lang.String str9 = observedProperty8.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNull(resultType6);
        org.junit.Assert.assertNotNull(observedProperty8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinDuration" + "'", str9, "MinDuration");
    }

    @Test
    public void test40207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40207");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest0.ApplyShifts = true;
        java.time.Instant instant3 = ratingModelOutputValuesServiceRequest0.getEffectiveTime();
        java.lang.String str4 = ratingModelOutputValuesServiceRequest0.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest6 = ratingModelOutputValuesServiceRequest0.setApplyShifts((java.lang.Boolean) false);
        java.lang.Boolean boolean7 = ratingModelOutputValuesServiceRequest6.isApplyShifts();
        ratingModelOutputValuesServiceRequest6.RatingModelIdentifier = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
    }

    @Test
    public void test40208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40208");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_6.setMedia((java.util.List<java.lang.String>) strList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str28 = getObservationsV2_27.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        getObservationsV2_27.ProjectIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_6.setObservedPropertyIds((java.util.List<java.lang.String>) strList32);
        getObservationsV2_36.Cursor = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj40 = timeAlignedDataServiceRequest39.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest39.setQueryFrom(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = timeAlignedDataServiceRequest39.setTimeSeriesOutputUnitIds(strList50);
        getObservationsV2_36.Search = strList50;
        java.time.Instant instant55 = getObservationsV2_36.StartObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_56.setDataClassifications((java.util.List<java.lang.String>) strList60);
        getObservationsV2_62.DepthUnitCustomId = "hi!";
        java.lang.String str65 = getObservationsV2_62.CustomId;
        java.util.List<java.lang.String> strList66 = getObservationsV2_62.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        getObservationsV2_67.QualityControlTypes = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = getObservationsV2_62.setMedia((java.util.List<java.lang.String>) strList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str84 = getObservationsV2_83.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        getObservationsV2_85.SpecimenIds = strList88;
        getObservationsV2_83.ProjectIds = strList88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_92 = getObservationsV2_62.setObservedPropertyIds((java.util.List<java.lang.String>) strList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_93 = getObservationsV2_36.setActivityIds((java.util.List<java.lang.String>) strList88);
        getObservationsV2_93.SpecimenName = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType96 = getObservationsV2_93.SampleFraction;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest53);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(getObservationsV2_82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_92);
        org.junit.Assert.assertNotNull(getObservationsV2_93);
        org.junit.Assert.assertNull(sampleFractionType96);
    }

    @Test
    public void test40209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40209");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter2 = parameter0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter4 = parameter2.setMinValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter6 = parameter2.setIdentifier("http://MaxDurationhttp");
        java.lang.String str7 = parameter2.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter9 = parameter2.setMaxValue((java.lang.Double) (-1.0d));
        java.lang.String str10 = parameter9.getUnitGroupIdentifier();
        org.junit.Assert.assertNotNull(parameter2);
        org.junit.Assert.assertNotNull(parameter4);
        org.junit.Assert.assertNotNull(parameter6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(parameter9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test40210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40210");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList9 = getObservationsV2_2.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType10 = null;
        getObservationsV2_2.FieldResultType = fieldResultType10;
        getObservationsV2_2.MaxNumericResultValue = 100.0d;
        java.lang.String str14 = getObservationsV2_2.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_2.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_2.setAnalysisMethodIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations24 = getExportSamplingLocations0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList20);
        java.util.List<java.lang.String> strList25 = getExportSamplingLocations0.getSearch();
        java.lang.String str26 = getExportSamplingLocations0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary29.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse32.setNextToken(instant33);
        dischargeSummary29.MeasurementTime = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse28.setNextToken(instant33);
        java.time.Instant instant37 = locationDescriptionListServiceResponse28.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities38 = getActivities27.setToStartTime(instant37);
        java.util.List<java.lang.String> strList39 = getActivities38.Ids;
        java.util.List<java.lang.String> strList40 = getActivities38.getProjectIds();
        java.lang.String str41 = getActivities38.FieldVisitId;
        java.time.Instant instant42 = getActivities38.FromStartTime;
        java.util.List<java.lang.String> strList43 = getActivities38.ActivityTemplateId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList46 = getObservationsV2_45.SamplingContextTagIds;
        java.time.Instant instant47 = getObservationsV2_45.getEndModificationTime();
        java.util.List<java.lang.String> strList48 = getObservationsV2_45.Media;
        java.util.List<java.lang.String> strList49 = getObservationsV2_45.ActivityTypes;
        java.util.List<java.lang.String> strList50 = getObservationsV2_45.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_53.setDataClassifications((java.util.List<java.lang.String>) strList57);
        getObservationsV2_59.DepthUnitCustomId = "hi!";
        java.lang.String str62 = getObservationsV2_59.CustomId;
        java.util.List<java.lang.String> strList63 = getObservationsV2_59.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray74 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = putLocationTags70.setTagUniqueIds(strList75);
        getObservationsV2_64.QualityControlTypes = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_59.setMedia((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str81 = getObservationsV2_80.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        getObservationsV2_82.SpecimenIds = strList85;
        getObservationsV2_80.ProjectIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_89 = getObservationsV2_59.setObservedPropertyIds((java.util.List<java.lang.String>) strList85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest90 = timeAlignedDataServiceRequest51.setTimeSeriesOutputUnitIds(strList85);
        getObservationsV2_45.DataClassifications = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods92 = getLabAnalysisMethods44.setObservedPropertyIds((java.util.List<java.lang.String>) strList85);
        getActivities38.ActivityTypes = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations94 = getExportSamplingLocations0.setLocationTypeIds((java.util.List<java.lang.String>) strList85);
        getExportSamplingLocations94.Limit = 4;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSamplingLocations24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(getActivities38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(instant47);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(putLocationTags77);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_89);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest90);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods92);
        org.junit.Assert.assertNotNull(getExportSamplingLocations94);
    }

    @Test
    public void test40211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40211");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str5 = timeSeriesApprovalsTransactionListServiceRequest4.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType7 = null;
        controlConditionActivity6.ControlCleaned = controlCleanedType7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        controlConditionActivity6.DateCleaned = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest13 = timeSeriesApprovalsTransactionListServiceRequest4.setQueryTo(instant10);
        timeSeriesApprovalsTransactionListServiceRequest4.TimeSeriesUniqueId = "https";
        java.time.Instant instant16 = timeSeriesApprovalsTransactionListServiceRequest4.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList18 = fieldVisitDataServiceResponse17.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse20 = fieldVisitDataServiceResponse17.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary21.Reviewer = "";
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary21.MeasurementTime = instant24;
        fieldVisitDataServiceResponse17.ResponseTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest27 = timeSeriesApprovalsTransactionListServiceRequest4.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon28 = importItemTaxon0.setErrors((java.lang.Object) instant24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation29.setPlannedFieldResult(plannedFieldResult30);
        observation31.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus34 = observation31.ResultStatus;
        java.time.OffsetDateTime offsetDateTime35 = null;
        observation31.ResultTime = offsetDateTime35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = observation31.setAnalysisMethod(analysisMethodSimple37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList40 = importItemTaxon39.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon42 = importItemTaxon39.setItem(taxon41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str44 = postCalculatedDerivedTimeSeries43.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList45 = postCalculatedDerivedTimeSeries43.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon46 = importItemTaxon42.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList48 = importItemObject47.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList50, importChangeItemArray49);
        importItemObject47.ItemComparison = importChangeItemList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject61 = importItemObject47.setExistingItem((java.lang.Object) putLocationTags53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser64 = openIdConnectUser62.setIdentifier("");
        java.lang.Boolean boolean65 = openIdConnectUser64.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject66 = importItemObject47.setErrors((java.lang.Object) openIdConnectUser64);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList67 = importItemObject66.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon68 = importItemTaxon46.setItemComparison(importChangeItemList67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList70 = importItemTaxon69.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon71 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon72 = importItemTaxon69.setItem(taxon71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str74 = postCalculatedDerivedTimeSeries73.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList75 = postCalculatedDerivedTimeSeries73.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon76 = importItemTaxon72.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon78 = importItemTaxon72.setExistingItem(taxon77);
        importItemTaxon46.Item = taxon77;
        taxon77.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str82 = taxon77.getItisUrl();
        java.lang.String str83 = taxon77.ItisUrl;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon85 = taxon77.setParentId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon87 = taxon85.setSource("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel88 = taxon87.TaxonomyLevel;
        java.lang.String str89 = taxon87.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation90 = observation31.setRelatedTaxon(taxon87);
        importItemTaxon28.Item = taxon87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon93 = taxon87.setComment("");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest13);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList18);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest27);
        org.junit.Assert.assertNotNull(importItemTaxon28);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNull(resultStatus34);
        org.junit.Assert.assertNotNull(observation38);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(importItemTaxon42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(extendedAttributeValueList45);
        org.junit.Assert.assertNotNull(importItemTaxon46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(importChangeItemArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNotNull(importItemObject61);
        org.junit.Assert.assertNotNull(openIdConnectUser64);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNotNull(importItemObject66);
        org.junit.Assert.assertNotNull(importChangeItemList67);
        org.junit.Assert.assertNotNull(importItemTaxon68);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(importItemTaxon72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(extendedAttributeValueList75);
        org.junit.Assert.assertNotNull(importItemTaxon76);
        org.junit.Assert.assertNotNull(importItemTaxon78);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(taxon85);
        org.junit.Assert.assertNotNull(taxon87);
        org.junit.Assert.assertNull(taxonomyLevel88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(observation90);
        org.junit.Assert.assertNotNull(taxon93);
    }

    @Test
    public void test40212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40212");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest2.setTimeSeriesUniqueIds(strList14);
        getChartDataV2_0.ActivityIds = strList14;
        java.lang.String str20 = getChartDataV2_0.getFilterId();
        java.util.List<java.lang.String> strList21 = getChartDataV2_0.getIds();
        java.lang.Integer int22 = getChartDataV2_0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = getChartDataV2_0.setActivityCustomId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.lang.String str26 = user25.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList28 = putUserV2_27.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_30 = putUserV2_27.setUserType(userType29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user31 = user25.setUserType(userType29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean33 = getFieldVisitReadingsByLocationServiceRequest32.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest32.ApplyDatumConversion = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest37 = getFieldVisitReadingsByLocationServiceRequest32.setLocationUniqueId("2021.4.62.0");
        getFieldVisitReadingsByLocationServiceRequest37.Publish = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList41 = getExportObservations40.getLabReportIds();
        java.lang.String str42 = getExportObservations40.DepthUnitCustomId;
        java.util.List<java.lang.String> strList43 = getExportObservations40.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str45 = getChartDataV2_44.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_47 = getChartDataV2_44.setFilterId("");
        java.util.List<java.lang.String> strList48 = getChartDataV2_44.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList51 = getObservationsV2_50.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray62 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags58.setTagUniqueIds(strList63);
        getObservationsV2_52.QualityControlTypes = strList63;
        getObservationsV2_50.ResultGrades = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems68 = getExtendedAttributeDropdownlistitems49.setSearch((java.util.List<java.lang.String>) strList63);
        getChartDataV2_44.ObservedPropertyIds = strList63;
        getChartDataV2_44.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList73 = getExportObservations72.getLabReportIds();
        java.lang.String str74 = getExportObservations72.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj76 = getActivityTemplates75.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        getObservationsV2_77.SpecimenIds = strList80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray87 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags90 = putLocationTags83.setTagUniqueIds(strList88);
        getObservationsV2_77.QualityControlTypes = strList88;
        getActivityTemplates75.Type = strList88;
        getExportObservations72.AnalyticalGroupIds = strList88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_94 = getChartDataV2_44.setAnalysisMethodIds((java.util.List<java.lang.String>) strList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations95 = getExportObservations40.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest96 = getFieldVisitReadingsByLocationServiceRequest37.setParameters(strList88);
        user25.Roles = strList88;
        getChartDataV2_24.SamplingLocationGroupIds = strList88;
        java.util.List<java.lang.String> strList99 = getChartDataV2_24.ProjectIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(getChartDataV2_24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertTrue("'" + userType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_30);
        org.junit.Assert.assertNotNull(user31);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest37);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(getChartDataV2_47);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems68);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(putLocationTags90);
        org.junit.Assert.assertNotNull(getChartDataV2_94);
        org.junit.Assert.assertNotNull(getExportObservations95);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest96);
        org.junit.Assert.assertNull(strList99);
    }

    @Test
    public void test40213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40213");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation3.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList7, extendedAttributeValueArray6);
        postLocation3.ExtendedAttributeValues = extendedAttributeValueList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries10 = postCalculatedDerivedTimeSeries0.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList7);
        postCalculatedDerivedTimeSeries0.ComputationIdentifier = "-PT87591240H";
        java.lang.String str13 = postCalculatedDerivedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries14.SourceIsLocalAssumedDatum = false;
        java.lang.String str17 = postDatumConvertedTimeSeries14.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        postDatumConvertedTimeSeries14.InterpolationType = interpolationType18;
        postCalculatedDerivedTimeSeries0.InterpolationType = interpolationType18;
        java.util.ArrayList<java.lang.String> strList21 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries23 = postCalculatedDerivedTimeSeries0.setDescription("http://MaxDurationhttp/json/reply/String");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + interpolationType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries23);
    }

    @Test
    public void test40214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40214");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putAnalysisMethod0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType3 = null;
        putObservedProperty2.ResultType = resultType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = postAnalysisMethod5.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod8 = postAnalysisMethod5.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod10 = postAnalysisMethod5.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14, importHistoryEventSimpleArray13);
        postObservedProperty11.ImportHistoryEventSimples = importHistoryEventSimpleList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod17 = postAnalysisMethod5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty18 = putObservedProperty2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod19 = putAnalysisMethod0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = postAnalysisMethod20.ImportHistoryEventSimples;
        postAnalysisMethod20.Id = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod26 = postLabAnalysisMethod24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList28, observedPropertyArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod30 = postLabAnalysisMethod26.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod32 = postLabAnalysisMethod26.setAuditAttributes(auditAttributes31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList33 = postLabAnalysisMethod32.getObservedProperties();
        postAnalysisMethod20.ObservedProperties = observedPropertyList33;
        putAnalysisMethod19.ObservedProperties = observedPropertyList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod37 = putAnalysisMethod19.setDescription("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        java.lang.String str38 = putAnalysisMethod37.Context;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList6);
        org.junit.Assert.assertNotNull(postAnalysisMethod8);
        org.junit.Assert.assertNotNull(postAnalysisMethod10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(postAnalysisMethod17);
        org.junit.Assert.assertNotNull(putObservedProperty18);
        org.junit.Assert.assertNotNull(putAnalysisMethod19);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod26);
        org.junit.Assert.assertNotNull(observedPropertyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod30);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod32);
        org.junit.Assert.assertNotNull(observedPropertyList33);
        org.junit.Assert.assertNotNull(putAnalysisMethod37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test40215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40215");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay24 = doubleWithDisplay22.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str25 = doubleWithDisplay24.getDisplay();
        java.lang.String str26 = doubleWithDisplay24.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity27 = adcpDischargeActivity21.setDischargeCoefficientVariation(doubleWithDisplay24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity29 = adcpDischargeActivity27.setTopEstimateMethod("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = adcpDischargeActivity29.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity32 = adcpDischargeActivity29.setNumberOfTransects((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType35 = dischargeChannelMeasurement34.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = dischargeChannelMeasurement34.Discharge;
        java.time.Instant instant37 = dischargeChannelMeasurement34.EndTime;
        dischargeChannelMeasurement34.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity40 = engineeredStructureDischargeActivity33.setDischargeChannelMeasurement(dischargeChannelMeasurement34);
        java.lang.String str41 = engineeredStructureDischargeActivity40.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = engineeredStructureDischargeActivity40.MeanHead;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType44 = dischargeChannelMeasurement43.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = null;
        dischargeChannelMeasurement43.Discharge = quantityWithDisplay45;
        dischargeChannelMeasurement43.Comments = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType50 = dischargeChannelMeasurement49.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = dischargeChannelMeasurement49.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType52 = dischargeChannelMeasurement49.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement54 = dischargeChannelMeasurement49.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType55 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream;
        dischargeChannelMeasurement54.MeasurementLocationToGage = measurementLocationToGageType55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement57 = dischargeChannelMeasurement43.setMeasurementLocationToGage(measurementLocationToGageType55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType58 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading;
        dischargeChannelMeasurement43.DeploymentMethod = deploymentMethodType58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity60 = engineeredStructureDischargeActivity40.setDischargeChannelMeasurement(dischargeChannelMeasurement43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity61 = adcpDischargeActivity32.setDischargeChannelMeasurement(dischargeChannelMeasurement43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay62 = dischargeChannelMeasurement43.getDistanceToGage();
        java.lang.String str63 = dischargeChannelMeasurement43.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType65 = dischargeChannelMeasurement64.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay66 = dischargeChannelMeasurement64.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType67 = dischargeChannelMeasurement64.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement69 = dischargeChannelMeasurement64.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType70 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType.Unspecified;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement71 = dischargeChannelMeasurement64.setChannelMaterial(channelMaterialType70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement72 = dischargeChannelMeasurement43.setChannelMaterial(channelMaterialType70);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNotNull(doubleWithDisplay24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(adcpDischargeActivity27);
        org.junit.Assert.assertNotNull(adcpDischargeActivity29);
        org.junit.Assert.assertNull(doubleWithDisplay30);
        org.junit.Assert.assertNotNull(adcpDischargeActivity32);
        org.junit.Assert.assertNull(channelMaterialType35);
        org.junit.Assert.assertNull(quantityWithDisplay36);
        org.junit.Assert.assertNull(instant37);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(quantityWithDisplay42);
        org.junit.Assert.assertNull(channelMaterialType44);
        org.junit.Assert.assertNull(channelMaterialType50);
        org.junit.Assert.assertNull(quantityWithDisplay51);
        org.junit.Assert.assertNull(horizontalFlowType52);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement54);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType55 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream + "'", measurementLocationToGageType55.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement57);
        org.junit.Assert.assertTrue("'" + deploymentMethodType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading + "'", deploymentMethodType58.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading));
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity60);
        org.junit.Assert.assertNotNull(adcpDischargeActivity61);
        org.junit.Assert.assertNull(quantityWithDisplay62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "https" + "'", str63, "https");
        org.junit.Assert.assertNull(channelMaterialType65);
        org.junit.Assert.assertNull(quantityWithDisplay66);
        org.junit.Assert.assertNull(horizontalFlowType67);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement69);
        org.junit.Assert.assertTrue("'" + channelMaterialType70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType.Unspecified + "'", channelMaterialType70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType.Unspecified));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement71);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement72);
    }

    @Test
    public void test40216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40216");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup0.Identifier = "";
        java.lang.Object obj3 = putQualifierGroup0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup5 = putQualifierGroup0.setUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup7 = putQualifierGroup5.setIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup9 = putQualifierGroup7.setIdentifier("multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertNotNull(putQualifierGroup5);
        org.junit.Assert.assertNotNull(putQualifierGroup7);
        org.junit.Assert.assertNotNull(putQualifierGroup9);
    }

    @Test
    public void test40217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40217");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity9 = null;
        postObservationV2_2.Activity = activity9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult11.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue14 = categoricalResult11.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult16 = categoricalResult11.setValue("http://MaxDurationhttp/json/reply/ArrayList");
        postObservationV2_2.CategoricalResult = categoricalResult11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_19 = postObservationV2_2.setCustomId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str20 = postObservationV2_19.Id;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(categoricalValue14);
        org.junit.Assert.assertNotNull(categoricalResult16);
        org.junit.Assert.assertNotNull(postObservationV2_19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test40218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40218");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = standardSimple0.setApplicabilityRange(interval1);
        java.lang.String str3 = standardSimple2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = standardSimple2.setName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard8 = postStandard6.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard10 = postStandard8.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList12, observationStandardArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard14 = postStandard10.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard16 = postStandard10.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList18, observationStandardArray17);
        postStandard10.ObservationStandards = observationStandardList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard22 = postStandard10.setId("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant24 = interval23.Start;
        java.time.Instant instant25 = interval23.End;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard26 = postStandard22.setApplicabilityRange(interval23);
        standardSimple5.ApplicabilityRange = interval23;
        java.time.Instant instant28 = interval23.End;
        java.time.Instant instant29 = interval23.Start;
        org.junit.Assert.assertNotNull(standardSimple2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(standardSimple5);
        org.junit.Assert.assertNotNull(postStandard8);
        org.junit.Assert.assertNotNull(postStandard10);
        org.junit.Assert.assertNotNull(observationStandardArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(postStandard14);
        org.junit.Assert.assertNotNull(postStandard16);
        org.junit.Assert.assertNotNull(observationStandardArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postStandard22);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNotNull(postStandard26);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(instant29);
    }

    @Test
    public void test40219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40219");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue searchResultCategoricalValue0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList1 = searchResultCategoricalValue0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue searchResultCategoricalValue3 = searchResultCategoricalValue0.setCursor("MinDuration");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList4 = searchResultCategoricalValue0.getDomainObjects();
        searchResultCategoricalValue0.TotalCount = 7;
        java.lang.String str7 = searchResultCategoricalValue0.getCursor();
        org.junit.Assert.assertNull(categoricalValueList1);
        org.junit.Assert.assertNotNull(searchResultCategoricalValue3);
        org.junit.Assert.assertNull(categoricalValueList4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinDuration" + "'", str7, "MinDuration");
    }

    @Test
    public void test40220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40220");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest0.ApplyDatumConversion = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest5 = getFieldVisitReadingsByLocationServiceRequest0.setLocationUniqueId("2021.4.62.0");
        java.lang.String str6 = getFieldVisitReadingsByLocationServiceRequest5.getLocationUniqueId();
        java.lang.String str7 = getFieldVisitReadingsByLocationServiceRequest5.LocationIdentifier;
        getFieldVisitReadingsByLocationServiceRequest5.Publish = true;
        java.lang.String str10 = getFieldVisitReadingsByLocationServiceRequest5.LocationUniqueId;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2021.4.62.0" + "'", str6, "2021.4.62.0");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2021.4.62.0" + "'", str10, "2021.4.62.0");
    }

    @Test
    public void test40221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40221");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.time.Instant instant1 = referencePointPeriod0.AppliedTimeUtc;
        java.lang.Double double2 = referencePointPeriod0.getUncertainty();
        java.lang.String str3 = referencePointPeriod0.ReferencePointUniqueId;
        java.lang.Double double4 = referencePointPeriod0.Elevation;
        java.lang.Double double5 = referencePointPeriod0.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj8 = timeAlignedDataServiceRequest7.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = timeAlignedDataServiceRequest7.setQueryFrom(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription13 = timeSeriesDescription6.setRawStartTime(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription15 = timeSeriesDescription13.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription17 = timeSeriesDescription15.setUniqueId("/AQUARIUS/Provisioning/v1");
        java.lang.String str18 = timeSeriesDescription17.getDescription();
        java.time.Instant instant19 = timeSeriesDescription17.RawStartTime;
        referencePointPeriod0.ValidFrom = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase22 = referencePointPeriod0.setStandardIdentifier("zZZZZ");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest12);
        org.junit.Assert.assertNotNull(timeSeriesDescription13);
        org.junit.Assert.assertNotNull(timeSeriesDescription15);
        org.junit.Assert.assertNotNull(timeSeriesDescription17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(referencePointPeriodBase22);
    }

    @Test
    public void test40222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40222");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits postGenerateFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits();
        postGenerateFieldVisits0.Id = "hi!";
        java.lang.String str3 = postGenerateFieldVisits0.Id;
        java.lang.String str4 = postGenerateFieldVisits0.Id;
        postGenerateFieldVisits0.Id = "2021.4.62.0";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test40223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40223");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = postBasicTimeSeries5.Publish;
        java.lang.Boolean boolean7 = postBasicTimeSeries5.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries9 = postBasicTimeSeries5.setLocationUniqueId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
        org.junit.Assert.assertNotNull(postBasicTimeSeries9);
    }

    @Test
    public void test40224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40224");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = observation1.setPlannedFieldResult(plannedFieldResult2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction4 = null;
        observation3.LabInstruction = labInstruction4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setStatistics(observationStatistics6);
        java.time.OffsetDateTime offsetDateTime8 = observation7.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade9 = observation7.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = auditAttributes10.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation7.setAuditAttributes(auditAttributes10);
        putAccessGroup0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = putAccessGroup0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = putAccessGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = postSamplingLocationGroup17.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = locationGroupType19.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType22 = locationGroupType19.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup17.LocationGroupType = locationGroupType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup25 = postSamplingLocationGroup17.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity29 = samplingPlanPlannedActivity27.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = auditAttributes30.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity29.AuditAttributes = auditAttributes30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = samplingPlanPlannedActivity29.AuditAttributes;
        putAccessGroup26.AuditAttributes = auditAttributes34;
        postSamplingLocationGroup17.AuditAttributes = auditAttributes34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = locationGroupType37.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType40 = locationGroupType37.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup41 = postSamplingLocationGroup17.setLocationGroupType(locationGroupType40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus42.SystemCode = resultStatusSystemCodeType43;
        resultStatus42.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str48 = categoricalValue47.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = specimenTemplate50.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType53 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate52.Preservative = preservativeType53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails59 = labResultDetails57.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate60 = specimenTemplate52.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition61 = postDetectioncondition49.setAuditAttributes(auditAttributes58);
        categoricalValue47.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus63 = resultStatus42.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = resultStatus63.getAuditAttributes();
        postSamplingLocationGroup41.AuditAttributes = auditAttributes64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup66 = putAccessGroup0.setAuditAttributes(auditAttributes64);
        java.lang.String str67 = putAccessGroup66.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup69 = putAccessGroup66.setName("http://MaxDurationhttp");
        org.junit.Assert.assertNotNull(observation3);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(resultGrade9);
        org.junit.Assert.assertNotNull(auditAttributes12);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNotNull(auditAttributes16);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertNotNull(locationGroupType22);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup25);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity29);
        org.junit.Assert.assertNotNull(auditAttributes32);
        org.junit.Assert.assertNotNull(auditAttributes34);
        org.junit.Assert.assertNull(auditAttributes38);
        org.junit.Assert.assertNotNull(locationGroupType40);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup41);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(specimenTemplate52);
        org.junit.Assert.assertTrue("'" + preservativeType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType53.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNotNull(labResultDetails59);
        org.junit.Assert.assertNotNull(specimenTemplate60);
        org.junit.Assert.assertNotNull(postDetectioncondition61);
        org.junit.Assert.assertNotNull(resultStatus63);
        org.junit.Assert.assertNotNull(auditAttributes64);
        org.junit.Assert.assertNotNull(putAccessGroup66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(putAccessGroup69);
    }

    @Test
    public void test40225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40225");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        openIdConnectRelyingPartyConfiguration0.OptionalIssuerDiscoveryUri = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = getObservationsV2_3.setDataClassifications((java.util.List<java.lang.String>) strList7);
        getObservationsV2_9.DepthUnitCustomId = "hi!";
        java.lang.String str12 = getObservationsV2_9.DepthUnitId;
        java.util.List<java.lang.String> strList13 = null;
        getObservationsV2_9.ProjectIds = strList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_17 = postUserV2_15.setUserProfile(userProfile16);
        java.lang.Object obj18 = postUserV2_17.getResponseType();
        java.util.List<java.lang.String> strList19 = postUserV2_17.AccessGroups;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = reading20.getValue();
        reading20.ReferencePointUniqueId = "hi!";
        java.lang.String str24 = reading20.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary27.DifferenceDuringVisit = doubleWithDisplay28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay28.setNumeric((java.lang.Double) 100.0d);
        reading20.Value = doubleWithDisplay31;
        java.lang.Boolean boolean33 = reading20.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading35 = reading20.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_36.setDataClassifications((java.util.List<java.lang.String>) strList40);
        getObservationsV2_42.DepthUnitCustomId = "hi!";
        java.lang.String str45 = getObservationsV2_42.CustomId;
        java.util.List<java.lang.String> strList46 = getObservationsV2_42.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_42.setMedia((java.util.List<java.lang.String>) strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str64 = getObservationsV2_63.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        getObservationsV2_63.ProjectIds = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = getObservationsV2_42.setObservedPropertyIds((java.util.List<java.lang.String>) strList68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading73 = reading20.setReadingQualifiers(strList68);
        postUserV2_17.Roles = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_9.setIds((java.util.List<java.lang.String>) strList68);
        openIdConnectRelyingPartyConfiguration0.HostedDomains = strList68;
        java.lang.String str77 = openIdConnectRelyingPartyConfiguration0.getDisplayName();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(postUserV2_17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(reading35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_72);
        org.junit.Assert.assertNotNull(reading73);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test40226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40226");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset();
        putBaseStandardReferenceDatumOffset0.OffsetToBaseReference = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset4 = putBaseStandardReferenceDatumOffset0.setStandardIdentifier("MinDuration");
        putBaseStandardReferenceDatumOffset0.StandardIdentifier = "";
        java.lang.String str7 = putBaseStandardReferenceDatumOffset0.Method;
        putBaseStandardReferenceDatumOffset0.Method = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutBaseStandardReferenceDatumOffset putBaseStandardReferenceDatumOffset11 = putBaseStandardReferenceDatumOffset0.setUncertainty((java.lang.Double) 0.0d);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(putBaseStandardReferenceDatumOffset11);
    }

    @Test
    public void test40227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40227");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationType postLocationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationType();
        java.lang.Object obj1 = postLocationType0.getResponseType();
        java.lang.Object obj2 = postLocationType0.getResponseType();
        java.lang.Object obj3 = postLocationType0.getResponseType();
        java.lang.Object obj4 = postLocationType0.getResponseType();
        java.lang.Object obj5 = postLocationType0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
    }

    @Test
    public void test40228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40228");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole();
        java.lang.String str1 = locationFolderUserRole0.RoleUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole3 = locationFolderUserRole0.setRoleUniqueId("/AQUARIUS/Acquisition/v2");
        locationFolderUserRole0.AppliedToLocationFolderUniqueId = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole7 = locationFolderUserRole0.setRoleUniqueId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str8 = locationFolderUserRole0.getRoleUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationFolderUserRole3);
        org.junit.Assert.assertNotNull(locationFolderUserRole7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str8, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test40229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40229");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation2 = methodOperation0.setOperationType(metadataChangeOperationType1);
        methodOperation0.User = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Method method6 = methodOperation0.setMethodCode("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation8 = methodOperation0.setStackPosition((java.lang.Integer) (-1));
        java.lang.String str9 = methodOperation0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation11 = methodOperation0.setComments("MinDuration");
        java.lang.String str12 = methodOperation11.Comments;
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation2);
        org.junit.Assert.assertNotNull(method6);
        org.junit.Assert.assertNotNull(methodOperation8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(methodOperation11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MinDuration" + "'", str12, "MinDuration");
    }

    @Test
    public void test40230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40230");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteApprovalLevel deleteApprovalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteApprovalLevel();
        java.lang.Long long1 = deleteApprovalLevel0.ApprovalLevel;
        java.lang.Long long2 = deleteApprovalLevel0.getApprovalLevel();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNull(long2);
    }

    @Test
    public void test40231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40231");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        java.lang.Double double22 = getObservationsV2_4.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str24 = deleteFieldVisits23.Sort;
        deleteFieldVisits23.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_27.setDataClassifications((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = getObservationsV2_27.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        getObservationsV2_27.StartResultTime = instant38;
        java.lang.String[] strArray50 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList51);
        deleteFieldVisits23.PlanningStatuses = strList51;
        getObservationsV2_4.Media = strList51;
        getChartDataV2_0.SpecimenIds = strList51;
        getChartDataV2_0.MaxNumericResultValue = 100.0d;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
    }

    @Test
    public void test40232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40232");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str1 = putLabReport0.getId();
        java.time.OffsetDateTime offsetDateTime2 = null;
        putLabReport0.DateReceived = offsetDateTime2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory4.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = laboratory4.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = laboratory8.setEmailAddress("-PT87591240H");
        putLabReport0.Laboratory = laboratory8;
        java.lang.String str12 = putLabReport0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(laboratory8);
        org.junit.Assert.assertNotNull(laboratory10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test40233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40233");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate2 = spreadsheetTemplate0.setType(spreadsheetTemplateType1);
        spreadsheetTemplate2.Description = "9999-12-31T23:59:59.999Z";
        spreadsheetTemplate2.Description = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate8 = spreadsheetTemplate2.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType10 = null;
        putSpreadsheetTemplate9.Type = spreadsheetTemplateType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType12 = putSpreadsheetTemplate9.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = putSpreadsheetTemplate9.AuditAttributes;
        putSpreadsheetTemplate9.Description = "http";
        putSpreadsheetTemplate9.CustomId = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT;
        putSpreadsheetTemplate9.Type = spreadsheetTemplateType18;
        spreadsheetTemplate2.Type = spreadsheetTemplateType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType22 = spreadsheetTemplate21.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType23 = spreadsheetTemplate21.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType24 = null;
        spreadsheetTemplate21.Type = spreadsheetTemplateType24;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList26 = spreadsheetTemplate21.Attachments;
        spreadsheetTemplate21.CustomId = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType29 = null;
        spreadsheetTemplate21.Type = spreadsheetTemplateType29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType32 = spreadsheetTemplate31.getType();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList33 = spreadsheetTemplate31.getAttachments();
        java.lang.String str34 = spreadsheetTemplate31.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType35 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.CUSTODY_LOG;
        spreadsheetTemplate31.Type = spreadsheetTemplateType35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate39 = spreadsheetTemplate37.setType(spreadsheetTemplateType38);
        spreadsheetTemplate37.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate43 = spreadsheetTemplate37.setId("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT;
        spreadsheetTemplate43.Type = spreadsheetTemplateType44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate46 = spreadsheetTemplate31.setType(spreadsheetTemplateType44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate47 = spreadsheetTemplate21.setType(spreadsheetTemplateType44);
        spreadsheetTemplate2.Type = spreadsheetTemplateType44;
        org.junit.Assert.assertNotNull(spreadsheetTemplate2);
        org.junit.Assert.assertNotNull(spreadsheetTemplate8);
        org.junit.Assert.assertNull(spreadsheetTemplateType12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertTrue("'" + spreadsheetTemplateType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT + "'", spreadsheetTemplateType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT));
        org.junit.Assert.assertNull(spreadsheetTemplateType22);
        org.junit.Assert.assertNull(spreadsheetTemplateType23);
        org.junit.Assert.assertNull(domainObjectAttachmentList26);
        org.junit.Assert.assertNull(spreadsheetTemplateType32);
        org.junit.Assert.assertNull(domainObjectAttachmentList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + spreadsheetTemplateType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.CUSTODY_LOG + "'", spreadsheetTemplateType35.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.CUSTODY_LOG));
        org.junit.Assert.assertNotNull(spreadsheetTemplate39);
        org.junit.Assert.assertNotNull(spreadsheetTemplate43);
        org.junit.Assert.assertTrue("'" + spreadsheetTemplateType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT + "'", spreadsheetTemplateType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT));
        org.junit.Assert.assertNotNull(spreadsheetTemplate46);
        org.junit.Assert.assertNotNull(spreadsheetTemplate47);
    }

    @Test
    public void test40234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40234");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str5 = metricConfiguration4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty6.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = metricConfiguration4.setObservedProperty(observedProperty6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType10 = observedProperty6.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = null;
        quantity13.Unit = unit14;
        postObservedProperty11.LowerLimit = quantity13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = postObservedProperty11.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = quantity17.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = observedProperty6.setUpperLimit(quantity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation20 = samplingLocation3.setElevation(quantity17);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList21 = samplingLocation20.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList24, plannedActivityArray23);
        putFieldVisit22.PlannedActivities = plannedActivityList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str28 = domainObjectAttachment27.getId();
        java.lang.String str29 = domainObjectAttachment27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = domainObjectAttachment27.setAttachment(attachment30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str33 = domainObjectAttachment32.getId();
        java.lang.String str34 = domainObjectAttachment32.getId();
        domainObjectAttachment32.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = domainObjectAttachment32.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str40 = domainObjectAttachment39.getId();
        java.lang.String str41 = domainObjectAttachment39.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = domainObjectAttachment39.setAttachment(attachment42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str45 = domainObjectAttachment44.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str47 = domainObjectAttachment46.getId();
        java.lang.String str48 = domainObjectAttachment46.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = domainObjectAttachment46.setAttachment(attachment49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str52 = domainObjectAttachment51.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment27, domainObjectAttachment32, domainObjectAttachment39, domainObjectAttachment44, domainObjectAttachment46, domainObjectAttachment51 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList54, domainObjectAttachmentArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit56 = putFieldVisit22.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList54);
        samplingLocation20.Attachments = domainObjectAttachmentList54;
        java.lang.String str58 = samplingLocation20.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation60 = samplingLocation20.setTimeZone(timeZone59);
        putObservationV2_2.SamplingLocation = samplingLocation60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address62 = samplingLocation60.Address;
        java.lang.String str63 = samplingLocation60.getVerticalCollectionMethod();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(metricConfiguration9);
        org.junit.Assert.assertNull(resultType10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(quantity17);
        org.junit.Assert.assertNull(unit18);
        org.junit.Assert.assertNotNull(observedProperty19);
        org.junit.Assert.assertNotNull(samplingLocation20);
        org.junit.Assert.assertNull(domainObjectAttachmentList21);
        org.junit.Assert.assertNotNull(plannedActivityArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(domainObjectAttachment31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(domainObjectAttachment38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(domainObjectAttachment43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(domainObjectAttachment50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putFieldVisit56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(samplingLocation60);
        org.junit.Assert.assertNull(address62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test40235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40235");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        java.lang.Long long8 = timeAlignedPoint0.GradeCode4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setDisplayValue1("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        timeAlignedPoint10.GradeName1 = "9999-12-31T23:59:59.999Z";
        timeAlignedPoint10.GradeCode8 = 0L;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint10.setApprovalName10("http://MaxDurationhttp/json/reply/Integer");
        java.lang.Double double17 = timeAlignedPoint10.getNumericValue8();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint19 = timeAlignedPoint10.setApprovalLevel1((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint21 = timeAlignedPoint19.setNumericValue8((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint23 = timeAlignedPoint19.setDisplayValue1("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(long8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNull(double17);
        org.junit.Assert.assertNotNull(timeAlignedPoint19);
        org.junit.Assert.assertNotNull(timeAlignedPoint21);
        org.junit.Assert.assertNotNull(timeAlignedPoint23);
    }

    @Test
    public void test40236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40236");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime1 = importHistoryEventSimple0.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple0.setId("http");
        java.lang.String str4 = importHistoryEventSimple0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple6 = importHistoryEventSimple0.setFileName("2021.4.62.0");
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http" + "'", str4, "http");
        org.junit.Assert.assertNotNull(importHistoryEventSimple6);
    }

    @Test
    public void test40237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40237");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setSearch(strList2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = getObservationsV2_4.setDataClassifications((java.util.List<java.lang.String>) strList8);
        java.util.List<java.lang.String> strList11 = getObservationsV2_4.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        getObservationsV2_4.StartResultTime = instant15;
        java.lang.String[] strArray27 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = getObservationsV2_4.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription33 = locationDescription31.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType35 = null;
        controlConditionActivity34.ControlCleaned = controlCleanedType35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse37.setNextToken(instant38);
        controlConditionActivity34.DateCleaned = instant38;
        locationDescription33.LastModified = instant38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_30.setStartResultTime(instant38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_43 = getChartDataV2_0.setEndObservedTime(instant38);
        java.lang.Double double44 = getChartDataV2_0.getDepthValue();
        getChartDataV2_0.DepthUnitCustomId = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.Integer int47 = getChartDataV2_0.Limit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_30);
        org.junit.Assert.assertNotNull(locationDescription33);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_43);
        org.junit.Assert.assertNull(double44);
        org.junit.Assert.assertNull(int47);
    }

    @Test
    public void test40238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40238");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        postRole0.CanAssignUserRoles = false;
        java.lang.Boolean boolean3 = postRole0.isCanAddData();
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test40239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40239");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType5 = getExportObservations0.getFormat();
        java.util.List<java.lang.String> strList6 = getExportObservations0.LabReportIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(getExportObservationsFormatType5);
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test40240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40240");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation2 = searchResultObservation0.setTotalCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation4 = searchResultObservation0.setCursor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation6 = searchResultObservation4.setCursor("");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList7 = searchResultObservation6.DomainObjects;
        java.lang.String str8 = searchResultObservation6.getCursor();
        java.lang.String str9 = searchResultObservation6.getCursor();
        searchResultObservation6.Cursor = "";
        org.junit.Assert.assertNotNull(searchResultObservation2);
        org.junit.Assert.assertNotNull(searchResultObservation4);
        org.junit.Assert.assertNotNull(searchResultObservation6);
        org.junit.Assert.assertNull(observationList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test40241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40241");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod4 = postObservationV2_2.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation5.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setCategoricalResult(categoricalResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        observation5.DataClassification = dataClassificationType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_12 = postObservationV2_2.setDataClassification(dataClassificationType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation13.setPlannedFieldResult(plannedFieldResult14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction16 = null;
        observation15.LabInstruction = labInstruction16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation15.setStatistics(observationStatistics18);
        java.time.OffsetDateTime offsetDateTime20 = observation19.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = observation19.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation19.setObservedProperty(observedProperty22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation19.setResultGrade(resultGrade24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = observation26.setPlannedFieldResult(plannedFieldResult27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction29 = null;
        observation28.LabInstruction = labInstruction29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation28.setStatistics(observationStatistics31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon33 = null;
        observation28.RelatedTaxon = taxon33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation36 = observation28.setResultStatus(resultStatus35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC;
        observation36.QualityControlType = qualityControlType37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation25.setQualityControlType(qualityControlType37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction40 = observation25.getLabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation41.setPlannedFieldResult(plannedFieldResult42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction44 = null;
        observation43.LabInstruction = labInstruction44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = observation43.setStatistics(observationStatistics46);
        java.time.OffsetDateTime offsetDateTime48 = observation47.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList49 = observation47.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation47.setObservedProperty(observedProperty50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult52 = null;
        observation51.NumericResult = numericResult52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen54 = null;
        observation51.Specimen = specimen54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation57 = observation51.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType58 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.REPLICATE;
        observation57.QualityControlType = qualityControlType58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation60 = observation25.setQualityControlType(qualityControlType58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_61 = postObservationV2_2.setQualityControlType(qualityControlType58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType62 = postObservationV2_61.QualityControlType;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(collectionMethod4);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertTrue("'" + dataClassificationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(postObservationV2_12);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(observation28);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNotNull(observation36);
        org.junit.Assert.assertTrue("'" + qualityControlType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC + "'", qualityControlType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC));
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNull(labInstruction40);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(observation47);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNull(importHistoryEventSimpleList49);
        org.junit.Assert.assertNotNull(observation51);
        org.junit.Assert.assertNotNull(observation57);
        org.junit.Assert.assertTrue("'" + qualityControlType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.REPLICATE + "'", qualityControlType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.REPLICATE));
        org.junit.Assert.assertNotNull(observation60);
        org.junit.Assert.assertNotNull(postObservationV2_61);
        org.junit.Assert.assertTrue("'" + qualityControlType62 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.REPLICATE + "'", qualityControlType62.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.REPLICATE));
    }

    @Test
    public void test40242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40242");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getMethod4();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint7 = timeAlignedPoint0.setGradeName6("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(timeAlignedPoint7);
    }

    @Test
    public void test40243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40243");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str1 = ratingModelEffectiveShiftsServiceRequest0.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double3 = putBulkEditResultGradesV2_2.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList20 = getObservationsV2_4.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType21 = getObservationsV2_4.FieldResultType;
        java.time.Instant instant22 = getObservationsV2_4.getEndObservedTime();
        java.lang.String str23 = getObservationsV2_4.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        java.util.ArrayList<java.lang.String> strList32 = putLocationTags31.TagUniqueIds;
        getObservationsV2_4.ProjectIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_2.setSearch((java.util.List<java.lang.String>) strList32);
        java.util.List<java.lang.String> strList35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_36 = putBulkEditResultGradesV2_34.setLabResultLaboratoryIds(strList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList38 = fieldVisitDataServiceResponse37.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse40 = fieldVisitDataServiceResponse37.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary41.Reviewer = "";
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary41.MeasurementTime = instant44;
        fieldVisitDataServiceResponse37.ResponseTime = instant44;
        putBulkEditResultGradesV2_36.EndModificationTime = instant44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest48 = ratingModelEffectiveShiftsServiceRequest0.setQueryFrom(instant44);
        java.lang.Object obj49 = ratingModelEffectiveShiftsServiceRequest0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(fieldResultType21);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_36);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList38);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelEffectiveShiftsServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelEffectiveShiftsServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$RatingModelEffectiveShiftsServiceResponse");
    }

    @Test
    public void test40244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40244");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata2 = qualifierMetadata0.setCode("zZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata4 = qualifierMetadata2.setDisplayName("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str5 = qualifierMetadata2.getDisplayName();
        org.junit.Assert.assertNotNull(qualifierMetadata2);
        org.junit.Assert.assertNotNull(qualifierMetadata4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str5, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test40245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40245");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.DiscreteMeasurementActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest3 = fieldVisitDataServiceRequest0.setIncludeCrossSectionSurveyProfile((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest5 = fieldVisitDataServiceRequest0.setIncludeInvalidActivities((java.lang.Boolean) true);
        java.lang.String str6 = fieldVisitDataServiceRequest0.getDiscreteMeasurementActivity();
        java.lang.Boolean boolean7 = fieldVisitDataServiceRequest0.isIncludeVerticals();
        java.lang.Boolean boolean8 = fieldVisitDataServiceRequest0.isIncludeVerticals();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test40246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40246");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        java.time.Instant instant3 = dischargeSummary2.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary2.setGradeCode((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = dischargeSummary2.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = vertical7.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = vertical7.setMeanVelocity(quantityWithDisplay9);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration> calibrationList11 = vertical7.Calibrations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = null;
        adcpDischargeActivity12.TransducerDepth = quantityWithDisplay13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary15.BaseFlow = baseFlowType20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary15.DischargeUncertainty = dischargeUncertainty22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = dischargeSummary24.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = dischargeSummary24.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay27 = dischargeSummary24.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = doubleWithDisplay28.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = dischargeSummary24.setDurationInHours(doubleWithDisplay28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty32 = dischargeUncertainty22.setQuantitativeUncertainty(doubleWithDisplay28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity33 = adcpDischargeActivity12.setTopEstimateExponent(doubleWithDisplay28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay35 = reading34.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading37 = reading34.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading39 = reading37.setModel("MaxInstant");
        java.lang.Integer int40 = reading39.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = dischargeSummary42.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary44.DifferenceDuringVisit = doubleWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay48 = doubleWithDisplay45.setNumeric((java.lang.Double) 100.0d);
        gageHeightAtZeroFlowActivity41.ZeroFlowHeight = doubleWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading50 = reading39.setValue(doubleWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity51 = adcpDischargeActivity12.setDischargeCoefficientVariation(doubleWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str53 = pointVelocityDischargeActivity52.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity55 = pointVelocityDischargeActivity52.setIsValid((java.lang.Boolean) false);
        java.lang.String str56 = pointVelocityDischargeActivity55.getSerialNumber();
        java.lang.String str57 = pointVelocityDischargeActivity55.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = null;
        pointVelocityDischargeActivity55.DistanceToMeter = quantityWithDisplay58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str61 = pointVelocityDischargeActivity60.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity63 = pointVelocityDischargeActivity60.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity65 = pointVelocityDischargeActivity60.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay67 = vertical66.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType68 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical66.VerticalType = verticalType68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType71 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation72 = velocityObservation70.setDeploymentMethod(deploymentMethodType71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType74 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation75 = velocityObservation73.setDeploymentMethod(deploymentMethodType74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList77 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList77, velocityDepthObservationArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation79 = velocityObservation75.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation80 = velocityObservation70.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical81 = vertical66.setVelocityObservation(velocityObservation70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical83 = vertical81.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay82);
        pointVelocityDischargeActivity60.Width = datumConvertedQuantityWithDisplay82;
        datumConvertedQuantityWithDisplay82.Unit = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay88 = datumConvertedQuantityWithDisplay82.setUnit("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity89 = pointVelocityDischargeActivity55.setArea(quantityWithDisplay88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity90 = adcpDischargeActivity12.setTransducerDepth(quantityWithDisplay88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical91 = vertical7.setMeanVelocity(quantityWithDisplay88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary92 = dischargeSummary2.setAlternateRatingDischarge(quantityWithDisplay88);
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNotNull(vertical10);
        org.junit.Assert.assertNull(calibrationList11);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + baseFlowType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(quantityWithDisplay26);
        org.junit.Assert.assertNull(doubleWithDisplay27);
        org.junit.Assert.assertNotNull(doubleWithDisplay30);
        org.junit.Assert.assertNotNull(dischargeSummary31);
        org.junit.Assert.assertNotNull(dischargeUncertainty32);
        org.junit.Assert.assertNotNull(adcpDischargeActivity33);
        org.junit.Assert.assertNull(doubleWithDisplay35);
        org.junit.Assert.assertNotNull(reading37);
        org.junit.Assert.assertNotNull(reading39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(dischargeSummary44);
        org.junit.Assert.assertNotNull(doubleWithDisplay48);
        org.junit.Assert.assertNotNull(reading50);
        org.junit.Assert.assertNotNull(adcpDischargeActivity51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity63);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity65);
        org.junit.Assert.assertNull(quantityWithDisplay67);
        org.junit.Assert.assertTrue("'" + verticalType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType68.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType71.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation72);
        org.junit.Assert.assertTrue("'" + deploymentMethodType74 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType74.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation75);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(velocityObservation79);
        org.junit.Assert.assertNotNull(velocityObservation80);
        org.junit.Assert.assertNotNull(vertical81);
        org.junit.Assert.assertNotNull(vertical83);
        org.junit.Assert.assertNotNull(quantityWithDisplay88);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity89);
        org.junit.Assert.assertNotNull(adcpDischargeActivity90);
        org.junit.Assert.assertNotNull(vertical91);
        org.junit.Assert.assertNotNull(dischargeSummary92);
    }

    @Test
    public void test40247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40247");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        java.lang.String str1 = putDetectioncondition0.CustomId;
        java.lang.String str2 = putDetectioncondition0.getDescription();
        java.lang.String str3 = putDetectioncondition0.getCustomId();
        java.lang.String str4 = putDetectioncondition0.getSystemCode();
        putDetectioncondition0.CustomId = "zZZZZ";
        putDetectioncondition0.Name = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test40248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40248");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = chartData1.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData4 = chartData1.setDepthUnitGroupWithUnits(unitGroupWithUnits3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList6 = chartData5.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation8 = chartData7.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits9 = null;
        chartData7.UnitGroupWithUnits = unitGroupWithUnits9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits11 = chartData7.DepthUnitGroupWithUnits;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList12 = chartData7.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = chartData13.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData16 = chartData13.setDepthUnitGroupWithUnits(unitGroupWithUnits15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation18 = chartData17.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = chartData19.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList22, chartDataPointArray21);
        chartData19.DataPoints = chartDataPointList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData25 = chartData17.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = chartData17.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData28 = chartData17.setSamplingLocation(samplingLocation27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits29 = null;
        chartData17.UnitGroupWithUnits = unitGroupWithUnits29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] chartDataArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] { chartData1, chartData5, chartData7, chartData16, chartData17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>) chartDataList32, chartDataArray31);
        multiChartData0.Charts = chartDataList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = chartData36.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData39 = chartData36.setDepthUnitGroupWithUnits(unitGroupWithUnits38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList41 = chartData40.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation43 = chartData42.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits44 = null;
        chartData42.UnitGroupWithUnits = unitGroupWithUnits44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits46 = chartData42.DepthUnitGroupWithUnits;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList47 = chartData42.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty49 = chartData48.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData51 = chartData48.setDepthUnitGroupWithUnits(unitGroupWithUnits50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = chartData52.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty55 = chartData54.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList57, chartDataPointArray56);
        chartData54.DataPoints = chartDataPointList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData60 = chartData52.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty61 = chartData52.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData63 = chartData52.setSamplingLocation(samplingLocation62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits64 = null;
        chartData52.UnitGroupWithUnits = unitGroupWithUnits64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] chartDataArray66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] { chartData36, chartData40, chartData42, chartData51, chartData52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList67 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>) chartDataList67, chartDataArray66);
        multiChartData35.Charts = chartDataList67;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList70 = multiChartData35.getCharts();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList71 = multiChartData35.getCharts();
        multiChartData0.Charts = chartDataList71;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList73 = multiChartData0.Charts;
        org.junit.Assert.assertNull(observedProperty2);
        org.junit.Assert.assertNotNull(chartData4);
        org.junit.Assert.assertNull(chartDataPointList6);
        org.junit.Assert.assertNull(samplingLocation8);
        org.junit.Assert.assertNull(unitGroupWithUnits11);
        org.junit.Assert.assertNull(chartDataPointList12);
        org.junit.Assert.assertNull(observedProperty14);
        org.junit.Assert.assertNotNull(chartData16);
        org.junit.Assert.assertNull(samplingLocation18);
        org.junit.Assert.assertNull(observedProperty20);
        org.junit.Assert.assertNotNull(chartDataPointArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chartData25);
        org.junit.Assert.assertNull(observedProperty26);
        org.junit.Assert.assertNotNull(chartData28);
        org.junit.Assert.assertNotNull(chartDataArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(observedProperty37);
        org.junit.Assert.assertNotNull(chartData39);
        org.junit.Assert.assertNull(chartDataPointList41);
        org.junit.Assert.assertNull(samplingLocation43);
        org.junit.Assert.assertNull(unitGroupWithUnits46);
        org.junit.Assert.assertNull(chartDataPointList47);
        org.junit.Assert.assertNull(observedProperty49);
        org.junit.Assert.assertNotNull(chartData51);
        org.junit.Assert.assertNull(samplingLocation53);
        org.junit.Assert.assertNull(observedProperty55);
        org.junit.Assert.assertNotNull(chartDataPointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chartData60);
        org.junit.Assert.assertNull(observedProperty61);
        org.junit.Assert.assertNotNull(chartData63);
        org.junit.Assert.assertNotNull(chartDataArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chartDataList70);
        org.junit.Assert.assertNotNull(chartDataList71);
        org.junit.Assert.assertNotNull(chartDataList73);
    }

    @Test
    public void test40249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40249");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails5 = activityWithDetails0.setRefreshed((java.lang.Boolean) false);
        java.time.OffsetDateTime offsetDateTime6 = activityWithDetails0.getEndTime();
        java.lang.String str7 = activityWithDetails0.SourceActivityId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod8 = activityWithDetails0.getCollectionMethod();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(activityWithDetails5);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(collectionMethod8);
    }

    @Test
    public void test40250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40250");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin1 = postVisitFileResponse0.getHandledByPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier4 = putQualifier2.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = timeAlignedDataServiceRequest5.setTimeSeriesUniqueIds(strList17);
        putQualifier2.GroupIdentifiers = strList17;
        java.util.ArrayList<java.lang.String> strList23 = putQualifier2.GroupIdentifiers;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier25 = putQualifier2.setDisplayName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.util.ArrayList<java.lang.String> strList26 = putQualifier25.getGroupIdentifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse27 = postVisitFileResponse0.setVisitUris(strList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin29 = postVisitFileResponse28.getHandledByPlugin();
        java.util.ArrayList<java.lang.String> strList30 = postVisitFileResponse28.getVisitUris();
        java.util.ArrayList<java.lang.String> strList31 = postVisitFileResponse28.VisitUris;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin34 = fieldDataPlugin32.setUniqueId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse35 = postVisitFileResponse28.setHandledByPlugin(fieldDataPlugin34);
        java.lang.String str36 = fieldDataPlugin34.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse37 = postVisitFileResponse0.setHandledByPlugin(fieldDataPlugin34);
        java.lang.String str38 = fieldDataPlugin34.Name;
        org.junit.Assert.assertNull(fieldDataPlugin1);
        org.junit.Assert.assertNotNull(putQualifier4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest21);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(putQualifier25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(postVisitFileResponse27);
        org.junit.Assert.assertNull(fieldDataPlugin29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(fieldDataPlugin34);
        org.junit.Assert.assertNotNull(postVisitFileResponse35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str36, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNotNull(postVisitFileResponse37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test40251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40251");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = null;
        postExtendedAttribute0.DataType = dataType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute4 = postExtendedAttribute0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str6 = extendedAttributeListItem5.getId();
        java.lang.String str7 = extendedAttributeListItem5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str11 = extendedAttributeListItem10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str13 = extendedAttributeListItem12.CustomId;
        extendedAttributeListItem12.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem5, extendedAttributeListItem8, extendedAttributeListItem9, extendedAttributeListItem10, extendedAttributeListItem12 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList17, extendedAttributeListItemArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute19 = postExtendedAttribute4.setDropDownListItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType20 = postExtendedAttribute4.getAppliesToType();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList21 = postExtendedAttribute4.DropDownListItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType22 = postExtendedAttribute4.getAppliesToType();
        org.junit.Assert.assertNotNull(postExtendedAttribute4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(postExtendedAttribute19);
        org.junit.Assert.assertNull(appliesToType20);
        org.junit.Assert.assertNotNull(extendedAttributeListItemList21);
        org.junit.Assert.assertNull(appliesToType22);
    }

    @Test
    public void test40252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40252");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange1 = timeAlignedDataServiceResponse0.TimeRange;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo> timeAlignedTimeSeriesInfoList2 = timeAlignedDataServiceResponse0.TimeSeries;
        timeAlignedDataServiceResponse0.NumPoints = (-1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] timeAlignedPointArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>) timeAlignedPointList7, timeAlignedPointArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse9 = timeAlignedDataServiceResponse5.setPoints(timeAlignedPointList7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse10 = timeAlignedDataServiceResponse0.setPoints(timeAlignedPointList7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange12 = timeAlignedDataServiceResponse11.TimeRange;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo> timeAlignedTimeSeriesInfoList13 = timeAlignedDataServiceResponse11.TimeSeries;
        timeAlignedDataServiceResponse11.NumPoints = (-1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] timeAlignedPointArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>) timeAlignedPointList18, timeAlignedPointArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse20 = timeAlignedDataServiceResponse16.setPoints(timeAlignedPointList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse21 = timeAlignedDataServiceResponse11.setPoints(timeAlignedPointList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange23 = timeAlignedDataServiceResponse22.TimeRange;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList24 = timeAlignedDataServiceResponse22.Points;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] timeAlignedPointArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>) timeAlignedPointList27, timeAlignedPointArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse29 = timeAlignedDataServiceResponse25.setPoints(timeAlignedPointList27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] timeAlignedPointArray31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>) timeAlignedPointList32, timeAlignedPointArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse34 = timeAlignedDataServiceResponse30.setPoints(timeAlignedPointList32);
        timeAlignedDataServiceResponse25.Points = timeAlignedPointList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse36 = timeAlignedDataServiceResponse22.setPoints(timeAlignedPointList32);
        timeAlignedDataServiceResponse21.Points = timeAlignedPointList32;
        timeAlignedDataServiceResponse0.Points = timeAlignedPointList32;
        org.junit.Assert.assertNull(timeRange1);
        org.junit.Assert.assertNull(timeAlignedTimeSeriesInfoList2);
        org.junit.Assert.assertNotNull(timeAlignedPointArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse9);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse10);
        org.junit.Assert.assertNull(timeRange12);
        org.junit.Assert.assertNull(timeAlignedTimeSeriesInfoList13);
        org.junit.Assert.assertNotNull(timeAlignedPointArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse20);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse21);
        org.junit.Assert.assertNull(timeRange23);
        org.junit.Assert.assertNull(timeAlignedPointList24);
        org.junit.Assert.assertNotNull(timeAlignedPointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse29);
        org.junit.Assert.assertNotNull(timeAlignedPointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse34);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse36);
    }

    @Test
    public void test40253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40253");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        postTag4.PickListValues = strList9;
        java.util.ArrayList<java.lang.String> strList13 = postTag4.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor14 = processor3.setInputTimeSeriesUniqueIds(strList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor16 = processor14.setOutputTimeSeriesUniqueId("2021.4.62.0");
        java.lang.String str17 = processor16.getOutputTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange18 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange19 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange20 = processor16.getProcessorPeriod();
        java.lang.String str21 = processor16.Description;
        java.util.ArrayList<java.lang.String> strList22 = processor16.getInputTimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute23 = extendedAttribute2.setPickListValues(strList22);
        java.lang.Boolean boolean24 = extendedAttribute2.isVisibleInDatasetList();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute26 = extendedAttribute2.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute28 = extendedAttribute2.setRequired((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute30 = extendedAttribute2.setAppliesToLocationTypes((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute32 = extendedAttribute30.setAppliesToTimeSeries((java.lang.Boolean) true);
        java.lang.String str33 = extendedAttribute32.Key;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute35 = extendedAttribute32.setAppliesToTimeSeries((java.lang.Boolean) true);
        java.lang.Boolean boolean36 = extendedAttribute35.isRequired();
        extendedAttribute35.Required = true;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(processor14);
        org.junit.Assert.assertNotNull(processor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2021.4.62.0" + "'", str17, "2021.4.62.0");
        org.junit.Assert.assertNull(timeRange18);
        org.junit.Assert.assertNull(timeRange19);
        org.junit.Assert.assertNull(timeRange20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(extendedAttribute23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(extendedAttribute26);
        org.junit.Assert.assertNotNull(extendedAttribute28);
        org.junit.Assert.assertNotNull(extendedAttribute30);
        org.junit.Assert.assertNotNull(extendedAttribute32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(extendedAttribute35);
        org.junit.Assert.assertEquals("'" + boolean36 + "' != '" + true + "'", boolean36, true);
    }

    @Test
    public void test40254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40254");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        java.lang.String str5 = reading0.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = reading0.setPublish((java.lang.Boolean) true);
        java.lang.String str8 = reading0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = reading0.setSubLocationIdentifier("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = calibrationCheck11.setStandardDetails(standardDetails12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = standardDetails12.getTemperature();
        standardDetails12.LotNumber = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = pointVelocityDischargeActivity17.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList19 = pointVelocityDischargeActivity17.Verticals;
        java.lang.String str20 = pointVelocityDischargeActivity17.SerialNumber;
        java.lang.Boolean boolean21 = pointVelocityDischargeActivity17.isMeterInspectedAfter();
        pointVelocityDischargeActivity17.MeterInspectedBefore = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = null;
        pointVelocityDischargeActivity17.Width = quantityWithDisplay24;
        pointVelocityDischargeActivity17.MeterInspectedBefore = true;
        java.lang.String str28 = pointVelocityDischargeActivity17.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = null;
        adcpDischargeActivity29.TransducerDepth = quantityWithDisplay30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary32.DischargeUncertainty = dischargeUncertainty39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = dischargeSummary41.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = dischargeSummary41.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = dischargeSummary41.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay47 = doubleWithDisplay45.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary41.setDurationInHours(doubleWithDisplay45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty49 = dischargeUncertainty39.setQuantitativeUncertainty(doubleWithDisplay45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity50 = adcpDischargeActivity29.setTopEstimateExponent(doubleWithDisplay45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity52 = adcpDischargeActivity29.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay53 = adcpDischargeActivity29.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str55 = datumConvertedQuantityWithDisplay54.TargetDatum;
        adcpDischargeActivity29.Area = datumConvertedQuantityWithDisplay54;
        pointVelocityDischargeActivity17.DistanceToMeter = datumConvertedQuantityWithDisplay54;
        datumConvertedQuantityWithDisplay54.Unit = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        standardDetails12.Temperature = datumConvertedQuantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading61 = reading0.setValue((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay54);
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(reading7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(reading10);
        org.junit.Assert.assertNotNull(calibrationCheck13);
        org.junit.Assert.assertNull(doubleWithDisplay14);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(verticalList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay42);
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertNull(doubleWithDisplay44);
        org.junit.Assert.assertNotNull(doubleWithDisplay47);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNotNull(dischargeUncertainty49);
        org.junit.Assert.assertNotNull(adcpDischargeActivity50);
        org.junit.Assert.assertNotNull(adcpDischargeActivity52);
        org.junit.Assert.assertNull(doubleWithDisplay53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(reading61);
    }

    @Test
    public void test40255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40255");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj1 = importItemAnalysisMethod0.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod3 = importItemAnalysisMethod0.setRowId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod5 = importItemAnalysisMethod3.setExistingItem(analysisMethod4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod7 = importItemAnalysisMethod3.setRowId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str8 = importItemAnalysisMethod3.getRowId();
        java.lang.String str9 = importItemAnalysisMethod3.Input;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod3);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod5);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****" + "'", str8, "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test40256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40256");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.LabResultLaboratoryIds;
        java.time.Instant instant11 = getObservationsV2_6.getEndResultTime();
        java.util.List<java.lang.String> strList12 = getObservationsV2_6.AnalysisMethodSimpleIds;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test40257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40257");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = postObservedProperty3.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = null;
        quantity5.Unit = unit6;
        postObservedProperty3.LowerLimit = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postObservedProperty3.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit10 = quantity9.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation2.setElevation(quantity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation13 = putSamplingLocation11.setHorizontalCollectionMethod("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation16 = putSamplingLocation14.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = standardSimple18.setApplicabilityRange(interval19);
        java.lang.String str21 = standardSimple18.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = standardSimple22.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple30 = standardSimple28.setApplicabilityRange(interval29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple32 = standardSimple28.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple35 = standardSimple33.setApplicabilityRange(interval34);
        java.lang.String str36 = standardSimple35.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple41 = standardSimple39.setApplicabilityRange(interval40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple44 = standardSimple42.setApplicabilityRange(interval43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple18, standardSimple22, standardSimple27, standardSimple28, standardSimple35, standardSimple37, standardSimple38, standardSimple41, standardSimple42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList46, standardSimpleArray45);
        postSamplingLocation17.Standards = standardSimpleList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation49 = putSamplingLocation14.setStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList46);
        putSamplingLocation13.Standards = standardSimpleList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone51 = putSamplingLocation13.getTimeZone();
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(unitGroup4);
        org.junit.Assert.assertNotNull(quantity9);
        org.junit.Assert.assertNull(unit10);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNotNull(putSamplingLocation13);
        org.junit.Assert.assertNotNull(putSamplingLocation16);
        org.junit.Assert.assertNotNull(standardSimple20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple26);
        org.junit.Assert.assertNotNull(standardSimple30);
        org.junit.Assert.assertNotNull(standardSimple32);
        org.junit.Assert.assertNotNull(standardSimple35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(standardSimple41);
        org.junit.Assert.assertNotNull(standardSimple44);
        org.junit.Assert.assertNotNull(standardSimpleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putSamplingLocation49);
        org.junit.Assert.assertNull(timeZone51);
    }

    @Test
    public void test40258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40258");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType3 = postProject2.Type;
        java.lang.String str4 = postProject2.Name;
        java.lang.String str5 = postProject2.getScopeStatement();
        java.lang.Object obj6 = postProject2.getResponseType();
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNull(projectType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
    }

    @Test
    public void test40259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40259");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint2.Value;
        chartDataPoint2.MdlValueUnitCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint7 = chartDataPoint2.setNumericResultUnitCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint9 = chartDataPoint2.setObservedTime(offsetDateTime8);
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint11 = chartDataPoint9.setObservedTime(offsetDateTime10);
        java.lang.String str12 = chartDataPoint11.getMdlValueUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint14 = chartDataPoint11.setObservationId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = resultDetectionCondition15.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition18 = resultDetectionCondition15.setId("/AQUARIUS");
        java.lang.String str19 = resultDetectionCondition15.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition21 = resultDetectionCondition15.setDescription("POST");
        chartDataPoint11.ResultDetectionCondition = resultDetectionCondition15;
        chartDataPoint11.MdlValueUnitCustomId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint26 = chartDataPoint11.setObservationId("9999-12-31T23:59:59.9999999Z");
        java.lang.String str27 = chartDataPoint11.ObservationId;
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(chartDataPoint7);
        org.junit.Assert.assertNotNull(chartDataPoint9);
        org.junit.Assert.assertNotNull(chartDataPoint11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str12, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(chartDataPoint14);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(resultDetectionCondition18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(resultDetectionCondition21);
        org.junit.Assert.assertNotNull(chartDataPoint26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str27, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test40260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40260");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        java.lang.String str4 = laboratory1.PhoneNumber;
        laboratory1.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory7.Id = "MaxInstant";
        java.lang.String str10 = laboratory7.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory1, laboratory7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12, laboratoryArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory14 = searchResultLaboratory0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12);
        searchResultLaboratory14.TotalCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory18.Id = "MaxInstant";
        java.lang.String str21 = laboratory18.PhoneNumber;
        laboratory18.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory24.Id = "MaxInstant";
        java.lang.String str27 = laboratory24.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory18, laboratory24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList29, laboratoryArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory31 = searchResultLaboratory17.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList29);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList32 = searchResultLaboratory31.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory33 = searchResultLaboratory14.setDomainObjects(laboratoryList32);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList34 = searchResultLaboratory33.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory36.Id = "MaxInstant";
        java.lang.String str39 = laboratory36.PhoneNumber;
        laboratory36.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory42.Id = "MaxInstant";
        java.lang.String str45 = laboratory42.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory36, laboratory42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList47, laboratoryArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory49 = searchResultLaboratory35.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory51.Id = "MaxInstant";
        java.lang.String str54 = laboratory51.PhoneNumber;
        laboratory51.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory57.Id = "MaxInstant";
        java.lang.String str60 = laboratory57.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory51, laboratory57 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList62, laboratoryArray61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory64 = searchResultLaboratory50.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory65 = searchResultLaboratory35.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList62);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList66 = searchResultLaboratory65.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory67 = searchResultLaboratory33.setDomainObjects(laboratoryList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory69 = searchResultLaboratory33.setCursor("-PT87591240H");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(laboratoryArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory14);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(laboratoryArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory31);
        org.junit.Assert.assertNotNull(laboratoryList32);
        org.junit.Assert.assertNotNull(searchResultLaboratory33);
        org.junit.Assert.assertNotNull(laboratoryList34);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(laboratoryArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory49);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(laboratoryArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory64);
        org.junit.Assert.assertNotNull(searchResultLaboratory65);
        org.junit.Assert.assertNotNull(laboratoryList66);
        org.junit.Assert.assertNotNull(searchResultLaboratory67);
        org.junit.Assert.assertNotNull(searchResultLaboratory69);
    }

    @Test
    public void test40261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40261");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str1 = timeSeriesDescription0.Parameter;
        timeSeriesDescription0.UtcOffsetIsoDuration = "9999-12-31T23:59:59.999Z";
        java.lang.String str4 = timeSeriesDescription0.getComment();
        timeSeriesDescription0.Unit = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test40262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40262");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = getSpecimens0.setSort("MinDuration");
        java.util.List<java.lang.String> strList4 = getSpecimens3.getLaboratoryIds();
        java.util.List<java.lang.String> strList5 = getSpecimens3.ActivityIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest timeSeriesDescriptionListByUniqueIdServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest();
        java.lang.Object obj7 = timeSeriesDescriptionListByUniqueIdServiceRequest6.getResponseType();
        java.util.ArrayList<java.lang.String> strList8 = timeSeriesDescriptionListByUniqueIdServiceRequest6.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest25 = timeAlignedDataServiceRequest9.setTimeSeriesUniqueIds(strList21);
        java.util.ArrayList<java.lang.String> strList26 = timeAlignedDataServiceRequest9.TimeSeriesOutputUnitIds;
        java.util.ArrayList<java.lang.String> strList27 = timeAlignedDataServiceRequest9.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListByUniqueIdServiceRequest timeSeriesDescriptionListByUniqueIdServiceRequest28 = timeSeriesDescriptionListByUniqueIdServiceRequest6.setTimeSeriesUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList29 = timeSeriesDescriptionListByUniqueIdServiceRequest28.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens30 = getSpecimens3.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList29);
        java.util.List<java.lang.String> strList31 = getSpecimens3.getActivityTypes();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getSpecimens3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListByUniqueIdServiceResponse");
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionListByUniqueIdServiceRequest28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(getSpecimens30);
        org.junit.Assert.assertNull(strList31);
    }

    @Test
    public void test40263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40263");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.ComputationPeriodIdentifier = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str7 = postDatumConvertedTimeSeries0.LocationUniqueId;
        postDatumConvertedTimeSeries0.Label = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test40264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40264");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        java.util.List<java.lang.String> strList16 = getObservationsV2_1.getLabReportIds();
        importItem0.Errors = getObservationsV2_1;
        java.lang.Object obj18 = importItem0.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem20 = importItem0.setInput("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str22 = putLocationType21.Description;
        java.lang.String str23 = putLocationType21.UniqueId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str25 = deleteFieldVisits24.Sort;
        deleteFieldVisits24.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_28.setDataClassifications((java.util.List<java.lang.String>) strList32);
        java.util.List<java.lang.String> strList35 = getObservationsV2_28.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary36.Reviewer = "";
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary36.MeasurementTime = instant39;
        getObservationsV2_28.StartResultTime = instant39;
        java.lang.String[] strArray51 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_28.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList52);
        deleteFieldVisits24.PlanningStatuses = strList52;
        putLocationType21.ExtendedAttributeDefinitionIds = strList52;
        importItem0.Fields = strList52;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(importItem20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
    }

    @Test
    public void test40265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40265");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest0.Publish = true;
        timeSeriesUniqueIdListServiceRequest0.Publish = false;
        java.lang.String str5 = timeSeriesUniqueIdListServiceRequest0.ComputationIdentifier;
        java.lang.String str6 = timeSeriesUniqueIdListServiceRequest0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest8 = timeSeriesUniqueIdListServiceRequest0.setParameter("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest8);
    }

    @Test
    public void test40266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40266");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment1 = domainObjectAttachment0.Attachment;
        domainObjectAttachment0.Id = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment4 = domainObjectAttachment0.Attachment;
        org.junit.Assert.assertNull(attachment1);
        org.junit.Assert.assertNull(attachment4);
    }

    @Test
    public void test40267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40267");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        java.lang.String str2 = reading0.Manufacturer;
        java.lang.String str3 = reading0.getSerialNumber();
        reading0.Parameter = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = reading0.setSerialNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str8 = reading0.getMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = reading0.setGradeCode((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = reading10.setPublish((java.lang.Boolean) false);
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(reading7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(reading10);
        org.junit.Assert.assertNotNull(reading12);
    }

    @Test
    public void test40268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40268");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        java.time.Instant instant2 = getObservationsV2_0.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        dischargeSummary5.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse4.setNextToken(instant9);
        java.time.Instant instant13 = locationDescriptionListServiceResponse4.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = getActivities3.setToStartTime(instant13);
        java.lang.String str15 = getActivities14.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList17 = getObservationsV2_16.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        getObservationsV2_16.ResultGrades = strList29;
        getActivities14.Media = strList29;
        getObservationsV2_0.AnalysisMethodSimpleIds = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = getObservationsV2_0.setDetectionCondition("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList39 = getObservationsV2_38.SamplingContextTagIds;
        java.time.Instant instant40 = getObservationsV2_38.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_41.setDataClassifications((java.util.List<java.lang.String>) strList45);
        getObservationsV2_38.ResultStatuses = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_0.setIds((java.util.List<java.lang.String>) strList45);
        java.lang.Double double50 = getObservationsV2_49.getDepthValue();
        java.lang.String str51 = getObservationsV2_49.ActivityCustomId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(getActivities14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(double50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test40269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40269");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutComputationType putComputationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutComputationType();
        java.lang.String str1 = putComputationType0.DisplayName;
        java.lang.Object obj2 = putComputationType0.getResponseType();
        java.lang.Object obj3 = putComputationType0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$CodeTable");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$CodeTable");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$CodeTable");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$CodeTable");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$CodeTable");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$CodeTable");
    }

    @Test
    public void test40270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40270");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        labInstructionMinimal0.AnalysisMethod = analysisMethodMinimal1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal();
        java.lang.String str4 = analysisMethodMinimal3.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal5 = labInstructionMinimal0.setAnalysisMethod(analysisMethodMinimal3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal7 = labInstructionMinimal0.setPreparationMethod("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodMinimal analysisMethodMinimal8 = labInstructionMinimal7.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal10 = labInstructionMinimal7.setHoldingTime("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal12 = labInstructionMinimal7.setAnalysisComment("2021.4.62.0");
        labInstructionMinimal12.AnalysisComment = "http://MaxDurationhttp";
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(labInstructionMinimal5);
        org.junit.Assert.assertNotNull(labInstructionMinimal7);
        org.junit.Assert.assertNotNull(analysisMethodMinimal8);
        org.junit.Assert.assertNotNull(labInstructionMinimal10);
        org.junit.Assert.assertNotNull(labInstructionMinimal12);
    }

    @Test
    public void test40271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40271");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.Long long12 = timeAlignedPoint8.getGradeCode9();
        java.lang.String str13 = timeAlignedPoint8.getMethod6();
        java.lang.String str14 = timeAlignedPoint8.getGradeName5();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint8.setGradeCode9((java.lang.Long) 100L);
        java.lang.String str17 = timeAlignedPoint8.GradeName8;
        java.lang.String str18 = timeAlignedPoint8.getQualifiers7();
        java.lang.Long long19 = timeAlignedPoint8.ApprovalLevel3;
        java.lang.String str20 = timeAlignedPoint8.getApprovalName6();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test40272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40272");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_4 = getObservationExportIIV2_0.setNumericResultValue((java.lang.Double) 100.0d);
        java.util.List<java.lang.String> strList5 = getObservationExportIIV2_4.ResultStatuses;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_4);
        org.junit.Assert.assertNull(strList5);
    }

    @Test
    public void test40273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40273");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location3.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList6 = location3.getTags();
        java.lang.String str7 = location3.getIdentifier();
        java.lang.String str8 = location3.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location10 = location3.setPublish((java.lang.Boolean) false);
        java.lang.String str11 = location3.Description;
        java.lang.String str12 = location3.getLocationType();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList13 = location3.Tags;
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(appliedTagList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(location10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(appliedTagList13);
    }

    @Test
    public void test40274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40274");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation0.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase4 = postLocation0.setLocationType("/AQUARIUS/Acquisition/v2");
        java.lang.String str5 = postLocation0.getElevationUnits();
        java.lang.Double double6 = postLocation0.getLongitude();
        java.lang.Double double7 = postLocation0.getElevation();
        postLocation0.Elevation = 100.0d;
        org.junit.Assert.assertNotNull(locationBase4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(double7);
    }

    @Test
    public void test40275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40275");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup0.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4, accessGroupArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup6 = searchResultAccessGroup0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4);
        java.lang.String str7 = searchResultAccessGroup6.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList8 = searchResultAccessGroup6.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup10 = searchResultAccessGroup6.setTotalCount((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup11.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList15, accessGroupArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup17 = searchResultAccessGroup11.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList15);
        java.lang.String str18 = searchResultAccessGroup17.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList19 = searchResultAccessGroup17.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup21 = searchResultAccessGroup17.setTotalCount((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList22 = searchResultAccessGroup21.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup23 = searchResultAccessGroup10.setDomainObjects(accessGroupList22);
        org.junit.Assert.assertNotNull(accessGroupArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str7, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(accessGroupList8);
        org.junit.Assert.assertNotNull(searchResultAccessGroup10);
        org.junit.Assert.assertNotNull(accessGroupArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str18, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(accessGroupList19);
        org.junit.Assert.assertNotNull(searchResultAccessGroup21);
        org.junit.Assert.assertNotNull(accessGroupList22);
        org.junit.Assert.assertNotNull(searchResultAccessGroup23);
    }

    @Test
    public void test40276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40276");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.String str1 = importChangeItem0.PropertyName;
        java.lang.String str2 = importChangeItem0.getPropertyName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double4 = putBulkEditResultGradesV2_3.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        getObservationsV2_5.SpecimenIds = strList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray15 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags11.setTagUniqueIds(strList16);
        getObservationsV2_5.QualityControlTypes = strList16;
        java.util.List<java.lang.String> strList20 = getObservationsV2_5.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList21 = getObservationsV2_5.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType22 = getObservationsV2_5.FieldResultType;
        java.time.Instant instant23 = getObservationsV2_5.getEndObservedTime();
        java.lang.String str24 = getObservationsV2_5.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        java.util.ArrayList<java.lang.String> strList33 = putLocationTags32.TagUniqueIds;
        getObservationsV2_5.ProjectIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_35 = putBulkEditResultGradesV2_3.setSearch((java.util.List<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList36 = putBulkEditResultGradesV2_35.ActivityIds;
        java.lang.String str37 = putBulkEditResultGradesV2_35.getCustomId();
        importChangeItem0.Left = putBulkEditResultGradesV2_35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList40 = location39.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location42 = location39.setUniqueId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList43 = location42.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location45 = location42.setLongitude((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location47 = location42.setLocationPath("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        importChangeItem0.Left = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        importChangeItem0.PropertyName = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(fieldResultType22);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(appliedTagList40);
        org.junit.Assert.assertNotNull(location42);
        org.junit.Assert.assertNull(extendedAttributeValueList43);
        org.junit.Assert.assertNotNull(location45);
        org.junit.Assert.assertNotNull(location47);
    }

    @Test
    public void test40277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40277");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries0.setInterpolationType(interpolationType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries0.setDescription("");
        java.lang.String str10 = postStatisticalDerivedTimeSeries9.getComputationPeriodIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType11 = postStatisticalDerivedTimeSeries9.getInterpolationType();
        postStatisticalDerivedTimeSeries9.UtcOffset = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries15 = postStatisticalDerivedTimeSeries9.setComputationPeriodIdentifier("/AQUARIUS/Acquisition/v2");
        java.lang.String str16 = postStatisticalDerivedTimeSeries15.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries18 = postStatisticalDerivedTimeSeries15.setBinAnchorOffsetPeriod("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertTrue("'" + interpolationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + interpolationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries18);
    }

    @Test
    public void test40278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40278");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 0.0d);
        vertical0.PercentageOfTotalDischarge = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType6 = vertical0.getFlowDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation7 = vertical0.getVelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = vertical0.getTaglinePosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = vertical0.SegmentDischarge;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration> calibrationList10 = vertical0.Calibrations;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(flowDirectionType6);
        org.junit.Assert.assertNull(velocityObservation7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(calibrationList10);
    }

    @Test
    public void test40279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40279");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentWidth(quantityWithDisplay2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = vertical4.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = vertical4.setSegmentDischarge(quantityWithDisplay6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown;
        vertical4.MeasurementCondition = measurementCondition8;
        vertical0.MeasurementCondition = measurementCondition8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical13 = vertical0.setCosineOfUniqueFlow((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData14 = vertical13.IceCoveredData;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType15 = vertical13.getVerticalType();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNotNull(vertical7);
        org.junit.Assert.assertTrue("'" + measurementCondition8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown + "'", measurementCondition8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown));
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertNotNull(vertical13);
        org.junit.Assert.assertNull(iceCoveredData14);
        org.junit.Assert.assertNull(verticalType15);
    }

    @Test
    public void test40280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40280");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory2 = getMediumHistory0.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory4 = getMediumHistory2.setId("hi!");
        java.lang.Object obj5 = getMediumHistory2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory7 = getMediumHistory2.setId("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str8 = getMediumHistory2.Id;
        org.junit.Assert.assertNotNull(getMediumHistory2);
        org.junit.Assert.assertNotNull(getMediumHistory4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getMediumHistory7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str8, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test40281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40281");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        postUnitGroup0.AuditAttributes = auditAttributes1;
        postUnitGroup0.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = postUnitGroup0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup7 = postUnitGroup0.setId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup9 = postUnitGroup0.setSupportsConversion((java.lang.Boolean) false);
        java.lang.String str10 = postUnitGroup0.Id;
        postUnitGroup0.CustomId = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNotNull(postUnitGroup7);
        org.junit.Assert.assertNotNull(postUnitGroup9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "'.'SSSSSSS" + "'", str10, "'.'SSSSSSS");
    }

    @Test
    public void test40282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40282");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade2 = resultGrade0.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade4 = resultGrade0.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = resultGrade0.getAuditAttributes();
        org.junit.Assert.assertNotNull(resultGrade2);
        org.junit.Assert.assertNotNull(resultGrade4);
        org.junit.Assert.assertNull(auditAttributes5);
    }

    @Test
    public void test40283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40283");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getAssemblyQualifiedTypeName();
        java.lang.Integer int2 = fieldDataPlugin0.getPluginPriority();
        java.lang.String str3 = fieldDataPlugin0.AssemblyQualifiedTypeName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin5 = fieldDataPlugin0.setPluginPriority((java.lang.Integer) 100);
        java.lang.String str6 = fieldDataPlugin5.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldDataPlugin5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test40284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40284");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod();
        java.lang.String str1 = postLocationDatumPeriod0.getStandardIdentifier();
        java.lang.String str2 = postLocationDatumPeriod0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod4 = postLocationDatumPeriod0.setStandardIdentifier("MinDuration");
        postLocationDatumPeriod0.StandardIdentifier = "PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection7 = postLocationDatumPeriod0.getMeasurementDirection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLocationDatumPeriod4);
        org.junit.Assert.assertNull(measurementDirection7);
    }

    @Test
    public void test40285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40285");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession();
        java.lang.String str1 = postSession0.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession3 = postSession0.setLocale("hi!");
        java.lang.String str4 = postSession3.getUsername();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession6 = postSession3.setLocale("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str7 = postSession3.getUsername();
        java.lang.String str8 = postSession3.Username;
        java.lang.Object obj9 = postSession3.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postSession6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.String");
    }

    @Test
    public void test40286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40286");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList39 = importItemObject38.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList41, importChangeItemArray40);
        importItemObject38.ItemComparison = importChangeItemList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray48 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = putLocationTags44.setTagUniqueIds(strList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject52 = importItemObject38.setExistingItem((java.lang.Object) putLocationTags44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser55 = openIdConnectUser53.setIdentifier("");
        java.lang.Boolean boolean56 = openIdConnectUser55.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject57 = importItemObject38.setErrors((java.lang.Object) openIdConnectUser55);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList58 = importItemObject57.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon59 = importItemTaxon37.setItemComparison(importChangeItemList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList61 = importItemTaxon60.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon63 = importItemTaxon60.setItem(taxon62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str65 = postCalculatedDerivedTimeSeries64.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList66 = postCalculatedDerivedTimeSeries64.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon67 = importItemTaxon63.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon69 = importItemTaxon63.setExistingItem(taxon68);
        importItemTaxon37.Item = taxon68;
        taxon68.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon68.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = putUnit75.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = putDetectioncondition77.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition80 = putDetectioncondition77.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity83 = samplingPlanPlannedActivity81.setAuditAttributes(auditAttributes82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes86 = auditAttributes84.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity83.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes88 = samplingPlanPlannedActivity83.AuditAttributes;
        putDetectioncondition77.AuditAttributes = auditAttributes88;
        putUnit75.AuditAttributes = auditAttributes88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes92 = auditAttributes88.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon93 = taxon68.setAuditAttributes(auditAttributes92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes94 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon95 = taxon93.setAuditAttributes(auditAttributes94);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon96 = importItemTaxon7.setExistingItem(taxon93);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon98 = importItemTaxon7.setRowId("");
        java.lang.Object obj99 = importItemTaxon7.getErrors();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(importChangeItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putLocationTags51);
        org.junit.Assert.assertNotNull(importItemObject52);
        org.junit.Assert.assertNotNull(openIdConnectUser55);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNotNull(importItemObject57);
        org.junit.Assert.assertNotNull(importChangeItemList58);
        org.junit.Assert.assertNotNull(importItemTaxon59);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(importItemTaxon63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(extendedAttributeValueList66);
        org.junit.Assert.assertNotNull(importItemTaxon67);
        org.junit.Assert.assertNotNull(importItemTaxon69);
        org.junit.Assert.assertNull(auditAttributes76);
        org.junit.Assert.assertNull(auditAttributes78);
        org.junit.Assert.assertNotNull(putDetectioncondition80);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity83);
        org.junit.Assert.assertNotNull(auditAttributes86);
        org.junit.Assert.assertNotNull(auditAttributes88);
        org.junit.Assert.assertNotNull(auditAttributes92);
        org.junit.Assert.assertNotNull(taxon93);
        org.junit.Assert.assertNotNull(taxon95);
        org.junit.Assert.assertNotNull(importItemTaxon96);
        org.junit.Assert.assertNotNull(importItemTaxon98);
        org.junit.Assert.assertNotNull(obj99);
    }

    @Test
    public void test40287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40287");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant3 = qualifier2.DateApplied;
        java.lang.String str4 = qualifier2.User;
        java.lang.String str5 = qualifier2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj7 = timeAlignedDataServiceRequest6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = timeAlignedDataServiceRequest6.setQueryFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier12 = qualifier2.setDateApplied(instant9);
        getExportSpecimens0.Before = instant9;
        java.util.List<java.lang.String> strList14 = getExportSpecimens0.getLaboratoryIds();
        java.util.List<java.lang.String> strList15 = getExportSpecimens0.getSearch();
        java.time.Instant instant16 = getExportSpecimens0.After;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest11);
        org.junit.Assert.assertNotNull(qualifier12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(instant16);
    }

    @Test
    public void test40288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40288");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit0.setEndTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str39 = metricConfiguration38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty40.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration43 = metricConfiguration38.setObservedProperty(observedProperty40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType44 = observedProperty40.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup46 = postObservedProperty45.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = null;
        quantity47.Unit = unit48;
        postObservedProperty45.LowerLimit = quantity47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = postObservedProperty45.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = quantity51.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = observedProperty40.setUpperLimit(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = samplingLocation37.setElevation(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit55 = putFieldVisit36.setSamplingLocation(samplingLocation37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple56 = putFieldVisit36.getFieldTrip();
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit58 = putFieldVisit36.setEndTime(offsetDateTime57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple61 = fieldTripSimple59.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit62 = putFieldVisit36.setFieldTrip(fieldTripSimple59);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList63 = putFieldVisit36.Attachments;
        java.time.OffsetDateTime offsetDateTime64 = putFieldVisit36.EndTime;
        java.time.OffsetDateTime offsetDateTime65 = putFieldVisit36.EndTime;
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(metricConfiguration43);
        org.junit.Assert.assertNull(resultType44);
        org.junit.Assert.assertNull(unitGroup46);
        org.junit.Assert.assertNotNull(quantity51);
        org.junit.Assert.assertNull(unit52);
        org.junit.Assert.assertNotNull(observedProperty53);
        org.junit.Assert.assertNotNull(samplingLocation54);
        org.junit.Assert.assertNotNull(putFieldVisit55);
        org.junit.Assert.assertNull(fieldTripSimple56);
        org.junit.Assert.assertNotNull(putFieldVisit58);
        org.junit.Assert.assertNotNull(fieldTripSimple61);
        org.junit.Assert.assertNotNull(putFieldVisit62);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList63);
        org.junit.Assert.assertNull(offsetDateTime64);
        org.junit.Assert.assertNull(offsetDateTime65);
    }

    @Test
    public void test40289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40289");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        putSpecimen0.Name = "-PT87591240H";
        java.lang.Boolean boolean3 = putSpecimen0.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str7 = shippingContainer6.TrackingId;
        java.lang.String str8 = shippingContainer6.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity9.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = postActivity9.setPlannedActivity(plannedActivity12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType14 = postActivity9.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate16.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList21 = specimenTemplate20.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate22.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList27 = specimenTemplate26.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate16, specimenTemplate19, specimenTemplate20, specimenTemplate24, specimenTemplate25, specimenTemplate26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29, specimenTemplateArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = postFieldVisitActivityWithTemplate15.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate33 = postFieldVisitActivityWithTemplate31.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity9.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity9.Medium = medium35;
        medium35.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType40 = analyticalGroup39.getType();
        analyticalGroup39.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = analyticalGroupItem44.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = null;
        analyticalGroupItem49.AnalysisMethod = analysisMethod52;
        java.lang.String str54 = analyticalGroupItem49.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem55.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = analyticalGroupItem55.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = analyticalGroupItem58.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem60.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = analyticalGroupItem60.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = null;
        analyticalGroupItem60.AnalysisMethod = analysisMethod63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem44, analyticalGroupItem46, analyticalGroupItem49, analyticalGroupItem55, analyticalGroupItem58, analyticalGroupItem60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList66, analyticalGroupItemArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup68 = analyticalGroup43.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList66);
        analyticalGroup39.AnalyticalGroupItems = analyticalGroupItemList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup39.AuditAttributes = auditAttributes70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium72 = medium35.setAuditAttributes(auditAttributes70);
        shippingContainer6.AuditAttributes = auditAttributes70;
        java.lang.String str74 = shippingContainer6.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer76 = shippingContainer6.setId("0001-01-01T00:00:00.000Z");
        java.lang.String str77 = shippingContainer6.TrackingId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen78 = putSpecimen0.setShippingContainer(shippingContainer6);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList79 = putSpecimen78.ExtendedAttributes;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postActivity13);
        org.junit.Assert.assertNull(activityType14);
        org.junit.Assert.assertNull(labInstructionTemplateList21);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNull(labInstructionTemplateList27);
        org.junit.Assert.assertNotNull(specimenTemplateArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate31);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate33);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNull(analyticalGroupType40);
        org.junit.Assert.assertNull(analysisMethod45);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod57);
        org.junit.Assert.assertNull(analysisMethod59);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(analysisMethod62);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(analyticalGroup68);
        org.junit.Assert.assertNotNull(medium72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(shippingContainer76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(putSpecimen78);
        org.junit.Assert.assertNull(extendedAttributeList79);
    }

    @Test
    public void test40290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40290");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo4 = timeAlignedTimeSeriesInfo0.setLabel("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo6 = timeAlignedTimeSeriesInfo0.setUniqueId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str7 = timeAlignedTimeSeriesInfo0.getLocationIdentifier();
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo4);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test40291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40291");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = extendedAttributeDefinition0.setMandatory((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = extendedAttributeDefinition2.setDefaultValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition6 = extendedAttributeDefinition2.setId("2021.4.62.0");
        java.lang.String str7 = extendedAttributeDefinition2.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType8 = extendedAttributeDefinition2.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition10 = extendedAttributeDefinition2.setDescription("http");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList11 = extendedAttributeDefinition10.getDropDownListItems();
        org.junit.Assert.assertNotNull(extendedAttributeDefinition2);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition4);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(appliesToType8);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition10);
        org.junit.Assert.assertNull(extendedAttributeListItemList11);
    }

    @Test
    public void test40292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40292");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList1 = fieldVisitDataServiceResponse0.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        java.lang.String str5 = controlConditionActivity2.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse6 = fieldVisitDataServiceResponse0.setControlConditionActivity(controlConditionActivity2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult7 = null;
        fieldVisitDataServiceResponse6.DatumConversionResult = datumConversionResult7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        java.lang.String str10 = fieldVisitApproval9.LevelDescription;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse11 = fieldVisitDataServiceResponse6.setApproval(fieldVisitApproval9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = fieldVisitDataServiceResponse6.getGageHeightAtZeroFlowActivity();
        org.junit.Assert.assertNull(dischargeActivityList1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse11);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity12);
    }

    @Test
    public void test40293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40293");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase6 = putParameter0.setRoundingSpec("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase8 = parameterBase6.setIdentifier("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        parameterBase8.DisplayName = "multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase12 = parameterBase8.setDisplayName("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(parameterBase6);
        org.junit.Assert.assertNotNull(parameterBase8);
        org.junit.Assert.assertNotNull(parameterBase12);
    }

    @Test
    public void test40294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40294");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitAttachments getFieldVisitAttachments0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitAttachments();
        java.lang.Object obj1 = getFieldVisitAttachments0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitAttachments getFieldVisitAttachments3 = getFieldVisitAttachments0.setId("http://MaxDurationhttp/json/reply/ArrayList");
        getFieldVisitAttachments3.Id = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitAttachments getFieldVisitAttachments7 = getFieldVisitAttachments3.setId("'.'SSSSSSS");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAttachment");
        org.junit.Assert.assertNotNull(getFieldVisitAttachments3);
        org.junit.Assert.assertNotNull(getFieldVisitAttachments7);
    }

    @Test
    public void test40295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40295");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult3 = null;
        postObservationV2_0.NumericResult = numericResult3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade7 = resultGrade5.setId("/AQUARIUS/Provisioning/v1");
        resultGrade5.CustomId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = resultGrade5.setSystemCode(resultGradeSystemCodeType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType12 = resultGrade5.SystemCode;
        postObservationV2_0.ResultGrade = resultGrade5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium14 = postObservationV2_0.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = postObservationV2_0.PlannedFieldResult;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(resultGrade7);
        org.junit.Assert.assertNotNull(resultGrade11);
        org.junit.Assert.assertNull(resultGradeSystemCodeType12);
        org.junit.Assert.assertNull(medium14);
        org.junit.Assert.assertNull(plannedFieldResult15);
    }

    @Test
    public void test40296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40296");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase2 = putOpenIdConnectUser0.setCanConfigureSystem((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser4 = putOpenIdConnectUser0.setIdentifier("/AQUARIUS/Acquisition/v2");
        java.lang.String str5 = putOpenIdConnectUser0.Identifier;
        java.lang.String str6 = putOpenIdConnectUser0.getSubjectIdentifier();
        java.lang.Boolean boolean7 = putOpenIdConnectUser0.Active;
        org.junit.Assert.assertNotNull(userBase2);
        org.junit.Assert.assertNotNull(putOpenIdConnectUser4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str5, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test40297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40297");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary9 = taxonImportSummary0.setSuccessCount((java.lang.Integer) (-1));
        taxonImportSummary0.InvalidRowsCsvUrl = "9999-12-31T23:59:59.9999999Z";
        taxonImportSummary0.InvalidRowsCsvUrl = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary15 = taxonImportSummary0.setSummaryReportText("2021.8.9990");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList16 = taxonImportSummary15.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary18 = taxonImportSummary15.setSkippedCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary20 = taxonImportSummary18.setErrorCount((java.lang.Integer) 4);
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNotNull(taxonImportSummary9);
        org.junit.Assert.assertNotNull(taxonImportSummary15);
        org.junit.Assert.assertNull(importItemTaxonList16);
        org.junit.Assert.assertNotNull(taxonImportSummary18);
        org.junit.Assert.assertNotNull(taxonImportSummary20);
    }

    @Test
    public void test40298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40298");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report0.setComments("MaxInstant");
        report4.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity9 = gageHeightAtZeroFlowActivity7.setApplicableSince(instant8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity11 = gageHeightAtZeroFlowActivity9.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant13 = sensor12.getLastModifiedUtc();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor15 = sensor12.setLastModifiedUtc(instant14);
        java.time.Instant instant16 = sensor12.LastModifiedUtc;
        gageHeightAtZeroFlowActivity11.ApplicableSince = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report18 = report4.setCreatedTime(instant16);
        java.lang.String str19 = report4.UserUniqueId;
        java.lang.String str20 = report4.Url;
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity9);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity11);
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(sensor15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(report18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test40299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40299");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty2.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType6 = observedProperty2.ResultType;
        observedProperty2.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup10 = postObservedProperty9.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList12, importHistoryEventSimpleArray11);
        postObservedProperty9.ImportHistoryEventSimples = importHistoryEventSimpleList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty15 = observedProperty2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType16 = observedProperty15.AnalysisType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNull(resultType6);
        org.junit.Assert.assertNull(unitGroup10);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(observedProperty15);
        org.junit.Assert.assertNull(analysisType16);
    }

    @Test
    public void test40300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40300");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        java.time.OffsetDateTime offsetDateTime1 = putFilter0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime3 = postFilter2.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = postFilter2.getAuditAttributes();
        postFilter2.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime7 = postFilter2.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter8.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList12, samplingLocationArray11);
        postFilter8.SamplingLocations = samplingLocationList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter15 = postFilter2.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList12);
        postFilter15.CustomId = "POST";
        java.time.OffsetDateTime offsetDateTime18 = postFilter15.getStartTime();
        java.time.OffsetDateTime offsetDateTime19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter20 = postFilter15.setStartTime(offsetDateTime19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter23 = postFilter21.setCustomId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList24 = postFilter23.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime25 = postFilter23.StartTime;
        java.time.OffsetDateTime offsetDateTime26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter27 = postFilter23.setEndTime(offsetDateTime26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter30 = filter28.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter32 = filter30.setId("POST");
        filter32.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList35 = filter32.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter37 = filter32.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod40 = postLabAnalysisMethod38.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList42, observedPropertyArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod44 = postLabAnalysisMethod40.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod46 = postLabAnalysisMethod40.setAuditAttributes(auditAttributes45);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList47 = postLabAnalysisMethod46.getObservedProperties();
        filter37.ObservedProperties = observedPropertyList47;
        postFilter27.ObservedProperties = observedPropertyList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter50 = postFilter15.setObservedProperties(observedPropertyList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter51 = putFilter0.setObservedProperties(observedPropertyList47);
        java.lang.String str52 = putFilter51.getDescription();
        java.lang.Object obj53 = putFilter51.getResponseType();
        putFilter51.CustomId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(samplingLocationArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(postFilter15);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(postFilter20);
        org.junit.Assert.assertNotNull(postFilter23);
        org.junit.Assert.assertNull(observedPropertyList24);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(postFilter27);
        org.junit.Assert.assertNotNull(filter30);
        org.junit.Assert.assertNotNull(filter32);
        org.junit.Assert.assertNull(observedPropertyList35);
        org.junit.Assert.assertNotNull(filter37);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod40);
        org.junit.Assert.assertNotNull(observedPropertyArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod44);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod46);
        org.junit.Assert.assertNotNull(observedPropertyList47);
        org.junit.Assert.assertNotNull(postFilter50);
        org.junit.Assert.assertNotNull(putFilter51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
    }

    @Test
    public void test40301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40301");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical0.VerticalType = verticalType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation6 = velocityObservation4.setDeploymentMethod(deploymentMethodType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation9 = velocityObservation7.setDeploymentMethod(deploymentMethodType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList11, velocityDepthObservationArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation13 = velocityObservation9.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation14 = velocityObservation4.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical15 = vertical0.setVelocityObservation(velocityObservation4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType16 = vertical15.getVerticalType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData();
        java.lang.String str18 = iceCoveredData17.IceAssemblyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = volumetricDischargeReading19.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay22 = null;
        adcpDischargeActivity21.TransducerDepth = quantityWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary24.Reviewer = "";
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary24.MeasurementTime = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary24.BaseFlow = baseFlowType29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary24.DischargeUncertainty = dischargeUncertainty31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = dischargeSummary33.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay35 = dischargeSummary33.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = dischargeSummary33.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = doubleWithDisplay37.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = dischargeSummary33.setDurationInHours(doubleWithDisplay37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty41 = dischargeUncertainty31.setQuantitativeUncertainty(doubleWithDisplay37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity42 = adcpDischargeActivity21.setTopEstimateExponent(doubleWithDisplay37);
        java.lang.String str43 = adcpDischargeActivity21.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant45 = crossSectionSurveyActivity44.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str47 = pointVelocityDischargeActivity46.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity49 = pointVelocityDischargeActivity46.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity51 = pointVelocityDischargeActivity46.setSoftwareVersion("");
        java.lang.String str52 = pointVelocityDischargeActivity51.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType53 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity51.StartPoint = startPointType53;
        crossSectionSurveyActivity44.StartingPoint = startPointType53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant57 = crossSectionSurveyActivity56.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str59 = pointVelocityDischargeActivity58.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity61 = pointVelocityDischargeActivity58.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity63 = pointVelocityDischargeActivity58.setSoftwareVersion("");
        java.lang.String str64 = pointVelocityDischargeActivity63.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType65 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity63.StartPoint = startPointType65;
        crossSectionSurveyActivity56.StartingPoint = startPointType65;
        crossSectionSurveyActivity44.StartingPoint = startPointType65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity44.Stage = datumConvertedQuantityWithDisplay69;
        adcpDischargeActivity21.DischargeCoefficientVariation = datumConvertedQuantityWithDisplay69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading72 = volumetricDischargeReading19.setDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay69);
        iceCoveredData17.IceThickness = datumConvertedQuantityWithDisplay69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical74 = vertical15.setIceCoveredData(iceCoveredData17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay75 = vertical15.EffectiveDepth;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertTrue("'" + verticalType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation6);
        org.junit.Assert.assertTrue("'" + deploymentMethodType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation9);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(velocityObservation13);
        org.junit.Assert.assertNotNull(velocityObservation14);
        org.junit.Assert.assertNotNull(vertical15);
        org.junit.Assert.assertTrue("'" + verticalType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + baseFlowType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNull(quantityWithDisplay35);
        org.junit.Assert.assertNull(doubleWithDisplay36);
        org.junit.Assert.assertNotNull(doubleWithDisplay39);
        org.junit.Assert.assertNotNull(dischargeSummary40);
        org.junit.Assert.assertNotNull(dischargeUncertainty41);
        org.junit.Assert.assertNotNull(adcpDischargeActivity42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(instant45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity49);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + startPointType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType53.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity61);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + startPointType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType65.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(volumetricDischargeReading72);
        org.junit.Assert.assertNotNull(vertical74);
        org.junit.Assert.assertNull(quantityWithDisplay75);
    }

    @Test
    public void test40302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40302");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation3.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList7, extendedAttributeValueArray6);
        postLocation3.ExtendedAttributeValues = extendedAttributeValueList7;
        postCalculatedDerivedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList7;
        java.lang.String str11 = postCalculatedDerivedTimeSeries0.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = postCalculatedDerivedTimeSeries0.setComputationPeriodIdentifier("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries15 = postCalculatedDerivedTimeSeries13.setSubLocationIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str16 = postCalculatedDerivedTimeSeries15.getLocationUniqueId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries13);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test40303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40303");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str1 = levelSurveyActivity0.getParty();
        java.lang.String str2 = levelSurveyActivity0.OriginReferencePointUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList3 = levelSurveyActivity0.LevelMeasurements;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity5 = levelSurveyActivity0.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] levelSurveyMeasurementArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>) levelSurveyMeasurementList7, levelSurveyMeasurementArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity9 = levelSurveyActivity5.setLevelMeasurements(levelSurveyMeasurementList7);
        levelSurveyActivity9.Party = "MaxDuration";
        levelSurveyActivity9.Method = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(levelSurveyMeasurementList3);
        org.junit.Assert.assertNotNull(levelSurveyActivity5);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(levelSurveyActivity9);
    }

    @Test
    public void test40304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40304");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession();
        java.lang.String str1 = postSession0.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession3 = postSession0.setLocale("hi!");
        java.lang.String str4 = postSession3.getUsername();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession6 = postSession3.setLocale("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str7 = postSession3.getEncryptedPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postSession6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test40305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40305");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int4 = postUnitGroup0.IntensityDimension;
        java.lang.Integer int5 = postUnitGroup0.IntensityDimension;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase7 = postUnitGroup0.setCurrentDimension((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup9 = postUnitGroup0.setBaseUnitSingularName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase11 = postUnitGroup9.setMassDimension((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroupBase unitGroupBase13 = postUnitGroup9.setSubstanceDimension((java.lang.Integer) 100);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(unitGroupBase7);
        org.junit.Assert.assertNotNull(postUnitGroup9);
        org.junit.Assert.assertNotNull(unitGroupBase11);
        org.junit.Assert.assertNotNull(unitGroupBase13);
    }

    @Test
    public void test40306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40306");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata2 = gradeMetadata0.setColor("ZZZZZ");
        java.lang.String str3 = gradeMetadata0.DisplayName;
        java.lang.String str4 = gradeMetadata0.DisplayName;
        java.lang.String str5 = gradeMetadata0.getColor();
        org.junit.Assert.assertNotNull(gradeMetadata2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ZZZZZ" + "'", str5, "ZZZZZ");
    }

    @Test
    public void test40307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40307");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        getObservationsV2_0.SpecimenIds = strList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        getObservationsV2_0.ActivityIds = strList11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_0.setActivityCustomId("/AQUARIUS/Acquisition/v2");
        java.lang.String str17 = getObservationsV2_0.getFilterId();
        java.util.List<java.lang.String> strList18 = getObservationsV2_0.AnalysisMethodIds;
        java.lang.String str19 = getObservationsV2_0.getSort();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test40308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40308");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReportImportHistoryEvent searchResultLabReportImportHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReportImportHistoryEvent();
        java.lang.Integer int1 = searchResultLabReportImportHistoryEvent0.getTotalCount();
        java.lang.Integer int2 = searchResultLabReportImportHistoryEvent0.getTotalCount();
        searchResultLabReportImportHistoryEvent0.TotalCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent> labReportImportHistoryEventList5 = searchResultLabReportImportHistoryEvent0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReportImportHistoryEvent searchResultLabReportImportHistoryEvent7 = searchResultLabReportImportHistoryEvent0.setTotalCount((java.lang.Integer) 1);
        searchResultLabReportImportHistoryEvent7.TotalCount = 100;
        java.lang.String str10 = searchResultLabReportImportHistoryEvent7.Cursor;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(labReportImportHistoryEventList5);
        org.junit.Assert.assertNotNull(searchResultLabReportImportHistoryEvent7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test40309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40309");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest0.GetParts = "http";
        java.lang.Boolean boolean3 = timeSeriesDataCorrectedServiceRequest0.isIncludeGapMarkers();
        timeSeriesDataCorrectedServiceRequest0.IncludeGapMarkers = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest7 = timeSeriesDataCorrectedServiceRequest0.setGetParts("/AQUARIUS/Provisioning/v1");
        java.lang.Boolean boolean8 = timeSeriesDataCorrectedServiceRequest7.isApplyRounding();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        gapToleranceOperation9.User = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str12 = gapToleranceOperation9.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation14 = gapToleranceOperation9.setComments("MaxDuration");
        java.lang.Integer int15 = gapToleranceOperation14.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str17 = getChartDataV2_16.getActivityCustomId();
        java.lang.String str18 = getChartDataV2_16.DepthUnitId;
        java.util.List<java.lang.String> strList19 = getChartDataV2_16.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_20.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType25 = null;
        controlConditionActivity24.ControlCleaned = controlCleanedType25;
        java.lang.String str27 = controlConditionActivity24.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary28.Reviewer = "";
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary28.MeasurementTime = instant31;
        controlConditionActivity24.DateCleaned = instant31;
        gageHeightReading23.ReadingTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = doubleWithDisplay35.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str38 = doubleWithDisplay37.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading39 = gageHeightReading23.setGageHeight(doubleWithDisplay37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = dischargeSummary41.setMeanGageHeightMethod("hi!");
        java.lang.String str44 = dischargeSummary43.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = dischargeSummary43.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType48 = calibrationCheck47.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay49 = calibrationCheck47.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary51.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse54.setNextToken(instant55);
        dischargeSummary51.MeasurementTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse50.setNextToken(instant55);
        java.time.Instant instant59 = locationDescriptionListServiceResponse50.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck60 = calibrationCheck47.setTime(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = dischargeSummary43.setMeasurementTime(instant59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_62 = getChartDataV2_40.setStartResultTime(instant59);
        gageHeightReading23.ReadingTime = instant59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_64 = getChartDataV2_20.setStartObservedTime(instant59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = getChartDataV2_16.setEndResultTime(instant59);
        gapToleranceOperation14.DateAppliedUtc = instant59;
        timeSeriesDataCorrectedServiceRequest7.QueryFrom = instant59;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str12, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(gapToleranceOperation14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(doubleWithDisplay37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(gageHeightReading39);
        org.junit.Assert.assertNotNull(dischargeSummary43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(dischargeSummary46);
        org.junit.Assert.assertNull(calibrationCheckType48);
        org.junit.Assert.assertNull(doubleWithDisplay49);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(calibrationCheck60);
        org.junit.Assert.assertNotNull(dischargeSummary61);
        org.junit.Assert.assertNotNull(getChartDataV2_62);
        org.junit.Assert.assertNotNull(getChartDataV2_64);
        org.junit.Assert.assertNotNull(getChartDataV2_65);
    }

    @Test
    public void test40310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40310");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult3 = null;
        postObservationV2_0.NumericResult = numericResult3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade7 = resultGrade5.setId("/AQUARIUS/Provisioning/v1");
        resultGrade5.CustomId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = resultGrade5.setSystemCode(resultGradeSystemCodeType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType12 = resultGrade5.SystemCode;
        postObservationV2_0.ResultGrade = resultGrade5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal16 = observationMinimal14.setSpecimen(specimenNestedInActivity15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty17 = observationMinimal16.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue19 = categoricalResult18.getFixedValue();
        observationMinimal16.CategoricalResult = categoricalResult18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult21.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue24 = categoricalResult21.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult21.NullMeasureQualifier = nullMeasureQualifier25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult27 = categoricalResult18.setNullMeasureQualifier(nullMeasureQualifier25);
        java.lang.String str28 = nullMeasureQualifier25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_29 = postObservationV2_0.setNullMeasureQualifier(nullMeasureQualifier25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple30 = postObservationV2_0.getAnalysisMethod();
        java.time.OffsetDateTime offsetDateTime31 = postObservationV2_0.ObservedTime;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(resultGrade7);
        org.junit.Assert.assertNotNull(resultGrade11);
        org.junit.Assert.assertNull(resultGradeSystemCodeType12);
        org.junit.Assert.assertNotNull(observationMinimal16);
        org.junit.Assert.assertNull(observedProperty17);
        org.junit.Assert.assertNull(categoricalValue19);
        org.junit.Assert.assertNull(categoricalValue24);
        org.junit.Assert.assertNotNull(categoricalResult27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(postObservationV2_29);
        org.junit.Assert.assertNull(analysisMethodSimple30);
        org.junit.Assert.assertNull(offsetDateTime31);
    }

    @Test
    public void test40311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40311");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project2 = project0.setScopeStatement("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = project2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project5 = project2.setApproved((java.lang.Boolean) true);
        project5.Name = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.lang.String str8 = project5.Id;
        java.lang.String str9 = project5.getId();
        org.junit.Assert.assertNotNull(project2);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(project5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test40312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40312");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str1 = timeSeriesDescription0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription3 = timeSeriesDescription0.setPublish((java.lang.Boolean) false);
        java.lang.String str4 = timeSeriesDescription0.ParameterId;
        java.time.Instant instant5 = timeSeriesDescription0.getLastModified();
        timeSeriesDescription0.TimeSeriesType = "";
        java.lang.String str8 = timeSeriesDescription0.LocationIdentifier;
        java.lang.String str9 = timeSeriesDescription0.getIdentifier();
        java.time.Instant instant10 = timeSeriesDescription0.RawStartTime;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(timeSeriesDescription3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(instant10);
    }

    @Test
    public void test40313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40313");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setNullMeasureQualifier(nullMeasureQualifier4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = labInstruction6.setAnalysisMethod(analysisMethod7);
        putObservationV2_2.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = specimenTemplate11.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate13.Preservative = preservativeType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = labResultDetails16.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = specimenTemplate13.setAuditAttributes(auditAttributes19);
        extendedAttributeDefinition10.AuditAttributes = auditAttributes19;
        java.lang.Boolean boolean23 = extendedAttributeDefinition10.Mandatory;
        java.lang.Boolean boolean24 = extendedAttributeDefinition10.Mandatory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = extendedAttributeDefinition10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_26 = putObservationV2_2.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_29 = postObservationV2_27.setLabInstruction(labInstruction28);
        java.lang.String str30 = postObservationV2_29.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod33 = postLabAnalysisMethod31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35, observedPropertyArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod37 = postLabAnalysisMethod33.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType39 = analyticalGroup38.getType();
        analyticalGroup38.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = null;
        analyticalGroupItem48.AnalysisMethod = analysisMethod51;
        java.lang.String str53 = analyticalGroupItem48.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem57.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = null;
        analyticalGroupItem59.AnalysisMethod = analysisMethod62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem43, analyticalGroupItem45, analyticalGroupItem48, analyticalGroupItem54, analyticalGroupItem57, analyticalGroupItem59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65, analyticalGroupItemArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup67 = analyticalGroup42.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList65);
        analyticalGroup38.AnalyticalGroupItems = analyticalGroupItemList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup38.AuditAttributes = auditAttributes69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod71 = postLabAnalysisMethod37.setAuditAttributes(auditAttributes69);
        java.time.OffsetDateTime offsetDateTime72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = auditAttributes69.setModificationTime(offsetDateTime72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_74 = postObservationV2_29.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_76 = postObservationV2_29.setLabInstruction(labInstruction75);
        java.lang.String str77 = labInstruction75.getAnalysisComment();
        java.lang.String str78 = labInstruction75.getPreparationMethod();
        putObservationV2_26.LabInstruction = labInstruction75;
        java.lang.String str80 = labInstruction75.PreparationMethod;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNotNull(labInstruction8);
        org.junit.Assert.assertNotNull(specimenTemplate13);
        org.junit.Assert.assertTrue("'" + preservativeType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails18);
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(specimenTemplate21);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(auditAttributes25);
        org.junit.Assert.assertNotNull(putObservationV2_26);
        org.junit.Assert.assertNotNull(postObservationV2_29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod33);
        org.junit.Assert.assertNotNull(observedPropertyArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod37);
        org.junit.Assert.assertNull(analyticalGroupType39);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(analyticalGroup67);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod71);
        org.junit.Assert.assertNotNull(auditAttributes73);
        org.junit.Assert.assertNotNull(postObservationV2_74);
        org.junit.Assert.assertNotNull(postObservationV2_76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test40314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40314");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation2 = interpolationTypeOperation0.setUser("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = interpolationTypeOperation0.OperationType;
        java.lang.String str4 = interpolationTypeOperation0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation6 = interpolationTypeOperation0.setUser("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest7.TimeSeriesUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType22 = null;
        controlConditionActivity21.ControlCleaned = controlCleanedType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        controlConditionActivity21.DateCleaned = instant25;
        timeAlignedDataServiceRequest20.QueryFrom = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse10.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest30 = correctionListServiceRequest7.setQueryTo(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        java.util.ArrayList<java.lang.Double> doubleList32 = ratingModelEffectiveShiftsByStageValuesServiceResponse31.EffectiveShiftValues;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str34 = getChartDataV2_33.getActivityCustomId();
        java.util.List<java.lang.String> strList35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_36 = getChartDataV2_33.setSearch(strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList44 = getObservationsV2_37.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary45.Reviewer = "";
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary45.MeasurementTime = instant48;
        getObservationsV2_37.StartResultTime = instant48;
        java.lang.String[] strArray60 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_37.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription66 = locationDescription64.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType68 = null;
        controlConditionActivity67.ControlCleaned = controlCleanedType68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = locationDescriptionListServiceResponse70.setNextToken(instant71);
        controlConditionActivity67.DateCleaned = instant71;
        locationDescription66.LastModified = instant71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_63.setStartResultTime(instant71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_76 = getChartDataV2_33.setEndObservedTime(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse77 = ratingModelEffectiveShiftsByStageValuesServiceResponse31.setTimestamp(instant71);
        correctionListServiceRequest30.QueryTo = instant71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation79 = interpolationTypeOperation0.setDateAppliedUtc(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType interpolationType81 = interpolationTypeOperation79.setType("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        interpolationTypeOperation79.StackPosition = 4;
        org.junit.Assert.assertNotNull(interpolationTypeOperation2);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(interpolationTypeOperation6);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(correctionListServiceRequest30);
        org.junit.Assert.assertNull(doubleList32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(getChartDataV2_36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNotNull(locationDescription66);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse72);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(getChartDataV2_76);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse77);
        org.junit.Assert.assertNotNull(interpolationTypeOperation79);
        org.junit.Assert.assertNotNull(interpolationType81);
    }

    @Test
    public void test40315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40315");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setAuditAttributes(auditAttributes5);
        java.lang.Object obj7 = postActivity4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = postActivity4.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device12 = device10.setType("/AQUARIUS/Acquisition/v2");
        device12.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation9.setDevice(device12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity16 = postActivity4.setDevice(device12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime18 = activity17.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity20 = activity17.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str22 = putActivityTemplate21.getId();
        java.lang.String str23 = putActivityTemplate21.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = auditAttributes24.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate27 = putActivityTemplate21.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType28 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate27.Medium = mediumType28;
        java.lang.String str30 = putActivityTemplate27.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        collectionMethod31.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate34 = putActivityTemplate27.setCollectionMethod(collectionMethod31);
        java.lang.String str35 = collectionMethod31.IdentifierOrganization;
        activity20.CollectionMethod = collectionMethod31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod37 = activity20.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.INDEX_CALCULATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity39 = activity20.setType(activityType38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity40 = postActivity16.setType(activityType38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium41 = postActivity16.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity43 = postActivity16.setSourceActivityId("/AQUARIUS/Publish/v2");
        java.time.OffsetDateTime offsetDateTime44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity45 = postActivity43.setEndTime(offsetDateTime44);
        java.lang.String str46 = postActivity45.getSourceActivityId();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertNull(quantity8);
        org.junit.Assert.assertNotNull(device12);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(postActivity16);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(activity20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(auditAttributes26);
        org.junit.Assert.assertNotNull(putActivityTemplate27);
        org.junit.Assert.assertTrue("'" + mediumType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(putActivityTemplate34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(collectionMethod37);
        org.junit.Assert.assertTrue("'" + activityType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.INDEX_CALCULATION + "'", activityType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.INDEX_CALCULATION));
        org.junit.Assert.assertNotNull(activity39);
        org.junit.Assert.assertNotNull(postActivity40);
        org.junit.Assert.assertNull(medium41);
        org.junit.Assert.assertNotNull(postActivity43);
        org.junit.Assert.assertNotNull(postActivity45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/AQUARIUS/Publish/v2" + "'", str46, "/AQUARIUS/Publish/v2");
    }

    @Test
    public void test40316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40316");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethodHistory getAnalysisMethodHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethodHistory();
        getAnalysisMethodHistory0.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.Object obj3 = getAnalysisMethodHistory0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethodHistory getAnalysisMethodHistory5 = getAnalysisMethodHistory0.setId("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getAnalysisMethodHistory5);
    }

    @Test
    public void test40317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40317");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str34 = getObservationsV2_33.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        getObservationsV2_33.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_12.setObservedPropertyIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest4.setTimeSeriesOutputUnitIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField44 = extendedAttributeField2.setValueOptions((java.util.List<java.lang.String>) strList38);
        java.lang.String str45 = extendedAttributeField44.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField47 = extendedAttributeField44.setCanBeEmpty((java.lang.Boolean) false);
        extendedAttributeField44.CanBeEmpty = false;
        extendedAttributeField44.NumericPrecision = 0;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField53 = extendedAttributeField44.setColumnIdentifier("http://MaxDurationhttp");
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(extendedAttributeField44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(extendedAttributeField47);
        org.junit.Assert.assertNotNull(extendedAttributeField53);
    }

    @Test
    public void test40318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40318");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postBasicTimeSeries5.getExtendedAttributeValues();
        java.lang.Object obj7 = postBasicTimeSeries5.getResponseType();
        java.lang.String str8 = postBasicTimeSeries5.SubLocationIdentifier;
        java.lang.String str9 = postBasicTimeSeries5.ComputationPeriodIdentifier;
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test40319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40319");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList5 = getExportObservations0.getSpecimenIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations0.setDetectionCondition("MaxDuration");
        getExportObservations0.Limit = 5;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getExportObservations7);
    }

    @Test
    public void test40320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40320");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        java.lang.String str2 = calibrationCheck0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary6.DifferenceDuringVisit = doubleWithDisplay7;
        reading3.Value = doubleWithDisplay7;
        calibrationCheck0.Difference = doubleWithDisplay7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = calibrationCheck0.PercentDifference;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType12 = calibrationCheck0.getCalibrationCheckType();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(calibrationCheckType12);
    }

    @Test
    public void test40321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40321");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = getSpecimens0.setSort("MinDuration");
        java.time.Instant instant4 = getSpecimens3.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens6 = getSpecimens3.setCursor("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList9 = getObservationsV2_8.SamplingContextTagIds;
        java.time.Instant instant10 = getObservationsV2_8.getEndModificationTime();
        java.util.List<java.lang.String> strList11 = getObservationsV2_8.Media;
        java.util.List<java.lang.String> strList12 = getObservationsV2_8.ActivityTypes;
        java.util.List<java.lang.String> strList13 = getObservationsV2_8.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_22.setMedia((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str44 = getObservationsV2_43.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        getObservationsV2_43.ProjectIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_22.setObservedPropertyIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = timeAlignedDataServiceRequest14.setTimeSeriesOutputUnitIds(strList48);
        getObservationsV2_8.DataClassifications = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods55 = getLabAnalysisMethods7.setObservedPropertyIds((java.util.List<java.lang.String>) strList48);
        getSpecimens6.ActivityIds = strList48;
        java.lang.String str57 = getSpecimens6.Cursor;
        java.util.List<java.lang.String> strList58 = getSpecimens6.AnalyticalGroupIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getSpecimens3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(getSpecimens6);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest53);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "MaxInstant" + "'", str57, "MaxInstant");
        org.junit.Assert.assertNull(strList58);
    }

    @Test
    public void test40322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40322");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint8.setGradeName10("MaxInstant");
        java.lang.String str11 = timeAlignedPoint8.GradeName1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint8.setApprovalName5("http://MaxDurationhttp/json/reply/String");
        java.lang.String str14 = timeAlignedPoint8.ApprovalName1;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test40323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40323");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser();
        java.lang.String str1 = activeDirectoryUser0.UserPrincipalName;
        java.lang.String str2 = activeDirectoryUser0.UserPrincipalName;
        java.lang.String str3 = activeDirectoryUser0.ActiveDirectorySid;
        java.lang.String str4 = activeDirectoryUser0.UserPrincipalName;
        java.lang.String str5 = activeDirectoryUser0.AuthenticationType;
        java.lang.String str6 = activeDirectoryUser0.FirstName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test40324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40324");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str3 = referencePointPeriod2.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase5 = referencePointPeriod2.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod2.Uncertainty = 10.0d;
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase9 = referencePointPeriod2.setValidFrom(instant8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        java.util.List<java.lang.String> strList17 = getObservationsV2_10.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        getObservationsV2_10.StartResultTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.ActivityIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setCollectionMethodIds((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary53.Reviewer = "";
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary53.MeasurementTime = instant56;
        postRecurringReport52.NextGenerationDate = instant56;
        java.time.Instant instant59 = postRecurringReport52.getNextGenerationDate();
        java.lang.String str60 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant59);
        metadataChangeTransactionListServiceRequest51.QueryFrom = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest62 = downchainProcessorListByRatingModelServiceRequest50.setQueryTo(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest64 = downchainProcessorListByRatingModelServiceRequest50.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant66 = qualifier65.DateApplied;
        java.lang.String str67 = qualifier65.User;
        java.lang.String str68 = qualifier65.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj70 = timeAlignedDataServiceRequest69.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant72 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse71.setNextToken(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest74 = timeAlignedDataServiceRequest69.setQueryFrom(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier75 = qualifier65.setDateApplied(instant72);
        java.time.Instant instant76 = qualifier75.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest77 = downchainProcessorListByRatingModelServiceRequest50.setQueryFrom(instant76);
        java.time.Instant instant78 = downchainProcessorListByRatingModelServiceRequest77.getQueryFrom();
        getObservationsV2_10.StartResultTime = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase80 = referencePointPeriodBase9.setValidFrom(instant78);
        referencePoint0.PrimarySinceDate = instant78;
        java.time.Instant instant82 = referencePoint0.getPrimarySinceDate();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList83 = referencePoint0.ReferencePointPeriods;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint85 = referencePoint0.setLongitude((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint87 = referencePoint85.setUniqueId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.lang.String str88 = referencePoint87.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(referencePointPeriodBase5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(referencePointPeriodBase9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str60, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest62);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest64);
        org.junit.Assert.assertNull(instant66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest74);
        org.junit.Assert.assertNotNull(qualifier75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(referencePointPeriodBase80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNull(referencePointPeriodList83);
        org.junit.Assert.assertNotNull(referencePoint85);
        org.junit.Assert.assertNotNull(referencePoint87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str88, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
    }

    @Test
    public void test40325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40325");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        getObservationsV2_0.StartResultTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType16 = null;
        controlConditionActivity15.ControlCleaned = controlCleanedType16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        controlConditionActivity15.DateCleaned = instant19;
        timeAlignedDataServiceRequest14.QueryFrom = instant19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.ActivityIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = timeAlignedDataServiceRequest14.setTimeSeriesOutputUnitIds(strList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_0.setCollectionMethodIds((java.util.List<java.lang.String>) strList34);
        java.lang.String str40 = getObservationsV2_39.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_41.setDataClassifications((java.util.List<java.lang.String>) strList45);
        getObservationsV2_47.DepthUnitCustomId = "hi!";
        java.lang.String str50 = getObservationsV2_47.CustomId;
        java.util.List<java.lang.String> strList51 = getObservationsV2_47.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray62 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = putLocationTags58.setTagUniqueIds(strList63);
        getObservationsV2_52.QualityControlTypes = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = getObservationsV2_47.setMedia((java.util.List<java.lang.String>) strList63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str69 = getObservationsV2_68.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        getObservationsV2_70.SpecimenIds = strList73;
        getObservationsV2_68.ProjectIds = strList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_47.setObservedPropertyIds((java.util.List<java.lang.String>) strList73);
        getObservationsV2_77.Cursor = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj81 = timeAlignedDataServiceRequest80.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse84 = locationDescriptionListServiceResponse82.setNextToken(instant83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest85 = timeAlignedDataServiceRequest80.setQueryFrom(instant83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray90 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags93 = putLocationTags86.setTagUniqueIds(strList91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest94 = timeAlignedDataServiceRequest80.setTimeSeriesOutputUnitIds(strList91);
        getObservationsV2_77.Search = strList91;
        getObservationsV2_39.TaxonIds = strList91;
        java.util.List<java.lang.String> strList97 = getObservationsV2_39.SpecimenIds;
        java.lang.Double double98 = getObservationsV2_39.MaxNumericResultValue;
        java.time.Instant instant99 = getObservationsV2_39.getEndObservedTime();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest38);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(putLocationTags65);
        org.junit.Assert.assertNotNull(getObservationsV2_67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse84);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest85);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(putLocationTags93);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest94);
        org.junit.Assert.assertNull(strList97);
        org.junit.Assert.assertNull(double98);
        org.junit.Assert.assertNull(instant99);
    }

    @Test
    public void test40326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40326");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime1 = activity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        activity0.Medium = medium2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType4 = medium2.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList6 = specimenWithObservations5.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = specimenWithObservations5.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity9.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = postActivity9.setPlannedActivity(plannedActivity12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType14 = postActivity9.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate16.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList21 = specimenTemplate20.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate22.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList27 = specimenTemplate26.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate16, specimenTemplate19, specimenTemplate20, specimenTemplate24, specimenTemplate25, specimenTemplate26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29, specimenTemplateArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = postFieldVisitActivityWithTemplate15.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate33 = postFieldVisitActivityWithTemplate31.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity9.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity9.Medium = medium35;
        medium35.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType40 = analyticalGroup39.getType();
        analyticalGroup39.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = analyticalGroupItem44.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem46.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = null;
        analyticalGroupItem49.AnalysisMethod = analysisMethod52;
        java.lang.String str54 = analyticalGroupItem49.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem55.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = analyticalGroupItem55.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = analyticalGroupItem58.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem60.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = analyticalGroupItem60.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = null;
        analyticalGroupItem60.AnalysisMethod = analysisMethod63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem44, analyticalGroupItem46, analyticalGroupItem49, analyticalGroupItem55, analyticalGroupItem58, analyticalGroupItem60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList66, analyticalGroupItemArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup68 = analyticalGroup43.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList66);
        analyticalGroup39.AnalyticalGroupItems = analyticalGroupItemList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup39.AuditAttributes = auditAttributes70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium72 = medium35.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute73 = putExtendedAttribute8.setAuditAttributes(auditAttributes70);
        java.time.OffsetDateTime offsetDateTime74 = auditAttributes70.getCreationTime();
        specimenWithObservations5.AuditAttributes = auditAttributes70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium76 = medium2.setAuditAttributes(auditAttributes70);
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(mediumSystemCodeType4);
        org.junit.Assert.assertNull(extendedAttributeList6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(postActivity13);
        org.junit.Assert.assertNull(activityType14);
        org.junit.Assert.assertNull(labInstructionTemplateList21);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNull(labInstructionTemplateList27);
        org.junit.Assert.assertNotNull(specimenTemplateArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate31);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate33);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNull(analyticalGroupType40);
        org.junit.Assert.assertNull(analysisMethod45);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod57);
        org.junit.Assert.assertNull(analysisMethod59);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(analysisMethod62);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(analyticalGroup68);
        org.junit.Assert.assertNotNull(medium72);
        org.junit.Assert.assertNotNull(putExtendedAttribute73);
        org.junit.Assert.assertNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(medium76);
    }

    @Test
    public void test40327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40327");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setTemplateCreatedFrom(specimenTemplate4);
        putSpecimen0.Filtered = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity14 = null;
        putActivity13.PlannedActivity = plannedActivity14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity16.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity20 = postActivity16.setPlannedActivity(plannedActivity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag24 = samplingContextTag21.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag26 = samplingContextTag24.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str28 = samplingContextTag27.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str30 = samplingContextTag29.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        samplingContextTag29.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str34 = samplingContextTag33.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = samplingContextTag33.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag26, samplingContextTag27, samplingContextTag29, samplingContextTag36 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList38, samplingContextTagArray37);
        postActivity16.SamplingContextTags = samplingContextTagList38;
        putActivity13.SamplingContextTags = samplingContextTagList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = postActivity12.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList45, extendedAttributeArray44);
        postActivity43.ExtendedAttributes = extendedAttributeList45;
        postActivity42.ExtendedAttributes = extendedAttributeList45;
        putSpecimen0.ExtendedAttributes = extendedAttributeList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList51 = specimenWithObservations50.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations53 = specimenWithObservations50.setStatus(specimenViewStatusType52);
        specimenWithObservations50.Id = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime57 = activity56.getStartTime();
        java.time.OffsetDateTime offsetDateTime58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity59 = activity56.setStartTime(offsetDateTime58);
        specimenWithObservations50.Activity = activity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium61 = activity59.Medium;
        putSpecimen0.Activity = activity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory63 = putSpecimen0.getLaboratory();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList64 = putSpecimen0.Observations;
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(samplingContextTag24);
        org.junit.Assert.assertNotNull(samplingContextTag26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(samplingContextTag36);
        org.junit.Assert.assertNotNull(samplingContextTagArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(postActivity42);
        org.junit.Assert.assertNotNull(extendedAttributeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(extendedAttributeList51);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations53);
        org.junit.Assert.assertNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(activity59);
        org.junit.Assert.assertNull(medium61);
        org.junit.Assert.assertNull(laboratory63);
        org.junit.Assert.assertNull(observationList64);
    }

    @Test
    public void test40328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40328");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTag getTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTag();
        java.lang.String str1 = getTag0.getId();
        java.lang.String str2 = getTag0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTag getTag4 = getTag0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTag getTag6 = getTag0.setId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTag getTag8 = getTag0.setId("****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getTag4);
        org.junit.Assert.assertNotNull(getTag6);
        org.junit.Assert.assertNotNull(getTag8);
    }

    @Test
    public void test40329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40329");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard2 = getStandard0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard4 = getStandard2.setId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.Object obj5 = getStandard2.getResponseType();
        getStandard2.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNotNull(getStandard2);
        org.junit.Assert.assertNotNull(getStandard4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$StandardDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$StandardDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$StandardDefinition");
    }

    @Test
    public void test40330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40330");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getProjectIds();
        java.time.Instant instant2 = getExportSpecimens0.getAfter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition6 = tagDefinition4.setValueType(tagValueType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition8 = tagDefinition4.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition10 = tagDefinition8.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition12 = tagDefinition8.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj14 = timeAlignedDataServiceRequest13.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest13.setQueryFrom(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray23 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = putLocationTags19.setTagUniqueIds(strList24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = timeAlignedDataServiceRequest13.setTimeSeriesOutputUnitIds(strList24);
        tagDefinition12.PickListValues = strList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_29 = getGroupedObservationsV2_3.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation32 = importItemSamplingLocation30.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList33 = importItemSamplingLocation30.ItemComparison;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList34 = importItemSamplingLocation30.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str36 = deleteFieldVisits35.Sort;
        deleteFieldVisits35.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList39 = deleteFieldVisits35.getScheduleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList41 = getShippingContainers40.Search;
        java.util.List<java.lang.String> strList42 = getShippingContainers40.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        java.util.List<java.lang.String> strList60 = getObservationsV2_45.getLabReportIds();
        importItem44.Errors = getObservationsV2_45;
        java.lang.Object obj62 = importItem44.getExistingItem();
        importItem44.Input = "hi!";
        java.lang.Object obj65 = importItem44.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType66 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem67 = importItem44.setStatus(importItemStatusType66);
        importItem67.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate70.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate74 = specimenTemplate70.setId("hi!");
        java.lang.Boolean boolean75 = specimenTemplate74.getFiltered();
        importItem67.Item = specimenTemplate74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray82 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = getObservationsV2_79.setDataClassifications((java.util.List<java.lang.String>) strList83);
        postTag78.PickListValues = strList83;
        java.util.ArrayList<java.lang.String> strList87 = postTag78.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor88 = processor77.setInputTimeSeriesUniqueIds(strList87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem89 = importItem67.setWarningMessages((java.util.List<java.lang.String>) strList87);
        java.util.List<java.lang.String> strList90 = importItem67.getWarningMessages();
        getAnalysisMethods43.ObservedPropertyIds = strList90;
        getShippingContainers40.Search = strList90;
        deleteFieldVisits35.SamplingLocationIds = strList90;
        importItemSamplingLocation30.WarningMessages = strList90;
        getGroupedObservationsV2_29.Search = strList90;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens96 = getExportSpecimens0.setFieldVisitId(strList90);
        java.util.List<java.lang.String> strList97 = getExportSpecimens96.ActivityIds;
        java.util.List<java.lang.String> strList98 = getExportSpecimens96.getSpecimenStatuses();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(tagDefinition6);
        org.junit.Assert.assertNotNull(tagDefinition8);
        org.junit.Assert.assertNotNull(tagDefinition10);
        org.junit.Assert.assertNotNull(tagDefinition12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(putLocationTags26);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_29);
        org.junit.Assert.assertNotNull(importItemSamplingLocation32);
        org.junit.Assert.assertNull(importChangeItemList33);
        org.junit.Assert.assertNull(importChangeItemList34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + importItemStatusType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem67);
        org.junit.Assert.assertNotNull(specimenTemplate74);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_85);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(processor88);
        org.junit.Assert.assertNotNull(importItem89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(getExportSpecimens96);
        org.junit.Assert.assertNull(strList97);
        org.junit.Assert.assertNull(strList98);
    }

    @Test
    public void test40331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40331");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList9 = getObservationsV2_2.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType10 = null;
        getObservationsV2_2.FieldResultType = fieldResultType10;
        getObservationsV2_2.MaxNumericResultValue = 100.0d;
        java.lang.String str14 = getObservationsV2_2.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_2.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_2.setAnalysisMethodIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations24 = getExportSamplingLocations0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList20);
        java.lang.String str25 = getExportSamplingLocations0.Sort;
        getExportSamplingLocations0.Cursor = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.Integer int28 = getExportSamplingLocations0.Limit;
        java.time.Instant instant29 = getExportSamplingLocations0.EndModificationTime;
        java.lang.String str30 = getExportSamplingLocations0.getCustomId();
        java.lang.Integer int31 = getExportSamplingLocations0.getLimit();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSamplingLocations24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(int31);
    }

    @Test
    public void test40332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40332");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        java.lang.Integer int1 = searchResultAccessGroup0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList2 = searchResultAccessGroup0.getDomainObjects();
        java.lang.String str3 = searchResultAccessGroup0.Cursor;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(accessGroupList2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test40333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40333");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = laboratory1.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport6 = labReport0.setLaboratory(laboratory5);
        java.lang.String str7 = labReport6.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport9 = labReport6.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str11 = metricConfiguration10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty12.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = metricConfiguration10.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType16 = observedProperty12.ResultType;
        observedProperty12.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList22, importHistoryEventSimpleArray21);
        postObservedProperty19.ImportHistoryEventSimples = importHistoryEventSimpleList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = observedProperty12.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList22);
        labReport9.ImportHistoryEventSimples = importHistoryEventSimpleList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport28 = labReport9.setCaseNarrative("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str29 = labReport28.Id;
        org.junit.Assert.assertNotNull(laboratory5);
        org.junit.Assert.assertNotNull(labReport6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(labReport9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(metricConfiguration15);
        org.junit.Assert.assertNull(resultType16);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(observedProperty25);
        org.junit.Assert.assertNotNull(labReport28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test40334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40334");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading0.ReadingType = readingType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement4 = reading0.GroundWaterMeasurement;
        java.lang.String str5 = reading0.Manufacturer;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertTrue("'" + readingType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNull(groundWaterMeasurement4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test40335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40335");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setPlannedActivity(plannedActivity4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType6 = postActivity1.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList13 = specimenTemplate12.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList19 = specimenTemplate18.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate8, specimenTemplate11, specimenTemplate12, specimenTemplate16, specimenTemplate17, specimenTemplate18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21, specimenTemplateArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = postFieldVisitActivityWithTemplate7.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate23.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity1.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity1.Medium = medium27;
        medium27.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType32 = analyticalGroup31.getType();
        analyticalGroup31.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        java.lang.String str46 = analyticalGroupItem41.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem36, analyticalGroupItem38, analyticalGroupItem41, analyticalGroupItem47, analyticalGroupItem50, analyticalGroupItem52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58, analyticalGroupItemArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup60 = analyticalGroup35.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58);
        analyticalGroup31.AnalyticalGroupItems = analyticalGroupItemList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup31.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium64 = medium27.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute65 = putExtendedAttribute0.setAuditAttributes(auditAttributes62);
        java.lang.String str66 = putExtendedAttribute0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute68 = putExtendedAttribute0.setDescription("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.String str69 = putExtendedAttribute0.getDefaultValue();
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNull(activityType6);
        org.junit.Assert.assertNull(labInstructionTemplateList13);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNull(labInstructionTemplateList19);
        org.junit.Assert.assertNotNull(specimenTemplateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(analyticalGroupType32);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(analyticalGroup60);
        org.junit.Assert.assertNotNull(medium64);
        org.junit.Assert.assertNotNull(putExtendedAttribute65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(putExtendedAttribute68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test40336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40336");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.TagNames;
        java.lang.String str3 = locationDescriptionListServiceRequest0.LocationFolder;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str5 = deleteFieldVisits4.Sort;
        deleteFieldVisits4.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList8 = deleteFieldVisits4.getScheduleIds();
        java.util.List<java.lang.String> strList9 = deleteFieldVisits4.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        postTag10.PickListValues = strList15;
        java.util.ArrayList<java.lang.String> strList19 = postTag10.PickListValues;
        deleteFieldVisits4.PlanningStatuses = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest21 = locationDescriptionListServiceRequest0.setTagKeys(strList19);
        java.util.ArrayList<java.lang.String> strList22 = locationDescriptionListServiceRequest21.getTagKeys();
        java.util.ArrayList<java.lang.String> strList23 = locationDescriptionListServiceRequest21.getTagNames();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList24 = locationDescriptionListServiceRequest21.ExtendedFilters;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList25 = locationDescriptionListServiceRequest21.getExtendedFilters();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList26 = locationDescriptionListServiceRequest21.getExtendedFilters();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(extendedAttributeFilterList24);
        org.junit.Assert.assertNull(extendedAttributeFilterList25);
        org.junit.Assert.assertNull(extendedAttributeFilterList26);
    }

    @Test
    public void test40337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40337");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        java.lang.String str28 = getGroupedObservationsV2_26.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_30 = getGroupedObservationsV2_26.setMinNumericResultValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_32 = getGroupedObservationsV2_30.setMinNumericResultValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList34 = getObservationExportIIV2_33.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList36 = getChartDataV2_35.getProjectIds();
        java.util.List<java.lang.String> strList37 = getChartDataV2_35.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str39 = deleteFieldVisits38.Sort;
        deleteFieldVisits38.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        java.util.List<java.lang.String> strList57 = getObservationsV2_42.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_42.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList60 = getObservationsV2_59.getMedia();
        java.time.Instant instant61 = getObservationsV2_59.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        getObservationsV2_62.SpecimenIds = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = getObservationsV2_59.setProjectIds((java.util.List<java.lang.String>) strList65);
        deleteFieldVisits38.Search = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_70 = getChartDataV2_35.setSpecimenIds((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList72 = getFieldVisits71.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        java.util.ArrayList<java.lang.String> strList81 = putLocationTags80.TagUniqueIds;
        getFieldVisits71.ScheduleIds = strList81;
        java.lang.Integer int83 = getFieldVisits71.Limit;
        java.util.List<java.lang.String> strList84 = getFieldVisits71.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        getObservationsV2_85.SpecimenIds = strList88;
        getFieldVisits71.Search = strList88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_92 = getChartDataV2_70.setCollectionMethodIds((java.util.List<java.lang.String>) strList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_93 = getObservationExportIIV2_33.setIds((java.util.List<java.lang.String>) strList88);
        getGroupedObservationsV2_30.QualityControlTypes = strList88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_96 = getGroupedObservationsV2_30.setMaxNumericResultValue((java.lang.Double) 0.0d);
        java.lang.String str97 = getGroupedObservationsV2_96.getSort();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_30);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(instant61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_68);
        org.junit.Assert.assertNotNull(getChartDataV2_70);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(getChartDataV2_92);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_93);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_96);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test40338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40338");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit postUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit();
        postUnit0.BaseMultiplier = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit postUnit4 = postUnit0.setBaseMultiplier((java.lang.Double) 100.0d);
        java.lang.Double double5 = postUnit0.getBaseOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup6 = postUnit0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        putObservedProperty7.Name = "MinInstant";
        putObservedProperty7.CasNumber = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = putObservedProperty7.ResultType;
        java.lang.String str13 = net.servicestack.client.JsonServiceClient.GetSendMethod((java.lang.Object) putObservedProperty7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = putObservedProperty14.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty17 = putObservedProperty14.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putObservedProperty14.AuditAttributes;
        java.lang.Object obj19 = putObservedProperty14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str21 = labInstructionTemplate20.HoldingTime;
        labInstructionTemplate20.PreparationMethod = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = plannedFieldResult24.AuditAttributes;
        plannedFieldResult24.Id = "'.'SSSSSSS";
        java.lang.String str28 = plannedFieldResult24.DeviceType;
        java.lang.String str29 = plannedFieldResult24.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str31 = metricConfiguration30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty32.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration35 = metricConfiguration30.setObservedProperty(observedProperty32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType36 = observedProperty32.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup38 = postObservedProperty37.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit40 = null;
        quantity39.Unit = unit40;
        postObservedProperty37.LowerLimit = quantity39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity43 = postObservedProperty37.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit44 = quantity43.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty45 = observedProperty32.setUpperLimit(quantity43);
        plannedFieldResult24.ObservedProperty = observedProperty45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate47 = labInstructionTemplate20.setObservedProperty(observedProperty45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup48.CustomId = "https";
        observedProperty45.UnitGroup = unitGroup48;
        putObservedProperty14.UnitGroup = unitGroup48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty53 = putObservedProperty7.setUnitGroup(unitGroup48);
        java.lang.String str54 = unitGroup48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnit postUnit55 = postUnit0.setUnitGroup(unitGroup48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = postUnit0.getAuditAttributes();
        org.junit.Assert.assertNotNull(postUnit4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(unitGroup6);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNull(quantity15);
        org.junit.Assert.assertNotNull(putObservedProperty17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(auditAttributes25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "'.'SSSSSSS" + "'", str29, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(metricConfiguration35);
        org.junit.Assert.assertNull(resultType36);
        org.junit.Assert.assertNull(unitGroup38);
        org.junit.Assert.assertNotNull(quantity43);
        org.junit.Assert.assertNull(unit44);
        org.junit.Assert.assertNotNull(observedProperty45);
        org.junit.Assert.assertNotNull(labInstructionTemplate47);
        org.junit.Assert.assertNotNull(putObservedProperty53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(postUnit55);
        org.junit.Assert.assertNull(auditAttributes56);
    }

    @Test
    public void test40339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40339");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        postActivity0.ExtendedAttributes = extendedAttributeList5;
        java.time.OffsetDateTime offsetDateTime7 = postActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit8 = postActivity0.getFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = postActivity0.Device;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList10 = postActivity0.ExtendedAttributes;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(fieldVisit8);
        org.junit.Assert.assertNull(device9);
        org.junit.Assert.assertNull(extendedAttributeList10);
    }

    @Test
    public void test40340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40340");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary5.DifferenceDuringVisit = doubleWithDisplay6;
        reading2.Value = doubleWithDisplay6;
        velocityDepthObservation0.ObservationIntervalInSeconds = doubleWithDisplay6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation11 = velocityDepthObservation0.setRevolutionCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = velocityDepthObservation0.Velocity;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(velocityDepthObservation11);
        org.junit.Assert.assertNull(quantityWithDisplay12);
    }

    @Test
    public void test40341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40341");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        java.lang.String str1 = putDetectioncondition0.CustomId;
        putDetectioncondition0.Description = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.lang.String str4 = putDetectioncondition0.getDescription();
        java.lang.Object obj5 = putDetectioncondition0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str4, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
    }

    @Test
    public void test40342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40342");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder();
        java.lang.String str1 = locationFolder0.ParentLocationFolderPath;
        java.lang.String str2 = locationFolder0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder4 = locationFolder0.setParentLocationFolderPath("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolder locationFolder6 = locationFolder0.setParentLocationFolderUniqueId("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        locationFolder6.LocationFolderName = "MaxInstant";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(locationFolder4);
        org.junit.Assert.assertNotNull(locationFolder6);
    }

    @Test
    public void test40343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40343");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX;
        getExportObservations0.Format = getExportObservationsFormatType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = getExportObservations0.setLimit((java.lang.Integer) 2);
        java.time.Instant instant9 = getExportObservations8.getEndResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.util.List<java.lang.String> strList11 = postUser10.Roles;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = null;
        postUser10.UserProfile = userProfile12;
        java.util.List<java.lang.String> strList14 = postUser10.Roles;
        java.lang.String str15 = postUser10.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser17 = postUser10.setId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = reading19.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading22 = reading19.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading24 = reading22.setModel("MaxInstant");
        java.lang.Integer int25 = reading24.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField29 = extendedAttributeField27.setDisplayName("");
        java.lang.Boolean boolean30 = extendedAttributeField29.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj32 = timeAlignedDataServiceRequest31.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_33.setDataClassifications((java.util.List<java.lang.String>) strList37);
        getObservationsV2_39.DepthUnitCustomId = "hi!";
        java.lang.String str42 = getObservationsV2_39.CustomId;
        java.util.List<java.lang.String> strList43 = getObservationsV2_39.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_39.setMedia((java.util.List<java.lang.String>) strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str61 = getObservationsV2_60.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        getObservationsV2_62.SpecimenIds = strList65;
        getObservationsV2_60.ProjectIds = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_39.setObservedPropertyIds((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest70 = timeAlignedDataServiceRequest31.setTimeSeriesOutputUnitIds(strList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField71 = extendedAttributeField29.setValueOptions((java.util.List<java.lang.String>) strList65);
        putBulkEditResultGradesV2_26.AnalysisMethodSimpleIds = strList65;
        reading24.ReadingQualifiers = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty74 = importItemObservedProperty18.setFields((java.util.List<java.lang.String>) strList65);
        java.lang.String str75 = importItemObservedProperty18.getInput();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty76 = importItemObservedProperty18.ExistingItem;
        java.util.List<java.lang.String> strList77 = importItemObservedProperty18.Fields;
        postUser17.AccessGroups = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations79 = getExportObservations8.setDataClassifications(strList77);
        getExportObservations79.MinNumericResultValue = (-1.0d);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertTrue("'" + getExportObservationsFormatType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX + "'", getExportObservationsFormatType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX));
        org.junit.Assert.assertNotNull(getExportObservations8);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(postUser17);
        org.junit.Assert.assertNull(doubleWithDisplay20);
        org.junit.Assert.assertNotNull(reading22);
        org.junit.Assert.assertNotNull(reading24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(extendedAttributeField29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest70);
        org.junit.Assert.assertNotNull(extendedAttributeField71);
        org.junit.Assert.assertNotNull(importItemObservedProperty74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(observedProperty76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(getExportObservations79);
    }

    @Test
    public void test40344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40344");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.Object obj1 = importChangeItem0.getRight();
        java.lang.String str2 = importChangeItem0.getPropertyName();
        importChangeItem0.PropertyName = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.Object obj5 = importChangeItem0.getLeft();
        java.lang.Object obj6 = importChangeItem0.getRight();
        importChangeItem0.PropertyName = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test40345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40345");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostFieldDataPluginFile postFieldDataPluginFile0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostFieldDataPluginFile();
        java.lang.Object obj1 = postFieldDataPluginFile0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile2 = null;
        postFieldDataPluginFile0.File = iHttpFile2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile4 = postFieldDataPluginFile0.File;
        java.lang.Object obj5 = postFieldDataPluginFile0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile6 = postFieldDataPluginFile0.File;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertNull(iHttpFile4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPlugin");
        org.junit.Assert.assertNull(iHttpFile6);
    }

    @Test
    public void test40346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40346");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        java.lang.Boolean boolean2 = postSpecimen0.Filtered;
        java.lang.Integer int3 = postSpecimen0.getNumberOfReceivedObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = analyticalGroup4.getType();
        analyticalGroup4.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup9 = analyticalGroup4.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.Integer int10 = analyticalGroup4.NumberOfObservedPropertiesInGroupItems;
        postSpecimen0.AnalyticalGroup = analyticalGroup4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen13 = postSpecimen0.setAuditAttributes(auditAttributes12);
        java.lang.String str14 = postSpecimen13.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen16 = postSpecimen13.setFiltered((java.lang.Boolean) false);
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(analyticalGroupType5);
        org.junit.Assert.assertNotNull(analyticalGroup9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(postSpecimen13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(postSpecimen16);
    }

    @Test
    public void test40347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40347");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList9 = getObservationsV2_2.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType10 = null;
        getObservationsV2_2.FieldResultType = fieldResultType10;
        getObservationsV2_2.MaxNumericResultValue = 100.0d;
        java.lang.String str14 = getObservationsV2_2.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_2.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_2.setAnalysisMethodIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations24 = getExportSamplingLocations0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList20);
        java.util.List<java.lang.String> strList25 = getExportSamplingLocations0.getSamplingLocationGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        getObservationsV2_26.SpecimenIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        getObservationsV2_26.QualityControlTypes = strList37;
        getExportSamplingLocations0.SamplingLocationGroupIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary44.Reviewer = "";
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary44.MeasurementTime = instant47;
        postRecurringReport43.NextGenerationDate = instant47;
        java.time.Instant instant50 = postRecurringReport43.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset51 = statisticalDateTimeOffset42.setDateTimeOffset(instant50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations52 = getExportSamplingLocations0.setEndModificationTime(instant50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations54 = getExportSamplingLocations0.setCustomId("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        java.util.List<java.lang.String> strList55 = getExportSamplingLocations0.getLocationTypeIds();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSamplingLocations24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset51);
        org.junit.Assert.assertNotNull(getExportSamplingLocations52);
        org.junit.Assert.assertNotNull(getExportSamplingLocations54);
        org.junit.Assert.assertNull(strList55);
    }

    @Test
    public void test40348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40348");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit postUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase2 = postUnit0.setSymbol("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase4 = postUnit0.setBaseOffset((java.lang.Double) 100.0d);
        java.lang.Double double5 = postUnit0.BaseMultiplier;
        postUnit0.Symbol = "http";
        java.lang.String str8 = postUnit0.getUnitIdentifier();
        java.lang.String str9 = postUnit0.SingularName;
        org.junit.Assert.assertNotNull(unitBase2);
        org.junit.Assert.assertNotNull(unitBase4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test40349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40349");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = postAnalysisMethod0.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = postAnalysisMethod0.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod7 = postAnalysisMethod0.setName("https");
        java.lang.String str8 = postAnalysisMethod0.MethodId;
        java.lang.String str9 = postAnalysisMethod0.Id;
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postAnalysisMethod3);
        org.junit.Assert.assertNotNull(postAnalysisMethod5);
        org.junit.Assert.assertNotNull(postAnalysisMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test40350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40350");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics11 = observation6.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList14, extendedAttributeArray13);
        postActivity12.ExtendedAttributes = extendedAttributeList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation6.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType18 = observation6.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = resultDetectionCondition20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition23 = resultDetectionCondition20.setId("/AQUARIUS");
        java.lang.String str24 = resultDetectionCondition20.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition26 = resultDetectionCondition20.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult27 = numericResult19.setDetectionCondition(resultDetectionCondition26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult29 = numericResult27.setNullMeasureQualifier(nullMeasureQualifier28);
        observation6.NumericResult = numericResult29;
        java.lang.String str31 = numericResult29.getRoundedValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation34 = observation32.setPlannedFieldResult(plannedFieldResult33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction35 = null;
        observation34.LabInstruction = labInstruction35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = observation34.setStatistics(observationStatistics37);
        java.time.OffsetDateTime offsetDateTime39 = observation38.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList40 = observation38.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation42 = observation38.setObservedProperty(observedProperty41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics43 = observation38.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList46, extendedAttributeArray45);
        postActivity44.ExtendedAttributes = extendedAttributeList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation49 = observation38.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType50 = observation38.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = resultDetectionCondition52.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition55 = resultDetectionCondition52.setId("/AQUARIUS");
        java.lang.String str56 = resultDetectionCondition52.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition58 = resultDetectionCondition52.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult59 = numericResult51.setDetectionCondition(resultDetectionCondition58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult61 = numericResult59.setNullMeasureQualifier(nullMeasureQualifier60);
        observation38.NumericResult = numericResult61;
        java.lang.String str63 = numericResult61.getRoundedValue();
        numericResult61.RoundingSpecification = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity66.LoggerFileName = "hi!";
        java.lang.String str69 = postActivity66.LoggerFileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj71 = postObservedProperty70.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate74 = postFieldVisitActivityWithTemplate72.setAuditAttributes(auditAttributes73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult76 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation77 = observation75.setPlannedFieldResult(plannedFieldResult76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction78 = null;
        observation77.LabInstruction = labInstruction78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics80 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation81 = observation77.setStatistics(observationStatistics80);
        java.time.OffsetDateTime offsetDateTime82 = observation81.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit84 = null;
        quantity83.Unit = unit84;
        observation81.Depth = quantity83;
        postFieldVisitActivityWithTemplate74.Depth = quantity83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit88 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity89 = quantity83.setUnit(unit88);
        postObservedProperty70.LowerLimit = quantity83;
        postActivity66.Depth = quantity83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit92 = quantity83.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult93 = numericResult61.setMethodDetectionLevel(quantity83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity94 = numericResult93.getMethodDetectionLevel();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult95 = numericResult29.setLowerMethodReportingLimit(quantity94);
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(observationStatistics11);
        org.junit.Assert.assertNotNull(extendedAttributeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(qualityControlType18);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(resultDetectionCondition23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(resultDetectionCondition26);
        org.junit.Assert.assertNotNull(numericResult27);
        org.junit.Assert.assertNotNull(numericResult29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(observation34);
        org.junit.Assert.assertNotNull(observation38);
        org.junit.Assert.assertNull(offsetDateTime39);
        org.junit.Assert.assertNull(importHistoryEventSimpleList40);
        org.junit.Assert.assertNotNull(observation42);
        org.junit.Assert.assertNull(observationStatistics43);
        org.junit.Assert.assertNotNull(extendedAttributeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(observation49);
        org.junit.Assert.assertNull(qualityControlType50);
        org.junit.Assert.assertNull(auditAttributes53);
        org.junit.Assert.assertNotNull(resultDetectionCondition55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(resultDetectionCondition58);
        org.junit.Assert.assertNotNull(numericResult59);
        org.junit.Assert.assertNotNull(numericResult61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate74);
        org.junit.Assert.assertNotNull(observation77);
        org.junit.Assert.assertNotNull(observation81);
        org.junit.Assert.assertNull(offsetDateTime82);
        org.junit.Assert.assertNotNull(quantity89);
        org.junit.Assert.assertNull(unit92);
        org.junit.Assert.assertNotNull(numericResult93);
        org.junit.Assert.assertNotNull(quantity94);
        org.junit.Assert.assertNotNull(numericResult95);
    }

    @Test
    public void test40351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40351");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList1 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType2 = fieldVisit0.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule3 = fieldVisit0.Schedule;
        java.lang.String str4 = fieldVisit0.Notes;
        java.time.OffsetDateTime offsetDateTime5 = fieldVisit0.StartTime;
        org.junit.Assert.assertNull(domainObjectAttachmentList1);
        org.junit.Assert.assertNull(planningStatusType2);
        org.junit.Assert.assertNull(schedule3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(offsetDateTime5);
    }

    @Test
    public void test40352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40352");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser2 = deleteUser0.setUniqueId("'.'SSSSSSS");
        java.lang.String str3 = deleteUser0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUser deleteUser5 = deleteUser0.setUniqueId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNotNull(deleteUser2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "'.'SSSSSSS" + "'", str3, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(deleteUser5);
    }

    @Test
    public void test40353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40353");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen2.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = putSpecimen2.getShippingContainer();
        java.lang.String str5 = putSpecimen2.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen7 = putSpecimen2.setDescription("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        putSpecimen7.Id = "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****";
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(shippingContainer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putSpecimen7);
    }

    @Test
    public void test40354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40354");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata2 = gradeMetadata0.setColor("ZZZZZ");
        java.lang.String str3 = gradeMetadata0.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata5 = gradeMetadata0.setIdentifier("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata7 = gradeMetadata5.setColor("2021.4.62.0");
        org.junit.Assert.assertNotNull(gradeMetadata2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(gradeMetadata5);
        org.junit.Assert.assertNotNull(gradeMetadata7);
    }

    @Test
    public void test40355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40355");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata2 = qualifierMetadata0.setDisplayName("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata4 = qualifierMetadata2.setDisplayName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.lang.String str5 = qualifierMetadata4.DisplayName;
        java.lang.String str6 = qualifierMetadata4.getIdentifier();
        java.lang.String str7 = qualifierMetadata4.getCode();
        java.lang.String str8 = qualifierMetadata4.Identifier;
        org.junit.Assert.assertNotNull(qualifierMetadata2);
        org.junit.Assert.assertNotNull(qualifierMetadata4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str5, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test40356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40356");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = plannedFieldResult3.AuditAttributes;
        plannedFieldResult3.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_7 = postObservationV2_2.setPlannedFieldResult(plannedFieldResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        analysisMethodSimple8.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str11 = analysisMethodSimple8.getMethodId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_12 = postObservationV2_2.setAnalysisMethod(analysisMethodSimple8);
        java.lang.String str13 = analysisMethodSimple8.Id;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNotNull(postObservationV2_7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postObservationV2_12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test40357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40357");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setPlannedActivity(plannedActivity4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType6 = postActivity1.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList13 = specimenTemplate12.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList19 = specimenTemplate18.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate8, specimenTemplate11, specimenTemplate12, specimenTemplate16, specimenTemplate17, specimenTemplate18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21, specimenTemplateArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = postFieldVisitActivityWithTemplate7.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate23.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity1.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity1.Medium = medium27;
        medium27.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType32 = analyticalGroup31.getType();
        analyticalGroup31.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        java.lang.String str46 = analyticalGroupItem41.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem36, analyticalGroupItem38, analyticalGroupItem41, analyticalGroupItem47, analyticalGroupItem50, analyticalGroupItem52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58, analyticalGroupItemArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup60 = analyticalGroup35.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58);
        analyticalGroup31.AnalyticalGroupItems = analyticalGroupItemList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup31.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium64 = medium27.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute65 = putExtendedAttribute0.setAuditAttributes(auditAttributes62);
        putExtendedAttribute65.Mandatory = true;
        java.lang.String str68 = putExtendedAttribute65.getCustomId();
        putExtendedAttribute65.Mandatory = false;
        java.lang.String str71 = putExtendedAttribute65.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute73 = putExtendedAttribute65.setCustomId("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        java.lang.String str74 = putExtendedAttribute73.getDescription();
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNull(activityType6);
        org.junit.Assert.assertNull(labInstructionTemplateList13);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNull(labInstructionTemplateList19);
        org.junit.Assert.assertNotNull(specimenTemplateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(analyticalGroupType32);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(analyticalGroup60);
        org.junit.Assert.assertNotNull(medium64);
        org.junit.Assert.assertNotNull(putExtendedAttribute65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(putExtendedAttribute73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test40358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40358");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address2 = address0.setStreetName("2021.8.9990");
        java.lang.String str3 = address2.getCountyCode();
        java.lang.String str4 = address2.getCountyCode();
        address2.PostalCode = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNotNull(address2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test40359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40359");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        java.time.Instant instant10 = locationDescriptionListServiceResponse1.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = getActivities0.setToStartTime(instant10);
        java.lang.String str12 = getActivities11.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList14 = getObservationsV2_13.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        getObservationsV2_15.SpecimenIds = strList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        getObservationsV2_15.QualityControlTypes = strList26;
        getObservationsV2_13.ResultGrades = strList26;
        getActivities11.Media = strList26;
        java.util.List<java.lang.String> strList32 = getActivities11.ActivityTemplateId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.QualityControlTypes = strList44;
        java.util.List<java.lang.String> strList48 = getObservationsV2_33.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList49 = getObservationsV2_33.DataClassifications;
        java.util.List<java.lang.String> strList50 = getObservationsV2_33.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_53.setDataClassifications((java.util.List<java.lang.String>) strList57);
        getObservationsV2_59.DepthUnitCustomId = "hi!";
        java.lang.String str62 = getObservationsV2_59.CustomId;
        java.util.List<java.lang.String> strList63 = getObservationsV2_59.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray74 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = putLocationTags70.setTagUniqueIds(strList75);
        getObservationsV2_64.QualityControlTypes = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_59.setMedia((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str81 = getObservationsV2_80.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        getObservationsV2_82.SpecimenIds = strList85;
        getObservationsV2_80.ProjectIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_89 = getObservationsV2_59.setObservedPropertyIds((java.util.List<java.lang.String>) strList85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest90 = timeAlignedDataServiceRequest51.setTimeSeriesOutputUnitIds(strList85);
        getObservationsV2_33.LabReportIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities92 = getActivities11.setIds((java.util.List<java.lang.String>) strList85);
        java.util.List<java.lang.String> strList93 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities94 = getActivities92.setSamplingLocationIds(strList93);
        java.util.List<java.lang.String> strList95 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities96 = getActivities94.setProjectIds(strList95);
        java.lang.String str97 = getActivities94.Sort;
        java.lang.String str98 = getActivities94.Sort;
        java.util.List<java.lang.String> strList99 = getActivities94.ActivityTypes;
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(getActivities11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(putLocationTags77);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_89);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest90);
        org.junit.Assert.assertNotNull(getActivities92);
        org.junit.Assert.assertNotNull(getActivities94);
        org.junit.Assert.assertNotNull(getActivities96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertNull(strList99);
    }

    @Test
    public void test40360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40360");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        java.time.Instant instant1 = getSamplingLocations0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        java.time.Instant instant11 = postRecurringReport4.getNextGenerationDate();
        java.lang.String str12 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant11);
        metadataChangeTransactionListServiceRequest3.QueryFrom = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest14 = downchainProcessorListByRatingModelServiceRequest2.setQueryTo(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest16 = downchainProcessorListByRatingModelServiceRequest2.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant18 = qualifier17.DateApplied;
        java.lang.String str19 = qualifier17.User;
        java.lang.String str20 = qualifier17.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = qualifier17.setDateApplied(instant24);
        java.time.Instant instant28 = qualifier27.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest29 = downchainProcessorListByRatingModelServiceRequest2.setQueryFrom(instant28);
        java.time.Instant instant30 = downchainProcessorListByRatingModelServiceRequest29.getQueryFrom();
        java.time.Instant instant31 = downchainProcessorListByRatingModelServiceRequest29.getQueryFrom();
        getSamplingLocations0.EndModificationTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str34 = approval33.User;
        approval33.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval38 = approval33.setApprovalLevel((java.lang.Integer) (-1));
        approval38.LevelDescription = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double42 = putBulkEditResultGradesV2_41.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        java.util.List<java.lang.String> strList58 = getObservationsV2_43.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList59 = getObservationsV2_43.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType60 = getObservationsV2_43.FieldResultType;
        java.time.Instant instant61 = getObservationsV2_43.getEndObservedTime();
        java.lang.String str62 = getObservationsV2_43.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray67 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags63.setTagUniqueIds(strList68);
        java.util.ArrayList<java.lang.String> strList71 = putLocationTags70.TagUniqueIds;
        getObservationsV2_43.ProjectIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_73 = putBulkEditResultGradesV2_41.setSearch((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_75 = putBulkEditResultGradesV2_73.setDepthValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark78 = locationRemark76.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark81 = locationRemark79.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse84 = locationDescriptionListServiceResponse82.setNextToken(instant83);
        locationRemark81.FromTime = instant83;
        locationRemark78.CreateTime = instant83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_87 = putBulkEditResultGradesV2_75.setEndModificationTime(instant83);
        approval38.DateAppliedUtc = instant83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations89 = getSamplingLocations0.setStartModificationTime(instant83);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str12, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest14);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(qualifier27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(approval38);
        org.junit.Assert.assertNull(double42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(fieldResultType60);
        org.junit.Assert.assertNull(instant61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_73);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_75);
        org.junit.Assert.assertNotNull(locationRemark78);
        org.junit.Assert.assertNotNull(locationRemark81);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse84);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_87);
        org.junit.Assert.assertNotNull(getSamplingLocations89);
    }

    @Test
    public void test40361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40361");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType1 = null;
        uncertainty0.UncertaintyType = uncertaintyType1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = uncertainty0.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty4.QualitativeUncertainty = qualitativeUncertaintyType5;
        uncertainty0.QualitativeUncertainty = qualitativeUncertaintyType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty9 = uncertainty0.setQualitativeUncertainty(qualitativeUncertaintyType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType11 = null;
        uncertainty10.UncertaintyType = uncertaintyType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = uncertainty10.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty14.QualitativeUncertainty = qualitativeUncertaintyType15;
        uncertainty10.QualitativeUncertainty = qualitativeUncertaintyType15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty19 = uncertainty10.setQualitativeUncertainty(qualitativeUncertaintyType18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty10.QualitativeUncertainty = qualitativeUncertaintyType20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty22 = uncertainty0.setQualitativeUncertainty(qualitativeUncertaintyType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = uncertainty0.QuantitativeUncertainty;
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty9);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty19);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty22);
        org.junit.Assert.assertNull(doubleWithDisplay23);
    }

    @Test
    public void test40362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40362");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList6 = getExportSpecimens5.getProjectIds();
        java.util.List<java.lang.String> strList7 = getExportSpecimens5.FieldVisitId;
        java.util.List<java.lang.String> strList8 = getExportSpecimens5.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList10 = getSpecimens9.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens12 = getSpecimens9.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str14 = getChartDataV2_13.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_16 = getChartDataV2_13.setFilterId("");
        java.util.List<java.lang.String> strList17 = getChartDataV2_13.ResultGrades;
        getChartDataV2_13.MinNumericResultValue = 100.0d;
        java.lang.Double double20 = getChartDataV2_13.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = getObservationsV2_22.setDataClassifications((java.util.List<java.lang.String>) strList26);
        postTag21.PickListValues = strList26;
        getChartDataV2_13.SamplingContextTagIds = strList26;
        getSpecimens9.ActivityTypes = strList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens32 = getExportSpecimens5.setActivityIds((java.util.List<java.lang.String>) strList26);
        getExportObservations0.ObservedPropertyIds = strList26;
        java.lang.String str34 = getExportObservations0.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType35 = getExportObservations0.Format;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(getSpecimens12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getChartDataV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(double20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_28);
        org.junit.Assert.assertNotNull(getExportSpecimens32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(getExportObservationsFormatType35);
    }

    @Test
    public void test40363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40363");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_4 = getObservationExportIIV2_0.setNumericResultValue((java.lang.Double) 0.0d);
        java.util.List<java.lang.String> strList5 = null;
        getObservationExportIIV2_4.ResultStatuses = strList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_8 = getObservationExportIIV2_4.setFieldVisitId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest11 = trendLineAnalysisServiceRequest9.setType(trendLineAnalysisType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary12.setMeanGageHeightMethod("hi!");
        java.lang.String str15 = dischargeSummary14.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary14.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant21 = sensor20.getLastModifiedUtc();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor23 = sensor20.setLastModifiedUtc(instant22);
        java.time.Instant instant24 = sensor20.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest25 = timeAlignedDataServiceRequest18.setQueryTo(instant24);
        dischargeSummary17.MeasurementStartTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest27 = trendLineAnalysisServiceRequest9.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_28 = getObservationExportIIV2_4.setEndObservedTime(instant24);
        java.util.List<java.lang.String> strList29 = getObservationExportIIV2_28.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_32.setDataClassifications((java.util.List<java.lang.String>) strList36);
        postTag31.PickListValues = strList36;
        java.util.ArrayList<java.lang.String> strList40 = postTag31.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor41 = processor30.setInputTimeSeriesUniqueIds(strList40);
        processor41.InputRatingModelIdentifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor45 = processor41.setDescription("ZZZZZ");
        java.lang.String str46 = processor45.getProcessorType();
        processor45.InputRatingModelIdentifier = "/AQUARIUS/Acquisition/v2";
        java.util.ArrayList<java.lang.String> strList49 = processor45.InputTimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_50 = getObservationExportIIV2_28.setSpecimenIds((java.util.List<java.lang.String>) strList49);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_4);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_8);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest11);
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(sensor23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest25);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest27);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(processor41);
        org.junit.Assert.assertNotNull(processor45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_50);
    }

    @Test
    public void test40364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40364");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.getOptionalIssuerDiscoveryUri();
        putOpenIdConnectRelyingPartyConfiguration0.IdentifierClaim = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase6 = putOpenIdConnectRelyingPartyConfiguration0.setRedirectUri("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList7 = openIdConnectRelyingPartyConfigurationBase6.Scopes;
        openIdConnectRelyingPartyConfigurationBase6.DisplayName = "POST";
        openIdConnectRelyingPartyConfigurationBase6.OptionalIssuerDiscoveryUri = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        openIdConnectRelyingPartyConfigurationBase6.ClientSecret = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test40365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40365");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField3 = extendedAttributeField1.setDisplayName("");
        java.lang.Boolean boolean4 = extendedAttributeField3.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str35 = getObservationsV2_34.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        getObservationsV2_34.ProjectIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_13.setObservedPropertyIds((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest5.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField3.setValueOptions((java.util.List<java.lang.String>) strList39);
        putBulkEditResultGradesV2_0.AnalysisMethodSimpleIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_48 = putBulkEditResultGradesV2_0.setNumericResultValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList50 = importItemObject49.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList52 = getSpecimens51.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens54 = getSpecimens51.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str56 = getChartDataV2_55.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_55.setFilterId("");
        java.util.List<java.lang.String> strList59 = getChartDataV2_55.ResultGrades;
        getChartDataV2_55.MinNumericResultValue = 100.0d;
        java.lang.Double double62 = getChartDataV2_55.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_64.setDataClassifications((java.util.List<java.lang.String>) strList68);
        postTag63.PickListValues = strList68;
        getChartDataV2_55.SamplingContextTagIds = strList68;
        getSpecimens51.ActivityTypes = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject74 = importItemObject49.setExistingItem((java.lang.Object) strList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_75 = putBulkEditResultGradesV2_48.setIds((java.util.List<java.lang.String>) strList68);
        putBulkEditResultGradesV2_75.ActivityCustomId = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_79 = putBulkEditResultGradesV2_75.setCursor("multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****");
        java.util.List<java.lang.String> strList80 = putBulkEditResultGradesV2_79.getMedia();
        org.junit.Assert.assertNotNull(extendedAttributeField3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(getSpecimens54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(double62);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNotNull(importItemObject74);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_75);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_79);
        org.junit.Assert.assertNull(strList80);
    }

    @Test
    public void test40366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40366");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen8.Activity = activity9;
        java.lang.String str11 = activity9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_12 = putObservationV2_2.setActivity(activity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType14 = importItemSpecimen13.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList16 = importItemObject15.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList18, importChangeItemArray17);
        importItemObject15.ItemComparison = importChangeItemList18;
        java.lang.String str21 = importItemObject15.Input;
        java.lang.String str22 = importItemObject15.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        java.util.List<java.lang.String> strList39 = getObservationsV2_24.getLabReportIds();
        importItem23.Errors = getObservationsV2_24;
        java.lang.Object obj41 = importItem23.getExistingItem();
        importItem23.Input = "hi!";
        java.lang.Object obj44 = importItem23.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem46 = importItem23.setStatus(importItemStatusType45);
        importItemObject15.Status = importItemStatusType45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen48 = importItemSpecimen13.setStatus(importItemStatusType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList50 = importItemObject49.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList52, importChangeItemArray51);
        importItemObject49.ItemComparison = importChangeItemList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray59 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = putLocationTags55.setTagUniqueIds(strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject63 = importItemObject49.setExistingItem((java.lang.Object) putLocationTags55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        importItemObject63.WarningMessages = strList67;
        importItemSpecimen48.WarningMessages = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen73 = importItemSpecimen48.setInput("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        importItemSpecimen48.ExistingItem = specimen74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer76 = specimen74.getShippingContainer();
        specimen74.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen80 = specimen74.setNumberOfRequestedObservations((java.lang.Integer) 1);
        putObservationV2_12.Specimen = specimen74;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(putObservationV2_12);
        org.junit.Assert.assertNull(importItemStatusType14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(importChangeItemArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + importItemStatusType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem46);
        org.junit.Assert.assertNotNull(importItemSpecimen48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(importChangeItemArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putLocationTags62);
        org.junit.Assert.assertNotNull(importItemObject63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(importItemSpecimen73);
        org.junit.Assert.assertNull(shippingContainer76);
        org.junit.Assert.assertNotNull(specimen80);
    }

    @Test
    public void test40367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40367");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType();
        java.lang.String str1 = locationType0.getDescription();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField> extendedAttributeFieldList2 = locationType0.ExtendedAttributeFields;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField> extendedAttributeFieldList3 = locationType0.ExtendedAttributeFields;
        java.lang.String str4 = locationType0.getAttributeTableName();
        java.lang.String str5 = locationType0.TypeName;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField> extendedAttributeFieldList6 = locationType0.ExtendedAttributeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(extendedAttributeFieldList2);
        org.junit.Assert.assertNull(extendedAttributeFieldList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeFieldList6);
    }

    @Test
    public void test40368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40368");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        java.lang.String str1 = unitMetadata0.getBaseOffset();
        java.lang.String str2 = unitMetadata0.UniqueId;
        java.lang.String str3 = unitMetadata0.getBaseMultiplier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata5 = unitMetadata0.setGroupIdentifier("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        unitMetadata5.Symbol = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(unitMetadata5);
    }

    @Test
    public void test40369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40369");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        java.util.List<java.lang.String> strList1 = getGroupedObservationsV2_0.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType3 = samplingPlanPlannedActivityRecurrence2.TemporalExpression;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType4 = samplingPlanPlannedActivityRecurrence2.TemporalExpression;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType5 = samplingPlanPlannedActivityRecurrence2.RecurrenceFrequency;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence7 = samplingPlanPlannedActivityRecurrence2.setTemporalExpression(temporalExpressionType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType8 = samplingPlanPlannedActivityRecurrence2.RecurrenceFrequency;
        java.util.List<java.lang.String> strList9 = samplingPlanPlannedActivityRecurrence2.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList11 = getExportSpecimens10.getProjectIds();
        java.util.List<java.lang.String> strList12 = getExportSpecimens10.FieldVisitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        dischargeSummary15.MeasurementTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse14.setNextToken(instant19);
        java.time.Instant instant23 = locationDescriptionListServiceResponse14.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities24 = getActivities13.setToStartTime(instant23);
        java.lang.String str25 = getActivities24.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        getObservationsV2_28.SpecimenIds = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        getObservationsV2_28.QualityControlTypes = strList39;
        getObservationsV2_26.ResultGrades = strList39;
        getActivities24.Media = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens45 = getExportSpecimens10.setSamplingLocationIds((java.util.List<java.lang.String>) strList39);
        samplingPlanPlannedActivityRecurrence2.MonthsOfYear = strList39;
        getGroupedObservationsV2_0.Ids = strList39;
        java.util.List<java.lang.String> strList48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_49 = getGroupedObservationsV2_0.setActivityTypes(strList48);
        java.lang.String str50 = getGroupedObservationsV2_49.DetectionCondition;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(temporalExpressionType3);
        org.junit.Assert.assertNull(temporalExpressionType4);
        org.junit.Assert.assertNull(recurrenceFrequencyType5);
        org.junit.Assert.assertTrue("'" + temporalExpressionType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH + "'", temporalExpressionType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence7);
        org.junit.Assert.assertNull(recurrenceFrequencyType8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(getActivities24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(getExportSpecimens45);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test40370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40370");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setSpecimen(specimenNestedInActivity1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = observationMinimal0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionMinimal labInstructionMinimal4 = observationMinimal0.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon6 = taxonomicResult5.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = taxonomicResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal8 = observationMinimal0.setTaxonomicResult(taxonomicResult5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        java.lang.String str10 = categoricalResult9.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal11 = observationMinimal8.setCategoricalResult(categoricalResult9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult13 = categoricalResult9.setValue("****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue15 = categoricalResult14.getFixedValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult17 = categoricalResult14.setType("hi!");
        java.lang.String str18 = categoricalResult14.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult20 = categoricalResult14.setType("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        java.lang.String str22 = categoricalValue21.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity25 = null;
        putActivity24.PlannedActivity = plannedActivity25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity27.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity31 = postActivity27.setPlannedActivity(plannedActivity30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str33 = samplingContextTag32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag32.setAuditAttributes(auditAttributes34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag37 = samplingContextTag35.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str39 = samplingContextTag38.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str41 = samplingContextTag40.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        samplingContextTag40.AuditAttributes = auditAttributes42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str45 = samplingContextTag44.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag47 = samplingContextTag44.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag37, samplingContextTag38, samplingContextTag40, samplingContextTag47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList49, samplingContextTagArray48);
        postActivity27.SamplingContextTags = samplingContextTagList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity52 = putActivity24.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity54 = putActivity52.setCollectionMethod(collectionMethod53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = putDetectioncondition55.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition58 = putDetectioncondition55.setCustomId("http");
        java.lang.String str59 = putDetectioncondition55.getName();
        java.lang.String str60 = putDetectioncondition55.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation63 = postSamplingLocation61.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation66 = observation64.setPlannedFieldResult(plannedFieldResult65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction67 = null;
        observation66.LabInstruction = labInstruction67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation70 = observation66.setStatistics(observationStatistics69);
        java.time.OffsetDateTime offsetDateTime71 = observation70.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList72 = observation70.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation74 = observation70.setObservedProperty(observedProperty73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade75 = observation74.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails78 = labResultDetails76.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails80 = labResultDetails78.setAuditAttributes(auditAttributes79);
        observation74.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation82 = postSamplingLocation63.setAuditAttributes(auditAttributes79);
        putDetectioncondition55.AuditAttributes = auditAttributes79;
        putActivity54.AuditAttributes = auditAttributes79;
        activityWithDetails23.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue86 = categoricalValue21.setAuditAttributes(auditAttributes79);
        categoricalResult20.FixedValue = categoricalValue21;
        categoricalValue21.CustomId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue91 = categoricalValue21.setId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue93 = categoricalValue91.setCustomId("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        categoricalResult9.FixedValue = categoricalValue93;
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(observedProperty3);
        org.junit.Assert.assertNull(labInstructionMinimal4);
        org.junit.Assert.assertNull(taxon6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(observationMinimal8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(observationMinimal11);
        org.junit.Assert.assertNotNull(categoricalResult13);
        org.junit.Assert.assertNull(categoricalValue15);
        org.junit.Assert.assertNotNull(categoricalResult17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(categoricalResult20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(postActivity31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNotNull(samplingContextTag37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(samplingContextTag47);
        org.junit.Assert.assertNotNull(samplingContextTagArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putActivity52);
        org.junit.Assert.assertNotNull(putActivity54);
        org.junit.Assert.assertNull(auditAttributes56);
        org.junit.Assert.assertNotNull(putDetectioncondition58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(postSamplingLocation63);
        org.junit.Assert.assertNotNull(observation66);
        org.junit.Assert.assertNotNull(observation70);
        org.junit.Assert.assertNull(offsetDateTime71);
        org.junit.Assert.assertNull(importHistoryEventSimpleList72);
        org.junit.Assert.assertNotNull(observation74);
        org.junit.Assert.assertNull(resultGrade75);
        org.junit.Assert.assertNotNull(labResultDetails78);
        org.junit.Assert.assertNotNull(labResultDetails80);
        org.junit.Assert.assertNotNull(postSamplingLocation82);
        org.junit.Assert.assertNotNull(categoricalValue86);
        org.junit.Assert.assertNotNull(categoricalValue91);
        org.junit.Assert.assertNotNull(categoricalValue93);
    }

    @Test
    public void test40371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40371");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList4 = null;
        timeSeriesDataServiceResponse0.Approvals = approvalList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse0.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse7.TimeRange = statisticalTimeRange8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = timeSeriesPoint10.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = reading12.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading12.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading17 = reading15.setModel("MaxInstant");
        reading17.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant20 = reading17.Time;
        java.lang.String str21 = reading17.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading17.Value = doubleWithDisplay22;
        timeSeriesPoint10.Value = doubleWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary27.DifferenceDuringVisit = doubleWithDisplay28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay28.setNumeric((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint32 = timeSeriesPoint10.setValue(doubleWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        postRecurringReport34.NextGenerationDate = instant38;
        java.time.Instant instant41 = postRecurringReport34.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset42 = statisticalDateTimeOffset33.setDateTimeOffset(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj45 = timeAlignedDataServiceRequest44.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse46.setNextToken(instant47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest49 = timeAlignedDataServiceRequest44.setQueryFrom(instant47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription50 = timeSeriesDescription43.setRawStartTime(instant47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset51 = statisticalDateTimeOffset33.setDateTimeOffset(instant47);
        java.lang.Boolean boolean52 = statisticalDateTimeOffset51.isRepresentsEndOfTimePeriod();
        timeSeriesPoint10.Timestamp = statisticalDateTimeOffset51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary56.Reviewer = "";
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary56.MeasurementTime = instant59;
        postRecurringReport55.NextGenerationDate = instant59;
        java.time.Instant instant62 = postRecurringReport55.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset63 = statisticalDateTimeOffset54.setDateTimeOffset(instant62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj66 = timeAlignedDataServiceRequest65.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest70 = timeAlignedDataServiceRequest65.setQueryFrom(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription71 = timeSeriesDescription64.setRawStartTime(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset72 = statisticalDateTimeOffset54.setDateTimeOffset(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint73 = timeSeriesPoint10.setTimestamp(statisticalDateTimeOffset54);
        statisticalTimeRange8.StartTime = statisticalDateTimeOffset54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset75 = statisticalTimeRange8.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset76 = statisticalTimeRange8.getEndTime();
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNotNull(reading17);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(timeSeriesPoint32);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset42);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest49);
        org.junit.Assert.assertNotNull(timeSeriesDescription50);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset63);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest70);
        org.junit.Assert.assertNotNull(timeSeriesDescription71);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset72);
        org.junit.Assert.assertNotNull(timeSeriesPoint73);
        org.junit.Assert.assertNull(statisticalDateTimeOffset75);
        org.junit.Assert.assertNull(statisticalDateTimeOffset76);
    }

    @Test
    public void test40372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40372");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeStepCount((java.lang.Integer) 0);
        java.lang.String str6 = postStatisticalDerivedTimeSeries5.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries8 = postStatisticalDerivedTimeSeries5.setUtcOffset("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries10 = postStatisticalDerivedTimeSeries5.setRequireMinimumCoverage((java.lang.Boolean) false);
        postStatisticalDerivedTimeSeries5.UtcOffset = "MinInstant";
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries8);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries10);
    }

    @Test
    public void test40373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40373");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj1 = postQualifier0.getResponseType();
        java.lang.String str2 = postQualifier0.QualifierCode;
        postQualifier0.QualifierCode = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierBase qualifierBase6 = postQualifier0.setQualifierCode("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.util.ArrayList<java.lang.String> strList7 = qualifierBase6.getGroupIdentifiers();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(qualifierBase6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test40374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40374");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        java.lang.String str62 = locationDatumPeriod0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean64 = referencePointPeriod63.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod63.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str67 = referencePointPeriod63.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod69 = referencePointPeriod63.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection70 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod71 = referencePointPeriod63.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod72 = locationDatumPeriod0.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant74 = interpolationTypeOperation73.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType75 = interpolationTypeOperation73.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant77 = interpolationTypeOperation76.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType78 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation79 = interpolationTypeOperation76.setOperationType(metadataChangeOperationType78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation80 = interpolationTypeOperation73.setOperationType(metadataChangeOperationType78);
        locationDatumPeriod72.TimeRange = interpolationTypeOperation80;
        java.lang.String str82 = locationDatumPeriod72.Standard;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod84 = locationDatumPeriod72.setUser("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange85 = locationDatumPeriod84.TimeRange;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(boolean64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(referencePointPeriod69);
        org.junit.Assert.assertTrue("'" + measurementDirection70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop + "'", measurementDirection70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop));
        org.junit.Assert.assertNotNull(referencePointPeriod71);
        org.junit.Assert.assertNotNull(locationDatumPeriod72);
        org.junit.Assert.assertNull(instant74);
        org.junit.Assert.assertNull(metadataChangeOperationType75);
        org.junit.Assert.assertNull(instant77);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType78 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType78.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation79);
        org.junit.Assert.assertNotNull(interpolationTypeOperation80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(locationDatumPeriod84);
        org.junit.Assert.assertNotNull(timeRange85);
    }

    @Test
    public void test40375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40375");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        java.lang.String str22 = adcpDischargeActivity0.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity0.setModel("");
        java.lang.String str25 = adcpDischargeActivity24.getBottomEstimateMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity27 = adcpDischargeActivity24.setModel("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str28 = adcpDischargeActivity24.NodeDetails;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType31 = dischargeChannelMeasurement30.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay32 = dischargeChannelMeasurement30.Discharge;
        java.lang.String str33 = dischargeChannelMeasurement30.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType34 = dischargeChannelMeasurement30.VelocityVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity35 = otherMethodDischargeActivity29.setDischargeChannelMeasurement(dischargeChannelMeasurement30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement36 = otherMethodDischargeActivity35.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType39 = dischargeChannelMeasurement38.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = dischargeChannelMeasurement38.Discharge;
        java.time.Instant instant41 = dischargeChannelMeasurement38.EndTime;
        dischargeChannelMeasurement38.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity44 = engineeredStructureDischargeActivity37.setDischargeChannelMeasurement(dischargeChannelMeasurement38);
        java.lang.String str45 = engineeredStructureDischargeActivity44.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement46 = engineeredStructureDischargeActivity44.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement48 = dischargeChannelMeasurement46.setDistanceToGage(quantityWithDisplay47);
        otherMethodDischargeActivity35.DischargeChannelMeasurement = dischargeChannelMeasurement46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType50 = dischargeChannelMeasurement46.ChannelEvenness;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity51 = adcpDischargeActivity24.setDischargeChannelMeasurement(dischargeChannelMeasurement46);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(adcpDischargeActivity27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(channelMaterialType31);
        org.junit.Assert.assertNull(quantityWithDisplay32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(velocityVariationType34);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivity35);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement36);
        org.junit.Assert.assertNull(channelMaterialType39);
        org.junit.Assert.assertNull(quantityWithDisplay40);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement46);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement48);
        org.junit.Assert.assertNull(channelEvennessType50);
        org.junit.Assert.assertNotNull(adcpDischargeActivity51);
    }

    @Test
    public void test40376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40376");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4, observedPropertyArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod2.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postLabAnalysisMethod2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod2.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod9.setDescription("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod9.setId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = postLabAnalysisMethod9.setName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject18 = putProject16.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putProject18.Approved = true;
        java.lang.String str21 = putProject18.getCustomId();
        java.time.OffsetDateTime offsetDateTime22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject23 = putProject18.setStartTime(offsetDateTime22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty24.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = null;
        analyticalGroup27.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = analyticalGroup27.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str33 = samplingContextTag32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag32.setAuditAttributes(auditAttributes34);
        java.lang.String str36 = samplingContextTag32.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putDetectioncondition38.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition41 = putDetectioncondition38.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity44 = samplingPlanPlannedActivity42.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes45.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity44.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = samplingPlanPlannedActivity44.AuditAttributes;
        putDetectioncondition38.AuditAttributes = auditAttributes49;
        analysisMethodSimple37.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag52 = samplingContextTag32.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = analyticalGroup27.setAuditAttributes(auditAttributes49);
        java.lang.String str54 = auditAttributes49.CreationUserProfileId;
        observedProperty24.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject56 = putProject18.setAuditAttributes(auditAttributes49);
        postLabAnalysisMethod15.AuditAttributes = auditAttributes49;
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observedPropertyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod15);
        org.junit.Assert.assertNotNull(putProject18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(putProject23);
        org.junit.Assert.assertNotNull(analyticalGroup31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNotNull(putDetectioncondition41);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity44);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(auditAttributes49);
        org.junit.Assert.assertNotNull(samplingContextTag52);
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'.'SSSSSSS" + "'", str54, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(putProject56);
    }

    @Test
    public void test40377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40377");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        monitoringMethod0.ParameterUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod6 = monitoringMethod0.setParameterUniqueId("2021.4.62.0");
        monitoringMethod6.Description = "hi!";
        monitoringMethod6.ParameterUniqueId = "MaxInstant";
        java.lang.String str11 = monitoringMethod6.getParameterIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod13 = monitoringMethod6.setDisplayName("http://MaxDurationhttp/json/reply/String");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod15 = monitoringMethod13.setDescription("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertNotNull(monitoringMethod6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(monitoringMethod13);
        org.junit.Assert.assertNotNull(monitoringMethod15);
    }

    @Test
    public void test40378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40378");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest2 = timeSeriesDataRawServiceRequest0.setUnit("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest4 = timeSeriesDataRawServiceRequest0.setUnit("-PT87591240H");
        java.lang.Double double5 = timeSeriesDataRawServiceRequest4.getUtcOffset();
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest2);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest4);
        org.junit.Assert.assertNull(double5);
    }

    @Test
    public void test40379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40379");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList1 = timeSeriesUniqueIdListServiceResponse0.TimeSeriesUniqueIds;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList2 = timeSeriesUniqueIdListServiceResponse0.getTimeSeriesUniqueIds();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds> timeSeriesUniqueIdsList3 = timeSeriesUniqueIdListServiceResponse0.TimeSeriesUniqueIds;
        java.time.Instant instant4 = timeSeriesUniqueIdListServiceResponse0.NextToken;
        org.junit.Assert.assertNull(timeSeriesUniqueIdsList1);
        org.junit.Assert.assertNull(timeSeriesUniqueIdsList2);
        org.junit.Assert.assertNull(timeSeriesUniqueIdsList3);
        org.junit.Assert.assertNull(instant4);
    }

    @Test
    public void test40380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40380");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList1 = putUserV2_0.getAccessGroups();
        java.util.List<java.lang.String> strList2 = putUserV2_0.getRoles();
        putUserV2_0.Email = "https";
        java.lang.String str5 = putUserV2_0.getEmail();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "https" + "'", str5, "https");
    }

    @Test
    public void test40381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40381");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard2 = getStandard0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandard getStandard4 = getStandard2.setId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str5 = getStandard2.Id;
        org.junit.Assert.assertNotNull(getStandard2);
        org.junit.Assert.assertNotNull(getStandard4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str5, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test40382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40382");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        java.lang.Double double61 = locationDatumPeriod0.getOffsetToStandard();
        java.lang.String str62 = locationDatumPeriod0.UnitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        java.time.Instant instant64 = noteOperation63.getDateAppliedUtc();
        java.time.Instant instant65 = noteOperation63.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note note67 = noteOperation63.setNoteText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.time.Instant instant68 = noteOperation63.getDateAppliedUtc();
        locationDatumPeriod0.TimeRange = noteOperation63;
        java.lang.String str70 = locationDatumPeriod0.getMethod();
        locationDatumPeriod0.Method = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(double61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(instant64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(note67);
        org.junit.Assert.assertNull(instant68);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test40383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40383");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        java.lang.String str5 = reading0.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = reading0.setPublish((java.lang.Boolean) true);
        java.lang.Boolean boolean8 = reading7.isUseLocationDatumAsReference();
        reading7.Model = "2021.8.9990";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(reading7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test40384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40384");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setNullMeasureQualifier(nullMeasureQualifier4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = labInstruction6.setAnalysisMethod(analysisMethod7);
        putObservationV2_2.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = specimenTemplate11.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate13.Preservative = preservativeType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = labResultDetails16.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = specimenTemplate13.setAuditAttributes(auditAttributes19);
        extendedAttributeDefinition10.AuditAttributes = auditAttributes19;
        java.lang.Boolean boolean23 = extendedAttributeDefinition10.Mandatory;
        java.lang.Boolean boolean24 = extendedAttributeDefinition10.Mandatory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = extendedAttributeDefinition10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_26 = putObservationV2_2.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = null;
        putObservationV2_26.SamplingLocation = samplingLocation27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod29 = putObservationV2_26.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty30 = putObservationV2_26.ObservedProperty;
        java.time.OffsetDateTime offsetDateTime31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_32 = putObservationV2_26.setObservedTime(offsetDateTime31);
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNotNull(labInstruction8);
        org.junit.Assert.assertNotNull(specimenTemplate13);
        org.junit.Assert.assertTrue("'" + preservativeType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails18);
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(specimenTemplate21);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(auditAttributes25);
        org.junit.Assert.assertNotNull(putObservationV2_26);
        org.junit.Assert.assertNull(collectionMethod29);
        org.junit.Assert.assertNull(observedProperty30);
        org.junit.Assert.assertNotNull(putObservationV2_32);
    }

    @Test
    public void test40385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40385");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen getSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen();
        java.lang.String str1 = getSpecimen0.getId();
        java.lang.String str2 = getSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen getSpecimen4 = getSpecimen0.setId("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimen getSpecimen6 = getSpecimen4.setId("MinInstant");
        java.lang.String str7 = getSpecimen6.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getSpecimen4);
        org.junit.Assert.assertNotNull(getSpecimen6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinInstant" + "'", str7, "MinInstant");
    }

    @Test
    public void test40386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40386");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit();
        java.lang.String str1 = postVisitFileToVisit0.getVisitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile2 = postVisitFileToVisit0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile3 = postVisitFileToVisit0.getFile();
        java.lang.String str4 = postVisitFileToVisit0.VisitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile5 = postVisitFileToVisit0.getFile();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(iHttpFile2);
        org.junit.Assert.assertNull(iHttpFile3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(iHttpFile5);
    }

    @Test
    public void test40387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40387");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList4 = null;
        timeSeriesDataServiceResponse0.Approvals = approvalList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse0.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse7.TimeRange = statisticalTimeRange8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = timeSeriesPoint10.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset13 = null;
        timeSeriesPoint12.Timestamp = statisticalDateTimeOffset13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint16 = timeSeriesPoint12.setTimestamp(statisticalDateTimeOffset15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint17 = timeSeriesPoint10.setTimestamp(statisticalDateTimeOffset15);
        statisticalTimeRange8.EndTime = statisticalDateTimeOffset15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList20 = timeSeriesDataServiceResponse19.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange21 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse22 = timeSeriesDataServiceResponse19.setTimeRange(statisticalTimeRange21);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList23 = null;
        timeSeriesDataServiceResponse19.Approvals = approvalList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse26 = timeSeriesDataServiceResponse19.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse26.TimeRange = statisticalTimeRange27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset30 = timeSeriesPoint29.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset32 = null;
        timeSeriesPoint31.Timestamp = statisticalDateTimeOffset32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint35 = timeSeriesPoint31.setTimestamp(statisticalDateTimeOffset34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint36 = timeSeriesPoint29.setTimestamp(statisticalDateTimeOffset34);
        statisticalTimeRange27.EndTime = statisticalDateTimeOffset34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = statisticalTimeRange27.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange39 = statisticalTimeRange8.setEndTime(statisticalDateTimeOffset38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList41 = timeSeriesDataServiceResponse40.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange42 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse43 = timeSeriesDataServiceResponse40.setTimeRange(statisticalTimeRange42);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList44 = null;
        timeSeriesDataServiceResponse40.Approvals = approvalList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList47 = timeSeriesDataServiceResponse46.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse49 = timeSeriesDataServiceResponse46.setTimeRange(statisticalTimeRange48);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList50 = null;
        timeSeriesDataServiceResponse46.Approvals = approvalList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse53 = timeSeriesDataServiceResponse46.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse53.TimeRange = statisticalTimeRange54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset57 = timeSeriesPoint56.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset59 = null;
        timeSeriesPoint58.Timestamp = statisticalDateTimeOffset59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint62 = timeSeriesPoint58.setTimestamp(statisticalDateTimeOffset61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint63 = timeSeriesPoint56.setTimestamp(statisticalDateTimeOffset61);
        statisticalTimeRange54.EndTime = statisticalDateTimeOffset61;
        timeSeriesDataServiceResponse40.TimeRange = statisticalTimeRange54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary68.Reviewer = "";
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary68.MeasurementTime = instant71;
        postRecurringReport67.NextGenerationDate = instant71;
        java.time.Instant instant74 = postRecurringReport67.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset75 = statisticalDateTimeOffset66.setDateTimeOffset(instant74);
        statisticalTimeRange54.StartTime = statisticalDateTimeOffset75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange77 = statisticalTimeRange8.setStartTime(statisticalDateTimeOffset75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset78 = statisticalTimeRange77.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset80 = statisticalDateTimeOffset78.setRepresentsEndOfTimePeriod((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset82 = statisticalDateTimeOffset80.setRepresentsEndOfTimePeriod((java.lang.Boolean) true);
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(timeSeriesPoint16);
        org.junit.Assert.assertNotNull(timeSeriesPoint17);
        org.junit.Assert.assertNull(interpolationTypeList20);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse22);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse26);
        org.junit.Assert.assertNull(statisticalDateTimeOffset30);
        org.junit.Assert.assertNotNull(timeSeriesPoint35);
        org.junit.Assert.assertNotNull(timeSeriesPoint36);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset38);
        org.junit.Assert.assertNotNull(statisticalTimeRange39);
        org.junit.Assert.assertNull(interpolationTypeList41);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse43);
        org.junit.Assert.assertNull(interpolationTypeList47);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse49);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse53);
        org.junit.Assert.assertNull(statisticalDateTimeOffset57);
        org.junit.Assert.assertNotNull(timeSeriesPoint62);
        org.junit.Assert.assertNotNull(timeSeriesPoint63);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset75);
        org.junit.Assert.assertNotNull(statisticalTimeRange77);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset78);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset80);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset82);
    }

    @Test
    public void test40388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40388");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str1 = crossSectionSurveyActivity0.Party;
        java.lang.String str2 = crossSectionSurveyActivity0.getParty();
        java.lang.String str3 = crossSectionSurveyActivity0.Party;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = crossSectionSurveyActivity0.getStage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant6 = crossSectionSurveyActivity5.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str8 = pointVelocityDischargeActivity7.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = pointVelocityDischargeActivity7.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity7.setSoftwareVersion("");
        java.lang.String str13 = pointVelocityDischargeActivity12.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity12.StartPoint = startPointType14;
        crossSectionSurveyActivity5.StartingPoint = startPointType14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str18 = referencePoint17.Name;
        java.lang.String str19 = referencePoint17.getUniqueId();
        referencePoint17.Name = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str22 = referencePoint17.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str24 = getActivities23.getCustomId();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities26 = getActivities23.setFromStartTime(instant25);
        referencePoint17.DecommissionedDate = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity28 = crossSectionSurveyActivity5.setEndTime(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity29 = crossSectionSurveyActivity0.setStartTime(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity31 = crossSectionSurveyActivity0.setComments("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + startPointType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str22, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(getActivities26);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity28);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity29);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity31);
    }

    @Test
    public void test40389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40389");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation4 = correctionOperation2.setType(correctionType3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation2.OperationType = metadataChangeOperationType5;
        java.time.Instant instant7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation8 = correctionOperation2.setDateAppliedUtc(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType10 = methodOperation9.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation12 = methodOperation9.setOperationType(metadataChangeOperationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation13 = correctionOperation8.setOperationType(metadataChangeOperationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation16 = correctionOperation14.setType(correctionType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation14.OperationType = metadataChangeOperationType17;
        java.time.Instant instant19 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation20 = correctionOperation14.setDateAppliedUtc(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = methodOperation21.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation24 = methodOperation21.setOperationType(metadataChangeOperationType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation25 = correctionOperation20.setOperationType(metadataChangeOperationType23);
        correctionOperation8.OperationType = metadataChangeOperationType23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType28 = trendLineAnalysisServiceRequest27.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark31 = locationRemark29.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse32.setNextToken(instant33);
        locationRemark31.FromTime = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark37 = locationRemark31.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod40 = timeSeriesThresholdPeriod38.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription43 = locationDescription41.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType45 = null;
        controlConditionActivity44.ControlCleaned = controlCleanedType45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        controlConditionActivity44.DateCleaned = instant48;
        locationDescription43.LastModified = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod52 = timeSeriesThresholdPeriod40.setAppliedTime(instant48);
        locationRemark37.ToTime = instant48;
        trendLineAnalysisServiceRequest27.QueryFrom = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation55 = correctionOperation8.setDateAppliedUtc(instant48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList57, correctionOperationArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction59 = metadataChangeTransaction1.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction60 = metadataChangeTransaction0.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList57);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList61 = metadataChangeTransaction0.NoteOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation> methodOperationList62 = metadataChangeTransaction0.getMethodOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation> qualifierOperationList63 = metadataChangeTransaction0.getQualifierOperations();
        java.lang.String str64 = metadataChangeTransaction0.AppliedByUser;
        metadataChangeTransaction0.AppliedByUser = "PT87591240H";
        org.junit.Assert.assertTrue("'" + correctionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation4);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation8);
        org.junit.Assert.assertNull(metadataChangeOperationType10);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation12);
        org.junit.Assert.assertNotNull(correctionOperation13);
        org.junit.Assert.assertTrue("'" + correctionType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation16);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation20);
        org.junit.Assert.assertNull(metadataChangeOperationType22);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation24);
        org.junit.Assert.assertNotNull(correctionOperation25);
        org.junit.Assert.assertNull(trendLineAnalysisType28);
        org.junit.Assert.assertNotNull(locationRemark31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(locationRemark37);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod40);
        org.junit.Assert.assertNotNull(locationDescription43);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod52);
        org.junit.Assert.assertNotNull(correctionOperation55);
        org.junit.Assert.assertNotNull(correctionOperationArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction59);
        org.junit.Assert.assertNotNull(metadataChangeTransaction60);
        org.junit.Assert.assertNull(noteOperationList61);
        org.junit.Assert.assertNull(methodOperationList62);
        org.junit.Assert.assertNull(qualifierOperationList63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test40390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40390");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription4 = locationDescription2.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription6 = locationDescription2.setPrimaryFolder("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription8 = locationDescription6.setIdentifier("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark11 = locationRemark9.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList13 = fieldVisitDataServiceResponse12.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse15 = fieldVisitDataServiceResponse12.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        fieldVisitDataServiceResponse12.ResponseTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark9.setCreateTime(instant19);
        java.time.Instant instant23 = locationRemark22.getToTime();
        java.time.Instant instant24 = locationRemark22.CreateTime;
        locationDescription8.LastModified = instant24;
        java.lang.String str26 = locationDescription8.getIdentifier();
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNotNull(locationDescription4);
        org.junit.Assert.assertNotNull(locationDescription6);
        org.junit.Assert.assertNotNull(locationDescription8);
        org.junit.Assert.assertNotNull(locationRemark11);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList13);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MinDuration" + "'", str26, "MinDuration");
    }

    @Test
    public void test40391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40391");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.time.Instant instant1 = getExportObservations0.getStartModificationTime();
        getExportObservations0.FieldVisitId = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant5 = fieldVisit4.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType7 = calibrationCheck6.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = calibrationCheck6.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck19 = calibrationCheck6.setTime(instant18);
        java.time.Instant instant20 = calibrationCheck19.Time;
        fieldVisit4.StartTime = instant20;
        getExportObservations0.EndObservedTime = instant20;
        java.util.List<java.lang.String> strList23 = getExportObservations0.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str25 = getActivities24.getCustomId();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities27 = getActivities24.setFromStartTime(instant26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations28 = getExportObservations0.setEndModificationTime(instant26);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(calibrationCheckType7);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(calibrationCheck19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(getActivities27);
        org.junit.Assert.assertNotNull(getExportObservations28);
    }

    @Test
    public void test40392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40392");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putAnalysisMethod0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = putAnalysisMethod0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod4 = putAnalysisMethod0.setContext("");
        java.lang.String str5 = putAnalysisMethod4.getMethodId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = putAnalysisMethod4.ImportHistoryEventSimples;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(putAnalysisMethod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(importHistoryEventSimpleList6);
    }

    @Test
    public void test40393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40393");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset();
        java.lang.String str1 = referenceStandardOffset0.getStandard();
        java.lang.String str2 = referenceStandardOffset0.getStandard();
        java.lang.String str3 = referenceStandardOffset0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset5 = referenceStandardOffset0.setStandard("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset7 = referenceStandardOffset0.setStandard("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset9 = referenceStandardOffset0.setUncertainty((java.lang.Double) 1.0d);
        java.lang.String str10 = referenceStandardOffset0.Standard;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset12 = referenceStandardOffset0.setComments("ZZZZZ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(referenceStandardOffset5);
        org.junit.Assert.assertNotNull(referenceStandardOffset7);
        org.junit.Assert.assertNotNull(referenceStandardOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str10, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(referenceStandardOffset12);
    }

    @Test
    public void test40394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40394");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase2 = putOpenIdConnectUser0.setCanConfigureSystem((java.lang.Boolean) true);
        java.lang.String str3 = userBase2.getFirstName();
        java.lang.String str4 = userBase2.getLoginName();
        org.junit.Assert.assertNotNull(userBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test40395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40395");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str2 = postLaboratory1.Address;
        java.lang.String str3 = postLaboratory1.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = samplingPlanPlannedActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = auditAttributes7.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity6.AuditAttributes = auditAttributes7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = samplingPlanPlannedActivity6.AuditAttributes;
        postLaboratory1.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory14 = postLaboratory1.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon16 = taxonomicResult15.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = taxonomicResult15.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan19.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan19.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = samplingPlan19.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan26 = samplingPlan19.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag27 = putTag18.setAuditAttributes(auditAttributes25);
        taxonomicResult15.AuditAttributes = auditAttributes25;
        postLaboratory14.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_30 = putObservationV2_0.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction31 = putObservationV2_30.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult32 = putObservationV2_30.getNumericResult();
        java.time.OffsetDateTime offsetDateTime33 = putObservationV2_30.ResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity34 = putObservationV2_30.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult35 = putObservationV2_30.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon36 = putObservationV2_30.getRelatedTaxon();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity6);
        org.junit.Assert.assertNotNull(auditAttributes9);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(postLaboratory14);
        org.junit.Assert.assertNull(taxon16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup24);
        org.junit.Assert.assertNotNull(samplingPlan26);
        org.junit.Assert.assertNotNull(putTag27);
        org.junit.Assert.assertNotNull(putObservationV2_30);
        org.junit.Assert.assertNull(labInstruction31);
        org.junit.Assert.assertNull(numericResult32);
        org.junit.Assert.assertNull(offsetDateTime33);
        org.junit.Assert.assertNull(activity34);
        org.junit.Assert.assertNull(taxonomicResult35);
        org.junit.Assert.assertNull(taxon36);
    }

    @Test
    public void test40396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40396");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        java.lang.String str3 = postActivity0.getSourceActivityId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit4 = postActivity0.FieldVisit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedActivity5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity8 = plannedActivity5.setActivityType(plannedActivityActivityType7);
        postActivity0.PlannedActivity = plannedActivity8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails10.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime13 = activityWithDetails10.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration14 = activityWithDetails10.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails16 = activityWithDetails10.setObservations(observationMinimalList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime18 = activity17.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity20 = activity17.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str23 = metricConfiguration22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty24.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration27 = metricConfiguration22.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType28 = observedProperty24.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup30 = postObservedProperty29.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = null;
        quantity31.Unit = unit32;
        postObservedProperty29.LowerLimit = quantity31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity35 = postObservedProperty29.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit36 = quantity35.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = observedProperty24.setUpperLimit(quantity35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation38 = samplingLocation21.setElevation(quantity35);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList39 = samplingLocation38.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList42, plannedActivityArray41);
        putFieldVisit40.PlannedActivities = plannedActivityList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str46 = domainObjectAttachment45.getId();
        java.lang.String str47 = domainObjectAttachment45.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment45.setAttachment(attachment48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        domainObjectAttachment50.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = domainObjectAttachment50.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str65 = domainObjectAttachment64.getId();
        java.lang.String str66 = domainObjectAttachment64.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment67 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment68 = domainObjectAttachment64.setAttachment(attachment67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str70 = domainObjectAttachment69.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment45, domainObjectAttachment50, domainObjectAttachment57, domainObjectAttachment62, domainObjectAttachment64, domainObjectAttachment69 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList72 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList72, domainObjectAttachmentArray71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit74 = putFieldVisit40.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList72);
        samplingLocation38.Attachments = domainObjectAttachmentList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address76 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation77 = samplingLocation38.setAddress(address76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation79 = samplingLocation77.setHorizontalCollectionMethod("https");
        activity20.SamplingLocation = samplingLocation77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails81 = activityWithDetails16.setSamplingLocation(samplingLocation77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity82.LoggerFileName = "hi!";
        java.lang.String str85 = postActivity82.getSourceActivityId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit86 = postActivity82.FieldVisit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes88 = plannedActivity87.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType89 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity90 = plannedActivity87.setActivityType(plannedActivityActivityType89);
        postActivity82.PlannedActivity = plannedActivity90;
        java.lang.String str92 = plannedActivity90.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity94 = plannedActivity90.setInstruction("ZZZZZ");
        plannedActivity90.Instruction = "0001-01-01T00:00:00.0000000Z";
        activityWithDetails16.PlannedActivity = plannedActivity90;
        postActivity0.PlannedActivity = plannedActivity90;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(fieldVisit4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertTrue("'" + plannedActivityActivityType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.FIELD_SURVEY + "'", plannedActivityActivityType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(plannedActivity8);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNull(indexConfiguration14);
        org.junit.Assert.assertNotNull(activityWithDetails16);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(activity20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(metricConfiguration27);
        org.junit.Assert.assertNull(resultType28);
        org.junit.Assert.assertNull(unitGroup30);
        org.junit.Assert.assertNotNull(quantity35);
        org.junit.Assert.assertNull(unit36);
        org.junit.Assert.assertNotNull(observedProperty37);
        org.junit.Assert.assertNotNull(samplingLocation38);
        org.junit.Assert.assertNull(domainObjectAttachmentList39);
        org.junit.Assert.assertNotNull(plannedActivityArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(domainObjectAttachment68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putFieldVisit74);
        org.junit.Assert.assertNotNull(samplingLocation77);
        org.junit.Assert.assertNotNull(samplingLocation79);
        org.junit.Assert.assertNotNull(activityWithDetails81);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(fieldVisit86);
        org.junit.Assert.assertNull(auditAttributes88);
        org.junit.Assert.assertTrue("'" + plannedActivityActivityType89 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.FIELD_SURVEY + "'", plannedActivityActivityType89.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(plannedActivity90);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(plannedActivity94);
    }

    @Test
    public void test40397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40397");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_2 = deleteObservationsV2_0.setFilterId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean4 = getFieldVisitReadingsByLocationServiceRequest3.ApplyRounding;
        java.lang.String str5 = getFieldVisitReadingsByLocationServiceRequest3.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest7 = getFieldVisitReadingsByLocationServiceRequest3.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getLabReportIds();
        importItem8.Errors = getObservationsV2_9;
        java.lang.Object obj26 = importItem8.getExistingItem();
        importItem8.Input = "hi!";
        java.lang.Object obj29 = importItem8.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType30 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem31 = importItem8.setStatus(importItemStatusType30);
        importItem31.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate34.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate34.setId("hi!");
        java.lang.Boolean boolean39 = specimenTemplate38.getFiltered();
        importItem31.Item = specimenTemplate38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        postTag42.PickListValues = strList47;
        java.util.ArrayList<java.lang.String> strList51 = postTag42.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor52 = processor41.setInputTimeSeriesUniqueIds(strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem53 = importItem31.setWarningMessages((java.util.List<java.lang.String>) strList51);
        getFieldVisitReadingsByLocationServiceRequest3.Parameters = strList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_55 = deleteObservationsV2_0.setSearch((java.util.List<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList56 = deleteObservationsV2_55.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark59 = locationRemark57.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList61 = fieldVisitDataServiceResponse60.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse63 = fieldVisitDataServiceResponse60.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary64.Reviewer = "";
        java.time.Instant instant67 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary64.MeasurementTime = instant67;
        fieldVisitDataServiceResponse60.ResponseTime = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark70 = locationRemark57.setCreateTime(instant67);
        java.time.Instant instant71 = locationRemark70.getToTime();
        java.time.Instant instant72 = locationRemark70.CreateTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_73 = deleteObservationsV2_55.setStartResultTime(instant72);
        java.lang.Double double74 = deleteObservationsV2_73.MinNumericResultValue;
        org.junit.Assert.assertNotNull(deleteObservationsV2_2);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + importItemStatusType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType30.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem31);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(processor52);
        org.junit.Assert.assertNotNull(importItem53);
        org.junit.Assert.assertNotNull(deleteObservationsV2_55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(locationRemark59);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList61);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse63);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(locationRemark70);
        org.junit.Assert.assertNull(instant71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(deleteObservationsV2_73);
        org.junit.Assert.assertNull(double74);
    }

    @Test
    public void test40398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40398");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = pointVelocityDischargeActivity0.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList2 = pointVelocityDischargeActivity0.Verticals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = pointVelocityDischargeActivity0.MeanObservationDurationInSeconds;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(verticalList2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
    }

    @Test
    public void test40399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40399");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo4 = timeAlignedTimeSeriesInfo0.setLabel("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo6 = timeAlignedTimeSeriesInfo4.setUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo8 = timeAlignedTimeSeriesInfo4.setInterpolationType("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo10 = timeAlignedTimeSeriesInfo4.setLabel("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo12 = timeAlignedTimeSeriesInfo4.setInterpolationType("/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo4);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo6);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo8);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo10);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo12);
    }

    @Test
    public void test40400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40400");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance> gapToleranceList2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setGapTolerances(gapToleranceList2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange4 = timeSeriesDataServiceResponse3.getTimeRange();
        timeSeriesDataServiceResponse3.UniqueId = "POST";
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNull(statisticalTimeRange4);
    }

    @Test
    public void test40401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40401");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark2 = locationRemark0.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        locationRemark2.FromTime = instant4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary9.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        dischargeSummary9.MeasurementTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse8.setNextToken(instant13);
        java.time.Instant instant17 = locationDescriptionListServiceResponse8.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities18 = getActivities7.setToStartTime(instant17);
        java.lang.String str19 = getActivities18.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities21 = getActivities18.setLimit((java.lang.Integer) 1);
        getActivities21.Cursor = "";
        getActivities21.Limit = 0;
        java.time.Instant instant26 = getActivities21.getToStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark27 = locationRemark2.setCreateTime(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest();
        java.lang.String str29 = effectiveRatingCurveServiceRequest28.RatingModelIdentifier;
        java.lang.Double double30 = effectiveRatingCurveServiceRequest28.getEndValue();
        effectiveRatingCurveServiceRequest28.EndValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest34 = effectiveRatingCurveServiceRequest28.setRatingModelIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest36 = effectiveRatingCurveServiceRequest34.setStepSize((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod39 = timeSeriesThresholdPeriod37.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod37.AppliedTime = instant40;
        java.lang.Double double42 = timeSeriesThresholdPeriod37.SecondaryReferenceValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant44 = ratingCurveListServiceRequest43.QueryTo;
        java.lang.String str45 = ratingCurveListServiceRequest43.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest47 = ratingCurveListServiceRequest43.setRatingModelIdentifier("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_48.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase53 = locationDatumPeriod51.setComment("'.'SSSSSSS");
        java.lang.String str54 = locationDatumPeriodBase53.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase58 = locationDatumPeriodBase53.setValidFrom(instant56);
        getChartDataV2_48.StartModificationTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest60 = ratingCurveListServiceRequest47.setQueryTo(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod61 = timeSeriesThresholdPeriod37.setAppliedTime(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest62 = effectiveRatingCurveServiceRequest34.setEffectiveTime(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark63 = locationRemark27.setToTime(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark65 = locationRemark63.setDescription("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        locationRemark63.Description = "MinInstant";
        java.lang.String str68 = locationRemark63.Remark;
        java.time.Instant instant69 = locationRemark63.getToTime();
        org.junit.Assert.assertNotNull(locationRemark2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(dischargeSummary11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(getActivities18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(getActivities21);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(locationRemark27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(double30);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest34);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest36);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNull(double42);
        org.junit.Assert.assertNull(instant44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest47);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase58);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest60);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod61);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest62);
        org.junit.Assert.assertNotNull(locationRemark63);
        org.junit.Assert.assertNotNull(locationRemark65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(instant69);
    }

    @Test
    public void test40402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40402");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode2 = putQualityCode0.setColor("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Integer int3 = putQualityCode2.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode5 = putQualityCode2.setColor("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode7 = putQualityCode2.setColor("2021.4.62.0");
        java.lang.String str8 = putQualityCode2.getDescription();
        java.lang.String str9 = putQualityCode2.getColor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode11 = putQualityCode2.setDisplayName("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNotNull(putQualityCode2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(putQualityCode5);
        org.junit.Assert.assertNotNull(putQualityCode7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2021.4.62.0" + "'", str9, "2021.4.62.0");
        org.junit.Assert.assertNotNull(putQualityCode11);
    }

    @Test
    public void test40403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40403");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setDisplayValue2("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint0.setApprovalName8("9999-12-31T23:59:59.999Z");
        timeAlignedPoint0.GradeName1 = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint18 = timeAlignedPoint0.setGradeName10("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        timeAlignedPoint0.Qualifiers4 = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        timeAlignedPoint0.Method2 = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint24 = timeAlignedPoint0.setDisplayValue7("http://MaxDurationhttp/json/reply/ArrayList");
        timeAlignedPoint24.GradeName9 = "multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNotNull(timeAlignedPoint18);
        org.junit.Assert.assertNotNull(timeAlignedPoint24);
    }

    @Test
    public void test40404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40404");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotesResponse deleteTimeSeriesNotesResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteTimeSeriesNotesResponse deleteTimeSeriesNotesResponse2 = deleteTimeSeriesNotesResponse0.setNotesDeleted((java.lang.Integer) 10);
        deleteTimeSeriesNotesResponse0.NotesDeleted = 0;
        org.junit.Assert.assertNotNull(deleteTimeSeriesNotesResponse2);
    }

    @Test
    public void test40405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40405");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel();
        java.lang.String str1 = searchResultTaxonomyLevel0.getCursor();
        java.lang.Integer int2 = searchResultTaxonomyLevel0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel4 = searchResultTaxonomyLevel0.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel6 = searchResultTaxonomyLevel0.setTotalCount((java.lang.Integer) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(searchResultTaxonomyLevel4);
        org.junit.Assert.assertNotNull(searchResultTaxonomyLevel6);
    }

    @Test
    public void test40406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40406");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingPlan postImportSamplingPlan0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingPlan postImportSamplingPlan2 = postImportSamplingPlan0.setTimeZoneOffset("MaxInstant");
        java.lang.String str3 = postImportSamplingPlan2.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingPlan postImportSamplingPlan5 = postImportSamplingPlan2.setTimeZoneOffset("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingPlan postImportSamplingPlan7 = postImportSamplingPlan5.setTimeZoneOffset("http");
        postImportSamplingPlan7.TimeZoneOffset = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingPlan postImportSamplingPlan11 = postImportSamplingPlan7.setTimeZoneOffset("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.Object obj12 = postImportSamplingPlan11.getResponseType();
        org.junit.Assert.assertNotNull(postImportSamplingPlan2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MaxInstant" + "'", str3, "MaxInstant");
        org.junit.Assert.assertNotNull(postImportSamplingPlan5);
        org.junit.Assert.assertNotNull(postImportSamplingPlan7);
        org.junit.Assert.assertNotNull(postImportSamplingPlan11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldSheetImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldSheetImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldSheetImportSummary");
    }

    @Test
    public void test40407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40407");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList3 = getExportSpecimens2.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant5 = qualifier4.DateApplied;
        java.lang.String str6 = qualifier4.User;
        java.lang.String str7 = qualifier4.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = qualifier4.setDateApplied(instant11);
        getExportSpecimens2.Before = instant11;
        java.util.List<java.lang.String> strList16 = getExportSpecimens2.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = getObservationsV2_19.setDataClassifications((java.util.List<java.lang.String>) strList23);
        postTag18.PickListValues = strList23;
        java.util.ArrayList<java.lang.String> strList27 = postTag18.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor28 = processor17.setInputTimeSeriesUniqueIds(strList27);
        getExportSpecimens2.SamplingLocationGroupIds = strList27;
        getSpecimens0.SpecimenStatuses = strList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str32 = deleteFieldVisits31.Sort;
        deleteFieldVisits31.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        getObservationsV2_35.QualityControlTypes = strList46;
        java.util.List<java.lang.String> strList50 = getObservationsV2_35.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_35.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList53 = getObservationsV2_52.getMedia();
        java.time.Instant instant54 = getObservationsV2_52.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        getObservationsV2_55.SpecimenIds = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_52.setProjectIds((java.util.List<java.lang.String>) strList58);
        deleteFieldVisits31.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens63 = getSpecimens0.setSearch((java.util.List<java.lang.String>) strList58);
        java.lang.String str64 = getSpecimens63.Cursor;
        java.util.List<java.lang.String> strList65 = getSpecimens63.SpecimenStatuses;
        java.time.Instant instant66 = getSpecimens63.getStartModificationTime();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(qualifier14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_25);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(processor28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNull(instant54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNotNull(getSpecimens63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(instant66);
    }

    @Test
    public void test40408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40408");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        getChartDataV2_0.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getLabReportIds();
        importItem8.Errors = getObservationsV2_9;
        java.lang.Object obj26 = importItem8.getExistingItem();
        importItem8.Input = "hi!";
        java.lang.Object obj29 = importItem8.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType30 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem31 = importItem8.setStatus(importItemStatusType30);
        importItem31.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate34.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate34.setId("hi!");
        java.lang.Boolean boolean39 = specimenTemplate38.getFiltered();
        importItem31.Item = specimenTemplate38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        postTag42.PickListValues = strList47;
        java.util.ArrayList<java.lang.String> strList51 = postTag42.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor52 = processor41.setInputTimeSeriesUniqueIds(strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem53 = importItem31.setWarningMessages((java.util.List<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList54 = importItem31.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_55 = getChartDataV2_0.setSpecimenIds(strList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        getLabReports56.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList60 = getObservationsV2_59.SamplingContextTagIds;
        java.time.Instant instant61 = getObservationsV2_59.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = getObservationsV2_62.setDataClassifications((java.util.List<java.lang.String>) strList66);
        getObservationsV2_59.ResultStatuses = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports70 = getLabReports56.setSearch((java.util.List<java.lang.String>) strList66);
        getChartDataV2_55.ActivityTypes = strList66;
        java.util.List<java.lang.String> strList72 = getChartDataV2_55.TaxonIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + importItemStatusType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType30.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem31);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(processor52);
        org.junit.Assert.assertNotNull(importItem53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(getChartDataV2_55);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(instant61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_68);
        org.junit.Assert.assertNotNull(getLabReports70);
        org.junit.Assert.assertNull(strList72);
    }

    @Test
    public void test40409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40409");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postObservedProperty0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType3 = postObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty5 = postObservedProperty0.setUnitGroup(unitGroup4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty0.setResultType(resultType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = observedProperty8.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = observedProperty8.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = putObservedProperty14.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty17 = putObservedProperty14.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty19 = putObservedProperty17.setDescription("2021.4.62.0");
        java.lang.String str20 = putObservedProperty17.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj22 = postObservedProperty21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate23.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = observation26.setPlannedFieldResult(plannedFieldResult27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction29 = null;
        observation28.LabInstruction = labInstruction29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation28.setStatistics(observationStatistics31);
        java.time.OffsetDateTime offsetDateTime33 = observation32.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit35 = null;
        quantity34.Unit = unit35;
        observation32.Depth = quantity34;
        postFieldVisitActivityWithTemplate25.Depth = quantity34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity40 = quantity34.setUnit(unit39);
        postObservedProperty21.LowerLimit = quantity34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType42 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL;
        postObservedProperty21.AnalysisType = analysisType42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty44 = putObservedProperty17.setAnalysisType(analysisType42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty46 = putObservedProperty44.setResultType(resultType45);
        observedProperty13.ResultType = resultType45;
        postObservedProperty0.ResultType = resultType45;
        java.lang.String str49 = postObservedProperty0.CasNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = postObservedProperty0.getLowerLimit();
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNull(analysisType3);
        org.junit.Assert.assertNotNull(postObservedProperty5);
        org.junit.Assert.assertTrue("'" + resultType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty7);
        org.junit.Assert.assertNull(quantity11);
        org.junit.Assert.assertNotNull(observedProperty13);
        org.junit.Assert.assertNull(quantity15);
        org.junit.Assert.assertNotNull(putObservedProperty17);
        org.junit.Assert.assertNotNull(putObservedProperty19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(observation28);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(quantity40);
        org.junit.Assert.assertTrue("'" + analysisType42 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL + "'", analysisType42.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL));
        org.junit.Assert.assertNotNull(putObservedProperty44);
        org.junit.Assert.assertTrue("'" + resultType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(putObservedProperty46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(quantity50);
    }

    @Test
    public void test40410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40410");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity4 = fieldVisitDataServiceResponse3.LevelSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity5 = fieldVisitDataServiceResponse3.ControlConditionActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList7 = fieldVisitDataServiceResponse6.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse9 = fieldVisitDataServiceResponse6.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        fieldVisitDataServiceResponse6.ResponseTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList17 = inspectionActivity16.getInspections();
        java.lang.String str18 = inspectionActivity16.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList19 = inspectionActivity16.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity21 = inspectionActivity16.setParty("http");
        fieldVisitDataServiceResponse6.InspectionActivity = inspectionActivity16;
        fieldVisitDataServiceResponse3.InspectionActivity = inspectionActivity16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = fieldVisitDataServiceResponse3.ControlConditionActivity;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList25 = fieldVisitDataServiceResponse3.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity26 = fieldVisitDataServiceResponse3.getLevelSurveyActivity();
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNull(levelSurveyActivity4);
        org.junit.Assert.assertNull(controlConditionActivity5);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList7);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNull(inspectionList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(readingList19);
        org.junit.Assert.assertNotNull(inspectionActivity21);
        org.junit.Assert.assertNull(controlConditionActivity24);
        org.junit.Assert.assertNull(dischargeActivityList25);
        org.junit.Assert.assertNull(levelSurveyActivity26);
    }

    @Test
    public void test40411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40411");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = postLabAnalysisMethod0.AuditAttributes;
        java.lang.String str4 = postLabAnalysisMethod0.MethodId;
        java.lang.String str5 = postLabAnalysisMethod0.Context;
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test40412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40412");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4, observedPropertyArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod2.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod8 = postLabAnalysisMethod2.setAuditAttributes(auditAttributes7);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList9 = postLabAnalysisMethod8.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod8.setContext("/AQUARIUS/Acquisition/v2");
        java.lang.String str12 = postLabAnalysisMethod8.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = postLabAnalysisMethod8.setId("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str15 = postLabAnalysisMethod8.getContext();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod8.setMethodId("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = postLabAnalysisMethod17.setDescription("MaxInstant");
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observedPropertyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod8);
        org.junit.Assert.assertNotNull(observedPropertyList9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str15, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod19);
    }

    @Test
    public void test40413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40413");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setSubjectIdentifier("");
        java.lang.String str3 = openIdConnectUser2.getLastName();
        openIdConnectUser2.Identifier = "";
        openIdConnectUser2.CanConfigureSystem = true;
        java.lang.String str8 = openIdConnectUser2.getEmail();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser10 = openIdConnectUser2.setIdentifier("0001-01-01T00:00:00.0000000Z");
        openIdConnectUser10.SubjectIdentifier = "multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****";
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(openIdConnectUser10);
    }

    @Test
    public void test40414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40414");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse5 = timeSeriesDataServiceResponse3.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse3.setLabel("MinDuration");
        java.lang.String str8 = timeSeriesDataServiceResponse3.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse10 = timeSeriesDataServiceResponse3.setLocationIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Long long11 = timeSeriesDataServiceResponse3.NumPoints;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse10);
        org.junit.Assert.assertNull(long11);
    }

    @Test
    public void test40415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40415");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK;
        plannedActivity0.ActivityType = plannedActivityActivityType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate5 = activityTemplate3.setMedium(mediumType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate7 = activityTemplate3.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = plannedFieldResult8.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = plannedFieldResult8.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType17 = analyticalGroup16.getType();
        analyticalGroup16.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem21.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = null;
        analyticalGroupItem26.AnalysisMethod = analysisMethod29;
        java.lang.String str31 = analyticalGroupItem26.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = null;
        analyticalGroupItem37.AnalysisMethod = analysisMethod40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem21, analyticalGroupItem23, analyticalGroupItem26, analyticalGroupItem32, analyticalGroupItem35, analyticalGroupItem37 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList43, analyticalGroupItemArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup45 = analyticalGroup20.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList43);
        analyticalGroup16.AnalyticalGroupItems = analyticalGroupItemList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup16.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult49 = plannedFieldResult15.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str51 = putActivityTemplate50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate53 = putActivityTemplate50.setMedium(mediumType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult54 = plannedFieldResult15.setMedium(mediumType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate55 = activityTemplate3.setMedium(mediumType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType56 = activityTemplate55.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity57 = plannedActivity0.setMedium(mediumType56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType58 = plannedActivity0.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod59 = plannedActivity0.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate60 = plannedActivity0.getActivityTemplate();
        org.junit.Assert.assertTrue("'" + plannedActivityActivityType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK + "'", plannedActivityActivityType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK));
        org.junit.Assert.assertTrue("'" + mediumType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate5);
        org.junit.Assert.assertNotNull(activityTemplate7);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(plannedFieldResult15);
        org.junit.Assert.assertNull(analyticalGroupType17);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(analyticalGroup45);
        org.junit.Assert.assertNotNull(plannedFieldResult49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + mediumType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate53);
        org.junit.Assert.assertNotNull(plannedFieldResult54);
        org.junit.Assert.assertNotNull(activityTemplate55);
        org.junit.Assert.assertTrue("'" + mediumType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType56.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(plannedActivity57);
        org.junit.Assert.assertTrue("'" + mediumType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNull(collectionMethod59);
        org.junit.Assert.assertNull(activityTemplate60);
    }

    @Test
    public void test40416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40416");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        java.lang.Double double11 = timeAlignedPoint0.NumericValue2;
        java.lang.String str12 = timeAlignedPoint0.DisplayValue1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint0.setApprovalName4("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        timeAlignedPoint14.NumericValue9 = 0.0d;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(double11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
    }

    @Test
    public void test40417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40417");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putAnalysisMethod0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType3 = null;
        putObservedProperty2.ResultType = resultType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = postAnalysisMethod5.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod8 = postAnalysisMethod5.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod10 = postAnalysisMethod5.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14, importHistoryEventSimpleArray13);
        postObservedProperty11.ImportHistoryEventSimples = importHistoryEventSimpleList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod17 = postAnalysisMethod5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty18 = putObservedProperty2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod19 = putAnalysisMethod0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = postAnalysisMethod20.ImportHistoryEventSimples;
        postAnalysisMethod20.Id = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod26 = postLabAnalysisMethod24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList28, observedPropertyArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod30 = postLabAnalysisMethod26.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod32 = postLabAnalysisMethod26.setAuditAttributes(auditAttributes31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList33 = postLabAnalysisMethod32.getObservedProperties();
        postAnalysisMethod20.ObservedProperties = observedPropertyList33;
        putAnalysisMethod19.ObservedProperties = observedPropertyList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod37 = putAnalysisMethod19.setContext("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation40 = observation38.setPlannedFieldResult(plannedFieldResult39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction41 = null;
        observation40.LabInstruction = labInstruction41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation44 = observation40.setStatistics(observationStatistics43);
        java.time.OffsetDateTime offsetDateTime45 = observation44.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList46 = observation44.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = observation44.setObservedProperty(observedProperty47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation50 = observation44.setResultGrade(resultGrade49);
        java.time.OffsetDateTime offsetDateTime51 = observation50.getObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device52 = observation50.Device;
        java.time.OffsetDateTime offsetDateTime53 = observation50.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal56 = observationMinimal54.setSpecimen(specimenNestedInActivity55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty57 = observationMinimal56.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue59 = categoricalResult58.getFixedValue();
        observationMinimal56.CategoricalResult = categoricalResult58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult61.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue64 = categoricalResult61.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult61.NullMeasureQualifier = nullMeasureQualifier65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult67 = categoricalResult58.setNullMeasureQualifier(nullMeasureQualifier65);
        observation50.NullMeasureQualifier = nullMeasureQualifier65;
        java.lang.String str69 = nullMeasureQualifier65.getCustomId();
        nullMeasureQualifier65.Description = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str73 = postLaboratory72.Address;
        java.lang.String str74 = postLaboratory72.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity77 = samplingPlanPlannedActivity75.setAuditAttributes(auditAttributes76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = auditAttributes78.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity77.AuditAttributes = auditAttributes78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = samplingPlanPlannedActivity77.AuditAttributes;
        postLaboratory72.AuditAttributes = auditAttributes82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory85 = postLaboratory72.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str86 = postLaboratory85.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes87 = postLaboratory85.getAuditAttributes();
        nullMeasureQualifier65.AuditAttributes = auditAttributes87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod89 = putAnalysisMethod37.setAuditAttributes(auditAttributes87);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList90 = putAnalysisMethod37.ObservedProperties;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList6);
        org.junit.Assert.assertNotNull(postAnalysisMethod8);
        org.junit.Assert.assertNotNull(postAnalysisMethod10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(postAnalysisMethod17);
        org.junit.Assert.assertNotNull(putObservedProperty18);
        org.junit.Assert.assertNotNull(putAnalysisMethod19);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod26);
        org.junit.Assert.assertNotNull(observedPropertyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod30);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod32);
        org.junit.Assert.assertNotNull(observedPropertyList33);
        org.junit.Assert.assertNotNull(putAnalysisMethod37);
        org.junit.Assert.assertNotNull(observation40);
        org.junit.Assert.assertNotNull(observation44);
        org.junit.Assert.assertNull(offsetDateTime45);
        org.junit.Assert.assertNull(importHistoryEventSimpleList46);
        org.junit.Assert.assertNotNull(observation48);
        org.junit.Assert.assertNotNull(observation50);
        org.junit.Assert.assertNull(offsetDateTime51);
        org.junit.Assert.assertNull(device52);
        org.junit.Assert.assertNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(observationMinimal56);
        org.junit.Assert.assertNull(observedProperty57);
        org.junit.Assert.assertNull(categoricalValue59);
        org.junit.Assert.assertNull(categoricalValue64);
        org.junit.Assert.assertNotNull(categoricalResult67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity77);
        org.junit.Assert.assertNotNull(auditAttributes80);
        org.junit.Assert.assertNotNull(auditAttributes82);
        org.junit.Assert.assertNotNull(postLaboratory85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(auditAttributes87);
        org.junit.Assert.assertNotNull(putAnalysisMethod89);
        org.junit.Assert.assertNotNull(observedPropertyList90);
    }

    @Test
    public void test40418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40418");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser();
        postOpenIdConnectUser0.SubjectIdentifier = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostOpenIdConnectUser postOpenIdConnectUser4 = postOpenIdConnectUser0.setSubjectIdentifier("'.'SSSSSSS");
        postOpenIdConnectUser4.CanConfigureSystem = false;
        java.lang.Boolean boolean7 = postOpenIdConnectUser4.Active;
        org.junit.Assert.assertNotNull(postOpenIdConnectUser4);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test40419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40419");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setDisplayValue2("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint12.setApprovalLevel10((java.lang.Long) 10L);
        java.lang.Long long15 = timeAlignedPoint12.getApprovalLevel1();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNull(long15);
    }

    @Test
    public void test40420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40420");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod2 = locationMonitoringMethod0.setSubLocationIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod4 = locationMonitoringMethod0.setParameterUniqueId("'.'SSSSSSS");
        java.lang.String str5 = locationMonitoringMethod0.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod7 = locationMonitoringMethod0.setLocationIdentifier("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str8 = locationMonitoringMethod0.LocationIdentifier;
        org.junit.Assert.assertNotNull(locationMonitoringMethod2);
        org.junit.Assert.assertNotNull(locationMonitoringMethod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locationMonitoringMethod7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str8, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test40421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40421");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolder putLocationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolder();
        java.lang.Object obj1 = putLocationFolder0.getResponseType();
        java.lang.Object obj2 = putLocationFolder0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderWriteBase locationFolderWriteBase4 = putLocationFolder0.setLocationFolderName("http");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertNotNull(locationFolderWriteBase4);
    }

    @Test
    public void test40422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40422");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = calibrationCheck0.setTime(instant12);
        java.time.Instant instant14 = calibrationCheck13.Time;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails15 = null;
        calibrationCheck13.StandardDetails = standardDetails15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck18 = calibrationCheck13.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck20 = calibrationCheck13.setStandardDetails(standardDetails19);
        java.lang.String str21 = standardDetails19.StandardCode;
        java.time.Instant instant22 = standardDetails19.getExpirationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant24 = activeMeterCalibration23.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double26 = activeMeterCalibrationEquation25.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double28 = activeMeterCalibrationEquation27.getSlope();
        java.lang.String str29 = activeMeterCalibrationEquation27.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double31 = activeMeterCalibrationEquation30.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation25, activeMeterCalibrationEquation27, activeMeterCalibrationEquation30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList33, activeMeterCalibrationEquationArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration35 = activeMeterCalibration23.setEquations(activeMeterCalibrationEquationList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest36.GetParts = "http";
        java.lang.Boolean boolean39 = timeSeriesDataCorrectedServiceRequest36.isIncludeGapMarkers();
        java.time.Instant instant40 = timeSeriesDataCorrectedServiceRequest36.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str42 = ratingModelEffectiveShiftsServiceRequest41.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str44 = referencePointPeriod43.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase46 = referencePointPeriod43.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod43.Uncertainty = 10.0d;
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase50 = referencePointPeriod43.setValidFrom(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest51 = ratingModelEffectiveShiftsServiceRequest41.setQueryFrom(instant49);
        timeSeriesDataCorrectedServiceRequest36.QueryTo = instant49;
        activeMeterCalibration35.FirstUsedDate = instant49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails54 = standardDetails19.setExpirationDate(instant49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails56 = standardDetails19.setStandardCode("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(calibrationCheck13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(calibrationCheck18);
        org.junit.Assert.assertNotNull(calibrationCheck20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(double26);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(double31);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration35);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(referencePointPeriodBase46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(referencePointPeriodBase50);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest51);
        org.junit.Assert.assertNotNull(standardDetails54);
        org.junit.Assert.assertNotNull(standardDetails56);
    }

    @Test
    public void test40423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40423");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork2 = completedWork0.setGroundWaterLevelPerformed((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork4 = completedWork2.setRecorderDataCollected((java.lang.Boolean) false);
        completedWork4.GroundWaterLevelPerformed = true;
        java.lang.Boolean boolean7 = completedWork4.isLevelsPerformed();
        org.junit.Assert.assertNotNull(completedWork2);
        org.junit.Assert.assertNotNull(completedWork4);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test40424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40424");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUsers getUsers0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUsers();
        java.lang.Object obj1 = getUsers0.getResponseType();
        java.lang.String str2 = getUsers0.getAuthenticationType();
        java.lang.String str3 = getUsers0.AuthenticationType;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UsersResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UsersResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$UsersResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test40425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40425");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setGradeCode6((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint12.setApprovalName3("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.Double double15 = timeAlignedPoint14.NumericValue4;
        timeAlignedPoint14.ApprovalLevel9 = (-1L);
        java.lang.Double double18 = timeAlignedPoint14.NumericValue2;
        java.lang.Long long19 = timeAlignedPoint14.GradeCode7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint21 = timeAlignedPoint14.setNumericValue8((java.lang.Double) 100.0d);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNotNull(timeAlignedPoint21);
    }

    @Test
    public void test40426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40426");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries4 = postDatumConvertedTimeSeries2.setComment("/AQUARIUS/Provisioning/v1");
        postDatumConvertedTimeSeries4.Comment = "";
        java.lang.String str7 = postDatumConvertedTimeSeries4.getTimeSeriesUniqueId();
        java.lang.String str8 = postDatumConvertedTimeSeries4.getParameter();
        java.lang.String str9 = postDatumConvertedTimeSeries4.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries11 = postDatumConvertedTimeSeries4.setMethod("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        postDatumConvertedTimeSeries11.SourceIsLocalAssumedDatum = false;
        postDatumConvertedTimeSeries11.Label = "http";
        java.lang.String str16 = postDatumConvertedTimeSeries11.Label;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http" + "'", str16, "http");
    }

    @Test
    public void test40427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40427");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType();
        java.lang.Integer int1 = searchResultLocationGroupType0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType3 = searchResultLocationGroupType0.setCursor("'.'SSSSSSS");
        searchResultLocationGroupType0.Cursor = "POST";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType> locationGroupTypeList6 = searchResultLocationGroupType0.getDomainObjects();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(searchResultLocationGroupType3);
        org.junit.Assert.assertNull(locationGroupTypeList6);
    }

    @Test
    public void test40428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40428");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_64 = deleteObservationsV2_62.setNumericResultValue((java.lang.Double) 0.0d);
        java.util.List<java.lang.String> strList65 = deleteObservationsV2_64.LabReportIds;
        java.lang.String str66 = deleteObservationsV2_64.Cursor;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_64);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test40429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40429");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession();
        java.lang.Object obj1 = postSession0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession3 = postSession0.setEncryptedPassword("hi!");
        java.lang.String str4 = postSession3.getUsername();
        java.lang.String str5 = postSession3.Username;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession7 = postSession3.setLocale("/AQUARIUS/Acquisition/v2");
        java.lang.String str8 = postSession3.getLocale();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession10 = postSession3.setLocale("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str11 = postSession3.getEncryptedPassword();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class java.lang.String");
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postSession7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str8, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(postSession10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test40430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40430");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark2 = locationRemark0.setDescription("MaxInstant");
        java.lang.String str3 = locationRemark2.getTypeName();
        java.time.Instant instant4 = locationRemark2.CreateTime;
        java.time.Instant instant5 = locationRemark2.getToTime();
        java.time.Instant instant6 = locationRemark2.FromTime;
        java.lang.String str7 = locationRemark2.getTypeName();
        locationRemark2.Remark = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str10 = locationRemark2.getTypeName();
        org.junit.Assert.assertNotNull(locationRemark2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test40431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40431");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj1 = postQualifier0.getResponseType();
        java.lang.String str2 = postQualifier0.QualifierCode;
        java.lang.Object obj3 = postQualifier0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierBase qualifierBase5 = postQualifier0.setDisplayName("POST");
        java.lang.Object obj6 = postQualifier0.getResponseType();
        java.lang.Object obj7 = postQualifier0.getResponseType();
        java.lang.Object obj8 = postQualifier0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNotNull(qualifierBase5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
    }

    @Test
    public void test40432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40432");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setComputationIdentifier("");
        postStatisticalDerivedTimeSeries5.SubLocationIdentifier = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries5.setMethod("");
        postStatisticalDerivedTimeSeries5.UtcOffset = "/api";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries14 = postStatisticalDerivedTimeSeries12.setComment("'.'SSSSSSS");
        java.lang.String str15 = postStatisticalDerivedTimeSeries12.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries17 = postStatisticalDerivedTimeSeries12.setComputationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries19 = postStatisticalDerivedTimeSeries12.setObservationOffsetInMinutes((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries22 = postStatisticalDerivedTimeSeries20.setComment("'.'SSSSSSS");
        java.lang.String str23 = postStatisticalDerivedTimeSeries20.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries25 = postStatisticalDerivedTimeSeries20.setTimeStepCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries28 = postStatisticalDerivedTimeSeries26.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries30 = postStatisticalDerivedTimeSeries26.setLabel("'.'SSSSSSS");
        postStatisticalDerivedTimeSeries26.Parameter = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries34 = postStatisticalDerivedTimeSeries26.setLocationUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries36 = postStatisticalDerivedTimeSeries34.setNewValueLocation(newValueLocationType35);
        postStatisticalDerivedTimeSeries25.NewValueLocation = newValueLocationType35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries38 = postStatisticalDerivedTimeSeries12.setNewValueLocation(newValueLocationType35);
        postStatisticalDerivedTimeSeries5.NewValueLocation = newValueLocationType35;
        java.lang.String str40 = postStatisticalDerivedTimeSeries5.BinAnchorOffsetPeriod;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries17);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries19);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries25);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries28);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries30);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries34);
        org.junit.Assert.assertTrue("'" + newValueLocationType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries36);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries38);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test40433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40433");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        java.lang.String str1 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType2 = observationNestedInSpecimen0.getDataClassification();
        java.time.OffsetDateTime offsetDateTime3 = null;
        observationNestedInSpecimen0.ObservedTime = offsetDateTime3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult5 = null;
        observationNestedInSpecimen0.NumericResult = numericResult5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_7.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus10.Id = "0001-01-01T00:00:00.000Z";
        putObservationV2_7.ResultStatus = resultStatus10;
        resultStatus10.CustomId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus16.Id = "0001-01-01T00:00:00.000Z";
        resultStatus16.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        java.lang.String str22 = observationNestedInSpecimen21.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType23 = observationNestedInSpecimen21.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus24.SystemCode = resultStatusSystemCodeType25;
        resultStatus24.CustomId = "-PT87591240H";
        resultStatus24.CustomId = "https";
        observationNestedInSpecimen21.ResultStatus = resultStatus24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType32 = resultStatus24.SystemCode;
        resultStatus16.SystemCode = resultStatusSystemCodeType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus34 = resultStatus10.setSystemCode(resultStatusSystemCodeType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen35 = observationNestedInSpecimen0.setResultStatus(resultStatus10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult38 = categoricalResult36.setValue("");
        categoricalResult38.Value = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen41 = observationNestedInSpecimen35.setCategoricalResult(categoricalResult38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_44 = postObservationV2_42.setLabInstruction(labInstruction43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails47 = labResultDetails45.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails49 = labResultDetails45.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_50 = postObservationV2_44.setLabResultDetails(labResultDetails49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult51.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue54 = categoricalResult51.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult51.NullMeasureQualifier = nullMeasureQualifier55;
        postObservationV2_44.NullMeasureQualifier = nullMeasureQualifier55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier59 = nullMeasureQualifier55.setDescription("9999-12-31T23:59:59.999Z");
        categoricalResult38.NullMeasureQualifier = nullMeasureQualifier59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier62 = nullMeasureQualifier59.setId("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(dataClassificationType2);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(dataClassificationType23);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(resultStatus34);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen35);
        org.junit.Assert.assertNotNull(categoricalResult38);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen41);
        org.junit.Assert.assertNotNull(postObservationV2_44);
        org.junit.Assert.assertNotNull(labResultDetails47);
        org.junit.Assert.assertNotNull(labResultDetails49);
        org.junit.Assert.assertNotNull(postObservationV2_50);
        org.junit.Assert.assertNull(categoricalValue54);
        org.junit.Assert.assertNotNull(nullMeasureQualifier59);
        org.junit.Assert.assertNotNull(nullMeasureQualifier62);
    }

    @Test
    public void test40434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40434");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession();
        postSession0.EncryptedPassword = "9999-12-31T23:59:59.999Z";
        postSession0.Locale = "http";
        postSession0.Locale = "/AQUARIUS/Acquisition/v2";
        java.lang.String str7 = postSession0.getLocale();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession9 = postSession0.setLocale("/AQUARIUS");
        java.lang.String str10 = postSession9.Username;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PostSession postSession12 = postSession9.setUsername("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str13 = postSession9.getEncryptedPassword();
        java.lang.String str14 = postSession9.getLocale();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(postSession9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postSession12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str13, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/AQUARIUS" + "'", str14, "/AQUARIUS");
    }

    @Test
    public void test40435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40435");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str1 = standardDefinition0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = null;
        putSchedule5.LastGenerationDate = offsetDateTime7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType9 = putSchedule5.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = plannedFieldResult10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = plannedFieldResult10.setAuditAttributes(auditAttributes15);
        putSchedule5.AuditAttributes = auditAttributes15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition19 = standardDefinition0.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition21 = standardDefinition19.setId("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList22 = standardDefinition19.ObservationStandards;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = standardDefinition19.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition25 = standardDefinition19.setName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType9);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(plannedFieldResult17);
        org.junit.Assert.assertNotNull(standardDefinition19);
        org.junit.Assert.assertNotNull(standardDefinition21);
        org.junit.Assert.assertNull(observationStandardList22);
        org.junit.Assert.assertNotNull(auditAttributes23);
        org.junit.Assert.assertNotNull(standardDefinition25);
    }

    @Test
    public void test40436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40436");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        java.lang.String str1 = postImportLabReportData0.TimeZoneOffset;
        java.lang.String str2 = postImportLabReportData0.TimeZoneOffset;
        java.lang.Boolean boolean3 = postImportLabReportData0.getCreateMissingObjects();
        java.lang.Boolean boolean4 = postImportLabReportData0.CreateMissingObjects;
        java.lang.Boolean boolean5 = postImportLabReportData0.getUpdateExistingResults();
        java.lang.String str6 = postImportLabReportData0.FileType;
        postImportLabReportData0.FileType = "MaxDuration";
        java.lang.String str9 = postImportLabReportData0.FileType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MaxDuration" + "'", str9, "MaxDuration");
    }

    @Test
    public void test40437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40437");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest();
        java.lang.String str1 = timeSeriesDescriptionServiceRequest0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest3 = timeSeriesDescriptionServiceRequest0.setComputationIdentifier("hi!");
        java.lang.Object obj4 = timeSeriesDescriptionServiceRequest3.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(timeSeriesDescriptionServiceRequest3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesDescriptionListServiceResponse");
    }

    @Test
    public void test40438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40438");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationType searchResultLocationType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationType();
        searchResultLocationType0.TotalCount = 10;
        searchResultLocationType0.TotalCount = 2;
        searchResultLocationType0.Cursor = "'.'SSSSSSS";
        java.lang.String str7 = searchResultLocationType0.Cursor;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "'.'SSSSSSS" + "'", str7, "'.'SSSSSSS");
    }

    @Test
    public void test40439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40439");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate1.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList6 = specimenTemplate5.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate9 = specimenTemplate7.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList12 = specimenTemplate11.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate1, specimenTemplate4, specimenTemplate5, specimenTemplate9, specimenTemplate10, specimenTemplate11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList14, specimenTemplateArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate16 = postFieldVisitActivityWithTemplate0.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate18 = postFieldVisitActivityWithTemplate16.setCollectionMethod(collectionMethod17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        postFieldVisitActivityWithTemplate16.CollectionMethod = collectionMethod19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate22 = postFieldVisitActivityWithTemplate16.setId("2021.4.62.0");
        java.lang.Object obj23 = postFieldVisitActivityWithTemplate16.getResponseType();
        org.junit.Assert.assertNull(labInstructionTemplateList6);
        org.junit.Assert.assertNotNull(specimenTemplate9);
        org.junit.Assert.assertNull(labInstructionTemplateList12);
        org.junit.Assert.assertNotNull(specimenTemplateArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate16);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate18);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Activity");
    }

    @Test
    public void test40440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40440");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        java.lang.String str1 = ratingModelDescription0.getDescription();
        ratingModelDescription0.InputUnit = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        java.lang.String str4 = ratingModelDescription0.getLocationIdentifier();
        java.lang.String str5 = ratingModelDescription0.Label;
        java.lang.String str6 = ratingModelDescription0.getLabel();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test40441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40441");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setIsTransient((java.lang.Boolean) false);
        java.time.Instant instant7 = report4.getCreatedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList9 = getExportSpecimens8.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant11 = qualifier10.DateApplied;
        java.lang.String str12 = qualifier10.User;
        java.lang.String str13 = qualifier10.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest14.setQueryFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier20 = qualifier10.setDateApplied(instant17);
        getExportSpecimens8.Before = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark24 = locationRemark22.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList26 = fieldVisitDataServiceResponse25.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse28 = fieldVisitDataServiceResponse25.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary29.Reviewer = "";
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary29.MeasurementTime = instant32;
        fieldVisitDataServiceResponse25.ResponseTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = locationRemark22.setCreateTime(instant32);
        getExportSpecimens8.EndModificationTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report37 = report4.setCreatedTime(instant32);
        report4.ReportUniqueId = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(qualifier20);
        org.junit.Assert.assertNotNull(locationRemark24);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList26);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationRemark35);
        org.junit.Assert.assertNotNull(report37);
    }

    @Test
    public void test40442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40442");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        java.time.Instant instant8 = getObservationsV2_1.getStartObservedTime();
        getObservationsV2_1.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList11 = null;
        getObservationsV2_1.SamplingContextTagIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription15 = locationDescription13.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType17 = null;
        controlConditionActivity16.ControlCleaned = controlCleanedType17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        controlConditionActivity16.DateCleaned = instant20;
        locationDescription15.LastModified = instant20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_1.setStartResultTime(instant20);
        getExportObservations0.StartObservedTime = instant20;
        java.util.List<java.lang.String> strList26 = getExportObservations0.getLabReportIds();
        java.lang.String str27 = getExportObservations0.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations29 = getExportObservations0.setImportHistoryEventId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDescription15);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(getExportObservations29);
    }

    @Test
    public void test40443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40443");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = importItemTaxon0.setRowId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon4 = importItemTaxon0.setRowId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon5 = importItemTaxon0.Item;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon0.setRowId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.util.List<java.lang.String> strList9 = importItemAnalysisMethod8.getWarningMessages();
        java.util.List<java.lang.String> strList10 = importItemAnalysisMethod8.Fields;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList12 = importItemObject11.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList14, importChangeItemArray13);
        importItemObject11.ItemComparison = importChangeItemList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject25 = importItemObject11.setExistingItem((java.lang.Object) putLocationTags17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser28 = openIdConnectUser26.setIdentifier("");
        java.lang.Boolean boolean29 = openIdConnectUser28.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject30 = importItemObject11.setErrors((java.lang.Object) openIdConnectUser28);
        java.lang.Object obj31 = importItemObject11.ExistingItem;
        java.util.List<java.lang.String> strList32 = importItemObject11.getFields();
        java.util.List<java.lang.String> strList33 = importItemObject11.Fields;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity35 = putActivity34.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity37 = putActivity34.setEndTime(offsetDateTime36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation38 = null;
        putActivity37.SamplingLocation = samplingLocation38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup41 = postObservedProperty40.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit43 = null;
        quantity42.Unit = unit43;
        postObservedProperty40.LowerLimit = quantity42;
        putActivity37.Depth = quantity42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject47 = importItemObject11.setItem((java.lang.Object) putActivity37);
        java.util.List<java.lang.String> strList48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject49 = importItemObject11.setWarningMessages(strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary52.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        dischargeSummary52.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse51.setNextToken(instant56);
        java.time.Instant instant60 = locationDescriptionListServiceResponse51.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities61 = getActivities50.setToStartTime(instant60);
        java.lang.String str62 = getActivities61.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList64 = getObservationsV2_63.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray75 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = putLocationTags71.setTagUniqueIds(strList76);
        getObservationsV2_65.QualityControlTypes = strList76;
        getObservationsV2_63.ResultGrades = strList76;
        getActivities61.Media = strList76;
        importItemObject11.Fields = strList76;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList83 = importItemObject11.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod84 = importItemAnalysisMethod8.setItemComparison(importChangeItemList83);
        importItemTaxon7.ItemComparison = importChangeItemList83;
        org.junit.Assert.assertNotNull(importItemTaxon2);
        org.junit.Assert.assertNotNull(importItemTaxon4);
        org.junit.Assert.assertNull(taxon5);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(importChangeItemArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(importItemObject25);
        org.junit.Assert.assertNotNull(openIdConnectUser28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNotNull(importItemObject30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(plannedActivity35);
        org.junit.Assert.assertNotNull(putActivity37);
        org.junit.Assert.assertNull(unitGroup41);
        org.junit.Assert.assertNotNull(importItemObject47);
        org.junit.Assert.assertNotNull(importItemObject49);
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(getActivities61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(putLocationTags78);
        org.junit.Assert.assertNotNull(importChangeItemList83);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod84);
    }

    @Test
    public void test40444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40444");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable();
        java.lang.String str1 = codeTable0.DisplayName;
        codeTable0.SystemCode = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable5 = codeTable0.setSystemCode("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable7 = codeTable0.setIsSystem((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable9 = codeTable7.setSystemCode("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable11 = codeTable9.setIsSystem((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableRequestBase codeTableRequestBase13 = codeTable9.setDisplayName("http://MaxDurationhttp/json/reply/Double");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(codeTable5);
        org.junit.Assert.assertNotNull(codeTable7);
        org.junit.Assert.assertNotNull(codeTable9);
        org.junit.Assert.assertNotNull(codeTable11);
        org.junit.Assert.assertNotNull(codeTableRequestBase13);
    }

    @Test
    public void test40445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40445");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        java.time.Instant instant10 = locationDescriptionListServiceResponse1.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = getActivities0.setToStartTime(instant10);
        java.lang.String str12 = getActivities11.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList14 = getObservationsV2_13.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        getObservationsV2_15.SpecimenIds = strList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        getObservationsV2_15.QualityControlTypes = strList26;
        getObservationsV2_13.ResultGrades = strList26;
        getActivities11.Media = strList26;
        java.util.List<java.lang.String> strList32 = getActivities11.ActivityTemplateId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.QualityControlTypes = strList44;
        java.util.List<java.lang.String> strList48 = getObservationsV2_33.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList49 = getObservationsV2_33.DataClassifications;
        java.util.List<java.lang.String> strList50 = getObservationsV2_33.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_53.setDataClassifications((java.util.List<java.lang.String>) strList57);
        getObservationsV2_59.DepthUnitCustomId = "hi!";
        java.lang.String str62 = getObservationsV2_59.CustomId;
        java.util.List<java.lang.String> strList63 = getObservationsV2_59.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray74 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = putLocationTags70.setTagUniqueIds(strList75);
        getObservationsV2_64.QualityControlTypes = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_59.setMedia((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str81 = getObservationsV2_80.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        getObservationsV2_82.SpecimenIds = strList85;
        getObservationsV2_80.ProjectIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_89 = getObservationsV2_59.setObservedPropertyIds((java.util.List<java.lang.String>) strList85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest90 = timeAlignedDataServiceRequest51.setTimeSeriesOutputUnitIds(strList85);
        getObservationsV2_33.LabReportIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities92 = getActivities11.setIds((java.util.List<java.lang.String>) strList85);
        java.util.List<java.lang.String> strList93 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities94 = getActivities92.setSamplingLocationIds(strList93);
        java.util.List<java.lang.String> strList95 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities96 = getActivities94.setProjectIds(strList95);
        java.lang.String str97 = getActivities94.Sort;
        java.lang.Integer int98 = getActivities94.Limit;
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(getActivities11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(putLocationTags77);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_89);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest90);
        org.junit.Assert.assertNotNull(getActivities92);
        org.junit.Assert.assertNotNull(getActivities94);
        org.junit.Assert.assertNotNull(getActivities96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNull(int98);
    }

    @Test
    public void test40446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40446");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList3 = getObservationsV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        getObservationsV2_2.ResultGrades = strList15;
        getExtendedAttributeDropdownlistitems1.Search = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult21 = metricResult0.setMatchedObservations((java.util.List<java.lang.String>) strList15);
        metricResult21.OverriddenByUser = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation25.setPlannedFieldResult(plannedFieldResult26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction28 = null;
        observation27.LabInstruction = labInstruction28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setStatistics(observationStatistics30);
        java.time.OffsetDateTime offsetDateTime32 = observation31.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade33 = observation31.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = auditAttributes34.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation37 = observation31.setAuditAttributes(auditAttributes34);
        putAccessGroup24.AuditAttributes = auditAttributes34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putAccessGroup24.AuditAttributes;
        metricResult21.AuditAttributes = auditAttributes39;
        java.lang.String str41 = metricResult21.getId();
        metricResult21.Score = 10.0d;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(metricResult21);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNull(offsetDateTime32);
        org.junit.Assert.assertNull(resultGrade33);
        org.junit.Assert.assertNotNull(auditAttributes36);
        org.junit.Assert.assertNotNull(observation37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test40447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40447");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty2.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty2);
        java.lang.String str6 = metricConfiguration5.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str8 = metricConfiguration7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty9.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = metricConfiguration7.setObservedProperty(observedProperty9);
        metricConfiguration7.IncludeChildren = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = metricConfiguration7.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str17 = metricConfiguration16.getId();
        metricConfiguration16.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration21 = metricConfiguration16.setObservedProperty(observedProperty20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration16.AggregationType = aggregationType22;
        metricConfiguration7.AggregationType = aggregationType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration25 = metricConfiguration5.setAggregationType(aggregationType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration27 = metricConfiguration5.setDescription("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        metricConfiguration5.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(metricConfiguration12);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(metricConfiguration21);
        org.junit.Assert.assertTrue("'" + aggregationType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration25);
        org.junit.Assert.assertNotNull(metricConfiguration27);
    }

    @Test
    public void test40448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40448");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReferencePoint putReferencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReferencePoint();
        java.lang.Object obj1 = putReferencePoint0.getResponseType();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReferencePointPeriod> putReferencePointPeriodList2 = putReferencePoint0.ReferencePointPeriods;
        java.lang.String str3 = putReferencePoint0.ReferencePointUniqueId;
        java.time.Instant instant4 = putReferencePoint0.getDecommissionedDate();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReferencePointPeriod> putReferencePointPeriodList5 = putReferencePoint0.getReferencePointPeriods();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePoint");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePoint");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePoint");
        org.junit.Assert.assertNull(putReferencePointPeriodList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(putReferencePointPeriodList5);
    }

    @Test
    public void test40449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40449");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        java.lang.Boolean boolean1 = extendedAttributeField0.CanBeEmpty;
        java.lang.String str2 = extendedAttributeField0.getColumnIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField4 = extendedAttributeField0.setColumnIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.util.List<java.lang.String> strList5 = extendedAttributeField0.getValueOptions();
        java.util.List<java.lang.String> strList6 = extendedAttributeField0.ValueOptions;
        java.lang.String str7 = extendedAttributeField0.ColumnIdentifier;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(extendedAttributeField4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str7, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
    }

    @Test
    public void test40450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40450");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4, observedPropertyArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod2.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod8 = postLabAnalysisMethod2.setAuditAttributes(auditAttributes7);
        postLabAnalysisMethod8.MethodId = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList11 = null;
        postLabAnalysisMethod8.ObservedProperties = observedPropertyList11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = putAnalysisMethod13.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod16 = putAnalysisMethod13.setMethodId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod18 = putAnalysisMethod16.setName("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        putSamplingLocation19.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation24.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = observation24.setCategoricalResult(categoricalResult27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList30, importHistoryEventSimpleArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod33 = postLabAnalysisMethod23.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty34 = postObservedProperty22.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation35 = putSamplingLocation19.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone36 = putSamplingLocation35.getTimeZone();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList37 = putSamplingLocation35.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod38 = putAnalysisMethod16.setImportHistoryEventSimples(importHistoryEventSimpleList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod39 = postLabAnalysisMethod8.setImportHistoryEventSimples(importHistoryEventSimpleList37);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observedPropertyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod8);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(putAnalysisMethod16);
        org.junit.Assert.assertNotNull(putAnalysisMethod18);
        org.junit.Assert.assertNotNull(observation28);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod33);
        org.junit.Assert.assertNotNull(postObservedProperty34);
        org.junit.Assert.assertNotNull(putSamplingLocation35);
        org.junit.Assert.assertNull(timeZone36);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList37);
        org.junit.Assert.assertNotNull(putAnalysisMethod38);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod39);
    }

    @Test
    public void test40451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40451");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex putAddOrUpdateIndex0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex();
        java.lang.String str1 = putAddOrUpdateIndex0.IndexConfigId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex putAddOrUpdateIndex3 = putAddOrUpdateIndex0.setIndexConfigId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex putAddOrUpdateIndex5 = putAddOrUpdateIndex0.setFieldVisitId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.String str6 = putAddOrUpdateIndex5.getIndexConfigId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putAddOrUpdateIndex3);
        org.junit.Assert.assertNotNull(putAddOrUpdateIndex5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2021.4.62.0" + "'", str6, "2021.4.62.0");
    }

    @Test
    public void test40452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40452");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType1 = samplingPlanPlannedActivityRecurrence0.TemporalExpression;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType2 = samplingPlanPlannedActivityRecurrence0.TemporalExpression;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType3 = samplingPlanPlannedActivityRecurrence0.RecurrenceFrequency;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence5 = samplingPlanPlannedActivityRecurrence0.setTemporalExpression(temporalExpressionType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType6 = samplingPlanPlannedActivityRecurrence0.RecurrenceFrequency;
        java.util.List<java.lang.String> strList7 = samplingPlanPlannedActivityRecurrence0.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList9 = getExportSpecimens8.getProjectIds();
        java.util.List<java.lang.String> strList10 = getExportSpecimens8.FieldVisitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = dischargeSummary13.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        dischargeSummary13.MeasurementTime = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse12.setNextToken(instant17);
        java.time.Instant instant21 = locationDescriptionListServiceResponse12.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = getActivities11.setToStartTime(instant21);
        java.lang.String str23 = getActivities22.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList25 = getObservationsV2_24.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        getObservationsV2_26.SpecimenIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        getObservationsV2_26.QualityControlTypes = strList37;
        getObservationsV2_24.ResultGrades = strList37;
        getActivities22.Media = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens43 = getExportSpecimens8.setSamplingLocationIds((java.util.List<java.lang.String>) strList37);
        samplingPlanPlannedActivityRecurrence0.MonthsOfYear = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_WEEK_OF_MONTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence46 = samplingPlanPlannedActivityRecurrence0.setTemporalExpression(temporalExpressionType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType47 = samplingPlanPlannedActivityRecurrence0.TemporalExpression;
        org.junit.Assert.assertNull(temporalExpressionType1);
        org.junit.Assert.assertNull(temporalExpressionType2);
        org.junit.Assert.assertNull(recurrenceFrequencyType3);
        org.junit.Assert.assertTrue("'" + temporalExpressionType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH + "'", temporalExpressionType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence5);
        org.junit.Assert.assertNull(recurrenceFrequencyType6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(dischargeSummary15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(getActivities22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(getExportSpecimens43);
        org.junit.Assert.assertTrue("'" + temporalExpressionType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_WEEK_OF_MONTH + "'", temporalExpressionType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence46);
        org.junit.Assert.assertTrue("'" + temporalExpressionType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_WEEK_OF_MONTH + "'", temporalExpressionType47.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType.LAST_WEEK_OF_MONTH));
    }

    @Test
    public void test40453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40453");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType1 = analyticalGroup0.getType();
        analyticalGroup0.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup5 = analyticalGroup0.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.Integer int6 = analyticalGroup0.NumberOfObservedPropertiesInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = analyticalGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup9 = analyticalGroup0.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList10 = analyticalGroup0.AnalyticalGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        java.lang.Integer int12 = postAnalyticalGroup11.NumberOfObservedPropertiesInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup15 = postAnalyticalGroup13.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup18 = putAnalyticalGroup16.setAnalyticalGroupItems(analyticalGroupItemList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup21 = putAnalyticalGroup19.setAnalyticalGroupItems(analyticalGroupItemList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup23 = putAnalyticalGroup21.setName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup25 = putAnalyticalGroup23.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        putAnalyticalGroup25.Type = analyticalGroupType26;
        putAnalyticalGroup16.Type = analyticalGroupType26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup29 = postAnalyticalGroup13.setType(analyticalGroupType26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup30 = postAnalyticalGroup11.setType(analyticalGroupType26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = analyticalGroup0.setType(analyticalGroupType26);
        java.lang.Integer int32 = analyticalGroup31.getNumberOfObservedPropertiesInGroupItems();
        org.junit.Assert.assertNull(analyticalGroupType1);
        org.junit.Assert.assertNotNull(analyticalGroup5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(analyticalGroup9);
        org.junit.Assert.assertNull(analyticalGroupItemList10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(postAnalyticalGroup15);
        org.junit.Assert.assertNotNull(putAnalyticalGroup18);
        org.junit.Assert.assertNotNull(putAnalyticalGroup21);
        org.junit.Assert.assertNotNull(putAnalyticalGroup23);
        org.junit.Assert.assertNotNull(putAnalyticalGroup25);
        org.junit.Assert.assertTrue("'" + analyticalGroupType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(postAnalyticalGroup29);
        org.junit.Assert.assertNotNull(postAnalyticalGroup30);
        org.junit.Assert.assertNotNull(analyticalGroup31);
        org.junit.Assert.assertNull(int32);
    }

    @Test
    public void test40454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40454");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putAnalysisMethod0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal4 = observationMinimal2.setSpecimen(specimenNestedInActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = observationMinimal4.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue7 = categoricalResult6.getFixedValue();
        observationMinimal4.CategoricalResult = categoricalResult6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult9.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue12 = categoricalResult9.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult9.NullMeasureQualifier = nullMeasureQualifier13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult15 = categoricalResult6.setNullMeasureQualifier(nullMeasureQualifier13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier16 = categoricalResult6.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup19 = putAnalyticalGroup17.setAnalyticalGroupItems(analyticalGroupItemList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan23.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime26 = samplingPlan23.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit29 = putUnitGroupWithUnit27.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType30 = putUnitGroupWithUnit27.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = samplingPlanPlannedActivity32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = auditAttributes35.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity34.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = samplingPlanPlannedActivity34.AuditAttributes;
        putAccessGroup31.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit41 = putUnitGroupWithUnit27.setAuditAttributes(auditAttributes39);
        samplingPlan23.AuditAttributes = auditAttributes39;
        java.time.OffsetDateTime offsetDateTime43 = null;
        auditAttributes39.ModificationTime = offsetDateTime43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = labResultDetails20.setAuditAttributes(auditAttributes39);
        putAnalyticalGroup19.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier47 = nullMeasureQualifier16.setAuditAttributes(auditAttributes39);
        putAnalysisMethod0.AuditAttributes = auditAttributes39;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList49 = null;
        putAnalysisMethod0.ObservedProperties = observedPropertyList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = unit51.AuditAttributes;
        unit51.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity58 = samplingPlanPlannedActivity56.setAuditAttributes(auditAttributes57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = auditAttributes59.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity58.AuditAttributes = auditAttributes59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = samplingPlanPlannedActivity58.AuditAttributes;
        putAccessGroup55.AuditAttributes = auditAttributes63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit65 = unit51.setAuditAttributes(auditAttributes63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity68 = samplingPlanPlannedActivity66.setAuditAttributes(auditAttributes67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = auditAttributes69.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity68.AuditAttributes = auditAttributes69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes73 = samplingPlanPlannedActivity68.AuditAttributes;
        samplingPlanPlannedActivity68.Id = "https";
        java.lang.String str76 = samplingPlanPlannedActivity68.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str78 = putActivityTemplate77.getId();
        java.lang.String str79 = putActivityTemplate77.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = auditAttributes80.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate83 = putActivityTemplate77.setAuditAttributes(auditAttributes82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity84 = samplingPlanPlannedActivity68.setAuditAttributes(auditAttributes82);
        unit65.AuditAttributes = auditAttributes82;
        putAnalysisMethod0.AuditAttributes = auditAttributes82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes88 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod89 = postLabAnalysisMethod87.setAuditAttributes(auditAttributes88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray90 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList91 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList91, observedPropertyArray90);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod93 = postLabAnalysisMethod89.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes94 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod95 = postLabAnalysisMethod89.setAuditAttributes(auditAttributes94);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList96 = postLabAnalysisMethod95.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod97 = putAnalysisMethod0.setObservedProperties(observedPropertyList96);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes98 = putAnalysisMethod97.AuditAttributes;
        java.lang.String str99 = putAnalysisMethod97.Id;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(observationMinimal4);
        org.junit.Assert.assertNull(observedProperty5);
        org.junit.Assert.assertNull(categoricalValue7);
        org.junit.Assert.assertNull(categoricalValue12);
        org.junit.Assert.assertNotNull(categoricalResult15);
        org.junit.Assert.assertNotNull(nullMeasureQualifier16);
        org.junit.Assert.assertNotNull(putAnalyticalGroup19);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit29);
        org.junit.Assert.assertNull(unitGroupSystemCodeType30);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity34);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit41);
        org.junit.Assert.assertNotNull(labResultDetails45);
        org.junit.Assert.assertNotNull(nullMeasureQualifier47);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity58);
        org.junit.Assert.assertNotNull(auditAttributes61);
        org.junit.Assert.assertNotNull(auditAttributes63);
        org.junit.Assert.assertNotNull(unit65);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity68);
        org.junit.Assert.assertNotNull(auditAttributes71);
        org.junit.Assert.assertNotNull(auditAttributes73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "https" + "'", str76, "https");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(auditAttributes82);
        org.junit.Assert.assertNotNull(putActivityTemplate83);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity84);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod89);
        org.junit.Assert.assertNotNull(observedPropertyArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod93);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod95);
        org.junit.Assert.assertNotNull(observedPropertyList96);
        org.junit.Assert.assertNotNull(putAnalysisMethod97);
        org.junit.Assert.assertNotNull(auditAttributes98);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test40455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40455");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str3 = tag2.Key;
        java.util.ArrayList<java.lang.String> strList4 = tag2.getPickListValues();
        java.lang.Boolean boolean5 = tag2.AppliesToLocationNotes;
        tag2.AppliesToAttachments = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number;
        tag2.ValueType = tagValueType8;
        java.lang.Boolean boolean10 = tag2.AppliesToReports;
        java.lang.Boolean boolean11 = tag2.isAppliesToAttachments();
        java.lang.String str12 = tag2.getKey();
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertTrue("'" + tagValueType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number + "'", tagValueType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number));
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + false + "'", boolean11, false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test40456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40456");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = gradeOperation0.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation3 = gradeOperation0.setStackPosition((java.lang.Integer) 4);
        java.lang.String str4 = gradeOperation0.getUser();
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNotNull(gradeOperation3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test40457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40457");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition2 = tagDefinition0.setValueType(tagValueType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition4 = tagDefinition2.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str5 = tagDefinition4.getKey();
        org.junit.Assert.assertNotNull(tagDefinition2);
        org.junit.Assert.assertNotNull(tagDefinition4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test40458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40458");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant1 = activeMeterCalibration0.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double3 = activeMeterCalibrationEquation2.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double5 = activeMeterCalibrationEquation4.getSlope();
        java.lang.String str6 = activeMeterCalibrationEquation4.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double8 = activeMeterCalibrationEquation7.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation2, activeMeterCalibrationEquation4, activeMeterCalibrationEquation7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList10, activeMeterCalibrationEquationArray9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration12 = activeMeterCalibration0.setEquations(activeMeterCalibrationEquationList10);
        java.time.Instant instant13 = activeMeterCalibration12.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription16 = locationDescription14.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType18 = null;
        controlConditionActivity17.ControlCleaned = controlCleanedType18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        controlConditionActivity17.DateCleaned = instant21;
        locationDescription16.LastModified = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration25 = activeMeterCalibration12.setFirstUsedDate(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj28 = timeAlignedDataServiceRequest27.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse29.setNextToken(instant30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest32 = timeAlignedDataServiceRequest27.setQueryFrom(instant30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription33 = timeSeriesDescription26.setRawStartTime(instant30);
        java.lang.String str34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantSerializer.format(instant30);
        activeMeterCalibration25.FirstUsedDate = instant30;
        java.time.Instant instant36 = activeMeterCalibration25.getFirstUsedDate();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration12);
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNotNull(locationDescription16);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(activeMeterCalibration25);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest32);
        org.junit.Assert.assertNotNull(timeSeriesDescription33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str34, "9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertNotNull(instant36);
    }

    @Test
    public void test40459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40459");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device2 = device0.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device4 = device2.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device6 = device2.setType("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device8 = device6.setType("multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****");
        org.junit.Assert.assertNotNull(device2);
        org.junit.Assert.assertNotNull(device4);
        org.junit.Assert.assertNotNull(device6);
        org.junit.Assert.assertNotNull(device8);
    }

    @Test
    public void test40460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40460");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType4 = postStatisticalDerivedTimeSeries0.getNewValueLocation();
        java.lang.String str5 = postStatisticalDerivedTimeSeries0.SubLocationIdentifier;
        postStatisticalDerivedTimeSeries0.BinAnchorOffsetPeriod = "hi!:///AQUARIUS/Provisioning/v1";
        postStatisticalDerivedTimeSeries0.CoverageMinimumPercentage = 1.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Start;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries11 = postStatisticalDerivedTimeSeries0.setNewValueLocation(newValueLocationType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType12 = postStatisticalDerivedTimeSeries11.getNewValueLocation();
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(newValueLocationType4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + newValueLocationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Start + "'", newValueLocationType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Start));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries11);
        org.junit.Assert.assertTrue("'" + newValueLocationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Start + "'", newValueLocationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Start));
    }

    @Test
    public void test40461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40461");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.Party;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean4 = completedWork3.isSafetyInspectionPerformed();
        completedWork3.SedimentSampleTaken = true;
        java.lang.Boolean boolean7 = completedWork3.BiologicalSampleTaken;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork9 = completedWork3.setCollectionAgency("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork11 = completedWork3.setRecorderDataCollected((java.lang.Boolean) false);
        fieldVisit0.CompletedWork = completedWork11;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(completedWork9);
        org.junit.Assert.assertNotNull(completedWork11);
    }

    @Test
    public void test40462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40462");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.time.Instant instant7 = getObservationsV2_0.getStartObservedTime();
        java.util.List<java.lang.String> strList8 = getObservationsV2_0.Ids;
        java.util.List<java.lang.String> strList9 = getObservationsV2_0.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_0.setDepthUnitId("http://MaxDurationhttp/json/reply/Integer");
        java.util.List<java.lang.String> strList12 = getObservationsV2_0.SpecimenIds;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test40463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40463");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        putAttachment0.Latitude = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment4 = putAttachment0.setLatitude("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment6 = putAttachment0.setFileSize((java.lang.Integer) 10);
        java.lang.String str7 = putAttachment6.getComment();
        java.lang.String str8 = putAttachment6.getId();
        org.junit.Assert.assertNotNull(putAttachment4);
        org.junit.Assert.assertNotNull(putAttachment6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test40464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40464");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple1 = specimenNestedInActivity0.AnalyticalGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = specimenNestedInActivity0.setName("");
        java.lang.Boolean boolean4 = specimenNestedInActivity0.Filtered;
        specimenNestedInActivity0.Filtered = false;
        specimenNestedInActivity0.Filtered = true;
        java.lang.String str9 = specimenNestedInActivity0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple();
        java.lang.Integer int11 = analyticalGroupSimple10.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple13 = analyticalGroupSimple10.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 10);
        java.lang.Integer int14 = analyticalGroupSimple13.NumberOfObservedPropertiesInGroupItems;
        specimenNestedInActivity0.AnalyticalGroup = analyticalGroupSimple13;
        org.junit.Assert.assertNull(analyticalGroupSimple1);
        org.junit.Assert.assertNotNull(specimenNestedInActivity3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(analyticalGroupSimple13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test40465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40465");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest0.TimeSeriesUniqueId = "/AQUARIUS";
        correctionListServiceRequest0.TimeSeriesUniqueId = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        java.lang.Boolean boolean6 = timeSeriesDataRawServiceRequest5.ApplyRounding;
        timeSeriesDataRawServiceRequest5.ApplyRounding = false;
        java.lang.String str9 = timeSeriesDataRawServiceRequest5.Unit;
        java.lang.String str10 = timeSeriesDataRawServiceRequest5.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList12 = getChartDataV2_11.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType15 = null;
        controlConditionActivity14.ControlCleaned = controlCleanedType15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        controlConditionActivity14.DateCleaned = instant18;
        timeAlignedDataServiceRequest13.QueryFrom = instant18;
        getChartDataV2_11.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest23 = timeSeriesDataRawServiceRequest5.setQueryTo(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest25 = timeSeriesDataRawServiceRequest5.setGetParts("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest27 = timeSeriesDataRawServiceRequest5.setTimeSeriesUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.time.Instant instant28 = timeSeriesDataRawServiceRequest27.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest29 = correctionListServiceRequest0.setQueryTo(instant28);
        java.time.Instant instant30 = correctionListServiceRequest0.QueryTo;
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest23);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest25);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(correctionListServiceRequest29);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test40466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40466");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        reportPlugin0.FolderName = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin0.setFolderName("2021.4.62.0");
        java.lang.String str7 = reportPlugin6.getVersion();
        java.lang.Boolean boolean8 = reportPlugin6.IsEnabled;
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test40467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40467");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase5 = putParameter0.setParameterId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter7 = putParameter0.setUniqueId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase10 = putParameter8.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str11 = putParameter8.getRoundingSpec();
        java.lang.String str12 = putParameter8.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList14 = postCalculatedDerivedTimeSeries13.TimeSeriesUniqueIds;
        java.lang.String str15 = postCalculatedDerivedTimeSeries13.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries13.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str18 = postCalculatedDerivedTimeSeries17.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart21 = inputPart19.setHeaders((java.lang.Object) interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries22 = postCalculatedDerivedTimeSeries17.setInterpolationType(interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase23 = putParameter8.setInterpolationType(interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase25 = parameterBase23.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType26 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase23.InterpolationType = interpolationType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase28 = putParameter0.setInterpolationType(interpolationType26);
        java.lang.String str29 = parameterBase28.Identifier;
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(parameterBase5);
        org.junit.Assert.assertNotNull(putParameter7);
        org.junit.Assert.assertNotNull(parameterBase10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str18, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart21);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries22);
        org.junit.Assert.assertNotNull(parameterBase23);
        org.junit.Assert.assertNotNull(parameterBase25);
        org.junit.Assert.assertTrue("'" + interpolationType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(parameterBase28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test40468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40468");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = null;
        postExtendedAttribute0.DataType = dataType1;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList3 = postExtendedAttribute0.DropDownListItems;
        org.junit.Assert.assertNull(extendedAttributeListItemList3);
    }

    @Test
    public void test40469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40469");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str1 = putUnitGroup0.getCustomId();
        java.lang.Boolean boolean2 = putUnitGroup0.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit5 = putUnitGroupWithUnit3.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType6 = putUnitGroupWithUnit3.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity10 = samplingPlanPlannedActivity8.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = auditAttributes11.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity10.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = samplingPlanPlannedActivity10.AuditAttributes;
        putAccessGroup7.AuditAttributes = auditAttributes15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit17 = putUnitGroupWithUnit3.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup18 = putUnitGroup0.setAuditAttributes(auditAttributes15);
        putUnitGroup18.CustomId = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = putUnitGroup18.AuditAttributes;
        java.lang.String str22 = putUnitGroup18.getCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit5);
        org.junit.Assert.assertNull(unitGroupSystemCodeType6);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity10);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit17);
        org.junit.Assert.assertNotNull(putUnitGroup18);
        org.junit.Assert.assertNotNull(auditAttributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****" + "'", str22, "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
    }

    @Test
    public void test40470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40470");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit5 = putUnit3.setName("MinInstant");
        java.lang.Double double6 = putUnit3.getBaseMultiplier();
        putUnit3.Name = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation9.setSamplingLocation(samplingLocation10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = observation11.LabResultDetails;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon14 = taxonomicResult13.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = taxonomicResult13.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan17.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan17.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup22 = samplingPlan17.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan24 = samplingPlan17.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag25 = putTag16.setAuditAttributes(auditAttributes23);
        taxonomicResult13.AuditAttributes = auditAttributes23;
        observation11.TaxonomicResult = taxonomicResult13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = taxonomicResult13.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit29 = putUnit3.setAuditAttributes(auditAttributes28);
        specimenWithObservations0.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = taxonomicResult31.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = taxonomicResult31.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan35.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan35.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup40 = samplingPlan35.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan42 = samplingPlan35.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag43 = putTag34.setAuditAttributes(auditAttributes41);
        taxonomicResult31.AuditAttributes = auditAttributes41;
        java.time.OffsetDateTime offsetDateTime45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = auditAttributes41.setModificationTime(offsetDateTime45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations47 = specimenWithObservations0.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray59 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = putLocationTags55.setTagUniqueIds(strList60);
        getObservationsV2_49.QualityControlTypes = strList60;
        java.util.List<java.lang.String> strList64 = getObservationsV2_49.getLabReportIds();
        importItem48.Errors = getObservationsV2_49;
        java.lang.Object obj66 = importItem48.getExistingItem();
        importItem48.Input = "hi!";
        java.lang.Object obj69 = importItem48.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType70 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem71 = importItem48.setStatus(importItemStatusType70);
        importItem71.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate74.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate78 = specimenTemplate74.setId("hi!");
        java.lang.Boolean boolean79 = specimenTemplate78.getFiltered();
        importItem71.Item = specimenTemplate78;
        specimenWithObservations0.TemplateCreatedFrom = specimenTemplate78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = specimenWithObservations0.getAuditAttributes();
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNotNull(putUnit5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(labResultDetails12);
        org.junit.Assert.assertNull(taxon14);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup22);
        org.junit.Assert.assertNotNull(samplingPlan24);
        org.junit.Assert.assertNotNull(putTag25);
        org.junit.Assert.assertNotNull(auditAttributes28);
        org.junit.Assert.assertNotNull(putUnit29);
        org.junit.Assert.assertNull(taxon32);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup40);
        org.junit.Assert.assertNotNull(samplingPlan42);
        org.junit.Assert.assertNotNull(putTag43);
        org.junit.Assert.assertNotNull(auditAttributes46);
        org.junit.Assert.assertNotNull(specimenWithObservations47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putLocationTags62);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + importItemStatusType70 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType70.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem71);
        org.junit.Assert.assertNotNull(specimenTemplate78);
        org.junit.Assert.assertNull(boolean79);
        org.junit.Assert.assertNotNull(auditAttributes82);
    }

    @Test
    public void test40471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40471");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod2 = referencePointPeriod0.setStandardIdentifier("9999-12-31T23:59:59.999Z");
        referencePointPeriod2.IsMeasuredAgainstLocalAssumedDatum = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod6 = referencePointPeriod2.setAppliedByUser("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        referencePointPeriod6.Uncertainty = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod11 = referencePointPeriod9.setStandardIdentifier("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection12 = referencePointPeriod11.MeasurementDirection;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod14 = referencePointPeriod11.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) false);
        java.lang.String str15 = referencePointPeriod11.getStandardIdentifier();
        java.lang.Double double16 = referencePointPeriod11.Uncertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        dischargeSummary20.MeasurementTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse19.setNextToken(instant24);
        java.time.Instant instant28 = locationDescriptionListServiceResponse19.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities29 = getActivities18.setToStartTime(instant28);
        java.lang.String str30 = getActivities29.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities32 = getActivities29.setLimit((java.lang.Integer) 1);
        getActivities32.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = getObservationsV2_35.setDataClassifications((java.util.List<java.lang.String>) strList39);
        java.util.List<java.lang.String> strList42 = getObservationsV2_35.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary43.Reviewer = "";
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary43.MeasurementTime = instant46;
        getObservationsV2_35.StartResultTime = instant46;
        java.lang.String[] strArray58 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_35.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList59);
        getActivities32.ActivityTypes = strList59;
        java.lang.String str63 = getActivities32.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant65 = qualifier64.DateApplied;
        java.lang.String str66 = qualifier64.User;
        java.lang.String str67 = qualifier64.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj69 = timeAlignedDataServiceRequest68.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = locationDescriptionListServiceResponse70.setNextToken(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest73 = timeAlignedDataServiceRequest68.setQueryFrom(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier74 = qualifier64.setDateApplied(instant71);
        java.time.Instant instant75 = qualifier74.getDateApplied();
        getActivities32.ToStartTime = instant75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod77 = locationDatumPeriod17.setAppliedTimeUtc(instant75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange78 = locationDatumPeriod17.TimeRange;
        java.lang.String str79 = locationDatumPeriod17.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean81 = referencePointPeriod80.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod80.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str84 = referencePointPeriod80.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod86 = referencePointPeriod80.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection87 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod88 = referencePointPeriod80.setMeasurementDirection(measurementDirection87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod89 = locationDatumPeriod17.setMeasurementDirection(measurementDirection87);
        referencePointPeriod11.MeasurementDirection = measurementDirection87;
        referencePointPeriod6.MeasurementDirection = measurementDirection87;
        java.lang.String str92 = referencePointPeriod6.AppliedByUser;
        org.junit.Assert.assertNotNull(referencePointPeriod2);
        org.junit.Assert.assertNotNull(referencePointPeriod6);
        org.junit.Assert.assertNotNull(referencePointPeriod11);
        org.junit.Assert.assertNull(measurementDirection12);
        org.junit.Assert.assertNotNull(referencePointPeriod14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str15, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(getActivities29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(getActivities32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse72);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest73);
        org.junit.Assert.assertNotNull(qualifier74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(locationDatumPeriod77);
        org.junit.Assert.assertNull(timeRange78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(boolean81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(referencePointPeriod86);
        org.junit.Assert.assertTrue("'" + measurementDirection87 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop + "'", measurementDirection87.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop));
        org.junit.Assert.assertNotNull(referencePointPeriod88);
        org.junit.Assert.assertNotNull(locationDatumPeriod89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str92, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test40472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40472");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.getApprovalName8();
        timeAlignedPoint0.ApprovalLevel10 = 0L;
        timeAlignedPoint0.NumericValue3 = (-1.0d);
        java.lang.String str15 = timeAlignedPoint0.DisplayValue3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint0.setQualifiers5("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        timeAlignedPoint17.GradeCode1 = (-1L);
        java.lang.Long long20 = timeAlignedPoint17.getGradeCode7();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
        org.junit.Assert.assertNull(long20);
    }

    @Test
    public void test40473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40473");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.String str39 = deleteActivities0.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList41 = getChartDataV2_40.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest42.setTimeSeriesUniqueIds(strList54);
        getChartDataV2_40.ActivityIds = strList54;
        deleteActivities0.ActivityTemplateId = strList54;
        java.lang.String str61 = deleteActivities0.getFieldVisitId();
        java.util.List<java.lang.String> strList62 = deleteActivities0.ActivityTypes;
        deleteActivities0.Sort = "****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****";
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(strList62);
    }

    @Test
    public void test40474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40474");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = analyticalGroupItem1.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = analyticalGroupItem3.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = analyticalGroupItem3.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = null;
        analyticalGroupItem6.AnalysisMethod = analysisMethod9;
        java.lang.String str11 = analyticalGroupItem6.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem12.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod14 = analyticalGroupItem12.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = null;
        analyticalGroupItem17.AnalysisMethod = analysisMethod20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem1, analyticalGroupItem3, analyticalGroupItem6, analyticalGroupItem12, analyticalGroupItem15, analyticalGroupItem17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList23, analyticalGroupItemArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup25 = analyticalGroup0.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList23);
        analyticalGroup25.Description = "/AQUARIUS/Provisioning/v1";
        analyticalGroup25.NumberOfObservedPropertiesInGroupItems = 1;
        java.lang.String str30 = analyticalGroup25.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup32 = analyticalGroup25.setId("");
        analyticalGroup32.Name = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str35 = analyticalGroup32.getId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList36 = analyticalGroup32.getAnalyticalGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType37 = analyticalGroup32.Type;
        org.junit.Assert.assertNull(analysisMethod2);
        org.junit.Assert.assertNull(analysisMethod4);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(analysisMethod8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod14);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(analyticalGroup25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(analyticalGroup32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(analyticalGroupItemList36);
        org.junit.Assert.assertNull(analyticalGroupType37);
    }

    @Test
    public void test40475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40475");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeStepCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries8 = postStatisticalDerivedTimeSeries6.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries10 = postStatisticalDerivedTimeSeries6.setLabel("'.'SSSSSSS");
        postStatisticalDerivedTimeSeries6.Parameter = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries14 = postStatisticalDerivedTimeSeries6.setLocationUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries16 = postStatisticalDerivedTimeSeries14.setNewValueLocation(newValueLocationType15);
        postStatisticalDerivedTimeSeries5.NewValueLocation = newValueLocationType15;
        java.lang.String str18 = postStatisticalDerivedTimeSeries5.getUnit();
        java.lang.String str19 = postStatisticalDerivedTimeSeries5.getParameter();
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries8);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries10);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries14);
        org.junit.Assert.assertTrue("'" + newValueLocationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test40476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40476");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons2 = getTaxons0.setScientificName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons4 = getTaxons0.setScientificName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons6 = getTaxons0.setScientificName("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons8 = getTaxons6.setScientificName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.Object obj9 = getTaxons6.getResponseType();
        org.junit.Assert.assertNotNull(getTaxons2);
        org.junit.Assert.assertNotNull(getTaxons4);
        org.junit.Assert.assertNotNull(getTaxons6);
        org.junit.Assert.assertNotNull(getTaxons8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultTaxon");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultTaxon");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultTaxon");
    }

    @Test
    public void test40477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40477");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        sensor0.Name = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor8 = sensor0.setSubLocationIdentifier("-PT87591240H");
        java.lang.String str9 = sensor8.getUnitId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor11 = sensor8.setLocationUniqueId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str12 = sensor8.getUnitId();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(sensor8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(sensor11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test40478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40478");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation1.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation1.setCategoricalResult(categoricalResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7, importHistoryEventSimpleArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation1.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod10 = postLabAnalysisMethod0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = putUnit11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = putDetectioncondition13.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition16 = putDetectioncondition13.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = auditAttributes20.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = samplingPlanPlannedActivity19.AuditAttributes;
        putDetectioncondition13.AuditAttributes = auditAttributes24;
        putUnit11.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod27 = postLabAnalysisMethod10.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod10.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails32 = labResultDetails30.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan33.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime36 = samplingPlan33.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit39 = putUnitGroupWithUnit37.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType40 = putUnitGroupWithUnit37.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity44 = samplingPlanPlannedActivity42.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes45.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity44.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = samplingPlanPlannedActivity44.AuditAttributes;
        putAccessGroup41.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit51 = putUnitGroupWithUnit37.setAuditAttributes(auditAttributes49);
        samplingPlan33.AuditAttributes = auditAttributes49;
        java.time.OffsetDateTime offsetDateTime53 = null;
        auditAttributes49.ModificationTime = offsetDateTime53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = labResultDetails30.setAuditAttributes(auditAttributes49);
        postLabAnalysisMethod10.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = postLabAnalysisMethod10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod59 = postLabAnalysisMethod10.setDescription("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(putDetectioncondition16);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod27);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(labResultDetails32);
        org.junit.Assert.assertNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit39);
        org.junit.Assert.assertNull(unitGroupSystemCodeType40);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity44);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(auditAttributes49);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit51);
        org.junit.Assert.assertNotNull(labResultDetails55);
        org.junit.Assert.assertNotNull(auditAttributes57);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod59);
    }

    @Test
    public void test40479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40479");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = specimenTemplate4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate6.Preservative = preservativeType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = specimenTemplate6.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition15 = postDetectioncondition3.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard16 = putStandard0.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard18 = putStandard16.setName("-PT87591240H");
        java.lang.String str19 = putStandard18.getName();
        putStandard18.Id = "/AQUARIUS";
        java.lang.String str22 = putStandard18.getIssuingOrganization();
        java.lang.String str23 = putStandard18.CustomId;
        putStandard18.Name = "multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = putStandard18.AuditAttributes;
        org.junit.Assert.assertNotNull(specimenTemplate6);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(specimenTemplate14);
        org.junit.Assert.assertNotNull(postDetectioncondition15);
        org.junit.Assert.assertNotNull(putStandard16);
        org.junit.Assert.assertNotNull(putStandard18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-PT87591240H" + "'", str19, "-PT87591240H");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(auditAttributes26);
    }

    @Test
    public void test40480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40480");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project3 = project0.setType(projectType2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project5 = project0.setStartTime(offsetDateTime4);
        project0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject10 = postProject8.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject12 = postProject10.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        postProject10.Type = projectType13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project15 = project0.setType(projectType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project17 = project0.setApprovalAgency("");
        java.time.OffsetDateTime offsetDateTime18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project19 = project17.setStartTime(offsetDateTime18);
        java.lang.String str20 = project19.getName();
        java.time.OffsetDateTime offsetDateTime21 = project19.StartTime;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + projectType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNotNull(project3);
        org.junit.Assert.assertNotNull(project5);
        org.junit.Assert.assertNotNull(postProject10);
        org.junit.Assert.assertNotNull(postProject12);
        org.junit.Assert.assertTrue("'" + projectType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNotNull(project15);
        org.junit.Assert.assertNotNull(project17);
        org.junit.Assert.assertNotNull(project19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(offsetDateTime21);
    }

    @Test
    public void test40481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40481");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest();
        java.time.Instant instant1 = upchainProcessorListByTimeSeriesServiceRequest0.getQueryFrom();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest3 = upchainProcessorListByTimeSeriesServiceRequest0.setTimeSeriesUniqueId("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest3);
    }

    @Test
    public void test40482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40482");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject getProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject getProject2 = getProject0.setId("http://MaxDurationhttp/json/reply/Float");
        java.lang.String str3 = getProject0.getId();
        getProject0.Id = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        getProject0.Id = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNotNull(getProject2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://MaxDurationhttp/json/reply/Float" + "'", str3, "http://MaxDurationhttp/json/reply/Float");
    }

    @Test
    public void test40483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40483");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory getFieldTripHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory getFieldTripHistory2 = getFieldTripHistory0.setId("hi!");
        java.lang.String str3 = getFieldTripHistory0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTripHistory getFieldTripHistory5 = getFieldTripHistory0.setId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        org.junit.Assert.assertNotNull(getFieldTripHistory2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(getFieldTripHistory5);
    }

    @Test
    public void test40484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40484");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType1 = null;
        controlConditionActivity0.ControlCleaned = controlCleanedType1;
        java.time.Instant instant3 = controlConditionActivity0.getDateCleaned();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity5 = controlConditionActivity0.setFlowOverControl("http://MaxDurationhttp/json/reply/ArrayList");
        controlConditionActivity0.Comments = "2021.8.9990";
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(controlConditionActivity5);
    }

    @Test
    public void test40485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40485");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str1 = referencePointPeriod0.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase3 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        java.lang.String str4 = referencePointPeriod0.ReferencePointUniqueId;
        java.time.Instant instant5 = referencePointPeriod0.ValidFrom;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase7 = referencePointPeriod0.setMethod("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection8 = referencePointPeriod0.MeasurementDirection;
        java.lang.Boolean boolean9 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(referencePointPeriodBase3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(referencePointPeriodBase7);
        org.junit.Assert.assertNull(measurementDirection8);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
    }

    @Test
    public void test40486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40486");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        deleteObservationsV2_62.MinNumericResultValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray70 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = getObservationsV2_67.setDataClassifications((java.util.List<java.lang.String>) strList71);
        postTag66.PickListValues = strList71;
        java.util.ArrayList<java.lang.String> strList75 = postTag66.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor76 = processor65.setInputTimeSeriesUniqueIds(strList75);
        deleteObservationsV2_62.Media = strList75;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_73);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(processor76);
    }

    @Test
    public void test40487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40487");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple5 = observedPropertyImportSummary0.getImportHistoryEventSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation8 = importSummaryObservation6.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary9.UpdateCount = (-1);
        java.lang.Integer int12 = observationImportSummary9.ExpectedCount;
        java.lang.String str13 = observationImportSummary9.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList15, importErrorArray14);
        observationImportSummary9.ImportJobErrors = importErrorList15;
        importSummaryObservation6.ImportJobErrors = importErrorList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary19 = observedPropertyImportSummary0.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList15);
        observedPropertyImportSummary0.ErrorCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList23 = observedPropertyImportSummary22.ImportJobErrors;
        observedPropertyImportSummary22.NewCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary26.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary30 = observedPropertyImportSummary26.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList32, importItemObservedPropertyArray31);
        observedPropertyImportSummary26.ErrorImportItems = importItemObservedPropertyList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary36 = observedPropertyImportSummary26.setSuccessCount((java.lang.Integer) 10);
        java.lang.String str37 = observedPropertyImportSummary26.getSummaryReportText();
        java.lang.Integer int38 = observedPropertyImportSummary26.getExpectedCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList39 = observedPropertyImportSummary26.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary40 = observedPropertyImportSummary22.setNonErrorImportItems(importItemObservedPropertyList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary41.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary45 = observedPropertyImportSummary41.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList47, importItemObservedPropertyArray46);
        observedPropertyImportSummary41.ErrorImportItems = importItemObservedPropertyList47;
        java.lang.String str50 = observedPropertyImportSummary41.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary52 = observedPropertyImportSummary41.setSuccessCount((java.lang.Integer) 4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList53 = observedPropertyImportSummary52.ErrorImportItems;
        observedPropertyImportSummary40.NonErrorImportItems = importItemObservedPropertyList53;
        observedPropertyImportSummary0.NonErrorImportItems = importItemObservedPropertyList53;
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNull(importHistoryEventSimple5);
        org.junit.Assert.assertNotNull(importSummaryObservation8);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(importErrorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary19);
        org.junit.Assert.assertNull(importErrorList23);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary30);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList39);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary40);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary45);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(observedPropertyImportSummary52);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList53);
    }

    @Test
    public void test40488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40488");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setIsTransient((java.lang.Boolean) false);
        java.time.Instant instant7 = report4.getCreatedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList9 = getExportSpecimens8.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant11 = qualifier10.DateApplied;
        java.lang.String str12 = qualifier10.User;
        java.lang.String str13 = qualifier10.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest14.setQueryFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier20 = qualifier10.setDateApplied(instant17);
        getExportSpecimens8.Before = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark24 = locationRemark22.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList26 = fieldVisitDataServiceResponse25.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse28 = fieldVisitDataServiceResponse25.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary29.Reviewer = "";
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary29.MeasurementTime = instant32;
        fieldVisitDataServiceResponse25.ResponseTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = locationRemark22.setCreateTime(instant32);
        getExportSpecimens8.EndModificationTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report37 = report4.setCreatedTime(instant32);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList38 = report4.getTags();
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(qualifier20);
        org.junit.Assert.assertNotNull(locationRemark24);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList26);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationRemark35);
        org.junit.Assert.assertNotNull(report37);
        org.junit.Assert.assertNull(tagMetadataList38);
    }

    @Test
    public void test40489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40489");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = getExportObservations0.setFieldVisitId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSpecimenIds();
        getExportObservations0.FieldVisitId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations0.setDepthUnitId("-PT87591240H");
        java.time.Instant instant8 = getExportObservations0.EndResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList10 = getObservationExportIIV2_9.getCollectionMethodIds();
        java.lang.String str11 = getObservationExportIIV2_9.getDepthUnitCustomId();
        java.time.Instant instant12 = getObservationExportIIV2_9.EndObservedTime;
        java.util.List<java.lang.String> strList13 = getObservationExportIIV2_9.getObservedPropertyIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        java.util.ArrayList<java.lang.String> strList23 = putLocationTags22.TagUniqueIds;
        getLabReportImportHistoryEvents14.LabReportIds = strList23;
        getLabReportImportHistoryEvents14.Limit = 100;
        java.lang.String str27 = getLabReportImportHistoryEvents14.Sort;
        java.util.List<java.lang.String> strList28 = getLabReportImportHistoryEvents14.getLabReportIds();
        getObservationExportIIV2_9.SamplingContextTagIds = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList31 = getObservationExportIIV2_30.getCollectionMethodIds();
        java.util.List<java.lang.String> strList32 = getObservationExportIIV2_30.AnalyticalGroupIds;
        java.time.Instant instant33 = getObservationExportIIV2_30.getStartResultTime();
        java.lang.String str34 = getObservationExportIIV2_30.Sort;
        java.lang.Integer int35 = getObservationExportIIV2_30.getLimit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase38 = roleFlattened36.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean39 = roleFlattened36.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str41 = deleteFieldVisits40.Sort;
        deleteFieldVisits40.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList51 = getObservationsV2_44.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary52.Reviewer = "";
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary52.MeasurementTime = instant55;
        getObservationsV2_44.StartResultTime = instant55;
        java.lang.String[] strArray67 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_44.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList68);
        deleteFieldVisits40.PlanningStatuses = strList68;
        roleFlattened36.RoleApprovalTransitions = strList68;
        getObservationExportIIV2_30.AnalysisMethodIds = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_74 = getObservationExportIIV2_9.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList68);
        getExportObservations0.CollectionMethodIds = strList68;
        org.junit.Assert.assertNotNull(getExportObservations2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(getExportObservations7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(roleFlattenedBase38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_74);
    }

    @Test
    public void test40490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40490");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType putThresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutThresholdType();
        putThresholdType0.ReferenceValueCode = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putThresholdType0.ReferenceValueCode;
        putThresholdType0.ReferenceValueCode = "/AQUARIUS/Publish/v2";
        putThresholdType0.Description = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str3, "http://MaxDurationhttp/json/reply/ArrayList");
    }

    @Test
    public void test40491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40491");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList6 = locationDescriptionListServiceResponse5.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant8 = ratingCurveListServiceRequest7.QueryTo;
        java.lang.String str9 = ratingCurveListServiceRequest7.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType22 = null;
        controlConditionActivity21.ControlCleaned = controlCleanedType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        controlConditionActivity21.DateCleaned = instant25;
        timeAlignedDataServiceRequest20.QueryFrom = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse10.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest30 = ratingCurveListServiceRequest7.setQueryTo(instant25);
        java.time.Instant instant31 = ratingCurveListServiceRequest30.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse5.setNextToken(instant31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens33 = getExportSpecimens0.setStartModificationTime(instant31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens35 = getExportSpecimens0.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d), 100.0d };
        java.util.ArrayList<java.lang.Double> doubleList42 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList42, doubleArray41);
        ratingModelEffectiveShiftsByStageValuesServiceResponse36.EffectiveShiftValues = doubleList42;
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse46 = ratingModelEffectiveShiftsByStageValuesServiceResponse36.setTimestamp(instant45);
        getExportSpecimens0.Before = instant45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens49 = getExportSpecimens0.setSort("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNull(locationDescriptionList6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(getExportSpecimens33);
        org.junit.Assert.assertNotNull(getExportSpecimens35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse46);
        org.junit.Assert.assertNotNull(getExportSpecimens49);
    }

    @Test
    public void test40492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40492");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList1 = postUserV2_0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = getActivities2.setToStartTime(instant12);
        java.lang.String str14 = getActivities13.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities16 = getActivities13.setLimit((java.lang.Integer) 1);
        getActivities16.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = timeAlignedDataServiceRequest19.setTimeSeriesUniqueIds(strList31);
        getActivities16.CollectionMethodIds = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_37 = postUserV2_0.setRoles((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = postUserV2_37.getAccessGroups();
        java.lang.String str39 = postUserV2_37.getCustomId();
        postUserV2_37.CustomId = "hi!";
        postUserV2_37.Id = "0001-01-01T00:00:00.000Z";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(getActivities13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getActivities16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest35);
        org.junit.Assert.assertNotNull(postUserV2_37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test40493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40493");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        importSummarySpecimen0.ExpectedCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen6 = importSummarySpecimen0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        java.lang.Integer int8 = observationImportSummary7.getUpdateCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str10 = importHistoryEventSimple9.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple9.ImportType = importType11;
        java.time.OffsetDateTime offsetDateTime13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple14 = importHistoryEventSimple9.setImportTime(offsetDateTime13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary15 = observationImportSummary7.setImportHistoryEventSimple(importHistoryEventSimple14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple17 = importHistoryEventSimple14.setFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen18 = importSummarySpecimen6.setImportHistoryEventSimple(importHistoryEventSimple14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple19 = importSummarySpecimen6.ImportHistoryEventSimple;
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNotNull(importSummarySpecimen6);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + importType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNotNull(importHistoryEventSimple14);
        org.junit.Assert.assertNotNull(observationImportSummary15);
        org.junit.Assert.assertNotNull(importHistoryEventSimple17);
        org.junit.Assert.assertNotNull(importSummarySpecimen18);
        org.junit.Assert.assertNotNull(importHistoryEventSimple19);
    }

    @Test
    public void test40494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40494");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity3 = gageHeightAtZeroFlowActivity1.setApplicableSince(instant2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = gageHeightAtZeroFlowActivity3.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit6 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean8 = completedWork7.isSafetyInspectionPerformed();
        java.lang.Boolean boolean9 = completedWork7.isGroundWaterLevelPerformed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription10 = fieldVisit6.setCompletedWork(completedWork7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList12 = inspectionActivity11.getInspections();
        java.lang.String str13 = inspectionActivity11.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList14 = inspectionActivity11.Inspections;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList15 = inspectionActivity11.Readings;
        java.lang.String str16 = inspectionActivity11.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList17 = inspectionActivity11.getReadings();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck> calibrationCheckList18 = inspectionActivity11.getCalibrationChecks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity20 = inspectionActivity11.setNumberOfReadingsNotDatumConverted((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit21 = fieldVisit6.setInspectionActivity(inspectionActivity20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant23 = fieldVisit22.StartTime;
        java.lang.String str24 = fieldVisit22.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList25 = fieldVisit22.Attachments;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList26 = fieldVisit22.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult29 = datumConversionResult27.setTargetDatum("http");
        java.lang.String str30 = datumConversionResult27.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult32 = datumConversionResult27.setTargetDatum("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit33 = fieldVisit22.setDatumConversionResult(datumConversionResult32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit35 = fieldVisit22.setLevelSurveyActivity(levelSurveyActivity34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        levelSurveyActivity36.Party = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str40 = levelSurveyActivity39.getParty();
        java.lang.String str41 = levelSurveyActivity39.OriginReferencePointUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList42 = levelSurveyActivity39.LevelMeasurements;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity44 = levelSurveyActivity39.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] levelSurveyMeasurementArray45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>) levelSurveyMeasurementList46, levelSurveyMeasurementArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity48 = levelSurveyActivity44.setLevelMeasurements(levelSurveyMeasurementList46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity49 = levelSurveyActivity36.setLevelMeasurements(levelSurveyMeasurementList46);
        levelSurveyActivity36.Party = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit52 = fieldVisit35.setLevelSurveyActivity(levelSurveyActivity36);
        fieldVisit21.LevelSurveyActivity = levelSurveyActivity36;
        java.lang.String str54 = levelSurveyActivity36.Party;
        levelSurveyActivity36.Comments = "multipart/form-data; boundary=****b4959745-e712-43bc-98bb-4017f673cd3d****";
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity3);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(fieldVisitDescription10);
        org.junit.Assert.assertNull(inspectionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(inspectionList14);
        org.junit.Assert.assertNull(readingList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(readingList17);
        org.junit.Assert.assertNull(calibrationCheckList18);
        org.junit.Assert.assertNotNull(inspectionActivity20);
        org.junit.Assert.assertNotNull(fieldVisit21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(attachmentList25);
        org.junit.Assert.assertNull(attachmentList26);
        org.junit.Assert.assertNotNull(datumConversionResult29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http" + "'", str30, "http");
        org.junit.Assert.assertNotNull(datumConversionResult32);
        org.junit.Assert.assertNotNull(fieldVisit33);
        org.junit.Assert.assertNotNull(fieldVisit35);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(levelSurveyMeasurementList42);
        org.junit.Assert.assertNotNull(levelSurveyActivity44);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(levelSurveyActivity48);
        org.junit.Assert.assertNotNull(levelSurveyActivity49);
        org.junit.Assert.assertNotNull(fieldVisit52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str54, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test40495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40495");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup2 = samplingLocationGroup0.setDescription("POST");
        samplingLocationGroup2.Description = "";
        org.junit.Assert.assertNotNull(samplingLocationGroup2);
    }

    @Test
    public void test40496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40496");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str3 = reportPlugin0.UniqueId;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str3, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test40497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40497");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest0.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest4 = timeSeriesUniqueIdListServiceRequest0.setParameter("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest6 = timeSeriesUniqueIdListServiceRequest0.setParameter("hi!");
        java.lang.String str7 = timeSeriesUniqueIdListServiceRequest6.getParameter();
        java.lang.String str8 = timeSeriesUniqueIdListServiceRequest6.ComputationIdentifier;
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest4);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test40498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40498");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        java.lang.String str3 = postActivity0.getSourceActivityId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList4 = postActivity0.SamplingContextTags;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str6 = metricConfiguration5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty7.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration10 = metricConfiguration5.setObservedProperty(observedProperty7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType11 = observedProperty7.ResultType;
        observedProperty7.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = null;
        quantity14.Unit = unit15;
        java.lang.Double double17 = quantity14.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = quantity14.setValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = observedProperty7.setLowerLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = postActivity0.setDepth(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity();
        schedulePlannedActivity22.Instruction = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate27 = activityTemplate25.setMedium(mediumType26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity28 = schedulePlannedActivity22.setActivityTemplate(activityTemplate27);
        schedulePlannedActivity28.Instruction = "MaxDuration";
        java.lang.String str31 = schedulePlannedActivity28.Instruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType33 = null;
        samplingPlanPlannedActivity32.ActivityType = activityType33;
        samplingPlanPlannedActivity32.Id = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity38 = samplingPlanPlannedActivity32.setActivityType(activityType37);
        schedulePlannedActivity28.ActivityType = activityType37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType40 = schedulePlannedActivity28.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity41 = postActivity0.setType(activityType40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity42 = postActivity41.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str44 = metricConfiguration43.getId();
        metricConfiguration43.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean47 = metricConfiguration43.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration49 = metricConfiguration43.setUnit(unit48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType50 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration51 = metricConfiguration43.setAggregationType(aggregationType50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str53 = metricConfiguration52.getId();
        metricConfiguration52.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean56 = metricConfiguration52.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration58 = metricConfiguration52.setUnit(unit57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType59 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration60 = metricConfiguration52.setAggregationType(aggregationType59);
        metricConfiguration43.AggregationType = aggregationType59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = unit62.AuditAttributes;
        unit62.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity69 = samplingPlanPlannedActivity67.setAuditAttributes(auditAttributes68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = auditAttributes70.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity69.AuditAttributes = auditAttributes70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = samplingPlanPlannedActivity69.AuditAttributes;
        putAccessGroup66.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit76 = unit62.setAuditAttributes(auditAttributes74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity79 = samplingPlanPlannedActivity77.setAuditAttributes(auditAttributes78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = auditAttributes80.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity79.AuditAttributes = auditAttributes80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = samplingPlanPlannedActivity79.AuditAttributes;
        samplingPlanPlannedActivity79.Id = "https";
        java.lang.String str87 = samplingPlanPlannedActivity79.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate88 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str89 = putActivityTemplate88.getId();
        java.lang.String str90 = putActivityTemplate88.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes91 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes93 = auditAttributes91.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate94 = putActivityTemplate88.setAuditAttributes(auditAttributes93);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity95 = samplingPlanPlannedActivity79.setAuditAttributes(auditAttributes93);
        unit76.AuditAttributes = auditAttributes93;
        java.lang.String str97 = unit76.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration98 = metricConfiguration43.setUnit(unit76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity99 = quantity42.setUnit(unit76);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(samplingContextTagList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(metricConfiguration10);
        org.junit.Assert.assertNull(resultType11);
        org.junit.Assert.assertNull(double17);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNotNull(observedProperty20);
        org.junit.Assert.assertNotNull(postActivity21);
        org.junit.Assert.assertTrue("'" + mediumType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate27);
        org.junit.Assert.assertNotNull(schedulePlannedActivity28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MaxDuration" + "'", str31, "MaxDuration");
        org.junit.Assert.assertTrue("'" + activityType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK + "'", activityType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity38);
        org.junit.Assert.assertTrue("'" + activityType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK + "'", activityType40.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.BLANK));
        org.junit.Assert.assertNotNull(postActivity41);
        org.junit.Assert.assertNotNull(quantity42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNotNull(metricConfiguration49);
        org.junit.Assert.assertTrue("'" + aggregationType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType50.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNotNull(metricConfiguration58);
        org.junit.Assert.assertTrue("'" + aggregationType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType59.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration60);
        org.junit.Assert.assertNull(auditAttributes63);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity69);
        org.junit.Assert.assertNotNull(auditAttributes72);
        org.junit.Assert.assertNotNull(auditAttributes74);
        org.junit.Assert.assertNotNull(unit76);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity79);
        org.junit.Assert.assertNotNull(auditAttributes82);
        org.junit.Assert.assertNotNull(auditAttributes84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "https" + "'", str87, "https");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(auditAttributes93);
        org.junit.Assert.assertNotNull(putActivityTemplate94);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity95);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(metricConfiguration98);
        org.junit.Assert.assertNotNull(quantity99);
    }

    @Test
    public void test40499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40499");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = observationNestedInSpecimen0.getLabInstruction();
        java.time.OffsetDateTime offsetDateTime3 = observationNestedInSpecimen0.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str5 = metricConfiguration4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty6.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = metricConfiguration4.setObservedProperty(observedProperty6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType10 = observedProperty6.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = null;
        quantity13.Unit = unit14;
        postObservedProperty11.LowerLimit = quantity13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = postObservedProperty11.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = quantity17.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = observedProperty6.setUpperLimit(quantity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = observedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = observedProperty19.setName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen23 = observationNestedInSpecimen0.setObservedProperty(observedProperty22);
        java.lang.String str24 = observationNestedInSpecimen0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen26 = observationNestedInSpecimen0.setCustomId("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal29 = observationMinimal27.setObservedProperty(observedProperty28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus30 = observationMinimal29.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal32 = observationMinimal29.setSpecimen(specimenNestedInActivity31);
        java.time.OffsetDateTime offsetDateTime33 = null;
        observationMinimal29.ResultTime = offsetDateTime33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_35.setObservedProperty(observedProperty36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        resultStatus38.Id = "0001-01-01T00:00:00.000Z";
        putObservationV2_35.ResultStatus = resultStatus38;
        resultStatus38.CustomId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal44 = observationMinimal29.setResultStatus(resultStatus38);
        observationNestedInSpecimen0.ResultStatus = resultStatus38;
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(labInstruction2);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(metricConfiguration9);
        org.junit.Assert.assertNull(resultType10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(quantity17);
        org.junit.Assert.assertNull(unit18);
        org.junit.Assert.assertNotNull(observedProperty19);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(observedProperty22);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen26);
        org.junit.Assert.assertNotNull(observationMinimal29);
        org.junit.Assert.assertNull(resultStatus30);
        org.junit.Assert.assertNotNull(observationMinimal32);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNotNull(observationMinimal44);
    }

    @Test
    public void test40500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest80.test40500");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setNullMeasureQualifier(nullMeasureQualifier4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_8 = putObservationV2_6.setObservedProperty(observedProperty7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult9 = putObservationV2_6.getNumericResult();
        java.lang.String str10 = putObservationV2_6.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation11.setPlannedFieldResult(plannedFieldResult12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        observation13.LabInstruction = labInstruction14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod16 = observation13.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier17 = null;
        observation13.NullMeasureQualifier = nullMeasureQualifier17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT;
        observation13.DataClassification = dataClassificationType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_21 = putObservationV2_6.setDataClassification(dataClassificationType19);
        putObservationV2_2.DataClassification = dataClassificationType19;
        putObservationV2_2.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime25 = putObservationV2_2.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = putObservationV2_2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction27 = putObservationV2_2.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult28 = putObservationV2_2.CategoricalResult;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNotNull(putObservationV2_8);
        org.junit.Assert.assertNull(numericResult9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(collectionMethod16);
        org.junit.Assert.assertTrue("'" + dataClassificationType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT + "'", dataClassificationType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT));
        org.junit.Assert.assertNotNull(putObservationV2_21);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNull(labInstruction27);
        org.junit.Assert.assertNull(categoricalResult28);
    }
}

